{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nMatch_False. Låt $return_sort$ vara ett element av $cic.Sort$. Låt $return_type$ vara en funktion från element $z$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Univ$ av $return_sort$. Låt $z$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$. Då håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.\nassistant\n", "label": "postulate match_False : (return_sort : cic.Sort) -> (return_type : (z : cic.Term cic.prop matita_basics_logic.False) -> cic.Univ return_sort) -> (z : cic.Term cic.prop matita_basics_logic.False) -> cic.Term return_sort (return_type z)", "predict": "postulate match_False : (return_sort : cic.Sort) -> (return_type : (z : prop) -> matita_basics_logic.False -> cic.Univ) -> (z : prop) -> cic.Term return_sort (return_type z)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nList_inv_rect_Type0. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $x1$. Soit $P$ une fonction des éléments $_z1332$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $x1$ à des éléments de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $_H1$ des éléments $_z1333$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $x1$ et $Hterm$ et $matita_basics_lists_list.nil$ appliqué à $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $P$ appliqué à $matita_basics_lists_list.nil$ appliqué à $x1$, pour toutes les fonctions $_H2$ des éléments $x_748$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $x_747$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $x1$ et des fonctions $_x_750$ des éléments $_z1333$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $x1$ et $Hterm$ et $x_747$ à des éléments de $cic.Term$ de $univs.Type0$ et de $P$ appliqué à $x_747$ et des éléments $_z1333$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $x1$ et $Hterm$ et $matita_basics_lists_list.cons$ appliqué à $x1$ et $x_748$ et $x_747", "label": "list_inv_rect_Type0 : x1 : cic.Univ univs.Type0 -> Hterm : cic.Term univs.Type0 (matita_basics_lists_list.list x1) -> P : (_z1332 : cic.Term univs.Type0 (matita_basics_lists_list.list x1) -> cic.Univ univs.Type0) -> _H1 : (_z1333 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list x1)) Hterm (matita_basics_lists_list.nil x1)) -> cic.Term univs.Type0 (P (matita_basics_lists_list.nil x1))) -> _H2 : (x_748 : cic.Term univs.Type0 x1 -> x_747 : cic.Term univs.Type0 (matita_basics_lists_list.list x1) -> _x_750 : (_z1333 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list x1)) Hterm x_747) -> cic.Term univs.Type0 (P x_747)) -> _z1333 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list x1)) Hterm (matita_basics_lists_list.cons x1 x_748 x_747)) -> cic.Term univs.Type0 (P (matita_basics_lists_list.cons x1 x_748 x_747))) -> cic.Term univs.Type0 (P Hterm) .", "predict": "$ à des éléments de $cic.Term$ de $univs.Type0$, il existe un élément $_x_751$ de $cic.Term$ de $univs.Type0$ tel que pour toutes les fonctions $_x_752$ des éléments $x_748$ de $cic.Term$ de $univs.Type0$ et des éléments $x_747$ de $cic.Term$ de $univs.Type0$ et des fonctions $_x_750$ des éléments $_z1333$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $x1$ et $Hterm$ et $x_747$ à des éléments de $cic.Term$ de $univs.Type0$ et de $P$ appliqué à $x_747$ et des éléments $_z1333$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $x1$ et $Hterm$ et $matita_basics_lists_list.cons$ appliqué à $x1$ et $x_748$ et $x_747$ à des éléments de $cic.Term$ de $univs.Type0$, pour toutes les fonctions $_x_752$ des éléments $x_748$ de $cic.Term$ de $univs.Type0$ et des éléments $x_747$ de $cic.Term$ de $univs.Type0$ et des fonctions $_x_750$ des éléments $_z1333$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $x1$ et $H"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nOption_rect_Type1_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_606$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type1$. Let $_H_None$ be an element of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_basics_types.None$ applied to $_A$. Let $_H_Some$ be a function from elements $x_607$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_basics_types.Some$ applied to $_A$ and $x_607$. Then for all elements $x_606$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$, $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_606$.\nassistant\n", "label": "option_rect_Type1_body : _A : cic.Univ univs.Type0 -> Q_ : (_x_606 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Univ univs.Type1) -> _H_None : cic.Term univs.Type1 (Q_ (matita_basics_types.None _A)) -> _H_Some : (x_607 : cic.Term univs.Type0 _A -> cic.Term univs.Type1 (Q_ (matita_basics_types.Some _A x_607))) -> x_606 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Term univs.Type1 (Q_ x_606) .", "predict": "option_rect_Type1_body : (A : Elem (univs Type0)) -> (Q_ : (x_606 : Term (univs Type0)) -> Option (A) -> Elem (univs Type1)) -> (H_None : Term (univs Type1) (Q_ (None (A))) -> (H_Some : (x_607 : Term (univs Type0)) -> A -> Term (univs Type1) (Q_ (Some (A) x_607))) -> Proof (forall (x_606 : Term (univs Type0)) (Option (A)) (Term (univs Type1) (Q_ x_606))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nDiv_mod_spec_inv_rect_CProp2. Låt $x1$ och $x2$ och $x3$ och $x4$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Hterm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $x1$ och $x2$ och $x3$ och $x4$. Då för alla funktioner $P$ från element $_z1482$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $x_851$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $x4$ och $x2$ och element $x_850$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $x1$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $x3$ och $x2$ och $x4$ och element $_z1483$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ och $Hterm$ och $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ och $x_851$ och $x_850$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ och $x_851$ och $x_850$, håller $cic.Term$ för $cic.prop$", "label": "Axiom div_mod_spec_inv_rect_CProp2 : forall x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall x3 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall x4 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall Hterm : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4), forall P : ((_z1482 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) -> cic.Univ cic.prop), forall _H1 : ((x_851 : cic.Term cic.prop (matita_arithmetics_nat.lt x4 x2)) -> (x_850 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x3 x2) x4))) -> (_z1483 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) Hterm (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_851 x_850))) -> cic.Term cic.prop (P (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_851 x_850))), cic.Term cic.prop (P Hterm) .", "predict": " och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ och $Hterm$ och $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ och $x_851$ och $x_850$ och $P$ och $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ och $x_851$ och $x_850$ och $x_851$ och $x_850$ och $x_851$ och $x_850$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nBigop_I. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $p$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Soit $nil$ un élément de $cic.Term$ de $univs.Type0$ et de $B$. Soit $op$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $B$ et $nil$. Alors pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $B$ et $matita_arithmetics_bigops.bigop$ appliqué à $matita_arithmetics_nat.minus$ appliqué à $n$ et $matita_arithmetics_nat.O$ et la fonction qui envoie $i$ à la fonction qui envoie $i0$ à $p$ appliqué à $i0$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $i$ et $matita_arithmetics_nat.O$ et $B$ et $nil$ et $matita_arithmetics_bigops.op$ appliqué à $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à la fonction qui envoie $i0$ à $f$ appliqué à $i0$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $i$ et $matita_arithmetics_nat.O$ et $matita_arithmetics_bigops.bigop$ appliqué à $n$ et la fonction qui envoie $i$ à $p$ appliqué à $i$ et $B$ et $nil$ et $matita_arithmetics_bigops.op$ appliqué à $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à $f$ appliqué à $i$.\nassistant\n", "label": "postulate bigop_I : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop B nil)) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.minus n matita_arithmetics_nat.O) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i0) (matita_arithmetics_nat.plus i matita_arithmetics_nat.O)) B nil (matita_arithmetics_bigops.op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i0) (matita_arithmetics_nat.plus i matita_arithmetics_nat.O))) (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) B nil (matita_arithmetics_bigops.op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i)))", "predict": "postulate bigop_I : (n : Term Type0 Nat) -> (p : Term Type0 (nat -> Bool)) -> (B : Univ Type0) -> (nil : Term Type0 B) -> (op : Term Type0 (Aop B nil)) -> (f : Term Type0 (nat -> B)) -> prop (eq (lift Type0 Type2 B) (bigop (minus n (nd 0)) (plus (f (nd 0)) (nd 0)) B nil) (op B nil op (f (nd 0)) B nil))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nR2. Låt $T0$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $a0$ vara ett element av $cic.Term$ av $univs.Type0$ och $T0$. Låt $T1$ vara en funktion från element $x0$ av $cic.Term$ av $univs.Type0$ och $T0$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $x0$ till element av $cic.Univ$ av $univs.Type0$. Låt $a1$ vara ett element av $cic.Term$ av $univs.Type0$ och $T1$ applicerat på $a0$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$. Då för alla funktioner $T2$ från element $x0$ av $cic.Term$ av $univs.Type0$ och $T0$ och element $p0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $x0$ och element $x1$ av $cic.Term$ av $univs.Type0$ och $T1$ applicerat på $x0$ och $p0$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T1$ applicerat på $x0$ och $p0$ och $matita_basics_logic.R1$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $T1$ och $a1$ och $x0$ och $p0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$, för alla element $_a2$ av $cic.Term$ av $univs.Type0$ och $T2$ applicerat på $a0$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $a1$", "label": "Axiom R2 : forall T0 : cic.Univ univs.Type0, forall a0 : cic.Term univs.Type0 T0, forall T1 : ((x0 : cic.Term univs.Type0 T0) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> cic.Univ univs.Type0), forall a1 : cic.Term univs.Type0 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0)), forall T2 : ((x0 : cic.Term univs.Type0 T0) -> (p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> (x1 : cic.Term univs.Type0 (T1 x0 p0)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T1 x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 T0) a0 T1 a1 x0 p0) x1)) -> cic.Univ univs.Type0), forall _a2 : cic.Term univs.Type0 (T2 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0) a", "predict": " till element av $cic.Univ$ av $univs.Type0$, har $T2$ en induktiv definition."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nRintersection. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soient $_R1$ et $_R2$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation$ appliqué à $A$. Alors pour tous les éléments $_a$ et $_b$ de $cic.Term$ de $univs.Type0$ et de $A$, $cic.Univ$ tient pour $cic.prop$.\nassistant\n", "label": "postulate Rintersection : (A : cic.Univ univs.Type0) -> (_R1 : cic.Term univs.Type0 (matita_basics_relations.relation A)) -> (_R2 : cic.Term univs.Type0 (matita_basics_relations.relation A)) -> (_a : cic.Term univs.Type0 A) -> (_b : cic.Term univs.Type0 A) -> cic.Univ cic.prop", "predict": "postulate rintersection : (A : univs.Type0) -> _R1 : cic.Term univs.Type0 -> _R2 : matita_basics_relations.relation A -> (a : cic.Term univs.Type0) -> (b : A) -> cic.prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nO. $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_nat.nat$.\nassistant\n", "label": "axiom O : cic.Term univs.Type0 matita_arithmetics_nat.nat", "predict": "axiom term : univs.Type0 ∧ matita_arithmetics_nat.nat"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nLet_clause_1068. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $permf$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_permutation.permut$ applied to $f$ and $n$. Let $i$ and $j$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $lein$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $i$ and $n$. Let $lejn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $j$ and $n$. Let $a$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $matita_arithmetics_nat.le$ applied to $a$ and $n$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $a$ and $i$, for all elements $lean$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $a$ and $n$, for all elements $fa$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $a$ and $i$, for all elements $b$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $matita_arithmetics_nat.le$ applied to $b$ and $n$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita", "label": "postulate let_clause_1068 : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (permf : cic.Term cic.prop (matita_arithmetics_permutation.permut f n)) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (lein : cic.Term cic.prop (matita_arithmetics_nat.le i n)) -> (lejn : cic.Term cic.prop (matita_arithmetics_nat.le j n)) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le a n) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i))) -> (lean : cic.Term cic.prop (matita_arithmetics_nat.le a n)) -> (fa : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i)) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le b n) (matita_basics_logic.eq (cic.lift univs.Type", "predict": "_arithmetics_nat.nat$ and $f$ applied to $b$ and $j$, for all elements $lneb$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $b$ and $n$, for all elements $fb$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $b$ and $j$, $permf$ implies $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $a$ and $i$ and $b$ and $j$ and $a$ and $n$ and $fa$ and $lneb$ and $fb$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nMatch_DPair. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $return_sort$ un élément de $cic.Sort$. Soit $return_type$ une fonction des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $return_sort$. Soit $case_mk_DPair$ une fonction des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $_f$ appliqué à $dpi1$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $A$ et $_f$ et $dpi1$ et $_dpi2$. Soit $z$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$. Alors $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.\nassistant\n", "label": "match_DPair : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) -> return_sort : cic.Sort -> return_type : (z : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Univ return_sort) -> case_mk_DPair : (dpi1 : cic.Term univs.Type0 A -> _dpi2 : cic.Term univs.Type0 (_f dpi1) -> cic.Term return_sort (return_type (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> z : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Term return_sort (return_type z) .", "predict": "match_DPair : (A : Elem (univs Type0) (cic Univ)) -> (f : Elem (Term univs Type0) (A -> Univ univs Type0)) -> (return_sort : Elem (cic Sort)) -> (return_type : (z : Elem (Term univs Type0)) -> (dp : DPair A (f z)) -> Elem (cic Univ) (return_sort)) -> (case_mk_DPair : (dpi1 : Elem (Term univs Type0)) -> (A : Elem (univs Type0)) -> (dpi2 : Elem (Term univs Type0)) -> (f : Elem (Term univs Type0) (A -> Univ univs Type0)) -> Elem (Term univs Type0) (return_sort)) -> (z : Elem (Term univs Type0) (DPair A (f z))) -> Proof (return_sort (return_type z)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nAnd_rect_Type1_body. För alla element $_A$ och $_B$ av $cic.Univ$ av $cic.prop$, för alla funktioner $Q_$ från element $_x_138$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $univs.Type1$, för alla funktioner $_H_conj$ från element $x_140$ av $cic.Term$ av $cic.prop$ och $_A$ och element $x_139$ av $cic.Term$ av $cic.prop$ och $_B$ till element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_basics_logic.conj$ applicerat på $_A$ och $_B$ och $x_140$ och $x_139$, för alla element $x_138$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_138$.\nassistant\n", "label": "postulate And_rect_Type1_body : (_A : cic.Univ cic.prop) -> (_B : cic.Univ cic.prop) -> (Q_ : (_x_138 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ univs.Type1) -> (_H_conj : (x_140 : cic.Term cic.prop _A) -> (x_139 : cic.Term cic.prop _B) -> cic.Term univs.Type1 (Q_ (matita_basics_logic.conj _A _B x_140 x_139))) -> (x_138 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Term univs.Type1 (Q_ x_138)", "predict": "postulate and_rect_Type1_body : (A : Univ prop) -> (B : Univ prop) -> (Q : (x : Term prop) -> and A B -> Type1) -> (H_conj : (x : Term prop) -> A -> B -> Term Type1) -> (x : Term prop) -> and A B -> H_conj x A B -> Q x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nLet_clause_1553. Soient $n$ et $n0$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $_clearme$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $a$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n0$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n0$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$, pour tous les éléments $a$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $_clearme0$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n0$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n0$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$, pour tous", "label": "Axiom let_clause_1553 : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n0 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (fun a => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n0 (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n0 (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a))))), forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n0 (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n0 (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_ar", "predict": " les éléments $a$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $_clearme1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n0$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n0$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$ et $_clearme1$, clause_1553 : $n = n0$ et $_clearme$ et $_clearme0$ et $_clearme1$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nP_ord_times. Låt $p$ och $a$ och $b$ och $qa$ och $ra$ och $qb$ och $rb$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $p$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $a$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $b$, för alla element $__3$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_ord.p_ord$ applicerat på $a$ och $p$ och $matita_basics_types.mk_Prod$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och $qa$ och $ra$, för alla element $__4$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_ord.p_ord$ applicerat på $b$ och $p$ och $matita_basics_types.mk_Prod$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och $qb$ och $rb$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $matita_arithmetics_nat.nat$ och $", "label": "Axiom p_ord_times : forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall qa : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall ra : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall qb : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall rb : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_primes.prime p), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O a), forall __2 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O b), forall __3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord a p) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat qa ra)), forall __4 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord b p) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat qb rb)), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (mat", "predict": "matita_arithmetics_nat.nat$ och $matita_arithmetics_ord.times$ applicerat på $a$ och $b$ och $p$.\n\nAxiom p_ord_times : forall p : univs.Type0, forall a : matita_arithmetics_nat.nat, forall b : matita_arithmetics_nat.nat, forall qa : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod (matita_arithmetics_nat.nat) (matita_arithmetics_nat.nat))) (a, p) (matita_basics_types.mk_Prod (matita_arithmetics_nat.nat) (matita_arithmetics_nat.nat)) qa, forall ra : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod (matita_arithmetics_nat.nat) (matita_arithmetics_nat.nat))) (a, p) (matita_basics_types.mk_Prod (matita_arithmetics_nat.nat) (matita_arithmetics_nat.nat)) ra, forall qb : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod (matita_arithmetics_nat.nat) (matita_arithmetics_nat.nat))) (b, p) (matita_basics_types.mk_Prod (matita_arithmetics_nat.nat) (matita_arithmetics_nat.nat)) qb, forall rb : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod (matita_arithmetics_nat.nat) (matita_arithmetics_nat.nat))) (b, p) (matita_basics_types.mk_Prod (matita_arithmetics_nat.nat) (matita_arithmetics_nat.nat)) rb, forall p : univs.Type0, forall a : matita_arithmetics_nat.nat, forall b : matita_arithmetics_nat.nat, matita_arithmetics_ord.times a b p ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nEq_rect_Type2_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $_x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $Q_$ une fonction des éléments $x_13$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $_x_14$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_13$ à des éléments de $cic.Univ$ de $univs.Type2$. Soit $_H_refl$ un élément de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$. Soit $x_13$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $x_14$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_13$. Alors $cic.Term$ tient pour $univs.Type2$ et $Q_$ appliqué à $x_13$ et $x_14$.\nassistant\n", "label": "axiom eq_rect_Type2_body (A : cic.Univ univs.Type2) (_x : cic.Term univs.Type2 A) (Q_ : (x_13 : cic.Term univs.Type2 A) -> (_x_14 : cic.Term cic.prop (matita_basics_logic.eq A _x x_13)) -> cic.Univ univs.Type2) (_H_refl : cic.Term univs.Type2 (Q_ _x (matita_basics_logic.refl A _x))) (x_13 : cic.Term univs.Type2 A) (x_14 : cic.Term cic.prop (matita_basics_logic.eq A _x x_13)) : cic.Term univs.Type2 (Q_ x_13 x_14)", "predict": "axiom eq_rect_Type2_body (A : Univ) (x : Term Type2 A) (Q : x13 : Term Type2 A → x14 : Prop (eq A x x13) → Term Type2) (H_refl : Term Type2 (Q x (refl A x))) (x13 : Term Type2 A) (x14 : Prop (eq A x x13)) : Term Type2 (Q x13 x14)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nBi_RC. Låt $A$ och $B$ vara element av $cic.Univ$ av $univs.Type0$. Låt $__$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.bi_relation$ applicerat på $A$ och $B$. Då håller $cic.Term$ för $univs.Type0$ och $matita_basics_relations.bi_relation$ applicerat på $A$ och $B$.\nassistant\n", "label": "bi_RC : A : cic.Univ univs.Type0 -> B : cic.Univ univs.Type0 -> __ : cic.Term univs.Type0 (matita_basics_relations.bi_relation A B) -> cic.Term univs.Type0 (matita_basics_relations.bi_relation A B) .", "predict": "bi_RC : (A : Elem (univs Type0)) -> (B : Elem (univs Type0)) -> Proof (bi_relation (A, B)) -> Proof (bi_relation (A, B)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nAop_rect_CProp3. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_879$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_Aop$ une fonction des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term", "label": "postulate Aop_rect_CProp3 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_879 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_879 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Term cic.prop (Q_ x_879)", "predict": "$ de $univs.Type0$ et de $A$ et des fonctions $_assocr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et des fonctions $_prop$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $b$ et $op$ appliqué à $a$ et $b$ et des fonctions $_propr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $b$ et $op$ appliqué à $a$ et $b$.\n\npostulate aop_rect_CProp3 : (A : Univ Type0) -> _nil : Term Type0 A -> (Q_ : (x : Term Type0) -> A -> A -> Prop) -> ("}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nAop_rect_Type2. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_869$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type2$. Then for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_arithmetics_bigops.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr", "label": "Aop_rect_Type2 : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_869 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> cic.Univ univs.Type2) -> _H_mk_Aop : (op : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _nill : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> _nilr : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> _assoc : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type2 (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> x_869 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> cic.Term univs.Type2 (Q_ x_869) .", "predict": "$ and $_assoc$ is true."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nLt_to_le_times_to_lt_S_to_div. Låt $a$ och $c$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $b$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.times$ applicerat på $b$ och $c$ och $a$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $a$ och $matita_arithmetics_nat.times$ applicerat på $b$ och $matita_arithmetics_nat.S$ applicerat på $c$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_div_and_mod.div$ applicerat på $a$ och $b$ och $c$.\nassistant\n", "label": "postulate lt_to_le_times_to_lt_S_to_div : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O b)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times b c) a)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt a (matita_arithmetics_nat.times b (matita_arithmetics_nat.S c)))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.div a b) c)", "predict": "postulate lt_to_le_times_to_lt_S : (a : Term Type0) -> (c : Term Type0) -> (b : Nat) -> and (forall (x : Prop (Lt (nd 0) b)) (forall (y : Prop (Le (times b c) a)) (forall (z : Prop (Lt a (times b (plus c (nd 1)))))) (Eq (lift Type0 Type2) (nat) (div a b c)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nMatch_le. Soit $_n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $return_sort$ un élément de $cic.Sort$. Alors pour toutes les fonctions $return_type$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $_n$ et $__$ à des éléments de $cic.Univ$ de $return_sort$, pour tous les éléments $case_le_n$ de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $_n$ et $matita_arithmetics_nat.le_n$ appliqué à $_n$, pour toutes les fonctions $case_le_S$ des éléments $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $_n$ et $m$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_arithmetics_nat.S$ appliqué à $m$ et $matita_arithmetics_nat.le_S$ appliqué à $_n$ et $m$ et $__$, pour tous les éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $_n$ et $__$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $__$ et $z$.\nassistant\n", "label": "postulate match_le : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (return_sort : cic.Sort) -> (return_type : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (z : cic.Term cic.prop (matita_arithmetics_nat.le _n __)) -> cic.Univ return_sort) -> (case_le_n : cic.Term return_sort (return_type _n (matita_arithmetics_nat.le_n _n))) -> (case_le_S : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le _n m)) -> cic.Term return_sort (return_type (matita_arithmetics_nat.S m) (matita_arithmetics_nat.le_S _n m __))) -> (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (z : cic.Term cic.prop (matita_arithmetics_nat.le _n __)) -> cic.Term return_sort (return_type __ z)", "predict": "postulate match_le : (n : cic.Term univs.Type0 (matita_arithmetics_nat.nat)) -> (return_sort : cic.Sort) -> all (return_type : (x : cic.Term univs.Type0 (matita_arithmetics_nat.nat)) -> (z : cic.Term (cic.prop) (matita_arithmetics_nat.le) n x) -> all (case_le_n : (x : cic.Term (return_sort) (return_type)) -> (matita_arithmetics_nat.le_n) n x) -> all (case_le_S : (m : cic.Term univs.Type0 (matita_arithmetics_nat.nat)) -> (x : cic.Term (cic.prop) (matita_arithmetics_nat.le) n m) -> all (case_le_S : (x : cic.Term (return_sort) (return_type)) -> (matita_arithmetics_nat.le_S) (m) (matita_arithmetics_nat.S) (x)) -> all (z : cic.Term (cic.prop) (matita_arithmetics_nat.le) n z) -> (return_sort) (return_type) (__) z)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nMin_not_exists. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $n$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara en funktion från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $b$ och $i$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $matita_arithmetics_nat.plus$ applicerat på $n$ och $b$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $i$ och $matita_basics_bool.false$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_minimization.min$ applicerat på $n$ och $b$ och $f$ och $matita_arithmetics_nat.plus$ applicerat på $n$ och $b$.\nassistant\n", "label": "axiom min_not_exists (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (n b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le b i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_nat.plus n b))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.min n b f) (matita_arithmetics_nat.plus n b))", "predict": "axiom min_not_exists (f : Term (Type0 → Nat) → Term (Type0 → Prop)) (n b : Term Type0) (i : Term Nat) (x : Leq (f i) b) (y : Lt i (plus n b)) : Eq (lift Type0 Type2) (f i) false → Eq (lift Type0 Type2) (min n b f) (plus n b)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nDop_rect_CProp5. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_959$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_Dop$ vara en funktion från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $_nil$ och $_nil$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $prod$ applicerat på $a$ och $b$ och $prod$ applicerat på $a$ och $c$ till element av $cic.Term$ av $c", "label": "postulate Dop_rect_CProp5 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_959 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_959 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term cic.prop (Q_ x_959)", "predict": "ic.prop$.\n\npostulate dop_rect_CProp5 : (A : univs.Type0) -> dop_rect_CProp5 A : cic.prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nLet_clause_10471. Låt $n1$ och $n2$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $p1$ och $p2$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Låt $op$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $B$ och $nil$. Låt $f1$ och $f2$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_bigops.iso$ applicerat på $B$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f1$ och $n1$ och $p1$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f2$ och $n2$ och $p2$. Låt $h$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_clearme0$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $cic.prod$ applicerat på $univs.Type0$ och $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktionen som avbildar $__$ som $matita_arithmetics_nat.nat$ och funktionen som avbildar $k$ som $matita_basics_logic.And$ applicerat på $matita_basics_logic.And$ applicerat på $cic.prod$ applicerat på $univs.Type0$ och $", "label": "postulate let_clause_10471 : (n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (p2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil)) -> (f1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (f2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (_clearme : cic.Term cic.prop (matita_arithmetics_bigops.iso B (matita_arithmetics_bigops.mk_range B f1 n1 p1) (matita_arithmetics_bigops.mk_range B f2 n2 p2))) -> (h : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.ex (cic.prod univs.Type0 univs.Type0 matita_arithmetics_nat.nat (\\ __ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_nat.nat)) (\\", "predict": "univs.Type0$ och $p1$ och $f1$ och $p2$ och $f2$ och $h$.\n\npostulate let_clause_10471 : (n1 : cic.Term univs.Type0) -> (n2 : matita_arithmetics_nat.nat) -> (p1 : (x : cic.Term univs.Type0) -> (y : matita_arithmetics_nat.nat) -> cic.Term univs.Type0) -> (p2 : (x : cic.Term univs.Type0) -> (y : matita_arithmetics_nat.nat) -> matita_basics_bool.bool) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : matita_arithmetics_bigops.ACop B nil) -> (f1 : (x : cic.Term univs.Type0) -> (y : matita_arithmetics_nat.nat) -> cic.Term univs.Type0) -> (f2 : (x : cic.Term univs.Type0) -> (y : matita_arithmetics_nat.nat) -> B) -> (clearme : cic.Term (cic.prop (matita_arithmetics_bigops.iso B (matita_arithmetics_bigops.mk_range B (f1 x n1) (p1 x y) (f2 x n2) (p2 x y)))) (matita_arithmetics_bigops.mk_range B (f1 x n1) (p1 x y) (f2 x n2) (p2 x y))) -> (h : (x : cic.Term univs.Type0) -> (y : matita_arithmetics_nat.nat) -> cic.Term univs.Type0) -> (clearme0 : cic.Term (cic.prop (matita_basics_logic.ex (univs.Type0, univs.Type0, matita_arithmetics_nat.nat) (matita_basics_logic.And (matita_basics_logic.And (cic.prod univs.Type0 univs.Type0) (p1 x y)) (f1 x n1)) (p2 x y)) (f2 x n2)) (h x y))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nEq_div_div_div_times. Let $n$ and $m$ and $q$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Then for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_div_and_mod.div$ applied to $matita_arithmetics_div_and_mod.div$ applied to $q$ and $n$ and $m$ and $matita_arithmetics_div_and_mod.div$ applied to $q$ and $matita_arithmetics_nat.times$ applied to $n$ and $m$.\nassistant\n", "label": "Axiom eq_div_div_div_times : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall q : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.div (matita_arithmetics_div_and_mod.div q n) m) (matita_arithmetics_div_and_mod.div q (matita_arithmetics_nat.times n m))) .", "predict": "Axiom eq_div_div_div_times : forall n : univs.Type0, forall m : matita_arithmetics_nat.nat, forall q : cic.Term (cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)), forall __1 : cic.Term (cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)), cic.Term (cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_nat.nat)) (matita_arithmetics_div_and_mod.div (matita_arithmetics_div_and_mod.div q n) m) (matita_arithmetics_div_and_mod.div q (matita_arithmetics_nat.times n m)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nAop_inv_rect_CProp1. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$. Då för alla funktioner $P$ från element $_z1422$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $a$ och $x2$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $c$ av", "label": "postulate Aop_inv_rect_CProp1 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> (P : (_z1422 : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1423 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.Aop x1 x2)) Hterm (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P Hterm)", "predict": " $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ och funktioner $_assocr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $c$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$.\n\npostulate aop_inv_rect_CProp1 : (x1 : univs.Type0) -> (x2 : Term (univs.Type0) x1) -> Hterm : Term (univs.Type0) (aop x1 x2) -> (forall P : (z1422 : Term (univs.Type0) (aop x1 x2)) -> Univ (cic.prop)) -> (forall _H1 : (op : (__) -> (x1 : Term (univs.Type0)) -> (x1 : Term (univs.Type0))) -> (nill : (a : Term (univs.Type0) x1) -> Prop)) -> (forall _nill : (a : Term (univs.Type0) x1) -> Prop) -> (forall _assoc : (a : Term (univs.Type0) x1) -> (b : Term (univs.Type0) x1) -> (c : Term (univs.Type0) x1) -> Prop) -> (forall _assocr : (a : Term (univs.Type0) x1) -> (b : Term (univs.Type0) x1) -> (c : Term (univs.Type0) x1) -> Prop)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nProd_discr. Låt $a1$ och $a2$ vara element av $cic.Univ$ av $univs.Type0$. Låt $x$ och $y$ vara element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $a1$ och $a2$. Låt $_e$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $a1$ och $a2$ och $x$ och $y$. Då håller $cic.Term$ för $univs.Type2$ och $matita_basics_types.match_Prod$ applicerat på $a1$ och $a2$ och $cic.succ$ applicerat på $univs.Type2$ och funktionen som avbildar $__$ som $cic.univ$ applicerat på $univs.Type2$ och funktionen som avbildar $t0$ och $t1$ som $matita_basics_types.match_Prod$ applicerat på $a1$ och $a2$ och $cic.succ$ applicerat på $univs.Type2$ och funktionen som avbildar $__$ som $cic.univ$ applicerat på $univs.Type2$ och funktionen som avbildar $u0$ och $u1$ som $cic.prod$ applicerat på $cic.succ$ applicerat på $univs.Type1$ och $univs.Type1$ och $cic.univ$ applicerat på $un", "label": "postulate Prod_discr : (a1 : cic.Univ univs.Type0) -> (a2 : cic.Univ univs.Type0) -> (x : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2)) -> (y : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2)) -> (_e : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod a1 a2)) x y)) -> cic.Term univs.Type2 (matita_basics_types.match_Prod a1 a2 (cic.succ univs.Type2) (\\ __ : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2) -> cic.univ univs.Type2) (\\ t0 : cic.Term univs.Type0 a1 -> \\ t1 : cic.Term univs.Type0 a2 -> matita_basics_types.match_Prod a1 a2 (cic.succ univs.Type2) (\\ __ : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2) -> cic.univ univs.Type2) (\\ u0 : cic.Term univs.Type0 a1 -> \\ u1 : cic.Term univs.Type0 a2 -> cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (\\ P : cic.Univ univs.Type1 -> cic.prod univs.Type1 univs.Type1 (cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) u0) (\\ e0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) u0) -> cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x0 : cic.Term univs.Type0 a1 -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) x0) -> a2) u0 e0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 a1) t0 (\\ x0 : cic.Term univs.Type", "predict": "ivs.Type2$ och $matita_basics_types.Prod$ applicerat på $a1$ och $a2$ och $x$ och $y$ och $_e$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nF3_ind_aux. Låt $A1$ och $A2$ och $A3$ vara element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A2$ och element $__2$ av $cic.Term$ av $univs.Type0$ och $A3$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $P$ av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation3$ applicerat på $A1$ och $A2$ och $A3$, för alla funktioner $__$ från element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $__$ från element $a1$ av $cic.Term$ av $univs.Type0$ och $A1$ och element $a2$ av $cic.Term$ av $univs.Type0$ och $A2$ och element $a3$ av $cic.Term$ av $univs.Type0$ och $A3$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $f$ applicerat på $a1$ och $a2$ och $a3$ och $n$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $a1$ och $a2$ och $a3$ och element $a1$ av $cic.Term$ av $univs.Type0$ och $A1$ och element $a2$ av $cic.Term$ av $univs.Type0$ och $A2$ och element $a3$ av $cic.Term$ av $univs.Type0$ och $A3$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $f$ applicerat på", "label": "f3_ind_aux : A1 : cic.Univ univs.Type0 -> A2 : cic.Univ univs.Type0 -> A3 : cic.Univ univs.Type0 -> f : (__ : cic.Term univs.Type0 A1 -> __1 : cic.Term univs.Type0 A2 -> __2 : cic.Term univs.Type0 A3 -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> P : cic.Term univs.Type0 (matita_basics_relations.relation3 A1 A2 A3) -> __ : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : (a1 : cic.Term univs.Type0 A1 -> a2 : cic.Term univs.Type0 A2 -> a3 : cic.Term univs.Type0 A3 -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (f a1 a2 a3) n) -> cic.Term cic.prop (P a1 a2 a3)) -> a1 : cic.Term univs.Type0 A1 -> a2 : cic.Term univs.Type0 A2 -> a3 : cic.Term univs.Type0 A3 -> __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a1 a2 a3) n) -> cic.Term cic.prop (P a1 a2 a3)) -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> a1 : cic.Term univs.Type0 A1 -> a2 : cic.Term univs.Type0 A2 -> a3 : cic.Term univs.Type0 A3 -> __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a1 a2 a3) n) -> cic.Term cic.prop (P a1 a2 a3) .", "predict": " $a1$ och $a2$ och $a3$ och $n$ och $a1$ och $a2$ och $a3$ och $n$ och $P$ applicerat på $a1$ och $a2$ och $a3$ och element $a1$ av $cic.Term$ av $univs.Type0$ och $A1$ och element $a2$ av $cic.Term$ av $univs.Type0$ och $A2$ och element $a3$ av $cic.Term$ av $univs.Type0$ och $A3$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $f$ applicerat på $a1$ och $a2$ och $a3$ och $n$ och $a1$ och $a2$ och $a3$ och $n$ och $P$ applicerat på $a1$ och $a2$ och $a3$ ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nBool_rect_Type3_body. Let $Q_$ be a function from elements $_x_335$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $univs.Type3$. Let $_H_true$ be an element of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_bool.true$. Let $_H_false$ be an element of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_bool.false$. Let $x_335$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Then $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_335$.\nassistant\n", "label": "bool_rect_Type3_body : Q_ : (_x_335 : cic.Term univs.Type0 matita_basics_bool.bool -> cic.Univ univs.Type3) -> _H_true : cic.Term univs.Type3 (Q_ matita_basics_bool.true) -> _H_false : cic.Term univs.Type3 (Q_ matita_basics_bool.false) -> x_335 : cic.Term univs.Type0 matita_basics_bool.bool -> cic.Term univs.Type3 (Q_ x_335) .", "predict": "bool_rect_Type3_body : (Q_ : (x_335 : Elem (Term (univs Type0)) -> Bool (matita_basics_bool)) -> (H_true : Elem (Term (univs Type3)) (Q_ (matita_basics_bool true))) -> (H_false : Elem (Term (univs Type3)) (Q_ (matita_basics_bool false))) -> (x_335 : Elem (Term (univs Type0)) (matita_basics_bool)) -> Elem (Term (univs Type3)) (Q_ x_335) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nLet_clause_15625. Soient $m$ et $n$ et $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $posm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$. Soit $pnm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Soit $c$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $d$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arith", "label": "postulate let_clause_15625 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times", "predict": "metics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nB2_def. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_chebyshev_bertrand.B2$ applied to $n$ and $matita_arithmetics_bigops.bigop$ applied to $matita_arithmetics_nat.S$ applied to $n$ and the function that maps $p$ to $matita_arithmetics_primes.primeb$ applied to $p$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $p$ to $matita_arithmetics_exp.exp$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_chebyshev_psi_bounds.bool_to_nat$ applied to $matita_arithmetics_nat.leb$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_chebyshev_bertrand.k$ applied to $n$ and $p$ and $matita_arithmetics_chebyshev_bertrand.k$ applied to $n$ and $p$.\nassistant\n", "label": "axiom B2_def (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_chebyshev_bertrand.B2 n) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n) (λ p => matita_arithmetics_primes.primeb p) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (λ p => matita_arithmetics_exp.exp p (matita_arithmetics_nat.times (matita_arithmetics_chebyshev_psi_bounds.bool_to_nat (matita_arithmetics_nat.leb (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_chebyshev_bertrand.k n p))) (matita_arithmetics_chebyshev_bertrand.k n p)))))", "predict": "axiom b2_def (n : univs.Type0) (x : matita_arithmetics_nat.nat) : cic.prop (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_chebyshev_bertrand.B2 n) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n) (λ p : matita_arithmetics_nat.nat, matita_arithmetics_primes.primeb p)) (matita_arithmetics_nat.nat) (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_nat.times (matita_arithmetics_exp.exp p) (matita_arithmetics_nat.times (matita_arithmetics_chebyshev_psi_bounds.bool_to_nat (matita_arithmetics_nat.leb (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_chebyshev_bertrand.k n p)) (matita_arithmetics_chebyshev_bertrand.k n p))))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nBigop_diff. Soit $p$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Soit $nil$ un élément de $cic.Term$ de $univs.Type0$ et de $B$. Soit $op$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $B$ et $nil$. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$. Soient $i$ et $n$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $n$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $p$ appliqué à $i$ et $matita_basics_bool.true$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $B$ et $matita_arithmetics_bigops.bigop$ appliqué à $n$ et la fonction qui envoie $x$ à $p$ appliqué à $x$ et $B$ et $nil$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $B$ et $nil$ et $op$ et la fonction qui envoie $x$ à $f$ appliqué à $x$ et $matita_arithmetics_bigops.aop__o", "label": "postulate bigop_diff : (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil)) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop n (\\ x : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p x) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (\\ x : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f x)) (matita_arithmetics_bigops.aop__o__op B nil op (f i) (matita_arithmetics_bigops.bigop n (\\ x : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_bool.andb (matita_basics_bool.notb (matita_arithmetics_nat.eqb i x)) (p x)) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (\\ x : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f x))))", "predict": "__op$ appliqué à $B$ et $nil$ et $op$ et $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $p$ appliqué à $i$ et $matita_basics_bool.true$ et $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $p$ appliqué à $n$ et $matita_basics_bool.true$ et $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $p$ appliqué à $i$ et $matita_basics_bool.true$ et $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $p$ appliqué à $n$ et $matita_basics_bool.true$ et $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $p$ appliqué à $i$ et $matita_basics_bool.true$ et $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $p$ appliqué à $n$ et $matita_basics_bool.true$ et $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $p$ appliqué à $i$ et $matita_basics_bool.true$ et $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $p$ appliqué à $n$ et $matita_basics_bool.true$ et $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $p$ appliqué à $i$ et $matita_basics_bool.true$ et $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $p$ appliqué à $n$ et $matita_basics_bool.true$ et $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $p$ appliqué à $i$ et $matita_basics_bool.true$ et $cic.lift$ appliqué à $univs.Type0$ et $univs.Type"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nLet_clause_1033. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $len$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $p$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $lep$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_sqrt.sqrt$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $p$. Låt $ltp$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $p$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $Hc$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $matita_arithmetics_nat.leb$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_chebyshev_ber", "label": "let_clause_1033 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> len : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))) n) -> p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> lep : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_sqrt.sqrt (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) p) -> ltp : cic.Term cic.prop (matita_arithmetics_nat.lt p (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) -> Hc : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_nat.leb (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_chebyshev_bertrand.k (matita_arithmetics_nat.times (matita_arithmetics_nat.S (mat", "predict": "gen.bergen$ applicerat på $n$.\n\nlet_clause_1033 : (n : Elem (cic Term) (univs Type0) (matita_arithmetics_nat nat)) -> (len : Elem (cic Term) (cic prop) (matita_arithmetics_nat (le (matita_arithmetics_exp (exp (matita_arithmetics_nat (S (S (S (S (S (S (S (O))))) (S)) (O)))))) (n)) -> (p : Elem (cic Term) (univs Type0) (matita_arithmetics_nat nat)) -> (lep : Elem (cic Term) (cic prop) (matita_arithmetics_nat (le (matita_arithmetics_sqrt (sqrt (matita_arithmetics_nat (times (S (S)) (O)))) (n)) (p))) -> (ltp : Elem (cic Term) (cic prop) (matita_arithmetics_nat (lt (p) (matita_arithmetics_nat (times (S (S)) (O))) (n))) -> (Hc : Elem (cic Term) (cic prop) (matita_basics_logic (eq (cic lift (univs Type0) (univs Type2)) (matita_basics_bool (bool) (matita_arithmetics_nat (leb (matita_arithmetics_nat (S (S)) (matita_arithmetics_nat (O))) (matita_arithmetics_chebyshev_bergen (bergen) (n)))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nBi_relation. Soient $__$ et $__1$ des éléments de $cic.Univ$ de $univs.Type0$. Alors $cic.Univ$ tient pour $univs.Type0$.\nassistant\n", "label": "Axiom bi_relation : forall __ : cic.Univ univs.Type0, forall __1 : cic.Univ univs.Type0, cic.Univ univs.Type0 .", "predict": "Axiom bi_relation : forall u : Univ, forall t : Type0, Universe u t ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nMin. Låt $__$ och $__1$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $univs.Type0$ och $matita_arithmetics_nat.nat$.\nassistant\n", "label": "postulate min : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat", "predict": "postulate $__ : $univs.Type0 $__1 : matita_arithmetics_nat.nat  postulate : $univs.Type0 $matita_arithmetics_nat.nat"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nPermut_transpose. Låt $i$ och $j$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $i$ och $n$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $j$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_permutation.permut$ applicerat på $matita_arithmetics_permutation.transpose$ applicerat på $i$ och $j$ och $n$.\nassistant\n", "label": "Axiom permut_transpose : forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall j : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.le i n), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.le j n), cic.Term cic.prop (matita_arithmetics_permutation.permut (matita_arithmetics_permutation.transpose i j) n) .", "predict": "Axiom permut_transpose : forall i : univs.Type0, forall j : univs.Type0, forall n : matita_arithmetics_nat.nat, forall __ : cic.Term (cic.prop (matita_arithmetics_nat.le i n)), forall __1 : cic.Term (cic.prop (matita_arithmetics_nat.le j n)), permut (transpose i j n) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nIt. $cic.Term$ holds for $univs.Type0$ and $matita_basics_types.unit$.\nassistant\n", "label": "axiom it : cic.Term univs.Type0 matita_basics_types.unit", "predict": "axiom cic_term : univs.Type0 ∧ matita_basics_types.unit"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nBool_inv_rect_Type0. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $P$ be a function from elements $_z617$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $univs.Type0$. Then for all functions $_H1$ from elements $_z618$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Hterm$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $univs.Type0$ and $P$ applied to $matita_basics_bool.true$, for all functions $_H2$ from elements $_z618$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Hterm$ and $matita_basics_bool.false$ to elements of $cic.Term$ of $univs.Type0$ and $P$ applied to $matita_basics_bool.false$, $cic.Term$ holds for $univs.Type0$ and $P$ applied to $Hterm$.\nassistant\n", "label": "postulate bool_inv_rect_Type0 : (Hterm : cic.Term univs.Type0 matita_basics_bool.bool) -> (P : (_z617 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ univs.Type0) -> (_H1 : (_z618 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.true)) -> cic.Term univs.Type0 (P matita_basics_bool.true)) -> (_H2 : (_z618 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.false)) -> cic.Term univs.Type0 (P matita_basics_bool.false)) -> cic.Term univs.Type0 (P Hterm)", "predict": "postulate bool_inv_rect_Type0 : (Hterm : Term Type0) -> (P : (z617 : Term Type0) -> Bool) -> and (forall (H1 : (z618 : Prop) -> Eq (lift Type0 Type2) (and Bool (Hterm true))) (forall (H2 : (z618 : Prop) -> Eq (lift Type0 Type2) (and Bool (Hterm false)))) (Term Type0) (P Hterm)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nPlus_minus_m_m. För alla element $n$ och $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $m$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $n$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.minus$ applicerat på $n$ och $m$ och $m$.\nassistant\n", "label": "plus_minus_m_m : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.le m n) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus n m) m)) .", "predict": "plus_minus_m_m : (n : Elem (cic Term) (univs Type0)) -> (m : Elem (cic Term) (matita_arithmetics_nat nat)) -> Proof (forall (p : Elem (cic Prop) (matita_arithmetics_nat le)) (m n) (Eq (cic lift (univs Type0) (univs Type2) (matita_arithmetics_nat nat)) n (plus (minus n m) m))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nRange_ind_body. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_915$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_range$ une fonction des fonctions $_enum$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_upto$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_filter$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_range$ appliqué à $_A$ et $_enum$ et $_upto$ et $_filter$. Alors pour tous les éléments $x_915$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_915$.\nassistant\n", "label": "range_ind_body : _A : cic.Univ univs.Type0 -> Q_ : (_x_915 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Univ cic.prop) -> _H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 _A) -> _upto : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> x_915 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Term cic.prop (Q_ x_915) .", "predict": "range_ind_body : A : Elem (univs Type0) -> Q_ : (x_915 : Elem (cic Term)) -> (matita_arithmetics_bigops range) A (Elem (cic Univ)) -> Proof (forall (x_915 : Elem (cic Term)) (univs Type0) (matita_arithmetics_bigops range) A (Elem (cic Univ)) (Q_ x_915)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nBi_transitive. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $_R$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.bi_relation$ appliqué à $A$ et $B$, $cic.Univ$ tient pour $cic.prop$.\nassistant\n", "label": "postulate bi_transitive : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (_R : cic.Term univs.Type0 (matita_basics_relations.bi_relation A B)) -> cic.Univ cic.prop", "predict": "postulate bi_transitive : (A : univs.Type0) -> (B : univs.Type0) -> all (R : cic.Term univs.Type0 (bi_relation A B)) (cic.prop)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nDivides_n_n. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $n$.\nassistant\n", "label": "postulate divides_n_n : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_primes.divides n n)", "predict": "postulate divides_n_n : (n : Nat) -> Prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nFold_true. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $a$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $l$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$. Soit $p$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soit $op$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$. Soit $nil$ un élément de $cic.Term$ de $univs.Type0$ et de $B$. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $p$ appliqué à $a$ et $matita_basics_bool.true$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $B$ et $matita_basics_lists_list.fold$ appliqué à $A$ et $B$ et $op$ et $nil$ et la fonction qui envoie $i$ à $p$ appliqué à $i$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $a$ et $l$ et $op$ appliqué à $f$ appliqué à $a$ et $matita_basics_lists_list.fold$ appliqué à $A$ et $B$ et $op$ et $nil$ et la fonction qui envoie $i$ à $p$ appliqué à $i$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $l$.\nassistant\n", "label": "Axiom fold_true : forall A : cic.Univ univs.Type0, forall B : cic.Univ univs.Type0, forall a : cic.Term univs.Type0 A, forall l : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall p : ((__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 matita_basics_bool.bool), forall op : ((__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B), forall nil : cic.Term univs.Type0 B, forall f : ((__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B), forall __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p a) matita_basics_bool.true), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_basics_lists_list.fold A B op nil (fun i => p i) (fun i => f i) (matita_basics_lists_list.cons A a l)) (op (f a) (matita_basics_lists_list.fold A B op nil (fun i => p i) (fun i => f i) l))) .", "predict": "Axiom fold_true : forall A : univs.Type0, forall B : univs.Type0, forall a : A, forall l : matita_basics_lists_list.list A, forall p : A -> B -> Prop, forall op : B -> B -> B, forall nil : B, forall f : A -> B, forall x : prop (cic.lift univs.Type0 univs.Type2) (matita_basics_bool.bool) (p a (matita_basics_bool.true)), (prop (cic.lift univs.Type0 univs.Type2) B) (matita_basics_lists_list.fold A B op nil (forall i : A, p (f i)) (matita_basics_lists_list.cons A a l) (op (f a) (matita_basics_lists_list.fold A B op nil (forall i : A, p (f i)))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nDop_rect_Type0_body. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $_nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour toutes les fonctions $Q_$ des éléments $_x_955$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $_H_mk_Dop$ des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $_nil$ et $_nil$ et des fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $b$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ à des", "label": "axiom Dop_rect_Type0_body (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_955 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ univs.Type0) (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) (x_955 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) : cic.Term univs.Type0 (Q_ x_955)", "predict": " éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $_nil$ et $sum$ et $b$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nRange_rect_CProp0. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_939$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_range$ des fonctions $_enum$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_upto$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_filter$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_range$ appliqué à $_A$ et $_enum$ et $_upto$ et $_filter$, pour tous les éléments $x_939$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_939$.\nassistant\n", "label": "range_rect_CProp0 : _A : cic.Univ univs.Type0 -> Q_ : (_x_939 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Univ cic.prop) -> _H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 _A) -> _upto : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> x_939 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Term cic.prop (Q_ x_939) .", "predict": "range_rect_CProp0 : (A : Elem (univ (Type0))) -> Proof (forall (x_939 : Term (Type0)) (matita_arithmetics_bigops.range A (Univ (Prop))) (forall (H : Enum (nat) (Term (Type0))) (A (nat)) (upto (Term (Type0)) (nat)) (filter (Elem (Term (Type0)) (nat)) (bool))) (Q_ (matita_arithmetics_bigops.mk_range A (Enum (nat) (Term (Type0))) (upto (Term (Type0)) (nat))) (filter (Elem (Term (Type0)) (nat)) (bool))) (forall (x_939 : Term (Type0)) (matita_arithmetics_bigops.range A (Univ (Prop))) (Q_ x_939))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nLstar_ind_r_aux. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $R$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation$ appliqué à $B$, pour tous les éléments $b1$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $P$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation2$ appliqué à $matita_arithmetics_nat.nat$ et $B$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_nat.O$ et $b1$, pour toutes les fonctions $__1$ des éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $b2$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $R$ et $l$ et $b1$ et $b$ et des éléments $__2$ de $cic.Term$ de $cic.prop$ et de $R$ appliqué à $b$ et $b2$ et des éléments $__3$ de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $l$ et $b$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $l$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $b2$, pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $b$ et $b2$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $R$ et $l$ et $b$ et $b2$, pour tous les éléments $__3$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $B$ et $b$ et $b1$, $cic.Term$ tient pour $cic.prop$ et $", "label": "axiom lstar_ind_r_aux (B : cic.Univ univs.Type0) (R : cic.Term univs.Type0 (matita_basics_relations.relation B)) (b1 : cic.Term univs.Type0 B) (P : cic.Term univs.Type0 (matita_basics_relations.relation2 matita_arithmetics_nat.nat B)) (__ : cic.Term cic.prop (P matita_arithmetics_nat.O b1)) (__1 : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 B) -> (b2 : cic.Term univs.Type0 B) -> (__1 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b)) -> (__2 : cic.Term cic.prop (R b b2)) -> (__3 : cic.Term cic.prop (P l b)) -> cic.Term cic.prop (P (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b2)) (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) (b b2 : cic.Term univs.Type0 B) (__2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b b2)) (__3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) b b1)) : cic.Term cic.prop (P l b2)", "predict": "B$ et $b$ et $b1$ et $P$ et $l$ et $b$ et $b2$ et $l$ et $b$ et $b2$ et $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $R$ et $l$ et $b1$ et $b$ et $b2$ et $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $R$ et $l$ et $b$ et $b2$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nLet_clause_10471. Let $n1$ and $n2$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p1$ and $p2$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $op$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $B$ and $nil$. Then for all functions $f1$ and $f2$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $B$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_bigops.iso$ applied to $B$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$, for all functions $h$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $cic.prod$ applied to $univs.Type0$ and $univs.Type0$ and $matita_arithmetics_nat.nat$ and the function that maps $__$ to $matita_arithmetics_nat.nat$ and the function that maps $k$ to $matita_basics_logic.And$ applied to $matita_basics_logic.And$ applied to $cic.prod$ applied to $univs.Type0$ and $cic.prop$ and $matita_arithmetics_nat.nat$ and the function that maps $i$ to $cic.prod$ applied to $cic.prop$ and $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n1$ and", "label": "Axiom let_clause_10471 : forall n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n2 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall p1 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall p2 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall B : cic.Univ univs.Type0, forall nil : cic.Term univs.Type0 B, forall op : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil), forall f1 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B), forall f2 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B), forall _clearme : cic.Term cic.prop (matita_arithmetics_bigops.iso B (matita_arithmetics_bigops.mk_range B f1 n1 p1) (matita_arithmetics_bigops.mk_range B f2 n2 p2)), forall h : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall _clearme0 : cic.Term cic.prop (matita_basics_logic.ex (cic.prod univs.Type0 univs.Type0 matita_arithmetics_nat.nat (fun __ => matita_arithmetics_nat.nat)) (fun k => mat", "predict": " $f1$ and $p1$ and $i$ and $n2$ and $f2$ and $p2$ and $h$ and $k$, we have $op$ is equal to $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $f2$ and $n2$ and $p2$ and $h$ and $k$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nRange_rect_Type3. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_921$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type3$. Låt $_H_mk_range$ vara en funktion från funktioner $_enum$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $_A$ och element $_upto$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $_filter$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_range$ applicerat på $_A$ och $_enum$ och $_upto$ och $_filter$. Då för alla element $x_921$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$, håller $cic.Term$ för $univs.Type3$ och $Q_$ applicerat på $x_921$.\nassistant\n", "label": "Axiom range_rect_Type3 : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_921 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type3), forall _H_mk_range : ((_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type3 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))), forall x_921 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A), cic.Term univs.Type3 (Q_ x_921) .", "predict": "Axiom range_rect_Type3 : forall A : univs.Type0, (Q_ : x : cic.Term univs.Type0 -> matita_arithmetics_bigops.range A -> cic.Univ univs.Type3) -> forall x : cic.Term univs.Type0, (matita_arithmetics_bigops.range A -> cic.Term univs.Type3) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nAop_inv_rect_CProp4. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Då för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1536$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $a$ och $x2$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $c", "label": "Axiom Aop_inv_rect_CProp4 : forall x1 : cic.Univ univs.Type0, forall x2 : cic.Term univs.Type0 x1, forall Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2), forall P : ((_z1536 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> cic.Univ cic.prop), forall _H1 : ((op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1537 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))), cic.Term cic.prop (P Hterm) .", "predict": "$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ et $_op$ applicerat sur $x2$ et $a$ et $a$ et fonction $_id$ de terme $a$ de type $cic.prop$ et fonction $_id$ de terme $a$ de type $cic.prop$ et fonction $_id$ de terme $a$ de type $cic.prop$ et fonction $_id$ de terme $a$ de type $cic.prop$ et fonction $_id$ de terme $a$ de type $cic.prop$ et fonction $_id$ de terme $a$ de type $cic.prop$ et fonction $_id$ de terme $a$ de type $cic.prop$ et fonction $_id$ de terme $a$ de type $cic.prop$ et fonction $_id$ de terme $a$ de type $cic.prop$ et fonction $_id$ de terme $a$ de type $cic.prop$ et fonction $_id$ de terme $a$ de type $cic.prop$ et fonction $_id$ de terme $a$ de type $cic.prop$ et fonction $_id$ de terme $a$ de type $cic.prop$ et fonction $_id$ de terme $a$ de type $cic.prop$ et fonction $_id$ de terme $a$ de type $cic.prop$ et fonction $_id$ de terme $a$ de type $cic.prop$ et fonction $_id$ de terme $a$ de type $cic.prop$ et fonction $_id$ de terme $a$ de type $cic.prop$ et fonction $_id$ de terme $a$ de type $cic.prop$ et fonction $_id$ de terme $a$ de type $cic.prop$ et fonction $_id$ de terme $a$ de type $cic.prop$ et fonction $_id$ de terme $a$ de type $cic.prop$ et fonction $_id$ de terme $a$ de type $cic.prop$ et fonction $_id$ de terme $a$ de type $cic.prop$ et fonction $_id$ de terme $"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nProj1. För alla element $A$ och $B$ av $cic.Univ$ av $cic.prop$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $A$ och $B$, håller $cic.Term$ för $cic.prop$ och $A$.\nassistant\n", "label": "Axiom proj1 : forall A : cic.Univ cic.prop, forall B : cic.Univ cic.prop, forall __ : cic.Term cic.prop (matita_basics_logic.And A B), cic.Term cic.prop A .", "predict": "Axiom proj1 : forall A : cic.Univ prop, forall B : cic.Univ prop, forall __ : cic.Term prop, and A B -> prop __ ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nSum_rect_CProp2. Let $_A$ and $_B$ be elements of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_571$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_inl$ be a function from elements $x_572$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.inl$ applied to $_A$ and $_B$ and $x_572$. Let $_H_inr$ be a function from elements $x_573$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.inr$ applied to $_A$ and $_B$ and $x_573$. Let $x_571$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_571$.\nassistant\n", "label": "axiom Sum_rect_CProp2 (_A _B : cic.Univ univs.Type0) (Q_ : (_x_571 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ cic.prop) (_H_inl : (x_572 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.inl _A _B x_572))) (_H_inr : (x_573 : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.inr _A _B x_573))) (x_571 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) : cic.Term cic.prop (Q_ x_571)", "predict": "axiom sum_rect_CProp2 (A B : Univ Type0) (Q : x : Term Type0 → Sum A B → Univ prop) (H_inl : x : Term Type0 → A → prop) (H_inr : x : Term Type0 → B → prop) (x : Sum A B) : prop (Q x)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nReverse_single. Let $S$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $a$ of $cic.Term$ of $univs.Type0$ and $S$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $S$ and $matita_basics_lists_list.reverse$ applied to $S$ and $matita_basics_lists_list.cons$ applied to $S$ and $a$ and $matita_basics_lists_list.nil$ applied to $S$ and $matita_basics_lists_list.cons$ applied to $S$ and $a$ and $matita_basics_lists_list.nil$ applied to $S$.\nassistant\n", "label": "reverse_single : S : cic.Univ univs.Type0 -> a : cic.Term univs.Type0 S -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list S)) (matita_basics_lists_list.reverse S (matita_basics_lists_list.cons S a (matita_basics_lists_list.nil S))) (matita_basics_lists_list.cons S a (matita_basics_lists_list.nil S))) .", "predict": "reverse_single : (S : Elem (univ : Univ) (Type0 : Type)) -> Proof (forall (a : Elem (Term : Unvs) (Type0 : Type)) (S : Elem (Prop : Unvs)) (matita_basics_logic.eq (cic.lift (univ : Type) (Type2 : Type)) (matita_basics_lists_list.list S) (matita_basics_lists_list.reverse S) (matita_basics_lists_list.cons S a (matita_basics_lists_list.nil S)) (matita_basics_lists_list.cons S a (matita_basics_lists_list.nil S)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nInv. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $_R$ av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $A$, för alla element $_a$ och $_b$ av $cic.Term$ av $univs.Type0$ och $A$, håller $cic.Univ$ för $cic.prop$.\nassistant\n", "label": "axiom inv (A : cic.Univ univs.Type0) (_R : cic.Term univs.Type0 (matita_basics_relations.relation A)) (_a _b : cic.Term univs.Type0 A) : cic.Univ cic.prop", "predict": "axiom inv (A : univs.Type0) : ∀ R : cic.Term (univs.Type0) → relation (cic.Univ) → ∀ a b : cic.Term (univs.Type0) → A → prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nLe_inv_plus_l. For all elements $x$ and $y$ and $z$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.plus$ applied to $x$ and $y$ and $z$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.And$ applied to $matita_arithmetics_nat.le$ applied to $x$ and $matita_arithmetics_nat.minus$ applied to $z$ and $y$ and $matita_arithmetics_nat.le$ applied to $y$ and $z$.\nassistant\n", "label": "axiom le_inv_plus_l (x y z : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.plus x y) z)) : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le x (matita_arithmetics_nat.minus z y)) (matita_arithmetics_nat.le y z))", "predict": "axiom le_inv_plus_l (x y z : univs.Type0) (p : matita_arithmetics_nat.nat) (q : cic.prop) : matita_arithmetics_nat.le (matita_arithmetics_nat.plus x y) z → matita_arithmetics_nat.le x (matita_arithmetics_nat.minus z y) ∧ matita_arithmetics_nat.le y z"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nDPair_rect_CProp4. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_652$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_DPair$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $_f$ appliqué à $dpi1$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $A$ et $_f$ et $dpi1$ et $_dpi2$, pour tous les éléments $x_652$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_652$.\nassistant\n", "label": "Axiom DPair_rect_CProp4 : forall A : cic.Univ univs.Type0, forall _f : ((__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0), forall Q_ : ((_x_652 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop), forall _H_mk_DPair : ((dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))), forall x_652 : cic.Term univs.Type0 (matita_basics_types.DPair A _f), cic.Term cic.prop (Q_ x_652) .", "predict": "Axiom dpair_rect_cprop4 : forall A : univs.Type0, (forall f : Term univs.Type0 -> A -> Univ univs.Type0, forall Q_ : x : Term univs.Type0 -> dpair A f -> prop, forall H_mk_DPair : dpi1 : Term univs.Type0 -> A -> dpi2 : Term univs.Type0 -> f dpi1 -> prop, forall x_652 : Term univs.Type0 -> dpair A f, prop (Q_ x_652)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nAop_inv_rect_Type0. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Då för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1398$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type0$, för alla funktioner $_H1$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $a$ och $x2$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$", "label": "postulate Aop_inv_rect_Type0 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> (P : (_z1398 : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> cic.Univ univs.Type0) -> (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1399 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.Aop x1 x2)) Hterm (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type0 (P (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type0 (P Hterm)", "predict": " och element $c$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ och funktioner $_assocr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $c$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nAop_rect_CProp3_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_879$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_Aop$ be a function from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$", "label": "axiom Aop_rect_CProp3_body (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_879 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop) (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) (x_879 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) : cic.Term cic.prop (Q_ x_879)", "predict": " and $_assoc$ and $Q_$. Axiom aop_rect_CProp3_body : ∀ A : cic.Univ, ∀ _nil : cic.Term, ∀ Q_ : _x_879 → A → cic.prop, ∀ _H_mk_Aop : op : __ → A → __1 → cic.Term, ∀ _nill : a : cic.Term → A → cic.prop, ∀ _nilr : a : cic.Term → A → cic.prop, ∀ _assoc : a : cic.Term → A → b : cic.Term → A → c : cic.Term → A → cic.prop, ∀ Q : Q_ (matita_arithmetics_bigops.mk_Aop A _nil) (op a) (nill a) (nilr a) (assoc a b c) Q,"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nSub_lt. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $e$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $A$. Låt $p$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $m$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_bigops.sub_hk$ applicerat på funktionen som avbildar $x$ som $x$ och funktionen som avbildar $x$ som $x$ och $A$ och $matita_arithmetics_bigops.mk_range$ applicerat på $A$ och $e$ och $n$ och $p$ och $matita_arithmetics_bigops.mk_range$ applicerat på $A$ och $e$ och $m$ och $p$.\nassistant\n", "label": "Axiom sub_lt : forall A : cic.Univ univs.Type0, forall e : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 A), forall p : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.le n m), cic.Term cic.prop (matita_arithmetics_bigops.sub_hk (fun x => x) (fun x => x) A (matita_arithmetics_bigops.mk_range A e n p) (matita_arithmetics_bigops.mk_range A e m p)) .", "predict": "Axiom sub_lt : forall A : univs.Type0, forall e : Term univs.Type0 -> matita_arithmetics_nat.nat -> Term univs.Type0, forall p : Term univs.Type0 -> matita_arithmetics_nat.nat -> matita_basics_bool.bool, forall n : Term univs.Type0, forall m : matita_arithmetics_nat.nat, (Leq n m -> Eq (sub_hk (A -> e x) (A -> p x)) (mk_range A (e n) (p n) (mk_range A (e m) (p m)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nDop_inv_rect_Type1. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x2$ un élément de $cic.Term$ de $univs.Type0$ et de $x1$. Alors pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1722$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type1$, pour toutes les fonctions $_H1$ des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $x1$ et $x2$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $prod$ appliqué à $a$ et $x2$ et $x2$ et des fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de", "label": "axiom Dop_inv_rect_Type1 (x1 : cic.Univ univs.Type0) (x2 : cic.Term univs.Type0 x1) (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) (P : (_z1722 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> cic.Univ univs.Type1) (_H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> (prod : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_null : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> (_distr : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> (_z1723 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term univs.Type1 (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) : cic.Term univs.Type1 (P Hterm)", "predict": " $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $prod$ appliqué à $a$ et $x2$ et $b$ et $x2$ et $c$ et $x2$, nous avons :\n\n$x1 = x2$\n\naxiom dop_inv_rect_Type1 (x1 : Univ) (x2 : Term x1) : ∀ Hterm : Term Dop x1 x2, ∀ P : _z1722 → Dop x1 x2 → Univ, ∀ H1 : sum (ACop x1 x2) (prod (x1 _) (x1 _)) → ∀ null : a → prop (eq (lift Univ Type2) (prod a x2)) → ∀ _distr : a → b → c → prop (eq (lift Univ Type2) (prod a x2) (b x2) (c x2)) → x1 = x2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nLog_exp2. Låt $p$ och $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.times$ applicerat på $m$ och $matita_arithmetics_log.log$ applicerat på $p$ och $n$ och $matita_arithmetics_log.log$ applicerat på $p$ och $matita_arithmetics_exp.exp$ applicerat på $n$ och $m$.\nassistant\n", "label": "log_exp2 : p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times m (matita_arithmetics_log.log p n)) (matita_arithmetics_log.log p (matita_arithmetics_exp.exp n m))) .", "predict": "log_exp2 : (p : Elem (univs Type0)) -> (n : Elem (matita_arithmetics_nat nat)) -> (m : Elem (univs Type0)) -> Proof (and (Lt (S (O p)) n) (Le (times m (log p n)) (log p (exp n m)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nLt_1_max_prime. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_minimization.max$ applied to $matita_arithmetics_nat.S$ applied to $n$ and the function that maps $i$ to $matita_basics_bool.andb$ applied to $matita_arithmetics_primes.primeb$ applied to $i$ and $matita_arithmetics_primes.dividesb$ applied to $i$ and $n$.\nassistant\n", "label": "Axiom lt_1_max_prime : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n), cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_minimization.max (matita_arithmetics_nat.S n) (fun i => matita_basics_bool.andb (matita_arithmetics_primes.primeb i) (matita_arithmetics_primes.dividesb i n)))) .", "predict": "Axiom lt_1_max_prime : forall n : univs.Type0 & matita_arithmetics_nat.nat, forall __ : cic.prop & matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n, cic.Term (matita_arithmetics_minimization.max (matita_arithmetics_nat.S n) (forall i : matita_basics_bool.bool, matita_basics_bool.andb (matita_arithmetics_primes.primeb i) (matita_arithmetics_primes.dividesb i n))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nConf3. Let $A$ and $B$ be elements of $cic.Univ$ of $univs.Type0$. Let $__$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation2$ applied to $A$ and $B$. Then for all elements $__1$ of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $A$, $cic.Univ$ holds for $cic.prop$.\nassistant\n", "label": "Conf3 : A : cic.Univ univs.Type0 -> B : cic.Univ univs.Type0 -> __ : cic.Term univs.Type0 (matita_basics_relations.relation2 A B) -> __1 : cic.Term univs.Type0 (matita_basics_relations.relation A) -> cic.Univ cic.prop .", "predict": "conf3 : (A : Elem (univs Type0)) -> (B : Elem (univs Type0)) -> __ : Elem (cic Term) -> (matita_basics_relations relation2 A B) -> Proof (forall (x : Elem (cic Term)) (matita_basics_relations relation A x) (cic Univ) (cic prop)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nSum_rect_CProp5. Let $_A$ and $_B$ be elements of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_561$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_inl$ be a function from elements $x_562$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.inl$ applied to $_A$ and $_B$ and $x_562$. Let $_H_inr$ be a function from elements $x_563$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.inr$ applied to $_A$ and $_B$ and $x_563$. Let $x_561$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_561$.\nassistant\n", "label": "postulate Sum_rect_CProp5 : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_561 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ cic.prop) -> (_H_inl : (x_562 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.inl _A _B x_562))) -> (_H_inr : (x_563 : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.inr _A _B x_563))) -> (x_561 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Term cic.prop (Q_ x_561)", "predict": "postulate sum_rect_CProp5 : (A : Univ) -> (B : Univ) -> (Q : (x : Term Type0) -> Sum A B -> Univ) -> (H_inl : (x : Term Type0) -> A -> Prop) -> (H_inr : (x : Term Type0) -> B -> Prop) -> (x : Sum A B) -> Prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nAnd_rect_CProp0_body. Let $_A$ and $_B$ be elements of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_166$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_conj$ be a function from elements $x_168$ of $cic.Term$ of $cic.prop$ and $_A$ and elements $x_167$ of $cic.Term$ of $cic.prop$ and $_B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_logic.conj$ applied to $_A$ and $_B$ and $x_168$ and $x_167$. Then for all elements $x_166$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $_A$ and $_B$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_166$.\nassistant\n", "label": "And_rect_CProp0_body : _A : cic.Univ cic.prop -> _B : cic.Univ cic.prop -> Q_ : (_x_166 : cic.Term cic.prop (matita_basics_logic.And _A _B) -> cic.Univ cic.prop) -> _H_conj : (x_168 : cic.Term cic.prop _A -> x_167 : cic.Term cic.prop _B -> cic.Term cic.prop (Q_ (matita_basics_logic.conj _A _B x_168 x_167))) -> x_166 : cic.Term cic.prop (matita_basics_logic.And _A _B) -> cic.Term cic.prop (Q_ x_166) .", "predict": "and_rect_CProp0_body : (A : Elem (Univ (prop))) -> (B : Elem (Univ (prop))) -> Proof (and A B) -> Proof (forall (x_166 : Term (prop)) (and A B) -> Term (prop) (Q_ x_166)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nProd_rect_Type0_body. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_702$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $_H_mk_Prod$ des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $_A$ et $_B$ et $_fst$ et $_snd$, pour tous les éléments $x_702$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_702$.\nassistant\n", "label": "Axiom Prod_rect_Type0_body : forall _A : cic.Univ univs.Type0, forall _B : cic.Univ univs.Type0, forall Q_ : ((_x_702 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ univs.Type0), forall _H_mk_Prod : ((_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term univs.Type0 (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))), forall x_702 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B), cic.Term univs.Type0 (Q_ x_702) .", "predict": "Axiom prod_rect_Type0_body : forall A : Univ, forall B : Univ, forall Q : forall x : Term Type0, Prod A B : Univ, forall H : forall fst : Term Type0, A, forall snd : Term Type0, B, Q (mk_Prod A B fst snd), forall x : Term Type0, Prod A B, Q x ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nLet_clause_1047. Let $k$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $op$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Let $lenk$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $k$. Let $j$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $leup$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $j$, for all functions $Hind$ from functions $__$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $i$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $j$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p$ applied to $i$ and $matita_basics_bool.false$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$", "label": "postulate let_clause_1047 : (k : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (lenk : cic.Term cic.prop (matita_arithmetics_nat.le n k)) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (leup : cic.Term cic.prop (matita_arithmetics_nat.le n j)) -> (Hind : (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le n i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i j)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p i) matita_basics_bool.false)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics", "predict": " applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p$ applied to $i$ and $matita_basics_bool.true$, we have that $f$ applied to $leup$ and $lenk$ is equal to $f$ applied to $j$ and $lenk$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nDpi1. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$, pour tous les éléments $_xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $f$, $cic.Term$ tient pour $univs.Type0$ et $A$.\nassistant\n", "label": "Axiom dpi1 : forall A : cic.Univ univs.Type0, forall f : ((__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0), forall _xxx : cic.Term univs.Type0 (matita_basics_types.DPair A f), cic.Term univs.Type0 A .", "predict": "Axiom dpi1 : forall A : univs.Type0, forall f : cic.Term (univs.Type0 -> cic.Univ), forall _xxx : cic.Term (univs.Type0) * matita_basics_types.DPair A (f _xxx), cic.Term (univs.Type0) A ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nLet_clause_1617. Let $p$ and $m$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $p$. Let $gcd1$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Let $_clearme$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$. Let $c$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $nm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$ and $matita_arithmetics_nat.times$ applied to $p$ and $c$. Let $a$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme0$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $b$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type", "label": "axiom let_clause_1617 (p m n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) (gcd1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (_clearme : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times m n))) (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) (nm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times m n) (matita_arithmetics_nat.times p c))) (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme0 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (λ b => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.n", "predict": "0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $posn$ and $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_basics_logic.and$ applied to $matita_arithmetics_primes.divides$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $a$ and $m$ and $matita_arithmetics_primes.divides$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $b$ and $n$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_basics_logic.eq$ applied to $"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nSig_rect_CProp3_body. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $_f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $Q_$ från element $_x_682$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_Sig$ från element $pi1$ av $cic.Term$ av $univs.Type0$ och $A$ och element $_pi2$ av $cic.Term$ av $cic.prop$ och $_f$ applicerat på $pi1$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.mk_Sig$ applicerat på $A$ och $_f$ och $pi1$ och $_pi2$, för alla element $x_682$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_682$.\nassistant\n", "label": "Sig_rect_CProp3_body : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> Q_ : (_x_682 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) -> cic.Univ cic.prop) -> _H_mk_Sig : (pi1 : cic.Term univs.Type0 A -> _pi2 : cic.Term cic.prop (_f pi1) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> x_682 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) -> cic.Term cic.prop (Q_ x_682) .", "predict": "sig_rect_CProp3_body : (A : Elem (univs Type0)) -> (f : Term (univs Type0) -> A -> Elem (univs prop)) -> (Q_ : x_682 : Term (univs Type0) -> Sig A f -> Elem (univs prop)) -> (H_mk_Sig : pi1 : Term (univs Type0) -> A -> pi2 : Term (cic prop) -> f pi1 -> Q_ (mk_Sig A f pi1 pi2)) -> (x_682 : Term (univs Type0) -> Sig A f) -> Proof (forall (x : Elem (cic Term)) (Q_ x)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nFilter_case. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Then for all elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $x$ of $cic.Term$ of $univs.Type0$ and $A$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.mem$ applied to $A$ and $x$ and $l$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_basics_lists_list.mem$ applied to $A$ and $x$ and $matita_basics_lists_list.filter$ applied to $A$ and $p$ and $l$ and $matita_basics_lists_list.mem$ applied to $A$ and $x$ and $matita_basics_lists_list.filter$ applied to $A$ and the function that maps $x0$ to $matita_basics_bool.notb$ applied to $p$ applied to $x0$ and $l$.\nassistant\n", "label": "Axiom filter_case : forall A : cic.Univ univs.Type0, forall p : ((__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 matita_basics_bool.bool), forall l : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall x : cic.Term univs.Type0 A, forall __ : cic.Term cic.prop (matita_basics_lists_list.mem A x l), cic.Term cic.prop (matita_basics_logic.Or (matita_basics_lists_list.mem A x (matita_basics_lists_list.filter A p l)) (matita_basics_lists_list.mem A x (matita_basics_lists_list.filter A (fun x0 => matita_basics_bool.notb (p x0)) l))) .", "predict": "Axiom filter_case : forall A : univs.Type0, forall p : Term univs.Type0 -> A -> Term univs.Type0 -> matita_basics_bool.bool, forall l : Term univs.Type0 -> matita_basics_lists_list.list A, forall x : Term univs.Type0 -> A, forall __ : Term univs.Type0 -> matita_basics_lists_list.mem A x l, (Term univs.Type0 -> prop) (matita_basics_logic.Or (matita_basics_lists_list.mem A x) (matita_basics_lists_list.filter A p l)) (matita_basics_lists_list.mem A x) (matita_basics_lists_list.filter A (fun x0 => matita_basics_bool.notb (p x0)) l) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nLt_div_to_times. Soient $n$ et $m$ et $q$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $q$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_div_and_mod.div$ appliqué à $n$ et $q$ et $m$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.lt$ appliqué à $n$ et $matita_arithmetics_nat.times$ appliqué à $q$ et $m$.\nassistant\n", "label": "Axiom lt_div_to_times : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall q : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O q), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_div_and_mod.div n q) m), cic.Term cic.prop (matita_arithmetics_nat.lt n (matita_arithmetics_nat.times q m)) .", "predict": "Axiom lt_div_to_times : forall n : univs.Type0, forall m : nat, forall q : Term (lt (O : nat) q), forall __ : Prop, forall __1 : Prop, (lt n (times q m)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nVoid. $cic.Univ$ holds for $univs.Type0$.\nassistant\n", "label": "void : cic.Univ univs.Type0 .", "predict": "void : Proof (cic.univ Type0) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nLet_clause_1047. Soient $k$ et $n$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $p$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Soit $nil$ un élément de $cic.Term$ de $univs.Type0$ et de $B$. Soit $op$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$. Soit $lenk$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $k$. Soit $j$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $leup$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $j$. Soit $Hind$ une fonction des fonctions $__$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $i$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $j$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $p$ appliqué à $i$ et $matita_basics_bool.false$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univ", "label": "axiom let_clause_1047 (k n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (B : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 B) (op : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) (lenk : cic.Term cic.prop (matita_arithmetics_nat.le n k)) (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) (leup : cic.Term cic.prop (matita_arithmetics_nat.le n j)) (Hind : (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le n i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i j)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p i) matita_basics_bool.false)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (mat", "predict": "s.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $i$ et $matita_basics_bool.true$. Let $x$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $a$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $x' : x = a$ be a proof of the equality between $x$ and $a$ in $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $x$ and $a$. Let $x' : x = a$ be a proof of the equality between $x$ and $a$ in $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $x$ and $a$. Let $x' : x = a$ be a proof of the equality between $x$ and $a$ in $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $x$ and $a$. Let $x' : x = a$ be a proof of the equality between $x$ and $a$ in $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $x$ and $a$. Let $x' : x = a$ be a proof of the equality between $x$ and $a$ in $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $x$ and $a$. Let $x' : x = a$ be a proof of the equality between $x$ and $a$ in $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $x$ and $a$. Let $x' : x = a$ be a proof of the equality between $x$ and $a$ in $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $x$ and $a$. Let $x' : x = a$ be a proof of the equality between $x$ and $a$ in $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $x$ and $"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nAop_rect_CProp1_body. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all functions $Q_$ from elements $_x_883$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr", "label": "Axiom Aop_rect_CProp1_body : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_883 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop), forall _H_mk_Aop : ((op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))), forall x_883 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil), cic.Term cic.prop (Q_ x_883) .", "predict": "$ and $_assoc$ is true."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nLet_clause_1561. Pour tous les éléments $p$ et $m$ et $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $posn$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $p$, pour tous les éléments $gcd1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $_clearme$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.divides$ appliqué à $p$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $n$, pour tous les éléments $c$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $nm$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $p$ et $c$, pour tous les éléments $a$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $_clearme0$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $b$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $p$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $m$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$ et $matita_b", "label": "axiom let_clause_1561 (p m n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) (gcd1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (_clearme : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times m n))) (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) (nm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times m n) (matita_arithmetics_nat.times p c))) (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme0 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (λ b => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m)) (matita_basics_logic.eq (cic.lift univs.Type0 un", "predict": "asics_logic.eq$ appliqué à $b$ et $matita_arithmetics_nat.times$ appliqué à $a$ et $n$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $n$ et $matita_arithmetics_gcd.gcd$ appliqué à $m$ et $n$, il est vrai que $a$ est dans $matita_arithmetics_primes.primes$ et $b$ est dans $matita_arithmetics_primes.primes$ et $c$ est dans $matita_arithmetics_primes.primes$ et $posn$ est dans $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $p$ et $gcd1$ est dans $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $_clearme$ est dans $matita_arithmetics_primes.divides$ appliqué à $p$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $n$ et $_clearme0$ est dans $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $b$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $p$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $m$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$ et $matita_basics_logic.eq$ appliqué à $b$ et $matita_arithmetics_nat.times$ appliqué à $a$ et $n$ et $matita_arithmetics"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nDpi1__o__aop. Soit $x0$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x1$ un élément de $cic.Term$ de $univs.Type0$ et de $x0$. Alors pour toutes les fonctions $x2$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $x0$ et $x1$ à des éléments de $cic.Univ$ de $univs.Type0$, pour tous les éléments $x3$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $matita_arithmetics_bigops.ACop$ appliqué à $x0$ et $x1$ et $x2$, $cic.Term$ tient pour $univs.Type0$ et $matita_arithmetics_bigops.Aop$ appliqué à $x0$ et $x1$.\nassistant\n", "label": "dpi1__o__aop : x0 : cic.Univ univs.Type0 -> x1 : cic.Term univs.Type0 x0 -> x2 : (__ : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x0 x1) -> cic.Univ univs.Type0) -> x3 : cic.Term univs.Type0 (matita_basics_types.DPair (matita_arithmetics_bigops.ACop x0 x1) x2) -> cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x0 x1) .", "predict": "dpi1__o__aop : (x0 : Elem (univs : Univ) (Type0 : Elem (univs : Univ) (cic : Type))) -> (x1 : Elem (cic : Term) (Type0 : Elem (univs : Univ) (cic : Type))) -> Proof (forall (x2 : Elem (cic : Term) (Type0 : Elem (univs : Univ) (cic : Type))) (matita_arithmetics_bigops : ACop) (x0) (x1) (univs : Univ) (Type0 : Elem (cic : Type))) -> (forall (x3 : Elem (cic : Term) (Type0 : Elem (univs : Univ) (cic : Type))) (matita_basics_types : DPair) (matita_arithmetics_bigops : ACop) (x0) (x1) (x2) (cic : Term) (Type0 : Elem (univs : Univ) (cic : Type))) -> Proof (cic : Term) (Type0 : Elem (univs : Univ) (cic : Type))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nEq_rect_CProp4_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $_x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Alors pour toutes les fonctions $Q_$ des éléments $x_22$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $_x_23$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_22$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $_H_refl$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$, pour tous les éléments $x_22$ de $cic.Term$ de $univs.Type2$ et de $A$, pour tous les éléments $x_23$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_22$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_22$ et $x_23$.\nassistant\n", "label": "eq_rect_CProp4_body : A : cic.Univ univs.Type2 -> _x : cic.Term univs.Type2 A -> Q_ : (x_22 : cic.Term univs.Type2 A -> _x_23 : cic.Term cic.prop (matita_basics_logic.eq A _x x_22) -> cic.Univ cic.prop) -> _H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x)) -> x_22 : cic.Term univs.Type2 A -> x_23 : cic.Term cic.prop (matita_basics_logic.eq A _x x_22) -> cic.Term cic.prop (Q_ x_22 x_23) .", "predict": "eq_rect_CProp4_body : (A : Elem (univs Type2)) -> (x : Elem (Term (univs Type2)) (A)) -> Proof (forall (x_22 : Term (univs Type2) (A)) -> forall (x_23 : Prop (matita_basics_logic.eq (A) x)) -> forall (H_refl : Term (univs Prop) (Q_ x)) -> Proof (matita_basics_logic.refl (A) x)) -> Proof (forall (x_22 : Term (univs Type2) (A)) -> forall (x_23 : Prop (matita_basics_logic.eq (A) x)) -> Proof (Q_ x_22 x_23))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nRange_rect_CProp4_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_929$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_range$ be a function from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$. Let $x_929$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_929$.\nassistant\n", "label": "axiom range_rect_CProp4_body (_A : cic.Univ univs.Type0) (Q_ : (_x_929 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ cic.prop) (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) (x_929 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) : cic.Term cic.prop (Q_ x_929)", "predict": "axiom range_rect_CProp4_body (A : Univ Type0) (Q_ : x : Term Type0 → range A → Prop) : ∀ x : Term Type0, (range A x → Prop) (enum : ∀ x : Term Type0, nat → Term Type0) (upto : Term Type0) (filter : ∀ x : Term Type0, nat → bool) : ∀ x : Term Type0, (range A (enum x upto) ∧ Q_ x (mk_range A (enum x upto)) ∧ filter x (upto)) → prop (Q_ x (mk_range A (enum x upto)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nMin_spec_inv_ind. Låt $x1$ och $x2$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $x3$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $x4$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_Hterm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_minimization.min_spec$ applicerat på $x1$ och $x2$ och $x3$ och $x4$. Då för alla funktioner $P$ från element $_z1890$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $_x_1080$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $x2$ och $m$ och element $_x_1079$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $matita_arithmetics_nat.plus$ applicerat på $x1$ och $x2$ och element $_x_1078$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $x3$ applicerat på $m$ och $matita_basics_bool.true$ och funktioner $_x_1077$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $x2$ och $i$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $m$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applic", "label": "Axiom min_spec_inv_ind : forall x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall x3 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall x4 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _Hterm : cic.Term cic.prop (matita_arithmetics_minimization.min_spec x1 x2 x3 x4), forall P : ((_z1890 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop), forall _H1 : ((m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_1080 : cic.Term cic.prop (matita_arithmetics_nat.le x2 m)) -> (_x_1079 : cic.Term cic.prop (matita_arithmetics_nat.lt m (matita_arithmetics_nat.plus x1 x2))) -> (_x_1078 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (x3 m) matita_basics_bool.true)) -> (_x_1077 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le x2 i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i m))", "predict": "erat på $x4$ och $P$ applicerat på $x3$ applicerat på $m$ applicerat på $_Hterm$ applicerat på $_x_1080$ applicerat sur $_x_1079$ applicerat sur $_x_1078$ applicerat sur $_x_1077$ applicerat sur $__$ applicerat sur $__1$, har $_Hterm$ den egenskap $x3$ på $_x_1080$ och $_x_1079$ och $_x_1078$ och $_x_1077$ och $__$ och $__1$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nSigma_p_dividesb1. Let $m$ and $n$ and $p$ and $k$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.prime$ applied to $p$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_arithmetics_primes.divides$ applied to $p$ and $n$, for all elements $__3$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $m$ and $k$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $m$ and $matita_arithmetics_bigops.bigop$ applied to $k$ and the function that maps $i$ to $matita_arithmetics_primes.dividesb$ applied to $matita_arithmetics_exp.exp$ applied to $p$ and $matita_arithmetics_nat.S$ applied to $i$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_exp.exp$ applied to $p$ and $m$ and $n$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.plus$ and the function that maps $i$ to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$.\nassistant\n", "label": "Axiom sigma_p_dividesb1 : forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall k : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall __1 : cic.Term cic.prop (matita_arithmetics_primes.prime p), forall __2 : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides p n)), forall __3 : cic.Term cic.prop (matita_arithmetics_nat.le m k), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_bigops.bigop k (fun i => matita_arithmetics_primes.dividesb (matita_arithmetics_exp.exp p (matita_arithmetics_nat.S i)) (matita_arithmetics_nat.times (matita_arithmetics_exp.exp p m) n)) matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_nat.plus (fun i => matita_arithmetics_nat.S matita_arithmetics_nat.O))) .", "predict": "Axiom sigma_p_dividesb1 : forall m : univs.Type0, forall n : matita_arithmetics_nat.nat, forall p : matita_basics_logic.prop, forall k : matita_basics_logic.prop, forall prime : matita_arithmetics_primes.prime, forall not_divides : matita_basics_logic.Not (matita_arithmetics_primes.divides p n), forall eq : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_bigops.bigop k (fun i => matita_arithmetics_primes.dividesb (matita_arithmetics_exp.exp p (matita_arithmetics_nat.S i)) (matita_arithmetics_exp.exp p m) n)) (matita_arithmetics_nat.nat) (matita_arithmetics_nat.O) (matita_arithmetics_nat.plus (fun i => matita_arithmetics_nat.S (matita_arithmetics_nat.O))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nEq_rect_Type1. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Let $_x$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $Q_$ be a function from elements $x_16$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $_x_17$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_16$ to elements of $cic.Univ$ of $univs.Type1$. Let $_H_refl$ be an element of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $_x$ and $matita_basics_logic.refl$ applied to $A$ and $_x$. Let $x_16$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $x_17$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_16$. Then $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_16$ and $x_17$.\nassistant\n", "label": "postulate eq_rect_Type1 : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_16 : cic.Term univs.Type2 A) -> (_x_17 : cic.Term cic.prop (matita_basics_logic.eq A _x x_16)) -> cic.Univ univs.Type1) -> (_H_refl : cic.Term univs.Type1 (Q_ _x (matita_basics_logic.refl A _x))) -> (x_16 : cic.Term univs.Type2 A) -> (x_17 : cic.Term cic.prop (matita_basics_logic.eq A _x x_16)) -> cic.Term univs.Type1 (Q_ x_16 x_17)", "predict": "postulate eq_rect_Type1 : (A : Univ Type2) -> (x : Term Type2 A) -> (Q : (x16 : Term Type2 A) -> (x17 : Prop (Eq A x x16)) -> Univ Type1) -> (H_refl : Term Type1 (Q x (refl A x))) -> (x16 : Term Type2 A) -> (x17 : Prop (Eq A x x16)) -> Term Type1 (Q x16 x17)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nAop_rect_CProp5. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_797$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_Aop$ une fonction des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $cic", "label": "Axiom Aop_rect_CProp5 : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_797 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop), forall _H_mk_Aop : ((op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))), forall x_797 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil), cic.Term cic.prop (Q_ x_797) .", "predict": ".prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ et $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $b$ et $c$ et $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $b$ et $c$ et $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $b$ et $c$ et $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nMin_exists. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soient $t$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $m$ et $t$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $m$ et $matita_basics_bool.true$, pour tous les éléments $k$ et $b$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $b$ et $m$, pour toutes les fonctions $__3$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__3$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $b$ et $i$ et des éléments $__4$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $m$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $i$ et $matita_basics_bool.false$, pour tous les éléments $__4$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $t$ et $matita_arithmetics_nat.plus$ appliqué à $k$ et $b$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type", "label": "axiom min_exists (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (t m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt m t)) (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.true)) (k b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__2 : cic.Term cic.prop (matita_arithmetics_nat.le b m)) (__3 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.le b i)) -> (__4 : cic.Term cic.prop (matita_arithmetics_nat.lt i m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)) (__4 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) t (matita_arithmetics_nat.plus k b))) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.min k b f) m)", "predict": "2$ et $matita_basics_bool.bool$ et $f$ appliqué à $t$ et $matita_basics_bool.true$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nList_rect_CProp0. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_776$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $_H_nil$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_lists_list.nil$ appliqué à $_A$, pour toutes les fonctions $_H_cons$ des éléments $x_778$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $x_777$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ et des éléments $_x_780$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $x_777$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_lists_list.cons$ appliqué à $_A$ et $x_778$ et $x_777$, pour tous les éléments $x_776$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_776$.\nassistant\n", "label": "postulate list_rect_CProp0 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_776 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ cic.prop) -> (_H_nil : cic.Term cic.prop (Q_ (matita_basics_lists_list.nil _A))) -> (_H_cons : (x_778 : cic.Term univs.Type0 _A) -> (x_777 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_780 : cic.Term cic.prop (Q_ x_777)) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.cons _A x_778 x_777))) -> (x_776 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term cic.prop (Q_ x_776)", "predict": "postulate list_rect_CProp0 : (A : Univ) -> (Q : Term Type0 -> List (Term Type0) -> Prop) -> (H_nil : Term prop) -> (H_cons : (x : Term Type0) -> (a : Term Type0) -> (xs : List (Term Type0)) -> Prop) -> (x : Term Type0) -> (xs : List (Term Type0)) -> Prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nDop_inv_rect_Type1. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $x2$ de $cic.Term$ de $univs.Type0$ et de $x1$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1722$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type1$, pour toutes les fonctions $_H1$ des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $x1$ et $x2$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $prod$ appliqué à $a$ et $x2$ et $x2$ et des fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $c", "label": "postulate Dop_inv_rect_Type1 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> (P : (_z1722 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> cic.Univ univs.Type1) -> (_H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> (prod : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_null : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> (_distr : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> (_z1723 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term univs.Type1 (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term univs.Type1 (P Hterm)", "predict": "ic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $prod$ appliqué à $a$ et $b$ et $c$ et $x2$ et $x2$ et des fonctions $_pow$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $pow$ appliqué à $a$ et $b$ et $x2$ et $x2$ et des fonctions $_neg$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $neg$ appliqué à $a$ et $x2$ et $x2$ et des fonctions $_plus$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $plus$ appliqué à $a$ et $b$ et $x2$ et $x2$ et des fonctions $_minus$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nOrd_rem_eq. For all elements $n$ and $p$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.ord_rem$ applied to $n$ and $p$ and $matita_basics_types.snd$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.p_ord$ applied to $n$ and $p$.\nassistant\n", "label": "axiom ord_rem_eq (n p : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_ord.ord_rem n p) (matita_basics_types.snd matita_arithmetics_nat.nat matita_arithmetics_nat.nat (matita_arithmetics_ord.p_ord n p)))", "predict": "axiom ord_rem_eq (n p : matita_arithmetics_nat.nat) (x : cic.Term (cic.prop (univs.Type0)) (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_arithmetics_nat.nat))) : matita_arithmetics_ord.ord_rem n p = matita_basics_types.snd (matita_arithmetics_nat.nat) (matita_arithmetics_nat.nat) (matita_arithmetics_ord.p_ord n p)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nOption_rect_CProp2. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_626$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $_H_None$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$, för alla funktioner $_H_Some$ från element $x_627$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_627$, för alla element $x_626$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_626$.\nassistant\n", "label": "postulate option_rect_CProp2 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_626 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop) -> (_H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_627 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_627))) -> (x_626 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term cic.prop (Q_ x_626)", "predict": "postulate option_rect_CProp2 : (A : univs.Type0) -> (Q : (x : Term univs.Type0) -> option A -> Prop) -> all (H_None : Term (prop (option None))) (all (H_Some : (x : Term univs.Type0) -> A -> Term (prop (option (Some x)))) (all (x : Term univs.Type0) (q : option A) -> Prop) (Q x q))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nR4. Låt $T0$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $a0$ av $cic.Term$ av $univs.Type0$ och $T0$, för alla funktioner $T1$ från element $x0$ av $cic.Term$ av $univs.Type0$ och $T0$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $x0$ till element av $cic.Univ$ av $univs.Type0$, för alla element $a1$ av $cic.Term$ av $univs.Type0$ och $T1$ applicerat på $a0$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$, för alla funktioner $T2$ från element $x0$ av $cic.Term$ av $univs.Type0$ och $T0$ och element $p0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $x0$ och element $x1$ av $cic.Term$ av $univs.Type0$ och $T1$ applicerat på $x0$ och $p0$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T1$ applicerat på $x0$ och $p0$ och $matita_basics_logic.R1$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $T1$ och $a1$ och $x0$ och $p0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$, för alla element $a2$ av $cic.Term$ av $univs.Type0$ och $T2$ applicerat på $a0$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $a1$ och $matita_b", "label": "postulate R4 : (T0 : cic.Univ univs.Type0) -> (a0 : cic.Term univs.Type0 T0) -> (T1 : (x0 : cic.Term univs.Type0 T0) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> cic.Univ univs.Type0) -> (a1 : cic.Term univs.Type0 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0))) -> (T2 : (x0 : cic.Term univs.Type0 T0) -> (p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> (x1 : cic.Term univs.Type0 (T1 x0 p0)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T1 x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 T0) a0 T1 a1 x0 p0) x1)) -> cic.Univ univs.Type0) -> (a2 : cic.Term univs.Type0 (T2 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0) a", "predict": "asics_logic.R2$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $T1$ och $a1$ och $x0$ och $p0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$, för alla element $a3$ av $cic.Term$ av $univs.Type0$ och $T3$ applicerat på $a0$ och $a1$ och $a2$ och $matita_basics_logic.R3$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $T1$ och $a1$ och $T2$ applicerat på $a0$ och $a1$ och $x0$ och $p0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$, för alla element $a4$ av $cic.Term$ av $univs.Type0$ och $T4$ applicerat på $a0$ och $a1$ och $a2$ och $a3$ och $matita_basics_logic.R4$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $T1$ och $a1$ och $T2$ applicerat på $a0$ och $a1$ och $T3$ applicerat på $a0$ och $a1$ och $a2$ och $x0$ och $p0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$.\n\npostulate r4 : (T0 : univs.Type0) -> all (a0 : Term univs.Type0) (T0) -> all (T1 : (x0 : Term univs.Type0) -> T0) (a0) -> all (x0 : Term univs.Type0) (T1 a0) -> all (p0 : Prop) (eq (lift univs.Type0 un"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nSum_inv_rect_Type3. Låt $x1$ och $x2$ vara element av $cic.Univ$ av $univs.Type0$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z984$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type3$. Låt $_H1$ vara en funktion från element $x_537$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_z985$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.inl$ applicerat på $x1$ och $x2$ och $x_537$ till element av $cic.Term$ av $univs.Type3$ och $P$ applicerat på $matita_basics_types.inl$ applicerat på $x1$ och $x2$ och $x_537$. Då för alla funktioner $_H2$ från element $x_538$ av $cic.Term$ av $univs.Type0$ och $x2$ och element $_z985$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.inr$ applicerat på $x1$ och $x2$ och $x_538$ till element av $cic.Term$ av $univs.Type3$ och $P$ applicerat på $matita_basics_types.inr$ applicerat på $x1$ och $x2$ och $x_538$, håller $cic.Term$ för $univs.Type3$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "postulate Sum_inv_rect_Type3 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> (P : (_z984 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> cic.Univ univs.Type3) -> (_H1 : (x_537 : cic.Term univs.Type0 x1) -> (_z985 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inl x1 x2 x_537))) -> cic.Term univs.Type3 (P (matita_basics_types.inl x1 x2 x_537))) -> (_H2 : (x_538 : cic.Term univs.Type0 x2) -> (_z985 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inr x1 x2 x_538))) -> cic.Term univs.Type3 (P (matita_basics_types.inr x1 x2 x_538))) -> cic.Term univs.Type3 (P Hterm)", "predict": "postulate sum_inv_rect_Type3 : (x1 : univs.Type0) -> (x2 : univs.Type0) -> Hterm : matita_basics_types.Sum x1 x2 -> (P : (z984 : cic.Term univs.Type0) -> matita_basics_types.Sum x1 x2 -> cic.Univ univs.Type3) -> (x537 : cic.Term univs.Type0) -> Eq (cic.lift univs.Type0 univs.Type2) (matita_basics_types.Sum x1 x2) (Hterm) (matita_basics_types.inl x1 x2) x537 -> (x537 : cic.Term univs.Type0) -> Eq (cic.lift univs.Type0 univs.Type2) (matita_basics_types.Sum x1 x2) (Hterm) (matita_basics_types.inl x1 x2) x537 -> (x538 : cic.Term univs.Type0) -> (z985 : cic.Term (cic.prop)) -> Eq (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_types.Sum x1 x2) (Hterm)) (matita_basics_types.inr x1 x2) x538 -> (x538 : cic.Term univs.Type0) -> (z985 : cic.Term (cic.prop)) -> Eq (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_types.Sum x1 x2) (Hterm)) (matita_basics_types.inr x1 x2) x538 -> cic.Term univs.Type3) (P (matita_basics_types.inl x1 x2) x537) (P (matita_basics_types.inr x1 x2) x538)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nAop_rect_CProp3. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Then for all functions $Q_$ from elements $_x_799$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_lists_list.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $", "label": "axiom Aop_rect_CProp3 (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_799 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop) (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) (x_799 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) : cic.Term cic.prop (Q_ x_799)", "predict": "x$ of $cic.Term$ of $univs.Type0$ and $A$, the proposition $Q_ x$ is equivalent to the proposition $Q_ (op x)$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nLt_4_to_fact. För alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_factorial.fact$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_factorial.fact$ applicerat på $n$ och $matita_arithmetics_factorial.fact$ applicerat på $n$.\nassistant\n", "label": "lt_4_to_fact : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) n) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_factorial.fact (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_nat.times (matita_arithmetics_nat.times (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) (matita_arithmetics_factorial.fact n)) (matita_arithmetics_factorial.fact n))) .", "predict": "lt_4_to_fact : (n : Elem (Term (univs Type0)) (nat matita_arithmetics_nat)) -> Proof (forall (__) : (Term (prop (cic)) (lt (matita_arithmetics_nat (S (S (S (O (matita_arithmetics_nat))))) (n))) (and (Leq (fact (matita_arithmetics_factorial)) (times (times (exp (matita_arithmetics_exp)) (S (S (O (matita_arithmetics_nat))))) (n)) (Leq (times (times (matita_arithmetics_nat)) (minus (times (matita_arithmetics_nat)) (times (matita_arithmetics_nat)) (O (matita_arithmetics_nat)))) (n)) (Leq (fact (matita_arithmetics_factorial)) (n)) (fact (n)))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nDivides_mod_to_divides. För alla element $p$ och $m$ och $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $p$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $p$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $p$ och $m$.\nassistant\n", "label": "axiom divides_mod_to_divides (p m n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (__1 : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_div_and_mod.mod m n))) (__2 : cic.Term cic.prop (matita_arithmetics_primes.divides p n)) : cic.Term cic.prop (matita_arithmetics_primes.divides p m)", "predict": "axiom divides_mod_to_divides (p m n : Term Type0) (x : Lt (nd 0) n) (y : Divides p (mod m n)) (z : Divides p n) : Divides p m"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nAnd_rect_Type0_body. Pour tous les éléments $_A$ et $_B$ de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $Q_$ des éléments $_x_142$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $_H_conj$ des éléments $x_144$ de $cic.Term$ de $cic.prop$ et de $_A$ et des éléments $x_143$ de $cic.Term$ de $cic.prop$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_logic.conj$ appliqué à $_A$ et $_B$ et $x_144$ et $x_143$, pour tous les éléments $x_142$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_142$.\nassistant\n", "label": "postulate And_rect_Type0_body : (_A : cic.Univ cic.prop) -> (_B : cic.Univ cic.prop) -> (Q_ : (_x_142 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ univs.Type0) -> (_H_conj : (x_144 : cic.Term cic.prop _A) -> (x_143 : cic.Term cic.prop _B) -> cic.Term univs.Type0 (Q_ (matita_basics_logic.conj _A _B x_144 x_143))) -> (x_142 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Term univs.Type0 (Q_ x_142)", "predict": "postulate and_rect_Type0_body : (A : Univ) -> (B : Univ) -> (Q_ : (x_142 : Term prop) -> and A B) -> (x_144 : Term prop) -> (x_143 : Term prop) -> (H_conj : and A B) -> (x_144 , x_143) -> (x_142 : Term prop) -> Term (univs Type0) -> Q_ x_142"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nAop_rect_Type4. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_783$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type4$. Let $_H_mk_Aop$ be a function from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $matita_basics_lists_list.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$.", "label": "Aop_rect_Type4 : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_783 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil) -> cic.Univ univs.Type4) -> _H_mk_Aop : (op : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _nill : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> _nilr : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> _assoc : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type4 (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> x_783 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil) -> cic.Term univs.Type4 (Q_ x_783) .", "predict": " Then, $Q_$ is a function from elements $_x_783$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type4$ and $Q_$ is a function from elements $_x_783$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type4$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nDPair_inv_rect_Type1. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x2$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$. Soit $P$ une fonction des éléments $_z1128$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type1$. Alors pour toutes les fonctions $_H1$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $x2$ appliqué à $dpi1$ et des éléments $_z1129$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$ à des éléments de $cic.Term$ de $univs.Type1$ et de $P$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$, $cic.Term$ tient pour $univs.Type1$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "Axiom DPair_inv_rect_Type1 : forall x1 : cic.Univ univs.Type0, forall x2 : ((__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0), forall Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2), forall P : ((_z1128 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ univs.Type1), forall _H1 : ((dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1129 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type1 (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))), cic.Term univs.Type1 (P Hterm) .", "predict": "Axiom dpair_inv_rect_Type1 : forall x1 : Univ Type0, forall x2 : (Term Type0 -> Univ Type0), forall Hterm : DPair x1 x2, forall P : (Term Type0 -> DPair x1 x2 -> Univ Type1), forall dpi1 : Term Type0, forall dpi2 : Term Type0, forall z1128 : Prop, forall z1129 : Eq (lift Type0 Type2) (DPair x1 x2) Hterm, P (DPair x1 x2) dpi1 dpi2 z1128 z1129, P (DPair x1 x2) dpi1 dpi2."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nDop_inv_rect_CProp1. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z1752$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$. Låt $_H1$ vara en funktion från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $prod$ applicerat på $a$ och $x2$ och $x2$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $c$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $", "label": "Dop_inv_rect_CProp1 : x1 : cic.Univ univs.Type0 -> x2 : cic.Term univs.Type0 x1 -> Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2) -> P : (_z1752 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2) -> cic.Univ cic.prop) -> _H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2) -> prod : (__ : cic.Term univs.Type0 x1 -> __1 : cic.Term univs.Type0 x1 -> cic.Term univs.Type0 x1) -> _null : (a : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> _distr : (a : cic.Term univs.Type0 x1 -> b : cic.Term univs.Type0 x1 -> c : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> _z1753 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr)) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term cic.prop (P Hterm) .", "predict": "univs.Type2$ och $x1$ och $distr$ applicerat på $a$ och $b$ och $c$) : Prop ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nProd_discr. För alla element $a1$ och $a2$ av $cic.Univ$ av $univs.Type0$, för alla element $x$ och $y$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $a1$ och $a2$, för alla element $_e$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $a1$ och $a2$ och $x$ och $y$, håller $cic.Term$ för $univs.Type2$ och $matita_basics_types.match_Prod$ applicerat på $a1$ och $a2$ och $cic.succ$ applicerat på $univs.Type2$ och funktionen som avbildar $__$ som $cic.univ$ applicerat på $univs.Type2$ och funktionen som avbildar $t0$ och $t1$ som $matita_basics_types.match_Prod$ applicerat på $a1$ och $a2$ och $cic.succ$ applicerat på $univs.Type2$ och funktionen som avbildar $__$ som $cic.univ$ applicerat på $univs.Type2$ och funktionen som avbildar $u0$ och $u1$ som $cic.prod$ applicerat på $cic.succ$ applicerat på $univs.Type1$ och $univs.Type1$ och $cic.univ$ applicerat på $univs.Type1$ och funktionen som avbildar $P$ som $cic.prod$ applicerat på $univs.Type1$ och $univs.Type1$ och $cic.prod$ applicerat på $cic.prop$ och $univs.Type1$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $a1$ och $matita_basics_logic.R0$ applicerat på $a1$ och $t0$ och $u0$ och funktionen som avbildar $e0$ som $cic.prod$ applicerat på $cic.prop$ och $univs.Type1$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $un", "label": "axiom Prod_discr (a1 a2 : cic.Univ univs.Type0) (x y : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2)) (_e : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod a1 a2)) x y)) : cic.Term univs.Type2 (matita_basics_types.match_Prod a1 a2 (cic.succ univs.Type2) (λ __ => cic.univ univs.Type2) (λ t0 => λ t1 => matita_basics_types.match_Prod a1 a2 (cic.succ univs.Type2) (λ __ => cic.univ univs.Type2) (λ u0 => λ u1 => cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (λ P => cic.prod univs.Type1 univs.Type1 (cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) u0) (λ e0 => cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((λ x0 => λ p0 => a2) u0 e0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 a1) t0 (λ x0 => λ p0 => a2) t1 u0 e0) u1) (λ _e1 => P))) (λ _z45 => P))) y) x)", "predict": "ivs.Type2$ och $a2$ och $matita_basics_logic.R0$ applicerat på $a2$ och $t1$ och $u1$ undantag $e1$ som $cic.univ$ applicerat på $univs.Type2$ undantag $e2$ som $cic.univ$ applicerat på $univs.Type2$ undantag $e3$ som $cic.univ$ applicerat på $univs.Type2$ undantag $e4$ som $cic.univ$ applicerat på $univs.Type2$ undantag $e5$ som $cic.univ$ applicerat på $univs.Type2$ undantag $e6$ som $cic.univ$ applicerat på $univs.Type2$ undantag $e7$ som $cic.univ$ applicerat på $univs.Type2$ undantag $e8$ som $cic.univ$ applicerat på $univs.Type2$ undantag $e9$ som $cic.univ$ applicerat på $univs.Type2$ undantag $e10$ som $cic.univ$ applicerat på $univs.Type2$ undantag $e11$ som $cic.univ$ applicerat på $univs.Type2$ undantag $e12$ som $cic.univ$ applicerat på $univs.Type2$ undantag $e13$ som $cic.univ$ applicerat på $univs.Type2$ undantag $e14$ som $cic.univ$ applicerat på $univs.Type2$ undantag $e15$ som $cic.univ$ applicerat på $univs.Type2$ undantag $e16$ som $cic.univ$ applicerat på $univs.Type2$ undantag $e17$ som $cic.univ$ applicerat på $univs.Type2$ undantag $e18$ som $cic.univ$ applicerat på $univs.Type2$ undantag $e19$ som $cic.univ$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nDiscr_plus_xy_minus_xz. För alla element $x$ och $z$ och $y$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.plus$ applicerat på $x$ och $y$ och $matita_arithmetics_nat.minus$ applicerat på $x$ och $z$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $y$ och $matita_arithmetics_nat.O$.\nassistant\n", "label": "postulate discr_plus_xy_minus_xz : (x : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (z : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (y : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.plus x y) (matita_arithmetics_nat.minus x z))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) y matita_arithmetics_nat.O)", "predict": "postulate discr_plus_xy_minus_xz : (x : univ.Type0) -> (z : univ.Type0) -> (y : matita_arithmetics_nat.nat) -> all (prop (eq (plus x y) (minus x z))) (matita_basics_logic.eq (lift univ.Type0 univ.Type2 matita_arithmetics_nat.nat) y matita_arithmetics_nat.O)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nM. For all elements $_m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_nat.nat$.\nassistant\n", "label": "axiom M (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term univs.Type0 matita_arithmetics_nat.nat", "predict": "axiom m : ∀ m : cic.Term, ∀ n : matita_arithmetics_nat.nat, cic.Term (univs.Type0) (matita_arithmetics_nat.nat)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nExists_add. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $P$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $l1$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$. Soit $x$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $l2$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.Exists$ appliqué à $A$ et $P$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l1$ et $l2$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_lists_list.Exists$ appliqué à $A$ et $P$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l1$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $x$ et $l2$.\nassistant\n", "label": "axiom Exists_add (A : cic.Univ univs.Type0) (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) (x : cic.Term univs.Type0 A) (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) (__ : cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 l2))) : cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 (matita_basics_lists_list.cons A x l2)))", "predict": "axiom exists_add (A : Univ Type0) (P : Term A → Prop) (l1 : Term (list A)) (x : Term A) (l2 : Term (list A)) : ∀ p : Term (exists A P) → ∀ l : Term (append A l1 l2), Term (prop) (exists A P) (append A l1 l2) (cons A x l2)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nList_divides_true. Soit $l$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $matita_arithmetics_nat.nat$. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_chebyshev_bertrand256.list_divides$ appliqué à $l$ et $n$ et $matita_basics_bool.true$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $p$ à $matita_basics_logic.And$ appliqué à $matita_basics_lists_list.mem$ appliqué à $matita_arithmetics_nat.nat$ et $p$ et $l$ et $matita_arithmetics_primes.divides$ appliqué à $p$ et $n$.\nassistant\n", "label": "list_divides_true : l : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat) -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_chebyshev_bertrand256.list_divides l n) matita_basics_bool.true) -> cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (p : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_basics_logic.And (matita_basics_lists_list.mem matita_arithmetics_nat.nat p l) (matita_arithmetics_primes.divides p n))) .", "predict": "list_divides_true : (l : Elem (Term (Type0)) (List (nat))) -> (n : Elem (Term (Type0)) (nat)) -> (p : Elem (Term (Type0)) (bool)) -> Proof (Eq (and (lift (Type0) (Type2)) (bool)) (and (mem (nat) p) (divides (primes) p n))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nSplit_eq. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $matita_basics_lists_list.length$ applied to $A$ and $l$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $l$ and $matita_basics_lists_list.append$ applied to $A$ and $matita_basics_types.fst$ applied to $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.split$ applied to $A$ and $l$ and $n$ and $matita_basics_types.snd$ applied to $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.split$ applied to $A$ and $l$ and $n$.\nassistant\n", "label": "split_eq : A : cic.Univ univs.Type0 -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> l : cic.Term univs.Type0 (matita_basics_lists_list.list A) -> __ : cic.Term cic.prop (matita_arithmetics_nat.le n (matita_basics_lists_list.length A l)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l (matita_basics_lists_list.append A (matita_basics_types.fst (matita_basics_lists_list.list A) (matita_basics_lists_list.list A) (matita_basics_lists_list.split A l n)) (matita_basics_types.snd (matita_basics_lists_list.list A) (matita_basics_lists_list.list A) (matita_basics_lists_list.split A l n)))) .", "predict": "split_eq : (A : Elem (Univ (Type0))) -> (n : Elem (Term (Type0) (nat))) -> (l : Elem (Term (Type0) (List (A))) -> Prop) -> Proof (matita_arithmetics_nat.le n (length A l)) -> Proof (Term (prop) (matita_basics_logic.eq (lift (Type0) (Type2)) (List A l) (append A (fst (List A) (List A)) (split A l n) (snd (List A) (List A)) (split A l n)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nLet_clause_1575. Låt $m$ och $n$ och $a$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $posm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Låt $pnm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $c$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat", "label": "postulate let_clause_1575 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus", "predict": ".S$ applicerat på $matita_arithmetics_nat.O$.\n\npostulate let_clause_1575 : (m : Type0) -> (n : Nat) -> (a : Type0) -> (b : Nat) -> (posn : Lt Nat 0 n) -> (posm : Lt Nat 0 m) -> (pnm : Eq (lift Type0 Type2 Nat (gcd n m)) (S 0)) -> (c : Nat) -> (clearme : Prop) -> (d : Nat) -> Or (Eq (lift Type0 Type2 Nat c) (minus (times c n) (times d m))) (Eq (lift Type0 Type2 Nat c) (minus (times d m) (times c n))))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nLt_max_to_false. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $n$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_minimization.max$ applied to $n$ and $f$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $m$ and $matita_basics_bool.false$.\nassistant\n", "label": "lt_max_to_false : f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt m n) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_minimization.max n f) m) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.false) .", "predict": "lt_max_to_false : (f : Elem (Term (Type0)) (Nat)) -> (n : Elem (Term (Type0)) (Nat)) -> (m : Elem (Term (Type0)) (Nat)) -> Proof (Lt (m) (n)) -> Proof (Lt (max n (f m)) m) -> Proof (Eq (lift (Type0) (Type2)) (bool) (f m)) -> Proof (Eq (bool) (false)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nRelation. Låt $__$ vara ett element av $cic.Univ$ av $univs.Type0$. Då håller $cic.Univ$ för $univs.Type0$.\nassistant\n", "label": "Axiom relation : forall __ : cic.Univ univs.Type0, cic.Univ univs.Type0 .", "predict": "Axiom : forall u : univs.Type0, cic.Univ u ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nVoid_rect_CProp3. Pour toutes les fonctions $Q_$ des éléments $_x_491$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.void$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $x_491$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.void$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_491$.\nassistant\n", "label": "postulate void_rect_CProp3 : (Q_ : (_x_491 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ cic.prop) -> (x_491 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Term cic.prop (Q_ x_491)", "predict": "postulate void_rect_CProp3 : (Q : void -> Univ) -> (x : Term Type0) -> prop (Q x)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nMk_Prod. Låt $A$ och $B$ vara element av $cic.Univ$ av $univs.Type0$. Låt $_fst$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Då för alla element $_snd$ av $cic.Term$ av $univs.Type0$ och $B$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$.\nassistant\n", "label": "mk_Prod : A : cic.Univ univs.Type0 -> B : cic.Univ univs.Type0 -> _fst : cic.Term univs.Type0 A -> _snd : cic.Term univs.Type0 B -> cic.Term univs.Type0 (matita_basics_types.Prod A B) .", "predict": "mk_prod : (A : Elem (univs Type0)) -> (B : Elem (univs Type0)) -> Proof (forall (fst : Elem (univs Type0)) (snd : Elem (univs Type0)), Prod A B) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nDivides_pi_p_M1. Soient $m$ et $i$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $i$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $m$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_primes.divides$ appliqué à $matita_arithmetics_bigops.bigop$ appliqué à $i$ et la fonction qui envoie $p$ à $matita_basics_bool.andb$ appliqué à $matita_arithmetics_nat.leb$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $m$ et $p$ et $matita_arithmetics_primes.primeb$ appliqué à $p$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ et la fonction qui envoie $p$ à $p$ et $matita_arithmetics_binomial.M$ appliqué à $m$.\nassistant\n", "label": "postulate divides_pi_p_M1 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le i (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) m))))) -> cic.Term cic.prop (matita_arithmetics_primes.divides (matita_arithmetics_bigops.bigop i (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_bool.andb (matita_arithmetics_nat.leb (matita_arithmetics_nat.S (matita_arithmetics_nat.S m)) p) (matita_arithmetics_primes.primeb p)) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p)) (matita_arithmetics_binomial.M m))", "predict": "postulate divides_pi_p_M1 : (m : Term Type0) -> (i : Nat) -> Prop -> Leq (bigop (plus (plus (S (S (times (S (S O)) m))) i)) (prime p) (and (Leq (S (S O)) m) (prime p) (Nat p) (times p (M m)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nEven_or_odd. Pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $a$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$.\nassistant\n", "label": "axiom even_or_odd (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (λ a => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)))))", "predict": "axiom even_or_odd (n : univs.Type0) (a : matita_arithmetics_nat.nat) : cic.prop (matita_basics_logic.ex (matita_arithmetics_nat.nat) (λ a, matita_basics_logic.or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_nat.nat)) a) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_nat.nat)) n) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_nat.nat)) n (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nNot_rect_Type0. Låt $_A$ vara ett element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_97$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type0$. Låt $_H_nmk$ vara en funktion från funktioner $x_98$ från element $__$ av $cic.Term$ av $cic.prop$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_basics_logic.nmk$ applicerat på $_A$ och $x_98$. Låt $x_97$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$. Då håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_97$.\nassistant\n", "label": "Not_rect_Type0 : _A : cic.Univ cic.prop -> Q_ : (_x_97 : cic.Term cic.prop (matita_basics_logic.Not _A) -> cic.Univ univs.Type0) -> _H_nmk : (x_98 : (__ : cic.Term cic.prop _A -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term univs.Type0 (Q_ (matita_basics_logic.nmk _A x_98))) -> x_97 : cic.Term cic.prop (matita_basics_logic.Not _A) -> cic.Term univs.Type0 (Q_ x_97) .", "predict": "not_rect_Type0 : (A : Elem (univ (prop))) -> (Q_ : (x_97 : Term prop) -> Not A) -> (H_nmk : (x_98 : (x : Elem (Term prop)) -> A) -> False) -> (Q_ (nmk A x_98)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nACop_discr. Soit $a1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $a2$ un élément de $cic.Term$ de $univs.Type0$ et de $a1$. Alors pour tous les éléments $x$ et $y$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $a1$ et $a2$, pour tous les éléments $_e$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.ACop$ appliqué à $a1$ et $a2$ et $x$ et $y$, $cic.Term$ tient pour $univs.Type2$ et $matita_arithmetics_bigops.match_ACop$ appliqué à $a1$ et $a2$ et $cic.succ$ appliqué à $univs.Type2$ et la fonction qui envoie $__$ à $cic.univ$ appliqué à $univs.Type2$ et la fonction qui envoie $t0$ et $t1$ à $matita_arithmetics_bigops.match_ACop$ appliqué à $a1$ et $a2$ et $cic.succ$ appliqué à $univs.Type2$ et la fonction qui envoie $__$ à $cic.univ$ appliqué à $univs.Type2$ et la fonction qui envoie $u0$ et $u1$ à $cic.prod$ appliqué à $cic.succ$ appliqué à $univs.Type1$ et $univs.Type1$ et $cic.univ$ appliqué à $univs.Type1$ et la fonction qui envoie $P$ à $cic.prod$ appliqué à $univs.Type1$ et $univs.Type1$ et $cic.prod$ appliqué à $cic.prop$ et $univs.Type1$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.Aop$ appliqué à $a1$ et $a2$ et $matita_basics_logic.R0$ appliqué à $matita_arithmetics_bigops.Aop$ appliqué à $a1$ et $a2$ et $t0$ et $u0$ et la fonction qui envoie $e0$ à $cic.prod$ appliqué à $cic.prop$ et $univs.Type1$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $cic.prop$ et $univs.Type2", "label": "axiom ACop_discr (a1 : cic.Univ univs.Type0) (a2 : cic.Term univs.Type0 a1) (x y : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2)) (_e : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) x y)) : cic.Term univs.Type2 (matita_arithmetics_bigops.match_ACop a1 a2 (cic.succ univs.Type2) (λ __ => cic.univ univs.Type2) (λ t0 => λ t1 => matita_arithmetics_bigops.match_ACop a1 a2 (cic.succ univs.Type2) (λ __ => cic.univ univs.Type2) (λ u0 => λ u1 => cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (λ P => cic.prod univs.Type1 univs.Type1 (cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.Aop a1 a2) t0) u0) (λ e0 => cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (c", "predict": "$ et $matita_arithmetics_bigops.Aop$ appliqué à $a1$ et $a2$ et $t1$ et $u1$ et la fonction qui envoie $e1$ à $cic.prod$ appliqué à $cic.prop$ et $univs.Type1$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $cic.prop$ et $univs.Type2$ et $matita_arithmetics_bigops.Aop$ appliqué à $a1$ et $a2$ et $x$ et $y$ et la fonction qui envoie $e$ à $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.Aop$ appliqué à $a1$ et $a2$ et $cic.succ$ appliqué à $univs.Type2$ et la fonction qui envoie $__$ à $cic.univ$ appliqué à $univs.Type2$ et la fonction qui envoie $t0$ et $t1$ à $matita_arithmetics_bigops.Aop$ appliqué à $a1$ et $a2$ et $cic.succ$ appliqué à $univs.Type2$ et la fonction qui envoie $__$ à $cic.univ$ appliqué à $univs.Type2$ et la fonction qui envoie $u0$ et $u1$ à $cic.prod$ appliqué à $cic.succ$ appliqué à $univs.Type1$ et $univs.Type1$ et $cic.univ$ appliqué à $univs.Type1$ et la fonction qui envoie $P$ à $cic.prod$ appliqué à $univs.Type1$ et $univs.Type1$ et $cic.prod$ appliqué à $cic.prop$ et $univs.Type1$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $cic.prop$ et $univs.Type2$ et $matita_arithmetics_bigops.Aop$ appliqué à $a1$ et $a2$ et $t0$ et"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nSame_bigop. Låt $k$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $p1$ och $p2$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Låt $op$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $B$. Låt $f$ och $g$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_bigops.sameF_upto$ applicerat på $k$ och $matita_basics_bool.bool$ och $p1$ och $p2$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_bigops.sameF_p$ applicerat på $k$ och $p1$ och $B$ och $f$ och $g$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $matita_arithmetics_bigops.bigop$ applicerat på $k$ och funktionen som avbildar $i$ som $p1$ applicerat på $i$ och $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $matita_arithmetics_bigops.bigop$ applicerat på $k$ och funktionen som avbildar $i$ som $p2$ applicerat på $i$ och $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $g$ applicerat på $i$.\nassistant\n", "label": "axiom same_bigop (k : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p1 p2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (B : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 B) (op : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) (f g : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) (__ : cic.Term cic.prop (matita_arithmetics_bigops.sameF_upto k matita_basics_bool.bool p1 p2)) (__1 : cic.Term cic.prop (matita_arithmetics_bigops.sameF_p k p1 B f g)) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop k (λ i => p1 i) B nil op (λ i => f i)) (matita_arithmetics_bigops.bigop k (λ i => p2 i) B nil op (λ i => g i)))", "predict": "axiom same_bigop (k : Term Type0) (p1 p2 : nat → Term Type0) (B : Unv Type0) (nil : Term Type0 B) (op : Term (Term Type0 B) (Term Type0 B) → Term Type0 B) (f g : nat → Term Type0) : prop (sameF_upto k bool p1 p2) → ∀ i : prop (sameF_p k p1 B f g), eq (lift Type0 Type2 B) (bigop k (λ i, p1 i) nil op (λ i, f i) (bigop k (λ i, p2 i) nil op (λ i, g i)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nLet_clause_1686. Pour tous les éléments $n$ et $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour toutes les fonctions $Hind$ des éléments $p$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $p$ et $m$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $p$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ appliqué à $p$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.pred$ appliqué à $p$ et $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $p$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $a$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $_clearme$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type", "label": "postulate let_clause_1686 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hind : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt p m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_chebyshev_psi.Psi p) (matita_arithmetics_nat.times (matita_arithmetics_nat.pred p) (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) p) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)) (matita_basics_logic.eq (c", "predict": "0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $p$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$, la propriété $P$ de $cic.Term$ de $cic.prop$ est vraie.\n\npostulate let_clause_1686 : (n : cic.Term univs.Type0) -> (m : matita_arithmetics_nat.nat) -> (Hind : (p : cic.Term univs.Type0) -> (m : matita_arithmetics_nat.nat) -> __) -> (x : cic.Term prop) -> (y : matita_arithmetics_nat.lt p m) -> (z : matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.O p)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O p))) -> (w : matita_arithmetics_nat.le (matita_arithmetics_chebyshev_chebyshev_psi.Psi p m) (matita_arithmetics_nat.times (matita_arithmetics_nat.pred p) (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) p))))) -> (a : cic.Term univs.Type0) -> (clearme : cic.Term prop) -> (x : matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_nat.nat)) m) -> (y : matita_basics_logic"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nNot_found_min_spec. For all elements $n$ and $b$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all functions $__$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $b$ and $i$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $matita_arithmetics_nat.plus$ applied to $n$ and $b$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $i$ and $matita_basics_bool.false$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_minimization.min_spec$ applied to $n$ and $b$ and $f$ and $matita_arithmetics_nat.plus$ applied to $n$ and $b$.\nassistant\n", "label": "Axiom not_found_min_spec : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall __ : ((i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le b i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_nat.plus n b))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)), cic.Term cic.prop (matita_arithmetics_minimization.min_spec n b f (matita_arithmetics_nat.plus n b)) .", "predict": "Axiom not_found_min_spec : forall n : univs.Type0, forall b : matita_arithmetics_nat.nat, forall f : (n : univs.Type0) -> (b : matita_arithmetics_nat.nat) -> (f : univs.Type0 -> matita_basics_bool.bool), forall i : univs.Type0, forall c : matita_arithmetics_nat.nat, forall d : c : matita_arithmetics_nat.le b c, forall e : c : matita_arithmetics_nat.lt i c, forall f : (i : univs.Type0) -> (c : matita_arithmetics_nat.nat) -> (d : matita_arithmetics_nat.le b c) -> (e : matita_arithmetics_nat.lt i c) -> (f : (i : univs.Type0) -> (c : matita_arithmetics_nat.nat) -> (d : matita_arithmetics_nat.le b c) -> (e : matita_arithmetics_nat.lt i c) -> (f : (i : univs.Type0) -> (c : matita_arithmetics_nat.nat) -> (d : matita_arithmetics_nat.le b c) -> (e : matita_arithmetics_nat.lt i c) -> (f : (i : univs.Type0) -> (c : matita_arithmetics_nat.nat) -> (d : matita_arithmetics_nat.le b c) -> (e : matita_arithmetics_nat.lt i c) -> (f : (i : univs.Type0) -> (c : matita_arithmetics_nat.nat) -> (d : matita_arithmetics_nat.le b c) -> (e : matita_arithmetics_nat.lt i c) -> (f : (i : univs.Type0) -> (c : matita_arithmetics_nat.nat) -> (d : matita_arithmetics_nat.le b c) -> (e : matita_arithmetics_nat.lt i c) -> (f : (i : univs.Type0) -> (c : matita_arithmetics_nat.nat) -> (d : matita_arithmetics_nat.le b c) -> (e : matita_arithmetics_nat.lt i c) -> (f : (i : univs.Type0)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nEq_rect_Type2_r. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type2$. Låt $a$ vara ett element av $cic.Term$ av $univs.Type2$ och $A$. Då för alla funktioner $P$ från element $x$ av $cic.Term$ av $univs.Type2$ och $A$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $x$ och $a$ till element av $cic.Univ$ av $univs.Type2$, för alla element $__$ av $cic.Term$ av $univs.Type2$ och $P$ applicerat på $a$ och $matita_basics_logic.refl$ applicerat på $A$ och $a$, för alla element $x$ av $cic.Term$ av $univs.Type2$ och $A$, för alla element $p$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $x$ och $a$, håller $cic.Term$ för $univs.Type2$ och $P$ applicerat på $x$ och $p$.\nassistant\n", "label": "eq_rect_Type2_r : A : cic.Univ univs.Type2 -> a : cic.Term univs.Type2 A -> P : (x : cic.Term univs.Type2 A -> __ : cic.Term cic.prop (matita_basics_logic.eq A x a) -> cic.Univ univs.Type2) -> __ : cic.Term univs.Type2 (P a (matita_basics_logic.refl A a)) -> x : cic.Term univs.Type2 A -> p : cic.Term cic.prop (matita_basics_logic.eq A x a) -> cic.Term univs.Type2 (P x p) .", "predict": "eq_rect_Type2_r : (A : univs.Type2) -> (a : cic.Term univs.Type2 A) -> Proof (forall (P : (x : cic.Term univs.Type2) -> (A : univ) -> Eq A x a) (p : Eq A a)) (forall (x : cic.Term univs.Type2) (A : univ) (p : Eq A x a), Proof (P x p)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nLe_2_fact. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_factorial.fact$ applied to $n$.\nassistant\n", "label": "le_2_fact : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_factorial.fact n)) .", "predict": "le_2_fact : (n : Elem (Term (univs Type0)) (nat matita_arithmetics)) -> Proof (forall (x : Elem (Term (prop)) (lt (S (O (nat matita_arithmetics))) n)) (forall (y : Elem (Term (prop)) (le (S (S (O (nat matita_arithmetics))) (fact n)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nFilter. Let $T$ be an element of $cic.Univ$ of $univs.Type0$. Let $_p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $T$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Then for all elements $_l$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $T$, $cic.Term$ holds for $univs.Type0$ and $matita_basics_lists_list.list$ applied to $T$.\nassistant\n", "label": "postulate filter : (T : cic.Univ univs.Type0) -> (_p : (__ : cic.Term univs.Type0 T) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (_l : cic.Term univs.Type0 (matita_basics_lists_list.list T)) -> cic.Term univs.Type0 (matita_basics_lists_list.list T)", "predict": "postulate filter : (T : univs.Type0) -> (p : (x : Term univs.Type0) -> T -> Bool) -> (l : List (Term univs.Type0) T) -> Term univs.Type0"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nSig_rect_CProp2. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $Q_$ from elements $_x_684$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Sig$ from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $_f$ applied to $pi1$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_Sig$ applied to $A$ and $_f$ and $pi1$ and $_pi2$, for all elements $x_684$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_684$.\nassistant\n", "label": "postulate Sig_rect_CProp2 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_684 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ cic.prop) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_684 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term cic.prop (Q_ x_684)", "predict": "postulate sig_rect_CProp2 : (A : univs.Type0) -> (f : Term univs.Type0 -> A -> prop) -> (Q : (x : Sig A f) -> prop) -> (H_mk_Sig : (pi1 : Term univs.Type0) -> A -> (pi2 : prop) -> f pi1 -> prop) -> (x : Sig A f) -> prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nLet_clause_1617. Låt $p$ och $m$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $p$. Då för alla element $gcd1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $n$, för alla element $c$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $nm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $p$ och $c$, för alla element $a$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $b$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $p$ och $matita_arithmetics_nat.times$ applicerat på $b$ och $m$ och $matita_arithmetics_gcd.g", "label": "let_clause_1617 : p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p) -> gcd1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) -> _clearme : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times m n)) -> c : cic.Term univs.Type0 matita_arithmetics_nat.nat -> nm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times m n) (matita_arithmetics_nat.times p c)) -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _clearme0 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (b : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p)", "predict": "cd$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $a$ och $b$ och $posn$ ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nUnit_rect_CProp3. Soit $Q_$ une fonction des éléments $_x_513$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour tous les éléments $_H_it$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.it$, pour tous les éléments $x_513$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_513$.\nassistant\n", "label": "Axiom unit_rect_CProp3 : forall Q_ : ((_x_513 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ cic.prop), forall _H_it : cic.Term cic.prop (Q_ matita_basics_types.it), forall x_513 : cic.Term univs.Type0 matita_basics_types.unit, cic.Term cic.prop (Q_ x_513) .", "predict": "Axiom unit_rect_CProp3 : forall Q : (x : univs.Type0 -> matita_basics_types.unit) -> forall H_it : cic.prop, forall x_513 : cic.Term, Q x_513 = H_it ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nExtract_pair. Låt $A$ och $B$ och $C$ och $D$ vara element av $cic.Univ$ av $univs.Type0$. Låt $u$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$. Låt $Q$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $C$ och $D$. Låt $x$ vara ett element av $cic.Term$ av $univs.Type0$ och $C$. Då för alla element $y$ av $cic.Term$ av $univs.Type0$ och $D$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $C$ och $D$ och $matita_basics_types.match_Prod$ applicerat på $A$ och $B$ och $univs.Type0$ och funktionen som avbildar $__$ som $matita_basics_types.Prod$ applicerat på $C$ och $D$ och funktionen som avbildar $a$ och $b$ som $Q$ applicerat på $a$ och $b$ och $u$ och $matita_basics_types.mk_Prod$ applicerat på $C$ och $D$ och $x$ och $y$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.ex$ applicerat på $A$ och funktionen som avbildar $a$ som $matita_basics_logic.ex$ applicerat på $B$ och funktionen som avbildar $b$ som $matita_basics_logic.And$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$ och $matita_basics_types.mk_Pro", "label": "postulate extract_pair : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (C : cic.Univ univs.Type0) -> (D : cic.Univ univs.Type0) -> (u : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> (Q : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 (matita_basics_types.Prod C D)) -> (x : cic.Term univs.Type0 C) -> (y : cic.Term univs.Type0 D) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod C D)) (matita_basics_types.match_Prod A B univs.Type0 (\\ __ : cic.Term univs.Type0 (matita_basics_types.Prod A B) -> matita_basics_types.Prod C D) (\\ a : cic.Term univs.Type0 A -> \\ b : cic.Term univs.Type0 B -> Q a b) u) (matita_basics_types.mk_Prod C D x y))) -> cic.Term cic.prop (matita_basics_logic.ex A (\\ a : cic.Term univs.Type0 A -> matita_basics_logic.ex B (\\ b : cic.Term univs.Type0 B -> matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B)) (matita_basics_types.mk_Prod A B a b) u) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod C D)) (Q a b) (matita_basics_types.mk_Prod C D x y)))))", "predict": "d$ applicerat på $C$ och $D$ och $x$ och $y$ och $Q$ applicerat på $x$ och $y$ och $u$ och $matita_basics_types.mk_Prod$ applicerat på $C$ och $D$ och $x$ och $y$ och $Q$ applicerat på $x$ och $y$ och $u$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nLt_O_to_le_theta_exp_theta. Soit $m$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_chebyshev_chebyshev_theta.theta$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $m$ et $matita_arithmetics_chebyshev_chebyshev_theta.theta$ appliqué à $matita_arithmetics_nat.S$ appliqué à $m$.\nassistant\n", "label": "axiom lt_O_to_le_theta_exp_theta (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_chebyshev_chebyshev_theta.theta (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) m))) (matita_arithmetics_nat.times (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) m)) (matita_arithmetics_chebyshev_chebyshev_theta.theta (matita_arithmetics_nat.S m))))", "predict": "axiom lt_O_to_le_theta_exp_theta (m : univs.Type0) : ∀ ϕ : cic.prop, ∀ Lt_O_m : matita_arithmetics_nat.lt m 0, ϕ ∧ Lt_O_m → θ (pow (pow (pow (pow (exp (pow (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp (pow (exp ("}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nFilter_eq. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soient $_x$ et $__$ des éléments de $cic.Term$ de $univs.Type2$ et de $A$. Soit $return_sort$ un élément de $cic.Sort$. Alors pour toutes les fonctions $return_type$ des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $__$ à des éléments de $cic.Univ$ de $return_sort$, pour toutes les fonctions $return$ des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $__$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $z$, pour tous les éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $__$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.\nassistant\n", "label": "Axiom filter_eq : forall A : cic.Univ univs.Type2, forall _x : cic.Term univs.Type2 A, forall __ : cic.Term univs.Type2 A, forall return_sort : cic.Sort, forall return_type : ((z : cic.Term cic.prop (matita_basics_logic.eq A _x __)) -> cic.Univ return_sort), forall return : ((z : cic.Term cic.prop (matita_basics_logic.eq A _x __)) -> cic.Term return_sort (return_type z)), forall z : cic.Term cic.prop (matita_basics_logic.eq A _x __), cic.Term return_sort (return_type z) .", "predict": "Axiom filter_eq : forall A : univs.Type2, forall _x : cic.Term A, forall __ : cic.Term A, forall return_sort : cic.Sort, forall z : cic.Term (cic.prop (matita_basics_logic.eq A _x __)), forall return : z : cic.Term (cic.prop (matita_basics_logic.eq A _x __)), forall return_type : return_sort -> cic.Sort, forall z : cic.Term (cic.prop (matita_basics_logic.eq A _x __)), return_type (return z) = z ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nHint_declaration_CProp0. Låt $A$ vara ett element av $cic.Univ$ av $cic.prop$. Då för alla element $_a$ och $_b$ av $cic.Term$ av $cic.prop$ och $A$, håller $cic.Univ$ för $univs.Type0$.\nassistant\n", "label": "postulate hint_declaration_CProp0 : (A : cic.Univ cic.prop) -> (_a : cic.Term cic.prop A) -> (_b : cic.Term cic.prop A) -> cic.Univ univs.Type0", "predict": "postulate hint_declaration_CProp0 : (A : prop) -> (a : Term prop) -> (b : Term prop) -> Univ (univs.Type0)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nLet_clause_15622. Let $m$ and $n$ and $a$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Then for all elements $posm$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, for all elements $pnm$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $c$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $d$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $d$ of $cic.Term$ of $univs.Type0$ and $matita", "label": "Axiom let_clause_15622 : forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), forall pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)), forall c : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (fun d => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O", "predict": "_arithmetics_nat.nat$, for all elements $x$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $y$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $m$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $m$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, if $posn$ is true and $posm$ is true and $pnm$ is true and $_clearme$ is true and $x$ is true and $y$ is true and $z$ is true, then $c$ is an element of $univs.Type0$ and $d$ is an element of $cic.Term$ of $matita_arithmetics_nat.nat$ and $x$ is an element of $cic.Term$ of $cic.prop$ and $y$ is an element of $cic.Term$ of $cic.prop$ and $z$ is an element of $cic.Term$ of $cic.prop$ and $c$ is an element of $univs.Type0$ and $d$ is an element of $matita_arithmetics_nat.nat$ and $x$ is an element of $prop$ and $y$ is an"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nFilter_ex2. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_P$ and $_Q$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $return_sort$ be an element of $cic.Sort$. Let $return_type$ be a function from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex2$ applied to $A$ and $_P$ and $_Q$ to elements of $cic.Univ$ of $return_sort$. Let $return$ be a function from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex2$ applied to $A$ and $_P$ and $_Q$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $z$. Then for all elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex2$ applied to $A$ and $_P$ and $_Q$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.\nassistant\n", "label": "postulate filter_ex2 : (A : cic.Univ univs.Type0) -> (_P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (_Q : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term cic.prop (matita_basics_logic.ex2 A _P _Q)) -> cic.Univ return_sort) -> (return : (z : cic.Term cic.prop (matita_basics_logic.ex2 A _P _Q)) -> cic.Term return_sort (return_type z)) -> (z : cic.Term cic.prop (matita_basics_logic.ex2 A _P _Q)) -> cic.Term return_sort (return_type z)", "predict": "postulate filter_ex2 : (A : univs.Type0) -> (P Q : (x : Term univs.Type0) -> Univ (cic.prop)) -> (return_sort : Sort) -> (return_type : (z : prop) -> matita_basics_logic.ex2 A P Q -> Univ (return_sort)) -> (return : (z : prop) -> matita_basics_logic.ex2 A P Q -> Term (return_sort) (return_type z)) -> all (prop) (lambda (z : Term univs.Type0) (ex2 : matita_basics_logic.ex2 A P Q) -> Term return_sort (return_type z))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nDPair_inv_rect_Type0. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z1134$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type0$. Låt $_H1$ vara en funktion från element $dpi1$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_dpi2$ av $cic.Term$ av $univs.Type0$ och $x2$ applicerat på $dpi1$ och element $_z1135$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_DPair$ applicerat på $x1$ och $x2$ och $dpi1$ och $_dpi2$ till element av $cic.Term$ av $univs.Type0$ och $P$ applicerat på $matita_basics_types.mk_DPair$ applicerat på $x1$ och $x2$ och $dpi1$ och $_dpi2$. Då håller $cic.Term$ för $univs.Type0$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "axiom DPair_inv_rect_Type0 (x1 : cic.Univ univs.Type0) (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) (P : (_z1134 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ univs.Type0) (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1135 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type0 (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) : cic.Term univs.Type0 (P Hterm)", "predict": "axiom dpair_inv_rect_Type0 (x1 : Univ) (x2 : Term Univ) (Hterm : DPair x1 x2) (P : Term Univ → DPair x1 x2 → Univ) : ∀ dpi1 : Term Univ, ∀ dpi2 : Term Univ, Eq (lift Univ Type2) (DPair x1 x2) → Eq (P (mk_DPair x1 x2) (dpi1, Eq (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P (mk_DPair x1 x2) (dpi1, Eq (P ("}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nF_ind_aux. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $P$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.predicate$ applicerat på $A$. Låt $__$ vara en funktion från element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $__$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $f$ applicerat på $a$ och $n$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $a$ och element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $f$ applicerat på $a$ och $n$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $a$. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $a$ av $cic.Term$ av $univs.Type0$ och $A$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $f$ applicerat på $a$ och $n$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $a$.\nassistant\n", "label": "axiom f_ind_aux (A : cic.Univ univs.Type0) (f : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) (P : cic.Term univs.Type0 (matita_basics_relations.predicate A)) (__ : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : (a : cic.Term univs.Type0 A) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (f a) n)) -> cic.Term cic.prop (P a)) -> (a : cic.Term univs.Type0 A) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) n)) -> cic.Term cic.prop (P a)) (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (a : cic.Term univs.Type0 A) (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) n)) : cic.Term cic.prop (P a)", "predict": "axiom f_ind_aux (A : Univ Type0) (f : Term Type0 → A → Term Type0) (P : Term Type0 → Prop) (n : Nat) : ∀ a : Term Type0 → A, ∀ __1 : Prop → Eq (lift Type0 Type2 Nat) (f a n) → P a a → P a"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nNull_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $xxx$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $nil$. Alors pour tous les éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $matita_arithmetics_bigops.prod$ appliqué à $A$ et $nil$ et $xxx$ et $a$ et $nil$ et $nil$.\nassistant\n", "label": "Axiom null_body : forall A : cic.Univ univs.Type0, forall nil : cic.Term univs.Type0 A, forall xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A nil), forall a : cic.Term univs.Type0 A, cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.prod A nil xxx a nil) nil) .", "predict": "Axiom null_body : forall A : Univ, forall nil : Term Type0 A, forall xxx : Term Type0 (Dop A nil), forall a : Term Type0 A, prop (eq (lift Univ Type2 A) (prod A nil xxx a nil nil)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nLstar_inv_ind. For all elements $x1$ of $cic.Univ$ of $univs.Type0$, for all elements $x2$ of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $x1$, for all elements $x3$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $x4$ and $x5$ of $cic.Term$ of $univs.Type0$ and $x1$, for all elements $_Hterm$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x5$, for all functions $P$ from elements $_z2089$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $_z2088$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_z2087$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_z2092$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x3$ and $matita_arithmetics_nat.O$ and elements $_z2091$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $x4$ and $b$ and elements $_z2090$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $x5$ and $b$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.O$ and $b$ and $b$, for all functions $_H2$ from elements $b1$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$", "label": "Axiom lstar_inv_ind : forall x1 : cic.Univ univs.Type0, forall x2 : cic.Term univs.Type0 (matita_basics_relations.relation x1), forall x3 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall x4 : cic.Term univs.Type0 x1, forall x5 : cic.Term univs.Type0 x1, forall _Hterm : cic.Term cic.prop (matita_arithmetics_lstar.lstar x1 x2 x3 x4 x5), forall P : ((_z2089 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_z2088 : cic.Term univs.Type0 x1) -> (_z2087 : cic.Term univs.Type0 x1) -> cic.Univ cic.prop), forall _H1 : ((b : cic.Term univs.Type0 x1) -> (_z2092 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x3 matita_arithmetics_nat.O)) -> (_z2091 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) x4 b)) -> (_z2090 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) x5 b)) -> cic.Term cic.prop (P matita_arithmetics_nat.O b b)), forall _H2 : ((b1 : cic.Term univs.Type0 x1) -> (b", "predict": " of $univs.Type0$ and $x1$ and elements $_z2094$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x3$ and $matita_arithmetics_nat.O$ and elements $_z2093$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $x4$ and $b$ and elements $_z2092$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $x5$ and $b$ and elements $_z2091$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $b1$ and $b$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.O$ and $b$ and $b1$, $x1$ and $x2$ and $x3$ and $x4$ and $x5$ and $_Hterm$ and $_H1$ and $_H2$ is an element of $cic.prop$.\nAxiom lstar_inv_ind : forall x1 : univs.Type0, forall x2 : cic.Term, (cic.Univ -> matita_basics_relations.relation x1) -> forall x3 : cic.Term, forall x4 : cic.Term, forall x5 : cic.Term, forall _Hterm : matita_arithmetics_lstar.lstar x1 x2 x3 x4 x5, forall P : forall _z2089 : cic.Term -> matita_arithmetics_nat.nat -> forall _z2088 : cic.Term -> x1 -> forall _z"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nSig_inv_rect_Type2. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Univ$ of $cic.prop$. Then for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1188$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type2$, for all functions $_H1$ from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $x2$ applied to $pi1$ and elements $_z1189$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Sig$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.mk_Sig$ applied to $x1$ and $x2$ and $pi1$ and $_pi2$ to elements of $cic.Term$ of $univs.Type2$ and $P$ applied to $matita_basics_types.mk_Sig$ applied to $x1$ and $x2$ and $pi1$ and $_pi2$, $cic.Term$ holds for $univs.Type2$ and $P$ applied to $Hterm$.\nassistant\n", "label": "axiom Sig_inv_rect_Type2 (x1 : cic.Univ univs.Type0) (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ cic.prop) (Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) (P : (_z1188 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> cic.Univ univs.Type2) (_H1 : (pi1 : cic.Term univs.Type0 x1) -> (_pi2 : cic.Term cic.prop (x2 pi1)) -> (_z1189 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2)) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term univs.Type2 (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) : cic.Term univs.Type2 (P Hterm)", "predict": "axiom sig_inv_rect_Type2 (x1 : Univ Type0) (x2 : Term Type0 → x1 → Univ prop) : ∀ Hterm : Term Type0, Sig x1 x2 → ∀ P : Term Type0 → Sig x1 x2 → ∀ pi1 : Term Type0, ∀ pi2 : prop, x2 pi1 x1 → z1188 : prop, matita_basics_logic.eq (lift Type0 Type2) (Sig x1 x2) Hterm → matita_basics_types.mk_Sig x1 x2 pi1 pi2) → Term Type2 → P (matita_basics_types.mk_Sig x1 x2 pi1 pi2)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nAop_inv_rect_Type1. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Då för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1392$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type1$, för alla funktioner $_H1$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $a$ och $x2$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $c$ av", "label": "axiom Aop_inv_rect_Type1 (x1 : cic.Univ univs.Type0) (x2 : cic.Term univs.Type0 x1) (Hterm : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) (P : (_z1392 : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> cic.Univ univs.Type1) (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1393 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.Aop x1 x2)) Hterm (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type1 (P (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) : cic.Term univs.Type1 (P Hterm)", "predict": " $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ och $a$ och $b$ och $c$, har $P$ följande egenskap: om $Hterm$ är lika med $x2$, så är $P$ lika med $x1$.\n\naxiom aop_inv_rect_Type1 (x1 : univs.Type0) (x2 : term x1) : ∀ Hterm : term x1 → ∀ P : (z1392 : term x1) → (aop x1 x2) → ∀ op : (__) : term x1 → (__) : term x1 → term x1 → ∀ a : term x1 → (lift univs.Type0 univs.Type2 x1) → (eq (op x2 a) a) → ∀ _nilr : (a : term x1) → (eq (op a x2) a) → ∀ _assoc : (a : term x1) (b : term x1) (c : term x1) → (eq (op (op a b) c) (op a (op b c))) → ∀ P : (z1392 : term x1) → (aop x1 x2) → P (x2) = x1"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nPair_elim2. Låt $A$ och $B$ och $C$ och $C'$ vara element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $T$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $C$, för alla funktioner $T'$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $C'$, för alla element $p$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$, för alla funktioner $P$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $C$ och element $__2$ av $cic.Term$ av $univs.Type0$ och $C'$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $__$ från element $lft$ av $cic.Term$ av $univs.Type0$ och $A$ och element $rgt$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$ och $p$ och $matita_basics_types.mk_Prod$ applicerat på $A$ och $B$ och $lft$ och $rgt$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $A$ och $B$ och $lft$ och $rgt$ och $T$ applicerat på $lft$ och $rgt$ och $T'$ applicerat på $lft", "label": "Axiom pair_elim2 : forall A : cic.Univ univs.Type0, forall B : cic.Univ univs.Type0, forall C : cic.Univ univs.Type0, forall C' : cic.Univ univs.Type0, forall T : ((__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 C), forall T' : ((__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 C'), forall p : cic.Term univs.Type0 (matita_basics_types.Prod A B), forall P : ((__ : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> (__1 : cic.Term univs.Type0 C) -> (__2 : cic.Term univs.Type0 C') -> cic.Univ cic.prop), forall __ : ((lft : cic.Term univs.Type0 A) -> (rgt : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B)) p (matita_basics_types.mk_Prod A B lft rgt))) -> cic.Term cic.prop (P (matita_basics_types.mk_Prod A B lft rgt) (T lft rgt) (T' lft rgt))), cic.Term cic.prop (P p (matita_basics_types.match_Prod A B univs.Type0 (fun _0 => C) (fun lft => fun rgt => T lft rgt) p) (matita_basics_types.match_Prod A B univs.Type0 (fun _0 => C') (fun lft => fun rgt => T' lft rgt) p)) .", "predict": "$ och $rgt$, det är giltigt att $P$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $A$ och $B$ och $lft$ och $rgt$ och $T$ applicerat på $lft$ och $rgt$ och $T'$ applicerat på $lft$ och $rgt$ är lika med $P$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $A$ och $B$ och $lft$ och $rgt$ och $T$ applicerat på $lft$ och $rgt$ och $T'$ applicerat på $lft$ och $rgt$ ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nDop_rect_Type4. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_945$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type4$. Soit $_H_mk_Dop$ une fonction des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $_nil$ et $_nil$ et des fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $b$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ à des éléments de $cic.Term$ de $", "label": "Dop_rect_Type4 : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_945 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil) -> cic.Univ univs.Type4) -> _H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> prod : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _null : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> _distr : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> x_945 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil) -> cic.Term univs.Type4 (Q_ x_945) .", "predict": "cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $c"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nNot_divides_to_gcd_aux. Let $p$ and $m$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_arithmetics_primes.divides$ applied to $n$ and $m$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd_aux$ applied to $matita_arithmetics_nat.S$ applied to $p$ and $m$ and $n$ and $matita_arithmetics_gcd.gcd_aux$ applied to $p$ and $n$ and $matita_arithmetics_div_and_mod.mod$ applied to $m$ and $n$.\nassistant\n", "label": "Axiom not_divides_to_gcd_aux : forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall __1 : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides n m)), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S p) m n) (matita_arithmetics_gcd.gcd_aux p n (matita_arithmetics_div_and_mod.mod m n))) .", "predict": "Axiom not_divides_to_gcd_aux : forall p : univs.Type0, forall m : matita_arithmetics_nat.nat, forall n : matita_arithmetics_nat.nat, forall __ : cic.prop, forall __1 : cic.prop, matita_basics_logic.Not (matita_arithmetics_primes.divides n m) -> cic.Term (cic.prop) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S p) m n) (matita_arithmetics_gcd.gcd_aux p n) (matita_arithmetics_div_and_mod.mod m n)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nEq_f3. Let $A$ and $B$ and $C$ and $D$ be elements of $cic.Univ$ of $univs.Type2$. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type2$ and $B$ and elements $__2$ of $cic.Term$ of $univs.Type2$ and $C$ to elements of $cic.Term$ of $univs.Type2$ and $D$. Then for all elements $x1$ and $x2$ of $cic.Term$ of $univs.Type2$ and $A$, for all elements $y1$ and $y2$ of $cic.Term$ of $univs.Type2$ and $B$, for all elements $z1$ and $z2$ of $cic.Term$ of $univs.Type2$ and $C$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $x1$ and $x2$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $B$ and $y1$ and $y2$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $C$ and $z1$ and $z2$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $D$ and $f$ applied to $x1$ and $y1$ and $z1$ and $f$ applied to $x2$ and $y2$ and $z2$.\nassistant\n", "label": "Axiom eq_f3 : forall A : cic.Univ univs.Type2, forall B : cic.Univ univs.Type2, forall C : cic.Univ univs.Type2, forall D : cic.Univ univs.Type2, forall f : ((__ : cic.Term univs.Type2 A) -> (__1 : cic.Term univs.Type2 B) -> (__2 : cic.Term univs.Type2 C) -> cic.Term univs.Type2 D), forall x1 : cic.Term univs.Type2 A, forall x2 : cic.Term univs.Type2 A, forall y1 : cic.Term univs.Type2 B, forall y2 : cic.Term univs.Type2 B, forall z1 : cic.Term univs.Type2 C, forall z2 : cic.Term univs.Type2 C, forall __ : cic.Term cic.prop (matita_basics_logic.eq A x1 x2), forall __1 : cic.Term cic.prop (matita_basics_logic.eq B y1 y2), forall __2 : cic.Term cic.prop (matita_basics_logic.eq C z1 z2), cic.Term cic.prop (matita_basics_logic.eq D (f x1 y1 z1) (f x2 y2 z2)) .", "predict": "Axiom eq_f3 : forall A : univs.Type2, forall B : univs.Type2, forall C : univs.Type2, forall D : cic.Term univs.Type2, forall x1 : cic.Term univs.Type2 A, forall x2 : cic.Term univs.Type2 A, forall y1 : cic.Term univs.Type2 B, forall y2 : cic.Term univs.Type2 B, forall z1 : cic.Term univs.Type2 C, forall z2 : cic.Term univs.Type2 C, forall p : cic.Term cic.prop, forall q : matita_basics_logic.eq A x1 x2, forall r : matita_basics_logic.eq B y1 y2, forall s : matita_basics_logic.eq C z1 z2, matita_basics_logic.eq D (f x1 y1 z1) (f x2 y2 z2) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nAnd_inv_rect_Type0. Låt $x1$ och $x2$ vara element av $cic.Univ$ av $cic.prop$. Låt $Hterm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z353$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type0$. Låt $_H1$ vara en funktion från element $x_144$ av $cic.Term$ av $cic.prop$ och $x1$ och element $x_143$ av $cic.Term$ av $cic.prop$ och $x2$ och element $_z354$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_144$ och $x_143$ till element av $cic.Term$ av $univs.Type0$ och $P$ applicerat på $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_144$ och $x_143$. Då håller $cic.Term$ för $univs.Type0$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "And_inv_rect_Type0 : x1 : cic.Univ cic.prop -> x2 : cic.Univ cic.prop -> Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2) -> P : (_z353 : cic.Term cic.prop (matita_basics_logic.And x1 x2) -> cic.Univ univs.Type0) -> _H1 : (x_144 : cic.Term cic.prop x1 -> x_143 : cic.Term cic.prop x2 -> _z354 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_144 x_143)) -> cic.Term univs.Type0 (P (matita_basics_logic.conj x1 x2 x_144 x_143))) -> cic.Term univs.Type0 (P Hterm) .", "predict": "and_inv_rect_Type0 : (x1 : Elem (cic.Univ (cic.prop))) -> (x2 : Elem (cic.Univ (cic.prop))) -> (Hterm : Elem (cic.Term (cic.prop)) (and x1 x2)) -> (P : (z353 : Elem (cic.Term (cic.prop)) (and x1 x2)) -> Elem (cic.Univ (univs.Type0))) -> (x144 : Elem (cic.Term (cic.prop)) x1) -> (x143 : Elem (cic.Term (cic.prop)) x2) -> (z354 : Elem (cic.Term (cic.prop)) (eq (lift (cic.prop) (univs.Type2)) (and x1 x2))) -> (Hterm : Elem (cic.Term (cic.prop)) (and x1 x2)) -> (x144 : Elem (cic.Term (cic.prop)) x1) -> (x143 : Elem (cic.Term (cic.prop)) x2) -> (x_144 : Elem (cic.Term (univs.Type0)) (conj x1 x2)) -> (x_143 : Elem (cic.Term (univs.Type0)) (conj x1 x2)) -> (P (conj x1 x2) x_144 x_143) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nDiv_mod_spec_rect_CProp5. Låt $_n$ och $_m$ och $_q$ och $_r$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla funktioner $Q_$ från element $_x_841$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_div_mod_spec_intro$ från element $x_843$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $_r$ och $_m$ och element $x_842$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $_n$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $_q$ och $_m$ och $_r$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ och $x_843$ och $x_842$, för alla element $x_841$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_841$.\nassistant\n", "label": "div_mod_spec_rect_CProp5 : _n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _q : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _r : cic.Term univs.Type0 matita_arithmetics_nat.nat -> Q_ : (_x_841 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r) -> cic.Univ cic.prop) -> _H_div_mod_spec_intro : (x_843 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m) -> x_842 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r)) -> cic.Term cic.prop (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_843 x_842))) -> x_841 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r) -> cic.Term cic.prop (Q_ x_841) .", "predict": "div_mod_spec_rect_CProp5 : (n : Elem (Term (univs Type0))) -> (m : Elem (Term (univs Type0))) -> (q : Elem (Term (univs Type0))) -> (r : Elem (Term (univs Type0))) -> Proof (forall (Q : Prop (div_mod_spec n m q r)) (forall (H_div_mod_spec_intro : Prop (lt r m) /\\ (eq (lift (Type0 -> Type2) (nat)) (plus (times q m) r))) (forall (x_841 : Prop (div_mod_spec n m q r)) (Q (x_841)))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nExists_map. Låt $A$ och $B$ vara element av $cic.Univ$ av $univs.Type0$. Låt $P$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $Q$ från element $__$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $B$, för alla element $l$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.Exists$ applicerat på $A$ och $P$ och $l$, för alla funktioner $__1$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $cic.prop$ och $P$ applicerat på $a$ till element av $cic.Term$ av $cic.prop$ och $Q$ applicerat på $f$ applicerat på $a$, håller $cic.Term$ för $cic.prop$ och $matita_basics_lists_list.Exists$ applicerat på $B$ och $Q$ och $matita_basics_lists_list.map$ applicerat på $A$ och $B$ och $f$ och $l$.\nassistant\n", "label": "axiom Exists_map (A B : cic.Univ univs.Type0) (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) (Q : (__ : cic.Term univs.Type0 B) -> cic.Univ cic.prop) (f : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) (__ : cic.Term cic.prop (matita_basics_lists_list.Exists A P l)) (__1 : (a : cic.Term univs.Type0 A) -> (__1 : cic.Term cic.prop (P a)) -> cic.Term cic.prop (Q (f a))) : cic.Term cic.prop (matita_basics_lists_list.Exists B Q (matita_basics_lists_list.map A B f l))", "predict": "axiom exists_map (A B : univs.Type0) (P : Term A → Prop) (Q : Term B → Prop) (f : Term A → Term B) (l : list (Term A)) (x : exists (Term A × Prop) (P × l)) : ∀ a : Term A, ∀ p : Prop, (P a → Q (f a)) → exists (Term B × Prop) (Q (map f A) × l)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nProd_rect_CProp5_body. For all elements $_A$ and $_B$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_706$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Prod$ from elements $_fst$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_snd$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_Prod$ applied to $_A$ and $_B$ and $_fst$ and $_snd$, for all elements $x_706$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_706$.\nassistant\n", "label": "Prod_rect_CProp5_body : _A : cic.Univ univs.Type0 -> _B : cic.Univ univs.Type0 -> Q_ : (_x_706 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) -> cic.Univ cic.prop) -> _H_mk_Prod : (_fst : cic.Term univs.Type0 _A -> _snd : cic.Term univs.Type0 _B -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) -> x_706 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) -> cic.Term cic.prop (Q_ x_706) .", "predict": "prod_rect_CProp5_body : (A : univs.Type0) -> (B : univs.Type0) -> (Q_ : (x_706 : cic.Term univs.Type0) -> matita_basics_types.Prod A B -> cic.Univ (cic.prop)) -> (H_mk_Prod : (fst : cic.Term univs.Type0) -> A -> (snd : cic.Term univs.Type0) -> B -> cic.Term (cic.prop)) -> (Q_ (matita_basics_types.mk_Prod A B) (fst x_706) (snd x_706)) -> (x_706 : cic.Term univs.Type0) -> matita_basics_types.Prod A B -> cic.Term (cic.prop) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nSig_rect_Type1. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_674$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $univs.Type1$. Låt $_H_mk_Sig$ vara en funktion från element $pi1$ av $cic.Term$ av $univs.Type0$ och $A$ och element $_pi2$ av $cic.Term$ av $cic.prop$ och $_f$ applicerat på $pi1$ till element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_basics_types.mk_Sig$ applicerat på $A$ och $_f$ och $pi1$ och $_pi2$. Låt $x_674$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$. Då håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_674$.\nassistant\n", "label": "postulate Sig_rect_Type1 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_674 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ univs.Type1) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term univs.Type1 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_674 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term univs.Type1 (Q_ x_674)", "predict": "postulate sig_rect_Type1 : (A : univs.Type0) -> (f : Term univs.Type0 -> A -> prop) -> (Q : Sig A f -> univs.Type1) -> (H_mk_Sig : Term univs.Type0 -> A -> prop -> f (pi1) -> Q (mk_Sig A f pi1 pi2)) -> (x_674 : Sig A f) -> Term univs.Type1 (Q x_674)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nFilter_DPair. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all functions $_f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $univs.Type0$, for all elements $return_sort$ of $cic.Sort$, for all functions $return_type$ from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $return_sort$, for all functions $return$ from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $z$, for all elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.\nassistant\n", "label": "filter_DPair : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) -> return_sort : cic.Sort -> return_type : (z : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Univ return_sort) -> return : (z : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Term return_sort (return_type z)) -> z : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Term return_sort (return_type z) .", "predict": "filter_DPair : (A : Elem (univs Type0)) -> (f : Elem (Term (univs Type0)) -> Elem (univs Type0)) -> (return_sort : Elem (Sort)) -> (return_type : Elem (Term (return_sort)) -> Elem (Term (return_sort))) -> (return : Elem (Term (univs Type0)) -> DPair A f -> Elem (Term (return_sort))) -> Proof (forall (z : Elem (Term (univs Type0)), DPair A f) (return_sort, return_type z)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nLstar_dx. Pour tous les éléments $B$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $R$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation$ appliqué à $B$, pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $b1$ et $b$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $R$ et $l$ et $b1$ et $b$, pour tous les éléments $b2$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $R$ appliqué à $b$ et $b2$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $R$ et $matita_arithmetics_nat.plus$ appliqué à $l$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $b1$ et $b2$.\nassistant\n", "label": "Axiom lstar_dx : forall B : cic.Univ univs.Type0, forall R : cic.Term univs.Type0 (matita_basics_relations.relation B), forall l : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b1 : cic.Term univs.Type0 B, forall b : cic.Term univs.Type0 B, forall __ : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b), forall b2 : cic.Term univs.Type0 B, forall __1 : cic.Term cic.prop (R b b2), cic.Term cic.prop (matita_arithmetics_lstar.lstar B R (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2) .", "predict": "Axiom lstar_dx : forall B : Univ, forall R : Term, (relation B) -> forall l : Term, forall b1 : Term, forall b : B, forall __ : prop, (lstar B R l b1 b) -> forall b2 : B, forall __1 : prop, (R b b2) -> prop (lstar B R (plus l (S (O b1)) b2)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nNat_rect_CProp3_body. Låt $Q_$ vara en funktion från element $_x_401$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_O$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_nat.O$. Då för alla funktioner $_H_S$ från element $x_402$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $_x_404$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $x_402$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_nat.S$ applicerat på $x_402$, för alla element $x_401$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_401$.\nassistant\n", "label": "postulate nat_rect_CProp3_body : (Q_ : (_x_401 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop) -> (_H_O : cic.Term cic.prop (Q_ matita_arithmetics_nat.O)) -> (_H_S : (x_402 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_404 : cic.Term cic.prop (Q_ x_402)) -> cic.Term cic.prop (Q_ (matita_arithmetics_nat.S x_402))) -> (x_401 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (Q_ x_401)", "predict": "postulate nat_rect_CProp3_body : (Q : (x : univs.Type0) -> matita_arithmetics_nat.nat -> cic.prop) -> (H_O : cic.prop) -> (H_S : (x : univs.Type0) -> matita_arithmetics_nat.nat -> cic.prop) -> (x : univs.Type0) -> matita_arithmetics_nat.nat -> cic.prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nBigop_Sfalse. Soit $k$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour toutes les fonctions $p$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, pour tous les éléments $B$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $nil$ de $cic.Term$ de $univs.Type0$ et de $B$, pour toutes les fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$, pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $p$ appliqué à $k$ et $matita_basics_bool.false$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $B$ et $matita_arithmetics_bigops.bigop$ appliqué à $matita_arithmetics_nat.S$ appliqué à $k$ et la fonction qui envoie $i$ à $p$ appliqué à $i$ et $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $matita_arithmetics_bigops.bigop$ appliqué à $k$ et la fonction qui envoie $i$ à $p$ appliqué à $i$ et $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à $f$ appliqué à $i$.\nassistant\n", "label": "postulate bigop_Sfalse : (k : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p k) matita_basics_bool.false)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S k) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) B nil op (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i)) (matita_arithmetics_bigops.bigop k (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) B nil op (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i)))", "predict": "postulate bigop_Sfalse : (k : Term Type0 Nat) -> (p : (x : Term Type0 Nat) -> Term Type0 Bool) -> (B : Univ Type0) -> (nil : Term Type0 B) -> (op : (x : B) -> (y : B) -> Term Type0 B) -> (f : (x : Term Type0 Nat) -> Term Type0 B) -> (prop : Prop (lift Type0 Type2) Bool) -> (p k false) -> Eq (bigop (S k) (λ i -> p i)) B (bigop (f i) (λ i -> p i)) B nil (op i) (f i)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nLt_exp. Soient $n$ et $m$ et $p$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $p$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $n$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $p$ et $n$ et $matita_arithmetics_exp.exp$ appliqué à $p$ et $m$.\nassistant\n", "label": "postulate lt_exp : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt n m)) -> cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_exp.exp p n) (matita_arithmetics_exp.exp p m))", "predict": "postulate lt_exp : (n : cic.Term Type0) -> (m : cic.Term Type0) -> (p : matita_arithmetics_nat.nat) -> (e : cic.prop) -> (f : matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p) -> (g : cic.prop) -> (h : matita_arithmetics_nat.lt n m) -> (cic.prop) (matita_arithmetics_exp.lt (matita_arithmetics_exp.exp p n) (matita_arithmetics_exp.exp p m))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nRange_rect_Type1_body. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_925$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type1$. Låt $_H_mk_range$ vara en funktion från funktioner $_enum$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $_A$ och element $_upto$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $_filter$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_range$ applicerat på $_A$ och $_enum$ och $_upto$ och $_filter$. Då för alla element $x_925$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$, håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_925$.\nassistant\n", "label": "Axiom range_rect_Type1_body : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_925 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type1), forall _H_mk_range : ((_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))), forall x_925 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A), cic.Term univs.Type1 (Q_ x_925) .", "predict": "Axiom range_rect_Type1_body : forall A : univs.Type0, forall Q_ : x_925 : cic.Term univs.Type0 -> matita_arithmetics_bigops.range A : cic.Univ univs.Type1, forall enum : __ : cic.Term univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term univs.Type0, forall upto : cic.Term univs.Type0, forall filter : __ : cic.Term univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term univs.Type0 -> matita_basics_bool.bool -> cic.Term univs.Type1, Q_ (matita_arithmetics_bigops.mk_range A enum upto filter) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nRange_rect_Type2. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_923$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type2$. Låt $_H_mk_range$ vara en funktion från funktioner $_enum$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $_A$ och element $_upto$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $_filter$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_range$ applicerat på $_A$ och $_enum$ och $_upto$ och $_filter$. Då för alla element $x_923$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$, håller $cic.Term$ för $univs.Type2$ och $Q_$ applicerat på $x_923$.\nassistant\n", "label": "range_rect_Type2 : _A : cic.Univ univs.Type0 -> Q_ : (_x_923 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Univ univs.Type2) -> _H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 _A) -> _upto : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type2 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> x_923 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Term univs.Type2 (Q_ x_923) .", "predict": "range_rect_Type2 : (A : Elem (univ (Type0))) -> (Q_ : (x_923 : Term (Type0)) -> Elem (univ (Type2))) -> (H_mk_range : (enum : (x : Elem (Term (Type0))) -> (n : Nat) -> Elem (Term (Type0))) -> (A : Elem (Term (Type0))) -> (upto : Elem (Term (Type0))) -> (Nat) -> (filter : (x : Elem (Term (Type0))) -> (n : Nat) -> Elem (bool)) -> Elem (Term (Type2))) -> Proof (forall (x_923 : Term (Type0)), (Q_ (range (A)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nACop_rect_Type4_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_891$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type4$. Soit $_H_mk_ACop$ une fonction des éléments $aop$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ et des fonctions $_comm$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $_nil$ et $aop$ et $a$ et $b$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $_nil$ et $aop$ et $b$ et $a$ à des éléments de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_ACop$ appliqué à $A$ et $_nil$ et $aop$ et $_comm$. Alors pour tous les éléments $x_891$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$, $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_891$.\nassistant\n", "label": "axiom ACop_rect_Type4_body (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_891 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ univs.Type4) (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) (x_891 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) : cic.Term univs.Type4 (Q_ x_891)", "predict": "axiom acop_rect_Type4_body (A : cic.Univ) : _nil : cic.Term univs.Type0 ∧ A → Q_ : ∀ x_891 : cic.Term univs.Type0 ∧ matita_arithmetics_bigops.ACop A _nil → cic.Univ univs.Type4 → ∀ x : cic.Term univs.Type0, matita_arithmetics_bigops.ACop A _nil → ∀ a : cic.Term univs.Type0, ∀ b : cic.Term univs.Type0, ∀ a : A, ∀ b : A, matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil (matita_arithmetics_bigops.Aop aop) a) (matita_arithmetics_bigops.op A _nil (matita_arithmetics_bigops.Aop aop) b) (matita_arithmetics_bigops.op A _nil (matita_arithmetics_bigops.Aop aop) a) → Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop) (comm a b) → ∀ x : cic.Term univs.Type0, Q_ (matita_arithmetics_bigops.ACop A _nil) x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nPermut_invert_permut. For all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_permutation.permut$ applied to $f$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_permutation.permut$ applied to $matita_arithmetics_permutation.invert_permut$ applied to $n$ and $f$ and $n$.\nassistant\n", "label": "postulate permut_invert_permut : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_permutation.permut f n)) -> cic.Term cic.prop (matita_arithmetics_permutation.permut (matita_arithmetics_permutation.invert_permut n f) n)", "predict": "postulate permut_invert_permut : (f : Term univs.Type0 Nat -> Term univs.Type0 Nat) -> (n : Term univs.Type0 Nat) -> (p : permut (f n)) -> permut (invert_permut n (f n))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nEq_rect_Type4. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type2$, pour tous les éléments $_x$ de $cic.Term$ de $univs.Type2$ et de $A$, pour toutes les fonctions $Q_$ des éléments $x_4$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $_x_5$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_4$ à des éléments de $cic.Univ$ de $univs.Type4$, pour tous les éléments $_H_refl$ de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$, pour tous les éléments $x_4$ de $cic.Term$ de $univs.Type2$ et de $A$, pour tous les éléments $x_5$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_4$, $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_4$ et $x_5$.\nassistant\n", "label": "postulate eq_rect_Type4 : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_4 : cic.Term univs.Type2 A) -> (_x_5 : cic.Term cic.prop (matita_basics_logic.eq A _x x_4)) -> cic.Univ univs.Type4) -> (_H_refl : cic.Term univs.Type4 (Q_ _x (matita_basics_logic.refl A _x))) -> (x_4 : cic.Term univs.Type2 A) -> (x_5 : cic.Term cic.prop (matita_basics_logic.eq A _x x_4)) -> cic.Term univs.Type4 (Q_ x_4 x_5)", "predict": "postulate eq_rect_Type4 : (A : univs.Type2) -> (x : cic.Term) -> A -> (x4 : cic.Term) -> (x5 : cic.prop) -> matita_basics_logic.eq A x x4 -> (H_refl : cic.Term) -> Q_ H_refl (matita_basics_logic.refl A x) -> (x4 : cic.Term) -> (x5 : cic.prop) -> matita_basics_logic.eq A x x4 -> (x : cic.Term) -> (A : univs.Type2) -> Q_ x x5"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nLet_upper_bound1. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_nat.nat$.\nassistant\n", "label": "let_upper_bound1 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_arithmetics_nat.nat .", "predict": "let_upper_bound1 : (n : Elem (cic Term) (univs Type0)) -> (n : Elem (matita_arithmetics_nat nat)) -> Proof (cic Term) (univs Type0) (matita_arithmetics_nat nat) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nF_min_true. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $n$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $i$ to $matita_basics_logic.And$ applied to $matita_basics_logic.And$ applied to $matita_arithmetics_nat.le$ applied to $b$ and $i$ and $matita_arithmetics_nat.lt$ applied to $i$ and $matita_arithmetics_nat.plus$ applied to $n$ and $b$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $i$ and $matita_basics_bool.true$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $matita_arithmetics_minimization.min$ applied to $n$ and $b$ and $f$ and $matita_basics_bool.true$.\nassistant\n", "label": "axiom f_min_true (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (n b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (λ i => matita_basics_logic.And (matita_basics_logic.And (matita_arithmetics_nat.le b i) (matita_arithmetics_nat.lt i (matita_arithmetics_nat.plus n b))) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.true)))) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f (matita_arithmetics_minimization.min n b f)) matita_basics_bool.true)", "predict": "axiom f_min_true (f : Term univs.Type0 × matita_arithmetics_nat.nat → Term univs.Type0 × matita_basics_bool.bool) (n b : Term univs.Type0 × matita_arithmetics_nat.nat) (p : matita_basics_logic.ex (matita_arithmetics_nat.nat × matita_basics_logic.And (matita_arithmetics_nat.le b) (matita_arithmetics_nat.lt) (matita_arithmetics_nat.plus n) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_bool.true))) : ∀ i : Term univs.Type0 × matita_arithmetics_nat.nat, matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (f i) (f (matita_arithmetics_minimization.min n b)) (f) (matita_basics_bool.true)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nReflexive. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $_R$ of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $A$, $cic.Univ$ holds for $cic.prop$.\nassistant\n", "label": "axiom reflexive (A : cic.Univ univs.Type0) (_R : cic.Term univs.Type0 (matita_basics_relations.relation A)) : cic.Univ cic.prop", "predict": "axiom reflexive (A : univs.Type0) : ∀ _R : cic.Term univs.Type0 (matita_basics_relations.relation A), cic.Univ (cic.prop)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nReverse_reverse. Låt $S$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $S$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $S$ och $matita_basics_lists_list.reverse$ applicerat på $S$ och $matita_basics_lists_list.reverse$ applicerat på $S$ och $l$ och $l$.\nassistant\n", "label": "postulate reverse_reverse : (S : cic.Univ univs.Type0) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list S)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list S)) (matita_basics_lists_list.reverse S (matita_basics_lists_list.reverse S l)) l)", "predict": "postulate reverse_reverse : (S : univs.Type0) -> (l : matita_basics_lists_list.list S) -> prop (eq (lift univs.Type0 univs.Type2) (reverse (reverse l)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nReverse_append. Soit $S$ un élément de $cic.Univ$ de $univs.Type0$. Soient $l1$ et $l2$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $S$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $S$ et $matita_basics_lists_list.reverse$ appliqué à $S$ et $matita_basics_lists_list.append$ appliqué à $S$ et $l1$ et $l2$ et $matita_basics_lists_list.append$ appliqué à $S$ et $matita_basics_lists_list.reverse$ appliqué à $S$ et $l2$ et $matita_basics_lists_list.reverse$ appliqué à $S$ et $l1$.\nassistant\n", "label": "reverse_append : S : cic.Univ univs.Type0 -> l1 : cic.Term univs.Type0 (matita_basics_lists_list.list S) -> l2 : cic.Term univs.Type0 (matita_basics_lists_list.list S) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list S)) (matita_basics_lists_list.reverse S (matita_basics_lists_list.append S l1 l2)) (matita_basics_lists_list.append S (matita_basics_lists_list.reverse S l2) (matita_basics_lists_list.reverse S l1))) .", "predict": "reverse_append : (S : Elem (univ Type0)) -> (l1 : Elem (Term Type0)) -> (l2 : Elem (matita_basics_lists_list list)) -> Proof (and (Eq (lift Type0 Type2 (matita_basics_lists_list list) S) (and (append (append (reverse (reverse (append (reverse (append S l1) l2)) S)) (reverse (reverse (append (reverse (append S l1) l2)) S)))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nSub0_to_false. Soient $h$ et $k$ des fonctions des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $I$ et $J$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $A$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_bigops.upto$ appliqué à $A$ et $I$ et $matita_arithmetics_nat.O$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_bigops.sub_hk$ appliqué à $h$ et $k$ et $A$ et $J$ et $I$, pour tous les éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $matita_arithmetics_bigops.upto$ appliqué à $A$ et $J$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_bigops.filter$ appliqué à $A$ et $J$ et $i$ et $matita_basics_bool.false$.\nassistant\n", "label": "Axiom sub0_to_false : forall h : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall k : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall A : cic.Univ univs.Type0, forall I : cic.Term univs.Type0 (matita_arithmetics_bigops.range A), forall J : cic.Term univs.Type0 (matita_arithmetics_bigops.range A), forall __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.upto A I) matita_arithmetics_nat.O), forall __1 : cic.Term cic.prop (matita_arithmetics_bigops.sub_hk h k A J I), forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __2 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_bigops.upto A J)), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_bigops.filter A J i) matita_basics_bool.false) .", "predict": "Axiom sub0_to_false : forall h : univs.Type0 -> matita_arithmetics_nat.nat -> univs.Type0 -> matita_arithmetics_nat.nat, forall k : univs.Type0 -> matita_arithmetics_nat.nat -> univs.Type0 -> matita_arithmetics_nat.nat, forall A : cic.Univ, forall I : cic.Term, forall J : matita_arithmetics_bigops.range A, forall __ : cic.Term, forall eq : cic.prop, forall (x : univs.Type0) : eq (cic.lift univs.Type0 univs.Type2) (x : matita_arithmetics_nat.nat), forall (y : matita_arithmetics_bigops.upto A I) : forall __1 : cic.Term, forall (x : univs.Type0) : (h x : k x) (A : cic.prop) (matita_arithmetics_bigops.sub_hk h k A) (J : cic.Term) (I : cic.Term), forall i : univs.Type0, forall (x : matita_arithmetics_nat.nat) : (matita_arithmetics_bigops.upto A J) (i : cic.Term) (x : matita_basics_bool.bool) (matita_basics_bool.false) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nExists_append_r. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $P$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $l1$ et $l2$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.Exists$ appliqué à $A$ et $P$ et $l2$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_lists_list.Exists$ appliqué à $A$ et $P$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l1$ et $l2$.\nassistant\n", "label": "postulate Exists_append_r : (A : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.Exists A P l2)) -> cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 l2))", "predict": "postulate exists_append_r : (A : Univ) -> (P : Term Type0 A) -> (l1 : Term Type0) -> (l2 : list A) -> (x : Prop) -> (exists A P) -> (exists A P) -> (append A l1 l2) -> (and (Prop x) (exists A P) (exists A P) (append A l1 l2))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nLet_clause_10333. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Alors pour tous les éléments $x2515$ et $x2516$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2515$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $x2516$ et $matita_arithmetics_div_and_mod.div$ appliqué à $x2515$ et $x2516$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $x2515$ et $x2516$.\nassistant\n", "label": "postulate let_clause_10333 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)))", "predict": "postulate clause_10333 : (n : cic.Term (univs.Type0) (matita_arithmetics_nat.nat)) -> (posn : cic.Term (cic.prop) (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (x2515 : cic.Term (univs.Type0) (matita_arithmetics_nat.nat)) -> (x2516 : cic.Term (univs.Type0) (matita_arithmetics_nat.nat)) -> cic.Term (cic.prop) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_nat.nat)) (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516) (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nMatch_Dop. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all elements $return_sort$ of $cic.Sort$, for all functions $return_type$ from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $return_sort$, for all functions $case_mk_Dop$ from elements $sum$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and functions $prod$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_arithmetics_bigops.mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and", "label": "postulate match_Dop : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ return_sort) -> (case_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term return_sort (return_type (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (z : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term return_sort (return_type z)", "predict": " $matita_arithmetics_bigops.aop__o__op$ and $matita_arithmetics_bigops.aop__o__op$ and $return_type$ applied to $case_mk_Dop$ applied to $sum$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and $prod$ applied to $__$ and $A$ and $__1$ and $return_type$ applied to $case_mk_Dop$ applied to $prod$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and $prod$ applied to $__$ and $A$ and $return_type$ applied to $case_mk_Dop$ applied to $prod$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and $return_type$ applied to $case_mk_Dop$ applied to $sum$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and $return_type$ applied to $case_mk_Dop$ applied to $prod$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and $return_type$ applied to $case_mk_Dop$ applied to $sum$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and $return_type$ applied to $case_mk_Dop$ applied to $prod$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and $return_type$ applied to $case_mk_Dop$ applied to $sum$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and $return_type$ applied to $case_mk_Dop$ applied to $prod$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and $return_type$ applied to $case_mk_Dop$ applied to $sum$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and $return_type$ applied to $case_mk_Dop$ applied to $prod$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and $return_type$ applied to $case_mk_Dop$ applied to $sum$ and $mat"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nBigop_0. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Då för alla element $op$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $B$ och $nil$, för alla funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $matita_arithmetics_bigops.bigop$ applicerat på $matita_arithmetics_nat.S$ applicerat på $n$ och funktionen som avbildar $i$ som $matita_basics_bool.true$ och $B$ och $nil$ och $matita_arithmetics_bigops.op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $matita_arithmetics_bigops.op$ applicerat på $B$ och $nil$ och $op$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $matita_basics_bool.true$ och $B$ och $nil$ och $matita_arithmetics_bigops.op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $matita_arithmetics_nat.S$ applicerat på $i$ och $f$ applicerat på $matita_arithmetics_nat.O$.\nassistant\n", "label": "Axiom bigop_0 : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall B : cic.Univ univs.Type0, forall nil : cic.Term univs.Type0 B, forall op : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop B nil), forall f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n) (fun i => matita_basics_bool.true) B nil (matita_arithmetics_bigops.op B nil op) (fun i => f i)) (matita_arithmetics_bigops.op B nil op (matita_arithmetics_bigops.bigop n (fun i => matita_basics_bool.true) B nil (matita_arithmetics_bigops.op B nil op) (fun i => f (matita_arithmetics_nat.S i))) (f matita_arithmetics_nat.O))) .", "predict": "Axiom bigop_0 : forall n : matita_arithmetics_nat.nat, forall B : univs.Type0, forall nil : B, forall op : matita_arithmetics_bigops.Aop, forall f : matita_arithmetics_nat.nat -> B, prop (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n) (f (matita_arithmetics_nat.O)) (op B nil) (op B nil) (matita_arithmetics_bigops.bigop n (f (matita_arithmetics_nat.S (f (matita_arithmetics_nat.O)))) (op B nil) (op B nil))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nExp_to_eq_O. För alla element $n$ och $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_exp.exp$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $m$ och $matita_arithmetics_nat.O$.\nassistant\n", "label": "axiom exp_to_eq_O (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_exp.exp n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m matita_arithmetics_nat.O)", "predict": "axiom exp_to_eq_O (n m : cic.Term univs.Type0) (x : matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.O)) n) (y : cic.Term (cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_nat.nat)) (matita_arithmetics_exp.exp n m))) (z : matita_arithmetics_nat.S (matita_arithmetics_nat.O)) : y = m ∧ y = z"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nMod_S_fact. Låt $n$ och $i$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $i$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $i$ och $n$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_factorial.fact$ applicerat på $n$ och $i$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$.\nassistant\n", "label": "postulate mod_S_fact : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le i n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod (matita_arithmetics_nat.S (matita_arithmetics_factorial.fact n)) i) (matita_arithmetics_nat.S matita_arithmetics_nat.O))", "predict": "postulate mod_S_fact : (n : Nat) -> (i : Nat) -> Prop -> Lt (S (O i)) n -> Le i n -> Eq (lift Type0 Type2 Nat) (mod (S (fact n)) i) (S (O i))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nOption_inv_rect_CProp4. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $x1$, for all functions $P$ from elements $_z1074$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $x1$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $_z1075$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $x1$ and $Hterm$ and $matita_basics_types.None$ applied to $x1$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.None$ applied to $x1$, for all functions $_H2$ from elements $x_615$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_z1075$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $x1$ and $Hterm$ and $matita_basics_types.Some$ applied to $x1$ and $x_615$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.Some$ applied to $x1$ and $x_615$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "postulate option_inv_rect_CProp4 : (x1 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.option x1)) -> (P : (_z1074 : cic.Term univs.Type0 (matita_basics_types.option x1)) -> cic.Univ cic.prop) -> (_H1 : (_z1075 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.None x1))) -> cic.Term cic.prop (P (matita_basics_types.None x1))) -> (_H2 : (x_615 : cic.Term univs.Type0 x1) -> (_z1075 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.Some x1 x_615))) -> cic.Term cic.prop (P (matita_basics_types.Some x1 x_615))) -> cic.Term cic.prop (P Hterm)", "predict": "postulate option_inv_rect_CProp4 : (x1 : Univ Type0) -> (Hterm : Term Type0) -> option x1 -> (z1074 : Term Type0) -> option x1 -> Prop -> (z1075 : Prop) -> Eq (lift Type0 Type2) (option x1) Hterm None -> (x615 : Term Type0) -> x1 -> z1075 -> Eq (lift Type0 Type2) (option x1) Hterm (Some x1) x615 -> Prop -> (x615 : Term Type0) -> x1 -> z1075 -> Eq (lift Type0 Type2) (option x1) Hterm (Some x1) x615 -> Prop) -> Term (Prop (P Hterm))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nExp_1_n. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$.\nassistant\n", "label": "Axiom exp_1_n : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_exp.exp (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) .", "predict": "Axiom exp_1_n : forall n : univs.Type0 & matita_arithmetics_nat.nat, cic.Term (cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_nat.nat)) (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.O)) n)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nMatch_lstar_r. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_R$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation$ appliqué à $B$. Soit $return_sort$ un élément de $cic.Sort$. Alors pour toutes les fonctions $return_type$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__2$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar_r$ appliqué à $B$ et $_R$ et $__$ et $__1$ et $__2$ à des éléments de $cic.Univ$ de $return_sort$, pour toutes les fonctions $case_lstar_r_O$ des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_arithmetics_nat.O$ et $b$ et $b$ et $matita_arithmetics_lstar.lstar_r_O$ appliqué à $B$ et $_R$ et $b$, pour toutes les fonctions $case_lstar_r_S$ des éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $b1$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar_r$ appliqué à $B$ et $_R$ et $l$ et $b1$ et $b$ et des éléments $b2$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $_R$ appliqué à $b$ et $b2$ à des éléments", "label": "postulate match_lstar_r : (B : cic.Univ univs.Type0) -> (_R : cic.Term univs.Type0 (matita_basics_relations.relation B)) -> (return_sort : cic.Sort) -> (return_type : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 B) -> (__2 : cic.Term univs.Type0 B) -> (z : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R __ __1 __2)) -> cic.Univ return_sort) -> (case_lstar_r_O : (b : cic.Term univs.Type0 B) -> cic.Term return_sort (return_type matita_arithmetics_nat.O b b (matita_arithmetics_lstar.lstar_r_O B _R b))) -> (case_lstar_r_S : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R l b1 b)) -> (b2 : cic.Term univs.Type0 B) -> (__1 : cic.Term cic.prop (_R b b2)) -> cic.Term return_sort (return_type (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2 (matita_arithmetics_lstar.lstar_r_S B _R l b1 b __ b2 __1))) -> (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 B) -> (__2 : cic.Term univs.Type0 B) -> (z : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R __ __1 __2)) -> cic.Term return_sort (return_type __ __1 __2 z)", "predict": " de $cic.Univ$ de $return_sort$, pour toutes les fonctions $case_lstar_r_S_1$ des éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $b1$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $b2$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar_r$ appliqué à $B$ et $_R$ et $l$ et $b1$ et $b$ et $b2$ et $z$ à des éléments de $cic.Univ$ de $return_sort$, pour toutes les fonctions $case_lstar_r_S_2$ des éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $b1$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $b2$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar_r$ appliqué à $B$ et $_R$ et $l$ et $b1$ et $b$ et $b2$ et $z$ à des éléments de $cic.Univ$ de $return_sort$, on a :\npostulate match_lstar_r : (B : Univ Type0) -> (R : Term (relation B)) -> Sort -> (__) -> (__) -> (__) -> (z : Term prop) -> (lstar_r : Term (B * R)) -> (__) -> (__) -> (__) -> (__) -> (__) -> (__) -> (__) -> (__) -> (__) -> (__) -> (__) -> (__) -> (__) -> (__)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nNot_divides_to_gcd_aux. Soient $p$ et $m$ et $n$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $matita_arithmetics_primes.divides$ appliqué à $n$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd_aux$ appliqué à $matita_arithmetics_nat.S$ appliqué à $p$ et $m$ et $n$ et $matita_arithmetics_gcd.gcd_aux$ appliqué à $p$ et $n$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $m$ et $n$.\nassistant\n", "label": "axiom not_divides_to_gcd_aux (p m n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (__1 : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides n m))) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S p) m n) (matita_arithmetics_gcd.gcd_aux p n (matita_arithmetics_div_and_mod.mod m n)))", "predict": "axiom not_divides_to_gcd_aux (p m n : Term Type0) (x : Prop) (y : Lt Nat 0 n) (z : Not (divides n m)) : Eq (lift Type0 Type2) (gcd_aux (S p) m n) (gcd_aux p n) (mod m n)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nSum_inv_rect_CProp2. Soient $x1$ et $x2$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $x1$ et $x2$. Soit $P$ une fonction des éléments $_z1020$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $_H1$ des éléments $x_572$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_z1021$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sum$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.inl$ appliqué à $x1$ et $x2$ et $x_572$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.inl$ appliqué à $x1$ et $x2$ et $x_572$, pour toutes les fonctions $_H2$ des éléments $x_573$ de $cic.Term$ de $univs.Type0$ et de $x2$ et des éléments $_z1021$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sum$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.inr$ appliqué à $x1$ et $x2$ et $x_573$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.inr$ appliqué à $x1$ et $x2$ et $x_573$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "Sum_inv_rect_CProp2 : x1 : cic.Univ univs.Type0 -> x2 : cic.Univ univs.Type0 -> Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) -> P : (_z1020 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) -> cic.Univ cic.prop) -> _H1 : (x_572 : cic.Term univs.Type0 x1 -> _z1021 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inl x1 x2 x_572)) -> cic.Term cic.prop (P (matita_basics_types.inl x1 x2 x_572))) -> _H2 : (x_573 : cic.Term univs.Type0 x2 -> _z1021 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inr x1 x2 x_573)) -> cic.Term cic.prop (P (matita_basics_types.inr x1 x2 x_573))) -> cic.Term cic.prop (P Hterm) .", "predict": "sum_inv_rect_CProp2 : (x1 : Elem (univs : Univ) (Type0)) -> (x2 : Elem (univs : Univ) (Type0)) -> (Hterm : Term (univs : Univ) (Sum (x1 : Elem (Type0)) (x2 : Elem (Type0)))) -> (P : (z1020 : Term (univs : Univ) (Sum (x1 : Elem (Type0)) (x2 : Elem (Type0)))) -> Prop) -> Proof (forall (H1 : (x572 : Term (univs : Univ) (Type0)) -> (x1 : Elem (Type0)) -> (z1021 : Term (cic : Prop)) -> (eq (lift (univs : Type) (Type2)) (Sum (x1 : Elem (Type0)) (x2 : Elem (Type0))) (Hterm) (inl (x1 : Elem (Type0))) (x572) (P (inl (x1 : Elem (Type0))) (z1021))) (forall (H2 : (x573 : Term (univs : Univ) (Type0)) -> (x2 : Elem (Type0)) -> (z1021 : Term (cic : Prop)) -> (eq (lift (univs : Type) (Type2)) (Sum (x1 : Elem (Type0)) (x2 : Elem (Type0))) (Hterm) (inr (x1 : Elem (Type0))) (x573) (P (inr (x1 : Elem (Type0))) (z1021)))) (P Hterm)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nAop_rect_CProp1. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_803$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_Aop$ be a function from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_lists_list.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$. Let $x_803$ be an element", "label": "Aop_rect_CProp1 : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_803 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil) -> cic.Univ cic.prop) -> _H_mk_Aop : (op : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _nill : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> _nilr : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> _assoc : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> x_803 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil) -> cic.Term cic.prop (Q_ x_803) .", "predict": " of $cic.Term$ of $univs.Type0$. Proof (forall $A : univs.Type0$, forall $_x_803 : cic.Term$, (iff (Aop_rect_CProp1 A $_x_803) (Q_ $x_803) (op (nill A) $_x_803) (assoc (nill A) (nilr A) $_x_803)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nDiv_mod_spec_ind_body. Låt $_n$ och $_m$ och $_q$ och $_r$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Q_$ vara en funktion från element $_x_809$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H_div_mod_spec_intro$ från element $x_811$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $_r$ och $_m$ och element $x_810$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $_n$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $_q$ och $_m$ och $_r$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ och $x_811$ och $x_810$, för alla element $x_809$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_809$.\nassistant\n", "label": "Axiom div_mod_spec_ind_body : forall _n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _q : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _r : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall Q_ : ((_x_809 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ cic.prop), forall _H_div_mod_spec_intro : ((x_811 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_810 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term cic.prop (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_811 x_810))), forall x_809 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r), cic.Term cic.prop (Q_ x_809) .", "predict": "Axiom div_mod_spec_ind_body : forall n : univs.Type0, forall m : matita_arithmetics_nat.nat, forall q : cic.Term (cic.prop (matita_arithmetics_div_and_mod.div_mod_spec n m q)), forall r : matita_arithmetics_nat.nat, (forall H_div_mod_spec_intro : (r < m) /\\ (q = lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n) /\\ (r = matita_arithmetics_nat.plus (matita_arithmetics_nat.times q m) r)) -> forall x_809 : cic.Term (cic.prop (matita_arithmetics_div_and_mod.div_mod_spec n m q)), Q x_809."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nFst_p_ord_times. Soient $p$ et $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.prime$ appliqué à $p$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $a$, pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $b$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_types.fst$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_ord.p_ord$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $b$ et $p$ et $matita_arithmetics_nat.plus$ appliqué à $matita_basics_types.fst$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_ord.p_ord$ appliqué à $a$ et $p$ et $matita_basics_types.fst$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_ord.p_ord$ appliqué à $b$ et $p$.\nassistant\n", "label": "fst_p_ord_times : p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_primes.prime p) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O a) -> __2 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O b) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_types.fst matita_arithmetics_nat.nat matita_arithmetics_nat.nat (matita_arithmetics_ord.p_ord (matita_arithmetics_nat.times a b) p)) (matita_arithmetics_nat.plus (matita_basics_types.fst matita_arithmetics_nat.nat matita_arithmetics_nat.nat (matita_arithmetics_ord.p_ord a p)) (matita_basics_types.fst matita_arithmetics_nat.nat matita_arithmetics_nat.nat (matita_arithmetics_ord.p_ord b p)))) .", "predict": "fst_p_ord_times : (p : Elem (Term (Type0)) (Univs)) -> (a : Elem (Term (nat)) (Matita_arithmetics)) -> (b : Elem (Term (nat)) (Matita_arithmetics)) -> Proof (forall (x : Elem (Term (prop)) (Matita_primes)) (forall (y : Elem (Term (prop)) (Lt (nat) (nd 0) a)) (forall (z : Elem (Term (prop)) (Lt (nat) (nd 0) b)) (Eq (lift (Type0) (Type2)) (nat)) (Eq (fst (nat) (nat)) (times a b p)) (Eq (plus (fst (nat) (nat)) (fst (nat) (nat))) (p))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nLt_to_div_O. Soient $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $n$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_div_and_mod.div$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.O$.\nassistant\n", "label": "postulate lt_to_div_O : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt n m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.div n m) matita_arithmetics_nat.O)", "predict": "postulate lt_to_div_O : (n : cic.Term univs.Type0) -> (m : matita_arithmetics_nat.nat) -> all (prop : cic.Term) (lt n m) -> prop (eq (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_nat.nat) (div n m) matita_arithmetics_nat.O)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nLe_ind. Låt $_n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla funktioner $Q_$ från element $x_417$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $_x_418$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $_n$ och $x_417$ till element av $cic.Univ$ av $cic.prop$, för alla element $_H_le_n$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $_n$ och $matita_arithmetics_nat.le_n$ applicerat på $_n$, för alla funktioner $_H_le_S$ från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $x_419$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $_n$ och $m$ och element $_x_421$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $m$ och $x_419$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_nat.S$ applicerat på $m$ och $matita_arithmetics_nat.le_S$ applicerat på $_n$ och $m$ och $x_419$, för alla element $x_417$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $x_418$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $_n$ och $x_417$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_417$ och $x_418$.\nassistant\n", "label": "Axiom le_ind : forall _n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall Q_ : ((x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_418 : cic.Term cic.prop (matita_arithmetics_nat.le _n x_417)) -> cic.Univ cic.prop), forall _H_le_n : cic.Term cic.prop (Q_ _n (matita_arithmetics_nat.le_n _n)), forall _H_le_S : ((m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_419 : cic.Term cic.prop (matita_arithmetics_nat.le _n m)) -> (_x_421 : cic.Term cic.prop (Q_ m x_419)) -> cic.Term cic.prop (Q_ (matita_arithmetics_nat.S m) (matita_arithmetics_nat.le_S _n m x_419))), forall x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall x_418 : cic.Term cic.prop (matita_arithmetics_nat.le _n x_417), cic.Term cic.prop (Q_ x_417 x_418) .", "predict": "Axiom le_ind : forall n : univs.Type0 -> matita_arithmetics_nat.nat, forall Q : (x_417 : cic.Term univs.Type0) -> matita_arithmetics_nat.nat -> cic.Univ (cic.prop) -> forall H_le_n : (x_418 : matita_arithmetics_nat.le n x_417) -> forall H_le_S : (m : matita_arithmetics_nat.nat) -> (x_419 : cic.Term (cic.prop) (matita_arithmetics_nat.le n m)) -> forall x_421 : (Q m x_419) -> forall x_417 : cic.Term univs.Type0 -> forall x_418 : matita_arithmetics_nat.le n x_417, (Q x_417 x_418) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nACop_inv_rect_CProp1. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $x2$ of $cic.Term$ of $univs.Type0$ and $x1$, for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1620$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $matita_arithmetics_bigops.op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1621$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ and $Hterm$ and $matita_arithmetics_bigops.mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "ACop_inv_rect_CProp1 : x1 : cic.Univ univs.Type0 -> x2 : cic.Term univs.Type0 x1 -> Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2) -> P : (_z1620 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2) -> cic.Univ cic.prop) -> _H1 : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2) -> _comm : (a : cic.Term univs.Type0 x1 -> b : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (matita_arithmetics_bigops.op x1 x2 aop a b) (matita_arithmetics_bigops.op x1 x2 aop b a))) -> _z1621 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop x1 x2)) Hterm (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm)) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) -> cic.Term cic.prop (P Hterm) .", "predict": "acop_inv_rect_cprop1 : (x1 : Elem (univs Type0) (cic Univ)) -> Proof (forall (x2 : Elem (cic Term) (univs Type0)) (forall (Hterm : Elem (cic Term) (univs Type0)) (forall (acop : ACop (x1) (x2)) (forall (P : (z1620 : Elem (cic Term) (univs Type0)) -> ACop (x1) (x2) -> Prop) (forall (H1 : (aop : Elem (cic Term) (univs Type0)) -> Aop (x1) (x2)) (forall (comm : (a : Elem (cic Term) (univs Type0)) -> (b : Elem (cic Term) (univs Type0))) (forall (z1621 : Prop) (eq (lift (univs Type0) (univs Type2)) (x1)) (eq (op (x1) (x2)) (aop)) (eq (op (x1) (x2)) (b)) (eq (P (z1620)) (op (x1) (x2))) (eq (Hterm) (mk_ACop (x1) (x2))) (eq (aop) (comm)) (P (Hterm))))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nAop_rect_Type4. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_863$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type4$. Soit $_H_mk_Aop$ une fonction des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $", "label": "axiom Aop_rect_Type4 (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_863 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ univs.Type4) (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) (x_863 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) : cic.Term univs.Type4 (Q_ x_863)", "predict": "cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_comm$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $b$ et $op$ appliqué à $b$ et $a$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_id$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $a$ et $a$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_assoc$ et $_comm$ et $_id$ à des éléments de $cic.Univ$ de $univs.Type4$.\n\naxiom aop_rect_Type4 (A : cic.Univ) (nil : cic.Term) (Q_ : A → matita_arithmetics_bigops.Aop) (H_mk_Aop : ∀ op : cic.Term → A → ∀ op1 : cic.Term → A → cic.Term) (nill : ∀ a : cic.Term → A → cic.Term) (H_eq : ∀ a : cic.Term → A → prop) (eq : ∀ a : cic.Term → A → prop) (assoc : ∀ a : cic.Term → A → ∀ b : cic.Term → A → ∀ c : cic.Term → A → prop) (comm : ∀ a : cic.Term → A → ∀ b : cic.Term → A → prop) (id : ∀ a : cic.Term → A → prop) : ∀ a : cic.Term →"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nAop_rect_CProp2. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Alors pour toutes les fonctions $Q_$ des éléments $_x_881$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_Aop$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ à des éléments de", "label": "postulate Aop_rect_CProp2 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_881 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_881 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Term cic.prop (Q_ x_881)", "predict": " $cic.prop$, il est vrai que $Q_$(op a) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nSame_bigop. Låt $k$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $p1$ och $p2$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Låt $op$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $B$. Låt $f$ och $g$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_bigops.sameF_upto$ applicerat på $k$ och $matita_basics_bool.bool$ och $p1$ och $p2$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_bigops.sameF_p$ applicerat på $k$ och $p1$ och $B$ och $f$ och $g$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $matita_arithmetics_bigops.bigop$ applicerat på $k$ och funktionen som avbildar $i$ som $p1$ applicerat på $i$ och $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $matita_arithmetics_bigops.bigop$ applicerat på $k$ och funktionen som avbildar $i$ som $p2$ applicerat på $i$ och $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $g$ applicerat på $i$.\nassistant\n", "label": "axiom same_bigop (k : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p1 p2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (B : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 B) (op : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) (f g : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) (__ : cic.Term cic.prop (matita_arithmetics_bigops.sameF_upto k matita_basics_bool.bool p1 p2)) (__1 : cic.Term cic.prop (matita_arithmetics_bigops.sameF_p k p1 B f g)) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop k (λ i => p1 i) B nil op (λ i => f i)) (matita_arithmetics_bigops.bigop k (λ i => p2 i) B nil op (λ i => g i)))", "predict": "axiom same_bigop (k : Term Type0) (p1 p2 : Nat → Term Type0) (B : Unv Type0) (nil : Term Type0 B) (op : Term (A : Type0) (B : Unv Type0) → Term (A : Type0) B) (f g : Nat → Term Type0) : prop (sameF_upto k bool p1 p2) → prop (sameF_p k p1 B f g) → prop (eq (lift Type0 Type2 B) (bigop k (λ i, p1 i) nil op (λ i, f i) (bigop k (λ i, p2 i) nil op (λ i, g i)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nFilter_void. Soit $return_sort$ un élément de $cic.Sort$. Soit $return_type$ une fonction des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.void$ à des éléments de $cic.Univ$ de $return_sort$. Soit $return$ une fonction des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.void$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $z$. Alors pour tous les éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.void$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.\nassistant\n", "label": "Axiom filter_void : forall return_sort : cic.Sort, forall return_type : ((z : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ return_sort), forall return : ((z : cic.Term univs.Type0 matita_basics_types.void) -> cic.Term return_sort (return_type z)), forall z : cic.Term univs.Type0 matita_basics_types.void, cic.Term return_sort (return_type z) .", "predict": "Axiom filter_void : forall z : univs.Type0 * matita_basics_types.void, cic.Term (return_sort (return_type z)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nLstar_inv_S_dx. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $R$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $B$. Då för alla element $l$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $b1$ och $b2$ av $cic.Term$ av $univs.Type0$ och $B$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $R$ och $matita_arithmetics_nat.plus$ applicerat på $l$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $b1$ och $b2$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.ex2$ applicerat på $B$ och funktionen som avbildar $b$ som $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $R$ och $l$ och $b1$ och $b$ och funktionen som avbildar $b$ som $R$ applicerat på $b$ och $b2$.\nassistant\n", "label": "Axiom lstar_inv_S_dx : forall B : cic.Univ univs.Type0, forall R : cic.Term univs.Type0 (matita_basics_relations.relation B), forall l : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b1 : cic.Term univs.Type0 B, forall b2 : cic.Term univs.Type0 B, forall __ : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2), cic.Term cic.prop (matita_basics_logic.ex2 B (fun b => matita_arithmetics_lstar.lstar B R l b1 b) (fun b => R b b2)) .", "predict": "Axiom lstar_inv_S_dx : forall B : univs.Type0, forall R : relation B, forall l : nat, forall b1 : B, forall b2 : B, forall __ : lstar B R l b1 b2, prop (ex2 (B, lstar B R l b1 b) (R b b2)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nDPair_rect_CProp2. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $_f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $Q_$ des éléments $_x_658$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_DPair$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $_f$ appliqué à $dpi1$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $A$ et $_f$ et $dpi1$ et $_dpi2$, pour tous les éléments $x_658$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_658$.\nassistant\n", "label": "DPair_rect_CProp2 : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) -> Q_ : (_x_658 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Univ cic.prop) -> _H_mk_DPair : (dpi1 : cic.Term univs.Type0 A -> _dpi2 : cic.Term univs.Type0 (_f dpi1) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> x_658 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Term cic.prop (Q_ x_658) .", "predict": "dpair_rect_CProp2 : (A : Elem (univs Type0)) -> (f : Elem (Term Type0) -> Elem (univs Type0)) -> (Q_ : (x_658 : Elem (Term Type0)) -> (dpair A f) -> Elem (cic prop)) -> (H_mk_DPair : (dpi1 : Elem (Term Type0)) -> (A) -> (dpi2 : Elem (Term Type0)) -> (f) -> (Term (cic prop)) -> (Q_ (matita_basics_types mk_DPair A f dpi1)) -> (x_658)) -> Proof (forall (x_658 : Elem (Term Type0)) (dpair A f) (Q_ x_658)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nDiv_mod_spec_rect_Type4. Soient $_n$ et $_m$ et $_q$ et $_r$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $Q_$ une fonction des éléments $_x_813$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $_n$ et $_m$ et $_q$ et $_r$ à des éléments de $cic.Univ$ de $univs.Type4$. Soit $_H_div_mod_spec_intro$ une fonction des éléments $x_815$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $_r$ et $_m$ et des éléments $x_814$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $_n$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $_q$ et $_m$ et $_r$ à des éléments de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_arithmetics_div_and_mod.div_mod_spec_intro$ appliqué à $_n$ et $_m$ et $_q$ et $_r$ et $x_815$ et $x_814$. Alors pour tous les éléments $x_813$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $_n$ et $_m$ et $_q$ et $_r$, $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_813$.\nassistant\n", "label": "axiom div_mod_spec_rect_Type4 (_n _m _q _r : cic.Term univs.Type0 matita_arithmetics_nat.nat) (Q_ : (_x_813 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ univs.Type4) (_H_div_mod_spec_intro : (x_815 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_814 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_815 x_814))) (x_813 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) : cic.Term univs.Type4 (Q_ x_813)", "predict": "axiom div_mod_spec_rect_Type4 (n m q r : Term Univ Type0) (Q : x813 : Term (prop × div_mod_spec n m q r)) (H_div_mod_spec_intro : r < m ∧ q = lift (Type0, Type2) nat (n = matita_arithmetics_nat.plus (matita_arithmetics_nat.times q m) r)) : ∀ x813 : Term (div_mod_spec n m q r), Q x813"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nCongruent_ab_lt. Let $m$ and $n$ and $a$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Then for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $x$ to $matita_basics_logic.And$ applied to $matita_basics_logic.And$ applied to $matita_arithmetics_congruence.congruent$ applied to $x$ and $a$ and $m$ and $matita_arithmetics_congruence.congruent$ applied to $x$ and $b$ and $n$ and $matita_arithmetics_nat.lt$ applied to $x$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$.\nassistant\n", "label": "Axiom congruent_ab_lt : forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), forall __2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)), cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (fun x => matita_basics_logic.And (matita_basics_logic.And (matita_arithmetics_congruence.congruent x a m) (matita_arithmetics_congruence.congruent x b n)) (matita_arithmetics_nat.lt x (matita_arithmetics_nat.times m n)))) .", "predict": "Axiom congruent_ab_lt : forall m : univs.Type0, forall n : matita_arithmetics_nat.nat, forall a : matita_arithmetics_nat.nat, forall b : matita_arithmetics_nat.nat, forall __ : cic.prop, forall __1 : cic.prop, forall __2 : cic.prop, forall x : matita_arithmetics_nat.nat, (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_basics_logic.eq (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) x) (matita_basics_logic.And (matita_basics_logic.And (matita_arithmetics_congruence.congruent x a m) (matita_arithmetics_congruence.congruent x b n)) (matita_arithmetics_nat.lt x (matita_arithmetics_nat.times m n)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nList_rect_CProp0. For all elements $_A$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_776$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$, for all elements $_H_nil$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_lists_list.nil$ applied to $_A$, for all functions $_H_cons$ from elements $x_778$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $x_777$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ and elements $_x_780$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $x_777$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_lists_list.cons$ applied to $_A$ and $x_778$ and $x_777$, for all elements $x_776$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_776$.\nassistant\n", "label": "list_rect_CProp0 : _A : cic.Univ univs.Type0 -> Q_ : (_x_776 : cic.Term univs.Type0 (matita_basics_lists_list.list _A) -> cic.Univ cic.prop) -> _H_nil : cic.Term cic.prop (Q_ (matita_basics_lists_list.nil _A)) -> _H_cons : (x_778 : cic.Term univs.Type0 _A -> x_777 : cic.Term univs.Type0 (matita_basics_lists_list.list _A) -> _x_780 : cic.Term cic.prop (Q_ x_777) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.cons _A x_778 x_777))) -> x_776 : cic.Term univs.Type0 (matita_basics_lists_list.list _A) -> cic.Term cic.prop (Q_ x_776) .", "predict": "list_rect_CProp0 : (A : univs.Type0) -> (Q : (x : cic.Term univs.Type0) -> matita_basics_lists_list.list A -> cic.prop) -> (H_nil : cic.Term cic.prop) -> (H_cons : (x : cic.Term univs.Type0) -> A -> (y : cic.Term univs.Type0) -> matita_basics_lists_list.list A -> cic.prop) -> (x : cic.Term univs.Type0) -> matita_basics_lists_list.list A -> cic.prop) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nLt_sigma_p. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla funktioner $p1$ och $p2$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, för alla funktioner $g1$ och $g2$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla funktioner $__$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $p1$ applicerat på $i$ och $matita_basics_bool.true$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $p2$ applicerat på $i$ och $matita_basics_bool.true$, för alla funktioner $__1$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $p1$ applicerat på $i$ och $matita_basics_bool.true$ till element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $g1$ applicerat på $i$ och $g2$ applicerat på $i$, för alla element $__2$ av $cic.Term$ av $cic.prop$", "label": "axiom lt_sigma_p (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p1 p2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (g1 g2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p2 i) matita_basics_bool.true)) (__1 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i n)) -> (__2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_arithmetics_nat.le (g1 i) (g2 i))) (__2 : cic.Term cic.prop (matita_basics", "predict": " och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $p1$ applicerat på $i$ och $matita_basics_bool.true$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $p2$ applicerat på $i$ och $matita_basics_bool.true$.\n\naxiom lt_sigma_p (n : univs.Type0) (p1 p2 : (i : univs.Type0) → matita_arithmetics_nat.nat → cic.Term (univs.Type0 × matita_basics_bool.bool)) (g1 g2 : (i : univs.Type0) → matita_arithmetics_nat.nat → cic.Term (univs.Type0 × matita_arithmetics_nat.nat)) (i : univs.Type0) (p : matita_arithmetics_nat.lt i n) (b : matita_basics_bool.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_bool.bool)) (x : p1 i (matita_basics_bool.true)) (y : p2 i (matita_basics_bool.true)) : ∀ (x : univs.Type0) (y : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_bool.bool)) (z : p1 i (matita_basics_bool.true)) (w : p2 i (matita_basics_bool.true)) : ∀ (x : univs.Type0) (y : matita_arithmetics_nat.lt x n) (z : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_bool.bool)) (w : p1 i (matita_basics_bool.true)) (v : p2 i (matita_basics_bool.true)) : ∀ (x : univs.Type0) (y : matita_arithmetics_nat.le (g1 x) (g"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nLet_clause_15692. Let $m$ and $n$ and $a$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Let $posm$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$. Let $pnm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Let $c$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $d$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $d$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme0$ of $", "label": "axiom let_clause_15692 (m n a b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (λ d => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (", "predict": "cic.Term$ of $cic.prop$ and $matita_basics_logic.and$ applied to $posn$ and $posm$ and $pnm$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $m$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, the statement that for all elements $x$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $x$ and $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $x$ and $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $m$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $x$ and $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nDiv_mod_spec_rect_Type1_body. Soient $_n$ et $_m$ et $_q$ et $_r$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $Q_$ une fonction des éléments $_x_829$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $_n$ et $_m$ et $_q$ et $_r$ à des éléments de $cic.Univ$ de $univs.Type1$. Soit $_H_div_mod_spec_intro$ une fonction des éléments $x_831$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $_r$ et $_m$ et des éléments $x_830$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $_n$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $_q$ et $_m$ et $_r$ à des éléments de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_arithmetics_div_and_mod.div_mod_spec_intro$ appliqué à $_n$ et $_m$ et $_q$ et $_r$ et $x_831$ et $x_830$. Soit $x_829$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $_n$ et $_m$ et $_q$ et $_r$. Alors $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_829$.\nassistant\n", "label": "postulate div_mod_spec_rect_Type1_body : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Q_ : (_x_829 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ univs.Type1) -> (_H_div_mod_spec_intro : (x_831 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_830 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_831 x_830))) -> (x_829 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Term univs.Type1 (Q_ x_829)", "predict": "postulate div_mod_spec_rect_Type1_body : (n : Nat) -> (m : Nat) -> (q : Prop) -> (r : Prop) -> (x : Universe Type0) -> (y : Universe Type1) -> (f : (x : Term Prop) -> (y : Term Prop) -> div_mod_spec n m q r) -> (x : Term Prop) -> (y : Term Prop) -> (z : Term Prop) -> (g : (x : Term Prop) -> (y : Term Prop) -> (z : Term Prop) -> Q x y z) -> (x : Term Prop) -> (y : Term Prop) -> (z : Term Prop) -> (h : (x : Term Prop) -> (y : Term Prop) -> (z : Term Prop) -> div_mod_spec_intro x y z) -> (x : Term Prop) -> (y : Term Prop) -> (z : Term Prop) -> (w : (x : Term Prop) -> (y : Term Prop) -> (z : Term Prop) -> Lt r m) -> (x : Term Prop) -> (y : Term Prop) -> (z : Term Prop) -> (u : (x : Term Prop) -> (y : Term Prop) -> (z : Term Prop) -> Eq (lift (and (Type0) (Type2))) (Nat)) -> (x : Term Prop) -> (y : Term Prop) -> (z : Term Prop) -> (v : (x : Term Prop) -> (y : Term Prop) -> (z : Term Prop) -> Plus (times q m) r) -> (x : Term Prop) -> (y : Term Prop) -> (z : Term Prop) -> (w : (x : Term Prop) -> (y : Term Prop) -> (z : Term Prop) -> g x y z) -> (x : Term Prop) -> (y : Term Prop) -> (z : Term Prop) -> (h x y z) -> (x : Term Prop) -> (y : Term Prop) -> (z : Term Prop) -> (w x y z) -> (u x y z) -> (v x y z) -> (w x y z) -> (u x y z) -> (v x y z) -> (Q x y z)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nAnd_inv_rect_CProp1. Låt $x1$ och $x2$ vara element av $cic.Univ$ av $cic.prop$. Låt $Hterm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$. Då för alla funktioner $P$ från element $_z377$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $x_164$ av $cic.Term$ av $cic.prop$ och $x1$ och element $x_163$ av $cic.Term$ av $cic.prop$ och $x2$ och element $_z378$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_164$ och $x_163$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_164$ och $x_163$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "And_inv_rect_CProp1 : x1 : cic.Univ cic.prop -> x2 : cic.Univ cic.prop -> Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2) -> P : (_z377 : cic.Term cic.prop (matita_basics_logic.And x1 x2) -> cic.Univ cic.prop) -> _H1 : (x_164 : cic.Term cic.prop x1 -> x_163 : cic.Term cic.prop x2 -> _z378 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_164 x_163)) -> cic.Term cic.prop (P (matita_basics_logic.conj x1 x2 x_164 x_163))) -> cic.Term cic.prop (P Hterm) .", "predict": "and_inv_rect_CProp1 : (x1 : Elem (cic.Univ (cic.prop))) -> (x2 : Elem (cic.Univ (cic.prop))) -> (Hterm : Elem (cic.Term (cic.prop))) -> Proof (and (x1) (x2)) -> Proof (forall (P : (z377 : Elem (cic.Term (cic.prop))) -> and (x1) (x2)) -> forall (x164 : Elem (cic.Term (cic.prop))) -> forall (x163 : Elem (cic.Term (cic.prop))) -> forall (z378 : Elem (cic.Term (cic.prop))) -> eq (lift (cic.prop) (univs.Type2)) (and (x1) (x2)) (Hterm) (conj (x1) (x2)) (x164) (x163) -> P (conj (x1) (x2)) (x164) (x163)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nLop_Strue. Soient $m$ et $i$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $acc$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_chebyshev_bertrand256.list_divides$ appliqué à $acc$ et $i$ et $matita_basics_bool.true$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_chebyshev_bertrand256.lprim$ appliqué à $matita_arithmetics_nat.S$ appliqué à $m$ et $i$ et $acc$ et $matita_arithmetics_chebyshev_bertrand256.lprim$ appliqué à $m$ et $matita_arithmetics_nat.S$ appliqué à $i$ et $acc$.\nassistant\n", "label": "axiom lop_Strue (m i : cic.Term univs.Type0 matita_arithmetics_nat.nat) (acc : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_chebyshev_bertrand256.list_divides acc i) matita_basics_bool.true)) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) (matita_arithmetics_chebyshev_bertrand256.lprim (matita_arithmetics_nat.S m) i acc) (matita_arithmetics_chebyshev_bertrand256.lprim m (matita_arithmetics_nat.S i) acc))", "predict": "axiom lop_strue (m i : cic.Term univs.Type0) (acc : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) : ∀ p : cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_bool.bool) (matita_arithmetics_chebyshev_bertrand256.list_divides acc i)) → matita_basics_bool.true → cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_lists_list.list matita_arithmetics_nat.nat) (matita_arithmetics_chebyshev_bertrand256.lprim (matita_arithmetics_nat.S m) i) acc) (matita_arithmetics_chebyshev_bertrand256.lprim m (matita_arithmetics_nat.S i) acc)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nLet_clause_1033. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $posn$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $x2515$ et $x2516$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2515$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $x2516$ et $matita_arithmetics_div_and_mod.div$ appliqué à $x2515$ et $x2516$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $x2515$ et $x2516$.\nassistant\n", "label": "axiom let_clause_1033 (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (x2515 x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)))", "predict": "axiom let_clause_1033 (n : cic.Term univs.Type0) (posn : cic.Term cic.prop) (x2515 x2516 : cic.Term univs.Type0) : matita_arithmetics_nat.nat := ∀ posn : cic.Term (cic.prop) (matita_arithmetics_nat.lt (matita_arithmetics_nat.O) n), ∀ x2515 : cic.Term (univs.Type0) (matita_arithmetics_nat.nat), ∀ x2516 : cic.Term (univs.Type0) (matita_arithmetics_nat.nat), cic.Term (cic.prop) (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_arithmetics_nat.nat) x2515) (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516) (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nPrimes_below. Soit $_l$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $matita_arithmetics_nat.nat$. Soit $_n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Univ$ tient pour $cic.prop$.\nassistant\n", "label": "axiom primes_below (_l : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Univ cic.prop", "predict": "axiom primes_below (l : Term (univs.Type0) (matita_basics_lists_list)) (n : Term (univs.Type0) (matita_arithmetics_nat)) : Univ (prop)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nEq_rect_CProp0_body. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Let $_x$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $Q_$ be a function from elements $x_37$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $_x_38$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_37$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_refl$ be an element of $cic.Term$ of $cic.prop$ and $Q_$ applied to $_x$ and $matita_basics_logic.refl$ applied to $A$ and $_x$. Then for all elements $x_37$ of $cic.Term$ of $univs.Type2$ and $A$, for all elements $x_38$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_37$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_37$ and $x_38$.\nassistant\n", "label": "postulate eq_rect_CProp0_body : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_37 : cic.Term univs.Type2 A) -> (_x_38 : cic.Term cic.prop (matita_basics_logic.eq A _x x_37)) -> cic.Univ cic.prop) -> (_H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x))) -> (x_37 : cic.Term univs.Type2 A) -> (x_38 : cic.Term cic.prop (matita_basics_logic.eq A _x x_37)) -> cic.Term cic.prop (Q_ x_37 x_38)", "predict": "postulate eq_rect_CProp0_body : (A : univs.Type2) -> (x : cic.Term univs.Type2 A) -> (Q : (x_37 : cic.Term univs.Type2 A) -> (x_38 : cic.Term (cic.prop) (matita_basics_logic.eq A x)) -> cic.Univ (cic.prop)) -> (H_refl : (x : cic.Term univs.Type2 A) -> (matita_basics_logic.refl (A , x)) -> cic.Term (cic.prop) (Q x)) -> (x_37 : cic.Term univs.Type2 A) -> (x_38 : cic.Term (cic.prop) (matita_basics_logic.eq A x)) -> cic.Term (cic.prop) (Q x_37 x_38)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nSum_rect_CProp4_body. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_556$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_inl$ des éléments $x_557$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.inl$ appliqué à $_A$ et $_B$ et $x_557$, pour toutes les fonctions $_H_inr$ des éléments $x_558$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.inr$ appliqué à $_A$ et $_B$ et $x_558$, pour tous les éléments $x_556$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_556$.\nassistant\n", "label": "Sum_rect_CProp4_body : _A : cic.Univ univs.Type0 -> _B : cic.Univ univs.Type0 -> Q_ : (_x_556 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) -> cic.Univ cic.prop) -> _H_inl : (x_557 : cic.Term univs.Type0 _A -> cic.Term cic.prop (Q_ (matita_basics_types.inl _A _B x_557))) -> _H_inr : (x_558 : cic.Term univs.Type0 _B -> cic.Term cic.prop (Q_ (matita_basics_types.inr _A _B x_558))) -> x_556 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) -> cic.Term cic.prop (Q_ x_556) .", "predict": "sum_rect_CProp4_body : (A : Elem (univs Type0)) -> (B : Elem (univs Type0)) -> Proof (forall (x_556 : Elem (cic Term) (univs Type0)) (forall (Q_ : (x_556 : Elem (cic Term) (univs Type0)) -> (A + B) : Elem (cic Univ) (cic prop)) (forall (x_557 : Elem (cic Term) (univs Type0)) (A : Elem (cic Term) (univs Type0)) (Q_ (inl (A, B)) x_557)) (forall (x_558 : Elem (cic Term) (univs Type0)) (B : Elem (cic Term) (univs Type0)) (Q_ (inr (A, B)) x_558))) (forall (x_556 : Elem (cic Term) (univs Type0)) (A + B : Elem (cic Term) (univs Type0)) (Q_ x_556)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nComm. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $xxx$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $nil$. Then for all elements $a$ and $b$ of $cic.Term$ of $univs.Type0$ and $A$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $nil$ and $matita_arithmetics_bigops.aop$ applied to $A$ and $nil$ and $xxx$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $nil$ and $matita_arithmetics_bigops.aop$ applied to $A$ and $nil$ and $xxx$ and $b$ and $a$.\nassistant\n", "label": "Axiom comm : forall A : cic.Univ univs.Type0, forall nil : cic.Term univs.Type0 A, forall xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A nil), forall a : cic.Term univs.Type0 A, forall b : cic.Term univs.Type0 A, cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A nil (matita_arithmetics_bigops.aop A nil xxx) a b) (matita_arithmetics_bigops.op A nil (matita_arithmetics_bigops.aop A nil xxx) b a)) .", "predict": "Axiom : forall A : univs.Type0, forall nil : cic.Term, forall xxx : cic.Term, (A : matita_arithmetics_bigops.ACop A nil) -> forall a : cic.Term, forall b : cic.Term, (cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A nil (matita_arithmetics_bigops.aop A nil xxx)) (matita_arithmetics_bigops.op A nil (matita_arithmetics_bigops.aop A nil xxx))) (matita_arithmetics_bigops.op A nil (matita_arithmetics_bigops.aop A nil xxx))) (a b) (matita_arithmetics_bigops.op A nil (matita_arithmetics_bigops.aop A nil xxx)) (b a)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nLe_n_Sn. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $n$.\nassistant\n", "label": "Axiom le_n_Sn : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term cic.prop (matita_arithmetics_nat.le n (matita_arithmetics_nat.S n)) .", "predict": "Axiom le_n_S : forall n : univs.Type0 & matita_arithmetics_nat.nat, cic.prop (n <= matita_arithmetics_nat.S n) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nLet_m1. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $n$ och $_x_365$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $univs.Type0$ och $matita_arithmetics_nat.nat$.\nassistant\n", "label": "Axiom let_m1 : forall f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term univs.Type0 matita_arithmetics_nat.nat .", "predict": "Axiom let_m1 : forall f : Term univs.Type0 -> nat, forall n : Term univs.Type0, forall x : nat, forall b : Term univs.Type0, Prop ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nAnd_ind. Pour tous les éléments $_A$ et $_B$ de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $Q_$ des éléments $_x_118$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_conj$ des éléments $x_120$ de $cic.Term$ de $cic.prop$ et de $_A$ et des éléments $x_119$ de $cic.Term$ de $cic.prop$ et de $_B$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_logic.conj$ appliqué à $_A$ et $_B$ et $x_120$ et $x_119$, pour tous les éléments $x_118$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_118$.\nassistant\n", "label": "Axiom And_ind : forall _A : cic.Univ cic.prop, forall _B : cic.Univ cic.prop, forall Q_ : ((_x_118 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ cic.prop), forall _H_conj : ((x_120 : cic.Term cic.prop _A) -> (x_119 : cic.Term cic.prop _B) -> cic.Term cic.prop (Q_ (matita_basics_logic.conj _A _B x_120 x_119))), forall x_118 : cic.Term cic.prop (matita_basics_logic.And _A _B), cic.Term cic.prop (Q_ x_118) .", "predict": "Axiom and_ind : forall A : cic.Univ prop, forall B : cic.Univ prop, forall Q : (x : cic.Term prop) -> and A B -> prop, forall x : cic.Term prop, forall H_conj : (x : cic.Term prop) -> and A B -> prop, forall x119 : cic.Term prop, forall Q : (x : cic.Term prop) -> and A B -> prop, forall x120 : cic.Term prop, forall H_conj : (x : cic.Term prop) -> and A B -> prop, forall x118 : cic.Term prop, forall Q : (x : cic.Term prop) -> and A B -> prop, forall x118 : cic.Term prop, A /\\ B -> Q x118 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nDistributive_times_plus. $cic.Term$ tient pour $cic.prop$ et $matita_basics_relations.distributive$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.times$ et $matita_arithmetics_nat.plus$.\nassistant\n", "label": "distributive_times_plus : cic.Term cic.prop (matita_basics_relations.distributive matita_arithmetics_nat.nat matita_arithmetics_nat.times matita_arithmetics_nat.plus) .", "predict": "distributive_times_plus : : Proof (distributive (nat (times)) (plus)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nNot_found_max_spec. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all functions $__$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $i$ and $matita_basics_bool.false$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_minimization.max_spec$ applied to $n$ and $f$ and $matita_arithmetics_nat.O$.\nassistant\n", "label": "not_found_max_spec : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> __ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt i n) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)) -> cic.Term cic.prop (matita_arithmetics_minimization.max_spec n f matita_arithmetics_nat.O) .", "predict": "not_found_max_spec : (n : Elem (Term (Type0 (Univs))) (nat (Matita_arithmetics_nat))) -> (f : (n : Elem (Term (Type0 (Univs))) (nat (Matita_arithmetics_nat))) -> Elem (Term (Type0 (Univs))) (bool (Matita_basics_bool))) -> (i : Elem (Term (Type0 (Univs))) (nat (Matita_arithmetics_nat))) -> (x : Elem (Term (Type0 (Univs))) (prop (Matita_arithmetics_nat)) (Lt i n)) -> (y : Elem (Term (Type0 (Univs))) (prop (Matita_basics_logic)) (Eq (lift (Univs) (Type0)) (Type2) (bool (Matita_basics_bool))) (f i (bool (Matita_basics_bool) (false)))) -> Proof (prop (Term (Type0 (Univs))) (max_spec (nat (Matita_arithmetics_nat)) n f (nat (Matita_arithmetics_nat)) (O (Matita_arithmetics_nat)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nMin_not_exists. Pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, pour tous les éléments $n$ et $b$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour toutes les fonctions $__$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $b$ et $i$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $matita_arithmetics_nat.plus$ appliqué à $n$ et $b$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $i$ et $matita_basics_bool.false$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_minimization.min$ appliqué à $n$ et $b$ et $f$ et $matita_arithmetics_nat.plus$ appliqué à $n$ et $b$.\nassistant\n", "label": "Axiom min_not_exists : forall f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : ((i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le b i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_nat.plus n b))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.min n b f) (matita_arithmetics_nat.plus n b)) .", "predict": "Axiom min_not_exists : forall f : univs.Type0 -> matita_arithmetics_nat.nat -> univs.Type0 -> matita_basics_bool.bool, forall n : univs.Type0, forall b : matita_arithmetics_nat.nat, forall i : univs.Type0, forall p : prop, forall q : le b i, forall p1 : prop, forall q1 : lt i (plus n b), (prop (eq (lift univs.Type0 univs.Type2) (bool)) (f i) (false)) -> prop (eq (min n b) (f) (plus n b)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nDop_inv_rect_CProp4. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be an element of $cic.Term$ of $univs.Type0$ and $x1$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $x1$ and $x2$. Then for all functions $P$ from elements $_z1734$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $sum$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ and functions $prod$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $prod$ applied to $a$ and $matita_arithmetics_bigops.a", "label": "Dop_inv_rect_CProp4 : x1 : cic.Univ univs.Type0 -> x2 : cic.Term univs.Type0 x1 -> Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2) -> P : (_z1734 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2) -> cic.Univ cic.prop) -> _H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2) -> prod : (__ : cic.Term univs.Type0 x1 -> __1 : cic.Term univs.Type0 x1 -> cic.Term univs.Type0 x1) -> _null : (a : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> _distr : (a : cic.Term univs.Type0 x1 -> b : cic.Term univs.Type0 x1 -> c : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> _z1735 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr)) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term cic.prop (P Hterm) .", "predict": "Cop$ applied to $x1$ and $x2$ and $b$ and $c$ and $x2$ and functions $_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $prod$ applied to $a$ and $x2$ and $x2$ and $b$ and $c$ and $x2$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $prod$ applied to $a$ and $x2$ and $x2$ and $b$ and $c$ and $x2$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $prod$ applied to $a$ and $x2$ and $x2$ and $b$ and $c$ and $x2$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nSquare_double. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $n$ et $matita_arithmetics_nat.S$ appliqué à $n$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $n$.\nassistant\n", "label": "square_double : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S n)) (matita_arithmetics_nat.times (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) n)) .", "predict": "square_double : (n : Elem (Term (Type0))) -> Proof (forall (p : Prop) (n : Nat), (Lt (S (S (O))) n) -> Le (times (S n) (S n)) (times (times (S (S (O))) n) n)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nAnd_rect_Type3. Let $_A$ and $_B$ be elements of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_130$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $univs.Type3$. Then for all functions $_H_conj$ from elements $x_132$ of $cic.Term$ of $cic.prop$ and $_A$ and elements $x_131$ of $cic.Term$ of $cic.prop$ and $_B$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_logic.conj$ applied to $_A$ and $_B$ and $x_132$ and $x_131$, for all elements $x_130$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $_A$ and $_B$, $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_130$.\nassistant\n", "label": "And_rect_Type3 : _A : cic.Univ cic.prop -> _B : cic.Univ cic.prop -> Q_ : (_x_130 : cic.Term cic.prop (matita_basics_logic.And _A _B) -> cic.Univ univs.Type3) -> _H_conj : (x_132 : cic.Term cic.prop _A -> x_131 : cic.Term cic.prop _B -> cic.Term univs.Type3 (Q_ (matita_basics_logic.conj _A _B x_132 x_131))) -> x_130 : cic.Term cic.prop (matita_basics_logic.And _A _B) -> cic.Term univs.Type3 (Q_ x_130) .", "predict": "and_rect_Type3 : (A : Elem (cic.Univ (cic.prop))) -> (B : Elem (cic.Univ (cic.prop))) -> Proof (and A B) -> Proof (forall (H_conj : (x_132 : Elem (cic.Term (cic.prop))) -> (A : Elem (cic.Univ (cic.prop))) -> (x_131 : Elem (cic.Term (cic.prop))) -> (B : Elem (cic.Univ (cic.prop))) -> Proof (and (conj A B) x_132 x_131)) -> Proof (forall (x_130 : Elem (cic.Term (cic.prop))) -> Proof (and A B) -> Proof (Elem (cic.Term (univs.Type3)) (Q x_130))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nExtract_pair. Let $A$ and $B$ and $C$ and $D$ be elements of $cic.Univ$ of $univs.Type0$. Let $u$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $A$ and $B$. Let $Q$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $C$ and $D$. Then for all elements $x$ of $cic.Term$ of $univs.Type0$ and $C$, for all elements $y$ of $cic.Term$ of $univs.Type0$ and $D$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $C$ and $D$ and $matita_basics_types.match_Prod$ applied to $A$ and $B$ and $univs.Type0$ and the function that maps $__$ to $matita_basics_types.Prod$ applied to $C$ and $D$ and the function that maps $a$ and $b$ to $Q$ applied to $a$ and $b$ and $u$ and $matita_basics_types.mk_Prod$ applied to $C$ and $D$ and $x$ and $y$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.ex$ applied to $A$ and the function that maps $a$ to $matita_basics_logic.ex$ applied to $B$ and the function that maps $b$ to $matita_basics_logic.And$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $A$ and $B$ and $matita_basics_types.mk_Prod$ applied to $A$ and $B$ and $a$ and $b$ and $u$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied", "label": "extract_pair : A : cic.Univ univs.Type0 -> B : cic.Univ univs.Type0 -> C : cic.Univ univs.Type0 -> D : cic.Univ univs.Type0 -> u : cic.Term univs.Type0 (matita_basics_types.Prod A B) -> Q : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 B -> cic.Term univs.Type0 (matita_basics_types.Prod C D)) -> x : cic.Term univs.Type0 C -> y : cic.Term univs.Type0 D -> __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod C D)) (matita_basics_types.match_Prod A B univs.Type0 (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B) => matita_basics_types.Prod C D) (a : cic.Term univs.Type0 A => b : cic.Term univs.Type0 B => Q a b) u) (matita_basics_types.mk_Prod C D x y)) -> cic.Term cic.prop (matita_basics_logic.ex A (a : cic.Term univs.Type0 A => matita_basics_logic.ex B (b : cic.Term univs.Type0 B => matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B)) (matita_basics_types.mk_Prod A B a b) u) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod C D)) (Q a b) (matita_basics_types.mk_Prod C D x y))))) .", "predict": " to $C$ and $D$ and $matita_basics_types.mk_Prod$ applied to $C$ and $D$ and $x$ and $y$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nRange_rect_CProp1. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_937$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_range$ be a function from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$. Then for all elements $x_937$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_937$.\nassistant\n", "label": "postulate range_rect_CProp1 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_937 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ cic.prop) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_937 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term cic.prop (Q_ x_937)", "predict": "postulate range_rect_CProp1 : (A : Univ Type0) -> (Q_ : (x : Term Type0) -> range A -> Univ prop) -> (H_mk_range : (enum : (x : Term Type0) -> Nat) -> A -> Nat -> (upto : Term Type0) -> (filter : (x : Term Type0) -> Nat -> Bool) -> Term prop) -> (forall (x : Term Type0) -> range A -> Prop) (Q_ (x : Term Type0) (range A))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nBigop_commute. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $p11$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $p12$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $p21$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $p22$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Låt $op$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $B$ och $nil$. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$", "label": "bigop_commute : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p11 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> p12 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> p21 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> p22 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> B : cic.Univ univs.Type0 -> nil : cic.Term univs.Type0 B -> op : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil) -> f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 B) -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> __2 : (i : cic.Term univs.Type0 matita", "predict": " och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Låt $p$ vara en proposition définie par $p11 \\land (p12 \\land p21 \\land p22)$. Låt $q$ vara une proposition définie par $f($__)$ et $op (n, m)$. Principe de commutation de Bigop : $p \\implies q$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nUnit_rect_Type3_body. Let $Q_$ be a function from elements $_x_501$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$ to elements of $cic.Univ$ of $univs.Type3$. Let $_H_it$ be an element of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_types.it$. Then for all elements $x_501$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$, $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_501$.\nassistant\n", "label": "postulate unit_rect_Type3_body : (Q_ : (_x_501 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ univs.Type3) -> (_H_it : cic.Term univs.Type3 (Q_ matita_basics_types.it)) -> (x_501 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Term univs.Type3 (Q_ x_501)", "predict": "postulate unit_rect_Type3_body : (Q_ : (x_501 : univs.Type0) -> matita_basics_types.unit -> cic.Univ) -> (H_it : cic.Term univs.Type3) -> Q_ (matita_basics_types.it) : all (x_501 : cic.Term univs.Type0) (matita_basics_types.unit) (cic.Term univs.Type3) (Q_ x_501)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nMatch_eq. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Alors pour tous les éléments $_x$ de $cic.Term$ de $univs.Type2$ et de $A$, pour tous les éléments $return_sort$ de $cic.Sort$, pour toutes les fonctions $return_type$ des éléments $__$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $__$ à des éléments de $cic.Univ$ de $return_sort$, pour tous les éléments $case_refl$ de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$, pour tous les éléments $__$ de $cic.Term$ de $univs.Type2$ et de $A$, pour tous les éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $__$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $__$ et $z$.\nassistant\n", "label": "postulate match_eq : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (return_sort : cic.Sort) -> (return_type : (__ : cic.Term univs.Type2 A) -> (z : cic.Term cic.prop (matita_basics_logic.eq A _x __)) -> cic.Univ return_sort) -> (case_refl : cic.Term return_sort (return_type _x (matita_basics_logic.refl A _x))) -> (__ : cic.Term univs.Type2 A) -> (z : cic.Term cic.prop (matita_basics_logic.eq A _x __)) -> cic.Term return_sort (return_type __ z)", "predict": "postulate match_eq : (A : univs.Type2) -> (x : cic.Term univs.Type2 A) -> (return_sort : cic.Sort) -> (return_type : (x : cic.Term univs.Type2 A) -> cic.Term return_sort (return_type x)) -> (z : cic.Term (cic.prop) (matita_basics_logic.eq A x)) -> (case_refl : (x : cic.Term univs.Type2 A) -> (matita_basics_logic.refl A x)) -> (x : cic.Term univs.Type2 A) -> (z : cic.Term (cic.prop) (matita_basics_logic.eq A x)) -> (cic.Term) (return_sort (return_type x) z)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nMax_spec_ind. Let $_n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $Q_$ be a function from elements $x_971$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $_x_972$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_minimization.max_spec$ applied to $_n$ and $_f$ and $x_971$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_found_max_spec$ be a function from elements $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $x_975$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $_n$ and elements $x_974$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $_f$ applied to $m$ and $matita_basics_bool.true$ and functions $x_973$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $i$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $_n$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $_f$ applied to $i$ and $matita_basics_bool.false$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $m$ and $matita_arithmetics_minimization.found_max_spec$ applied to $_n$ and $_f$ and $m$ and $x_975$ and $x_974$ and $x_", "label": "postulate max_spec_ind : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (Q_ : (x_971 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_972 : cic.Term cic.prop (matita_arithmetics_minimization.max_spec _n _f x_971)) -> cic.Univ cic.prop) -> (_H_found_max_spec : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_975 : cic.Term cic.prop (matita_arithmetics_nat.lt m _n)) -> (x_974 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f m) matita_basics_bool.true)) -> (x_973 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt m i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i _n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f i) matita_basics_bool.false)) -> cic.Term cic.prop (Q_ m (matita_arithmetics_minimization.found_max_spec _n _f m x_975 x_974 x_973))) -> (_", "predict": "973$ and $x_972$ and $x_971$. Let $_H_max_spec$ be a function from elements $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $x_976$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_minimization.max_spec$ applied to $_n$ and $_f$ and $x_976$ to elements of $cic.Univ$ of $cic.prop$ and $Q_$ applied to $m$ and $x_976$. Let $x_980$ be a function from elements $x_979$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $x_977$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_minimization.max_spec$ applied to $_n$ and $_f$ and $x_977$ to elements of $cic.Univ$ of $cic.prop$ and $Q_$ applied to $x_979$ and $x_977$ and $x_980$ be a proof of $cic.prop$ and $x_979$ be a proof of $matita_arithmetics_nat.nat$ and $x_977$ be a proof of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $x_981$ be a function from elements $x_980$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $x_977$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_minimization.max_spec$ applied to $_n$ and $_f$ and $x_977$ to elements of $cic.Univ$ of $cic.prop$ and $Q_$ applied to $x_980$ and $x_977$ and $x_981$ be a proof of $cic.prop$ and $x_980$ be a proof of $matita_arithmetics_nat"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nOp. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour tous les éléments $_xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $nil$, pour tous les éléments $_x_807$ et $_x_808$ de $cic.Term$ de $univs.Type0$ et de $A$, $cic.Term$ tient pour $univs.Type0$ et $A$.\nassistant\n", "label": "op : A : cic.Univ univs.Type0 -> nil : cic.Term univs.Type0 A -> _xxx : cic.Term univs.Type0 (matita_basics_lists_list.Aop A nil) -> _x_807 : cic.Term univs.Type0 A -> _x_808 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A .", "predict": "op : (A : Elem (cic.Univ (univs.Type0))) -> Proof (forall (nil : Elem (cic.Term (univs.Type0))) (A) (forall (xxx : Elem (cic.Term (univs.Type0))) (A) (matita_basics_lists_list.Aop A nil)) (forall (x_807 : Elem (cic.Term (univs.Type0))) (A) (forall (x_808 : Elem (cic.Term (univs.Type0))) (A))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nTrue_rect_CProp2. Soit $Q_$ une fonction des éléments $_x_60$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_I$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_logic.I$. Soit $x_60$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_60$.\nassistant\n", "label": "postulate True_rect_CProp2 : (Q_ : (_x_60 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ cic.prop) -> (_H_I : cic.Term cic.prop (Q_ matita_basics_logic.I)) -> (x_60 : cic.Term cic.prop matita_basics_logic.True) -> cic.Term cic.prop (Q_ x_60)", "predict": "postulate true_rect_CProp2 : (Q : (x : Term prop) -> True -> Univ prop) -> (H : Term prop) -> (x : True) -> Term prop (Q x)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nSameF_upto_le. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $f$ and $g$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $A$. Then for all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $m$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_bigops.sameF_upto$ applied to $m$ and $A$ and $f$ and $g$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_bigops.sameF_upto$ applied to $n$ and $A$ and $f$ and $g$.\nassistant\n", "label": "axiom sameF_upto_le (A : cic.Univ univs.Type0) (f g : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 A) (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.le n m)) (__1 : cic.Term cic.prop (matita_arithmetics_bigops.sameF_upto m A f g)) : cic.Term cic.prop (matita_arithmetics_bigops.sameF_upto n A f g)", "predict": "axiom sameF_upto_le (A : cic.Univ) (f g : ∀ n : cic.Term, ∀ m : matita_arithmetics_nat.nat, n ≤ m → f n m → g n m) : ∀ n m : cic.Term, ∀ p : matita_arithmetics_bigops.le n m, ∀ q : matita_arithmetics_bigops.sameF_upto m A f g, sameF_upto n A f g"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nLe_times_div_m_m. For all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_div_and_mod.div$ applied to $n$ and $m$ and $m$ and $n$.\nassistant\n", "label": "le_times_div_m_m : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div n m) m) n) .", "predict": "le_times_div_m_m : (n : Elem (Term (univs Type0))) -> (m : Elem (nat (matita_arithmetics_nat))) -> Proof (forall __ : Elem (Term (cic prop)) (Lt (matita_arithmetics_nat O) m)) -> Proof (forall __ : Elem (Term (cic prop)) (Le (times (div_and_mod (matita_arithmetics_nat) n) m) n)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nMk_Aop. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Alors pour toutes les fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$, pour toutes les fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $nil$ et $a$ et $a$, pour toutes les fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $nil$ et $a$, pour toutes les fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$, $cic.Term$ tient pour $univs.Type0$ et $matita_basics_lists_list.Aop$ appliqué à $A$ et $nil$.\nassistant\n", "label": "Axiom mk_Aop : forall A : cic.Univ univs.Type0, forall nil : cic.Term univs.Type0 A, forall op : ((__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A), forall _nill : ((a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op nil a) a)), forall _nilr : ((a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a nil) a)), forall _assoc : ((a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))), cic.Term univs.Type0 (matita_basics_lists_list.Aop A nil) .", "predict": "Axiom mk_Aop : forall A : Univ, (nil : Term Type0 A) -> forall op : Term Type0 A -> forall a : Term Type0 A, (forall a : Term Type0 A, (a : Term prop (eq (lift Type0 Type2 A) (op nil a))) -> forall a : Term Type0 A, (a : Term prop (eq (lift Type0 Type2 A) (op a nil))) -> forall a : Term Type0 A, (forall b : Term Type0 A, (forall c : Term Type0 A, (eq (op a (op b c)) (op (op a b) c)))) -> (Term Type0 (Aop A nil)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nInvert_permut. Soit $__$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour toutes les fonctions $__1$ des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__2$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $univs.Type0$ et $matita_arithmetics_nat.nat$.\nassistant\n", "label": "Axiom invert_permut : forall __ : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __1 : ((__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall __2 : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term univs.Type0 matita_arithmetics_nat.nat .", "predict": "Axiom invert_permut : forall u : univs.Type0, forall n : matita_arithmetics_nat.nat, forall f : (u -> matita_arithmetics_nat.nat -> u -> matita_arithmetics_nat.nat), forall x : u, forall y : matita_arithmetics_nat.nat, holds (cic.Term) (univs.Type0) (matita_arithmetics_nat.nat) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nExp_sigma. Soient $n$ et $a$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour toutes les fonctions $p$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_bigops.bigop$ appliqué à $n$ et la fonction qui envoie $i$ à $p$ appliqué à $i$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ et la fonction qui envoie $i$ à $a$ et $matita_arithmetics_exp.exp$ appliqué à $a$ et $matita_arithmetics_bigops.bigop$ appliqué à $n$ et la fonction qui envoie $i$ à $p$ appliqué à $i$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.plus$ et la fonction qui envoie $i$ à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$.\nassistant\n", "label": "Axiom exp_sigma : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall p : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (fun i => p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (fun i => a)) (matita_arithmetics_exp.exp a (matita_arithmetics_bigops.bigop n (fun i => p i) matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_nat.plus (fun i => matita_arithmetics_nat.S matita_arithmetics_nat.O)))) .", "predict": "Axiom exp_sigma : forall n : univs.Type0, forall a : matita_arithmetics_nat.nat, forall p : forall i : univs.Type0, forall b : matita_basics_bool.bool, cic.Term (cic.prop (univs.Type0) (matita_arithmetics_nat.nat)) (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (p i))) (matita_arithmetics_nat.nat) (matita_arithmetics_nat.S (matita_arithmetics_nat.O)) (matita_arithmetics_nat.times (matita_arithmetics_exp.exp a) (matita_arithmetics_bigops.bigop n (p i))) (matita_arithmetics_nat.nat) (matita_arithmetics_nat.O) (matita_arithmetics_nat.plus (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nFalse_rect_CProp2_body. Let $Q_$ be a function from elements $_x_76$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.False$ to elements of $cic.Univ$ of $cic.prop$. Then for all elements $x_76$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.False$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_76$.\nassistant\n", "label": "postulate False_rect_CProp2_body : (Q_ : (_x_76 : cic.Term cic.prop matita_basics_logic.False) -> cic.Univ cic.prop) -> (x_76 : cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ x_76)", "predict": "postulate false_rect_CProp2_body : (Q_ : (x_76 : Term prop) -> False) -> Term prop (Q_ x_76)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nSome. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $__$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Då håller $cic.Term$ för $univs.Type0$ och $matita_basics_types.option$ applicerat på $A$.\nassistant\n", "label": "Some : A : cic.Univ univs.Type0 -> __ : cic.Term univs.Type0 A -> cic.Term univs.Type0 (matita_basics_types.option A) .", "predict": "some : (A : Elem (univs Type0)) -> (T : Elem (cic Term) (univs Type0)) -> Proof (app (option (matita_basics_types)) A) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nDivides_plus. Låt $n$ och $p$ och $q$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $p$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $q$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $matita_arithmetics_nat.plus$ applicerat på $p$ och $q$.\nassistant\n", "label": "Axiom divides_plus : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall q : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_primes.divides n p), forall __1 : cic.Term cic.prop (matita_arithmetics_primes.divides n q), cic.Term cic.prop (matita_arithmetics_primes.divides n (matita_arithmetics_nat.plus p q)) .", "predict": "Axiom divides_plus : forall n : univs.Type0, forall p : matita_arithmetics_nat.nat, forall q : matita_arithmetics_nat.nat, (divides n p -> forall __1 : divides n q, divides n (plus p q)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nLet_clause_1033. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Alors pour tous les éléments $x2515$ et $x2516$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2515$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $x2516$ et $matita_arithmetics_div_and_mod.div$ appliqué à $x2515$ et $x2516$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $x2515$ et $x2516$.\nassistant\n", "label": "axiom let_clause_1033 (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (x2515 x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)))", "predict": "axiom let_clause_1033 (n : Term Type0 : nat) (posn : Prop (Lt (nd 0) n)) : ∀ x2515 : Term Type0 : nat, ∀ x2516 : Term Type0 : nat, Prop (Eq (lift Type0 Type2 nat) (and (Eq x2515 (plus (times x2516 (div (mod x2515 x2516))))))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nSplit_eq. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $matita_basics_lists_list.length$ applied to $A$ and $l$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $l$ and $matita_basics_lists_list.append$ applied to $A$ and $matita_basics_types.fst$ applied to $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.split$ applied to $A$ and $l$ and $n$ and $matita_basics_types.snd$ applied to $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.split$ applied to $A$ and $l$ and $n$.\nassistant\n", "label": "Axiom split_eq : forall A : cic.Univ univs.Type0, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall l : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall __ : cic.Term cic.prop (matita_arithmetics_nat.le n (matita_basics_lists_list.length A l)), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l (matita_basics_lists_list.append A (matita_basics_types.fst (matita_basics_lists_list.list A) (matita_basics_lists_list.list A) (matita_basics_lists_list.split A l n)) (matita_basics_types.snd (matita_basics_lists_list.list A) (matita_basics_lists_list.list A) (matita_basics_lists_list.split A l n)))) .", "predict": "Axiom split_eq : forall A : univs.Type0, forall n : matita_arithmetics_nat.nat, forall l : matita_basics_lists_list.list A, forall p : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list A l)) (matita_basics_lists_list.append A (matita_basics_types.fst (matita_basics_lists_list A)) (matita_basics_lists_list.split A l)) (n (matita_basics_lists_list.length A)) (matita_basics_types.snd (matita_basics_lists_list A)) (matita_basics_lists_list.split A l) (n) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nSig_inv_rect_CProp1. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1224$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $pi1$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_pi2$ av $cic.Term$ av $cic.prop$ och $x2$ applicerat på $pi1$ och element $_z1225$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Sig$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_Sig$ applicerat på $x1$ och $x2$ och $pi1$ och $_pi2$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.mk_Sig$ applicerat på $x1$ och $x2$ och $pi1$ och $_pi2$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "Axiom Sig_inv_rect_CProp1 : forall x1 : cic.Univ univs.Type0, forall x2 : ((__ : cic.Term univs.Type0 x1) -> cic.Univ cic.prop), forall Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2), forall P : ((_z1224 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> cic.Univ cic.prop), forall _H1 : ((pi1 : cic.Term univs.Type0 x1) -> (_pi2 : cic.Term cic.prop (x2 pi1)) -> (_z1225 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2)) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))), cic.Term cic.prop (P Hterm) .", "predict": "Axiom sig_inv_rect_CProp1 : forall x1 : univs.Type0, forall x2 : (cic.Term -> univs.Type0 -> cic.Univ) -> forall Hterm : cic.Term, forall P : (z1224 : cic.Term -> matita_basics_types.Sig -> cic.Univ) -> forall pi1 : cic.Term, forall pi2 : cic.prop, forall _z1225 : cic.prop, forall _H1 : pi1 -> x1 -> pi2, forall _pi2 : cic.prop, forall _x1 : cic.Univ, forall _x2 : (cic.Term -> univs.Type0 -> cic.Univ) -> forall _P : (z1224 : cic.Term -> matita_basics_types.Sig -> cic.Univ) -> forall _pi1 : cic.Term, forall _pi2 : cic.prop, forall _x1 : cic.Univ, forall _x2 : (cic.Term -> univs.Type0 -> cic.Univ) -> forall _P : (z1224 : cic.Term -> matita_basics_types.Sig -> cic.Univ) -> forall _pi1 : cic.Term, forall _pi2 : cic.prop, forall _x1 : cic.Univ, forall _x2 : (cic.Term -> univs.Type0 -> cic.Univ) -> forall _P : (z1224 : cic.Term -> matita_basics_types.Sig -> cic.Univ) -> forall _pi1 : cic.Term, forall _pi2 : cic.prop, forall _x1 : cic.Univ, forall _x2 : (cic.Term -> univs.Type0 -> cic.Univ) -> forall _P : (z1224 : cic.Term -> matita_basics_types.Sig -> cic.Univ) -> forall _pi1 : cic.Term, forall _pi2 : cic.prop, forall _x1 : cic.Univ, forall _x2 : (cic.Term -> univs.Type0 -> cic.Univ) -> forall _P : (z1224 : cic.Term -> matita_basics_types.Sig -> cic.Univ) -> forall _pi1 : cic.Term, forall _pi2 : cic.prop, forall _x1 : cic.Univ, forall _x2 : (cic.Term -> univs.Type0 -> cic.Un"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nUnit_rect_Type4_body. Låt $Q_$ vara en funktion från element $_x_497$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$ till element av $cic.Univ$ av $univs.Type4$. Låt $_H_it$ vara ett element av $cic.Term$ av $univs.Type4$ och $Q_$ applicerat på $matita_basics_types.it$. Låt $x_497$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$. Då håller $cic.Term$ för $univs.Type4$ och $Q_$ applicerat på $x_497$.\nassistant\n", "label": "axiom unit_rect_Type4_body (Q_ : (_x_497 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ univs.Type4) (_H_it : cic.Term univs.Type4 (Q_ matita_basics_types.it)) (x_497 : cic.Term univs.Type0 matita_basics_types.unit) : cic.Term univs.Type4 (Q_ x_497)", "predict": "axiom unit_rect_Type4_body (Q : x_497 : univs.Type0 → matita_basics_types.unit → cic.Univ) (H_it : x : cic.Term univs.Type4) (x_497 : x : univs.Type0) : Q x_497"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nNot_bertrand_to_le1. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_chebyshev_bertrand.not_bertrand$ appliqué à $n$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_div_and_mod.div$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_div_and_mod.div$ appliqué à $matita_arithmetics_sqrt.sqrt$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_nat.S", "label": "Axiom not_bertrand_to_le1 : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))) n), forall __1 : cic.Term cic.prop (matita_arithmetics_chebyshev_bertrand.not_bertrand n), cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_div_and_mod.div (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) (matita_arithmetics_exp.exp (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_div_and_mod.div (matita_arithmetics_sqrt.sqrt (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) .", "predict": "$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_chebyshev_bertrand.not_bertrand$ appliqué à $n$ et $matita_arithmetics_chebyshev_bertrand.not_bertrand$ appliqué à $n$ et $matita_arithmetics_chebyshev_bertrand.not_bertrand$ appliqué à $n$ et $matita_arithmetics_chebyshev_bertrand.not_bertrand$ appliqué à $n$ et $matita_arithmetics_chebyshev_bertrand.not_bertrand$ appliqué à $n$ et $matita_arithmetics_chebyshev_bertrand.not_bertrand$ appliqué à $n$ et $matita_arithmetics_chebyshev_bertrand.not_bertrand$ appliqué à $n$ et $matita_arithmetics_chebyshev_bertrand.not_bertrand$ appliqué à $n$ et $matita_arithmetics_chebyshev_bertrand.not_bertrand$ appliqué à $n$ et $matita_arithmetics_chebyshev_bertrand.not_bertrand$ appliqué à $n$ et $matita_arithmetics_chebyshev_bertrand.not_bertrand$ appliqué à $n$ et $matita_arithmetics_chebyshev_bertrand.not_bertrand$ appliqué à $n$ et $matita_arithmetics_chebyshev_bertrand.not_bertrand$ appliqué à $n$ et $matita_arithmetics_chebyshev_bertrand.not_bertrand$ appliqué à $n$ et $matita_arithmetics_chebyshev_bertrand.not_bertrand$ appliqué à $n$ et $matita_arithmetics_chebyshev_bertrand.not_bertrand$ appliqué à $n$ et $matita_arithmetics_chebyshev_bertrand.not_bertrand$ appliqué à $n$ et $matita_arithmetics_chebyshev_bertrand.not_bertrand$ appliqué à $n$ et $matita_arithmetics_chebyshev_bertrand.not_bertrand$ appliqué à $n$ et $matita_arithmetics_chebyshev_bertrand.not_bertrand$ appliqué à $n$ et $matita_arithmetics_chebyshev"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nOption_rect_Type1. For all elements $_A$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_606$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type1$, for all elements $_H_None$ of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_basics_types.None$ applied to $_A$, for all functions $_H_Some$ from elements $x_607$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_basics_types.Some$ applied to $_A$ and $x_607$, for all elements $x_606$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$, $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_606$.\nassistant\n", "label": "option_rect_Type1 : _A : cic.Univ univs.Type0 -> Q_ : (_x_606 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Univ univs.Type1) -> _H_None : cic.Term univs.Type1 (Q_ (matita_basics_types.None _A)) -> _H_Some : (x_607 : cic.Term univs.Type0 _A -> cic.Term univs.Type1 (Q_ (matita_basics_types.Some _A x_607))) -> x_606 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Term univs.Type1 (Q_ x_606) .", "predict": "option_rect_Type1 : (A : univs.Type0) -> (Q_ : (x_606 : cic.Term univs.Type0) -> matita_basics_types.option A -> cic.Univ univs.Type1) -> (H_None : (x_606 : cic.Term univs.Type0) -> Q_ x_606 (matita_basics_types.None A)) -> (H_Some : (x_607 : cic.Term univs.Type0) -> A -> (x_606 : cic.Term univs.Type0) -> Q_ x_606 (matita_basics_types.Some A x_607)) -> (x_606 : cic.Term univs.Type0) -> matita_basics_types.option A -> cic.Term univs.Type1) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nLstar_inv_S_dx. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $R$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $B$. Let $l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $b1$ and $b2$ be elements of $cic.Term$ of $univs.Type0$ and $B$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $matita_arithmetics_nat.plus$ applied to $l$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $b1$ and $b2$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.ex2$ applied to $B$ and the function that maps $b$ to $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $l$ and $b1$ and $b$ and the function that maps $b$ to $R$ applied to $b$ and $b2$.\nassistant\n", "label": "Axiom lstar_inv_S_dx : forall B : cic.Univ univs.Type0, forall R : cic.Term univs.Type0 (matita_basics_relations.relation B), forall l : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b1 : cic.Term univs.Type0 B, forall b2 : cic.Term univs.Type0 B, forall __ : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2), cic.Term cic.prop (matita_basics_logic.ex2 B (fun b => matita_arithmetics_lstar.lstar B R l b1 b) (fun b => R b b2)) .", "predict": "Axiom lstar_inv_S_dx : forall B : univs.Type0, forall R : relation B, forall l : nat, forall b1 : B, forall b2 : B, forall p : prop, (lstar B R (plus l (S O) b1) b2 -> term p (ex2 B (lstar B R l b1) (R b))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nRange_rect_Type1_body. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $Q_$ från element $_x_925$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type1$, för alla funktioner $_H_mk_range$ från funktioner $_enum$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $_A$ och element $_upto$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $_filter$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_range$ applicerat på $_A$ och $_enum$ och $_upto$ och $_filter$, för alla element $x_925$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$, håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_925$.\nassistant\n", "label": "range_rect_Type1_body : _A : cic.Univ univs.Type0 -> Q_ : (_x_925 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Univ univs.Type1) -> _H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 _A) -> _upto : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> x_925 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Term univs.Type1 (Q_ x_925) .", "predict": "range_rect_Type1_body : (A : Elem (univ (Type0))) -> Proof (forall (Q : (x : Elem (Term (Type0))) -> Range (A) -> Elem (univ (Type1))) (forall (H : Enum (Type0) -> Nat) -> A) (forall (upto : Nat) -> A) (forall (filter : (x : Elem (Term (Type0))) -> Nat -> Bool) -> Q (mk_range A (Enum (Type0)) (upto)) (filter x)) (forall (x : Elem (Term (Type0))) -> Range (A) -> Proof (forall (x : Elem (Term (Type0))) -> Eq (Q x) (Q (range A)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nAnd_inv_rect_CProp3. För alla element $x1$ och $x2$ av $cic.Univ$ av $cic.prop$, för alla element $Hterm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z365$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $x_156$ av $cic.Term$ av $cic.prop$ och $x1$ och element $x_155$ av $cic.Term$ av $cic.prop$ och $x2$ och element $_z366$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_156$ och $x_155$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_156$ och $x_155$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "axiom And_inv_rect_CProp3 (x1 x2 : cic.Univ cic.prop) (Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2)) (P : (_z365 : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> cic.Univ cic.prop) (_H1 : (x_156 : cic.Term cic.prop x1) -> (x_155 : cic.Term cic.prop x2) -> (_z366 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_156 x_155))) -> cic.Term cic.prop (P (matita_basics_logic.conj x1 x2 x_156 x_155))) : cic.Term cic.prop (P Hterm)", "predict": "axiom and_inv_rect_CProp3 (x1 x2 : cic.Univ) (Hterm : cic.Term cic.prop) (P : ∀ z365 : cic.Term cic.prop, and x1 x2 → P) (x156 x155 : cic.Term cic.prop) (z366 : cic.Term cic.prop) (eq : lift cic.prop univs.Type2 (and x1 x2) Hterm (and x1 x2) (x156, x155)) : P (and x1 x2) (x156, x155)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nR4. Let $T0$ be an element of $cic.Univ$ of $univs.Type0$. Let $a0$ be an element of $cic.Term$ of $univs.Type0$ and $T0$. Let $T1$ be a function from elements $x0$ of $cic.Term$ of $univs.Type0$ and $T0$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $T0$ and $a0$ and $x0$ to elements of $cic.Univ$ of $univs.Type0$. Let $a1$ be an element of $cic.Term$ of $univs.Type0$ and $T1$ applied to $a0$ and $matita_basics_logic.refl$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $T0$ and $a0$. Then for all functions $T2$ from elements $x0$ of $cic.Term$ of $univs.Type0$ and $T0$ and elements $p0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $T0$ and $a0$ and $x0$ and elements $x1$ of $cic.Term$ of $univs.Type0$ and $T1$ applied to $x0$ and $p0$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $T1$ applied to $x0$ and $p0$ and $matita_basics_logic.R1$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $T0$ and $a0$ and $T1$ and $a1$ and $x0$ and $p0$ and $x1$ to elements of $cic.Univ$ of $univs.Type0$, for all elements $a2$ of $cic.Term$ of $univs.Type0$ and $T2$ applied to $a0$ and $matita_basics_logic.refl$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $T0$ and $a0$ and $a1$ and $matita_basics_logic.refl$ applied to $cic.lift$ applied to $univs.Type0$", "label": "axiom R4 (T0 : cic.Univ univs.Type0) (a0 : cic.Term univs.Type0 T0) (T1 : (x0 : cic.Term univs.Type0 T0) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> cic.Univ univs.Type0) (a1 : cic.Term univs.Type0 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0))) (T2 : (x0 : cic.Term univs.Type0 T0) -> (p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> (x1 : cic.Term univs.Type0 (T1 x0 p0)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T1 x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 T0) a0 T1 a1 x0 p0) x1)) -> cic.Univ univs.Type0) (a2 : cic.Term univs.Type0 (T2 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0) a1 (matita_basics_logic.refl (cic.lift univs.Type0 univ", "predict": " and $univs.Type2$ and $T1$ applied to $a0$ and $matita_basics_logic.refl$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $T0$ and $a0$, we have $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $T0$ and $a0$ and $a2$ and $matita_basics_logic.refl$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $T1$ applied to $a0$ and $matita_basics_logic.refl$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $T0$ and $a0$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $T0$ and $a0$ and $a2$ and $matita_basics_logic.refl$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $T1$ applied to $a0$ and $matita_basics_logic.refl$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $T0$ and $a0$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nAnd_rect_CProp4. Let $_A$ and $_B$ be elements of $cic.Univ$ of $cic.prop$. Then for all functions $Q_$ from elements $_x_146$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_conj$ from elements $x_148$ of $cic.Term$ of $cic.prop$ and $_A$ and elements $x_147$ of $cic.Term$ of $cic.prop$ and $_B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_logic.conj$ applied to $_A$ and $_B$ and $x_148$ and $x_147$, for all elements $x_146$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $_A$ and $_B$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_146$.\nassistant\n", "label": "And_rect_CProp4 : _A : cic.Univ cic.prop -> _B : cic.Univ cic.prop -> Q_ : (_x_146 : cic.Term cic.prop (matita_basics_logic.And _A _B) -> cic.Univ cic.prop) -> _H_conj : (x_148 : cic.Term cic.prop _A -> x_147 : cic.Term cic.prop _B -> cic.Term cic.prop (Q_ (matita_basics_logic.conj _A _B x_148 x_147))) -> x_146 : cic.Term cic.prop (matita_basics_logic.And _A _B) -> cic.Term cic.prop (Q_ x_146) .", "predict": "and_rect_CProp4 : (A : Elem (Univ (prop))) -> (B : Elem (Univ (prop))) -> Proof (forall (Q_ : (x_146 : Elem (Term (prop))) -> and A B) (forall (H_conj : (x_148 : Elem (Term (prop))) -> A -> B -> Elem (Term (prop))) (forall (x_146 : Elem (Term (prop))) (and A B) (prop) (Q_ (x_146)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nLe_min_r. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Då för alla element $n$ och $b$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_minimization.min$ applicerat på $n$ och $b$ och $f$ och $matita_arithmetics_nat.plus$ applicerat på $n$ och $b$.\nassistant\n", "label": "le_min_r : f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_minimization.min n b f) (matita_arithmetics_nat.plus n b)) .", "predict": "le_min_r : (f : Elem (Term (Type0)) (nat)) -> Proof (forall (n : Elem (Term (Type0)) (nat)) (forall (b : Elem (Term (Type0)) (nat)), Leq (min n b) (f (plus n b)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nLength_filter_eqb. Let $m$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.unique$ applied to $matita_arithmetics_nat.nat$ and $l$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_basics_lists_list.length$ applied to $matita_arithmetics_nat.nat$ and $matita_basics_lists_list.filter$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.eqb$ applied to $m$ and $l$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$.\nassistant\n", "label": "axiom length_filter_eqb (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (l : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) (__ : cic.Term cic.prop (matita_basics_lists_list.unique matita_arithmetics_nat.nat l)) : cic.Term cic.prop (matita_arithmetics_nat.le (matita_basics_lists_list.length matita_arithmetics_nat.nat (matita_basics_lists_list.filter matita_arithmetics_nat.nat (matita_arithmetics_nat.eqb m) l)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))", "predict": "axiom length_filter_eqb (m : Term Type0 Nat) (l : List Nat) (x : Prop) (y : unique Nat l) : ∀ __ : Prop, ∀ z : Nat, ∀ w : List Nat, le (length l) (filter (eqb m l) (S (O)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nLet_clause_16003. För alla element $m$ och $n$ och $a$ och $b$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $posn$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $posm$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla element $pnm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $c$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för", "label": "let_clause_16003 : m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) -> c : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (d : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (mat", "predict": " alla element $x$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat sur $cic.lift$ applicerat sur $univs.Type0$ sur $univs.Type2$ sur $matita_arithmetics_nat.nat$ sur $matita_arithmetics_gcd.gcd$ applicerat sur $n$ sur $m$ sur $matita_arithmetics_nat.S$ applicerat sur $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ applicerat sur $cic.lift$ applicerat sur $univs.Type0$ sur $univs.Type2$ sur $matita_arithmetics_nat.nat$ sur $matita_arithmetics_nat.minus$ applicerat sur $matita_arithmetics_nat.times$ applicerat sur $x$ sur $n$ sur $matita_arithmetics_nat.times$ applicerat sur $x$ sur $m$ sur $matita_arithmetics_nat.S$ applicerat sur $matita_arithmetics_nat.O$, en proposition $p$ est vraie."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nLet_clause_1033. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour toutes les fonctions $p1$ et $p2$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, pour toutes les fonctions $g1$ et $g2$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $n1$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour toutes les fonctions $Hind$ des fonctions $__$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $n1$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $p1$ appliqué à $i$ et $matita_basics_bool.true$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $p2$ appliqué à $i$ et $matita_basics_bool.true$ et des fonctions $__1$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $n1$ et des éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $p1", "label": "Axiom let_clause_1033 : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall p1 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall p2 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall g1 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall g2 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall Hind : ((__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i n1)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p2 i) matita_basics_bool.true)) -> (__1 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i n1)) -> (__2 : cic.Term", "predict": "$ appliqué à $i$ et $matita_basics_bool.true$ et des fonctions $__2$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $n1$ et des éléments $__3$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $p2$ appliqué à $i$ et $matita_basics_bool.true$ et des fonctions $Hind$ des fonctions $g1$ et $g2$ appliquées à $n$ et $n1$ et des fonctions $g1$ et $g2$ appliquées à $n$ et $n1$ et des fonctions $g1$ et $g2$ appliquées à $n$ et $n1$ et des fonctions $Hind$ des fonctions $g1$ et $g2$ appliquées à $n$ et $n1$ et des fonctions $g1$ et $g2$ appliquées à $n$ et $n1$ et des fonctions $g1$ et $g2$ appliquées à $n$ et $n1$ et des fonctions $Hind$ des fonctions $g1$ et $g2$ appliquées à $n$ et $n1$ et des fonctions $g1$ et $g2$ appliquées à $n$ et $n1$ et des fonctions $g1$ et $g2$ appliquées à $n$ et $n1$ et des fonctions $Hind$ des fonctions $g1$ et $g2$ appliquées à $n$ et $n1$ et des fonctions $g1$ et $g2$ appliquées à $n$ et $n1$ et des fonctions $g1$ et $g2$ appliquées à $n$ et $n1$ et des fonctions $Hind"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nAnd_inv_rect_Type2. For all elements $x1$ and $x2$ of $cic.Univ$ of $cic.prop$, for all elements $Hterm$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z341$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type2$, for all functions $_H1$ from elements $x_136$ of $cic.Term$ of $cic.prop$ and $x1$ and elements $x_135$ of $cic.Term$ of $cic.prop$ and $x2$ and elements $_z342$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_basics_logic.And$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_logic.conj$ applied to $x1$ and $x2$ and $x_136$ and $x_135$ to elements of $cic.Term$ of $univs.Type2$ and $P$ applied to $matita_basics_logic.conj$ applied to $x1$ and $x2$ and $x_136$ and $x_135$, $cic.Term$ holds for $univs.Type2$ and $P$ applied to $Hterm$.\nassistant\n", "label": "postulate And_inv_rect_Type2 : (x1 : cic.Univ cic.prop) -> (x2 : cic.Univ cic.prop) -> (Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> (P : (_z341 : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> cic.Univ univs.Type2) -> (_H1 : (x_136 : cic.Term cic.prop x1) -> (x_135 : cic.Term cic.prop x2) -> (_z342 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_136 x_135))) -> cic.Term univs.Type2 (P (matita_basics_logic.conj x1 x2 x_136 x_135))) -> cic.Term univs.Type2 (P Hterm)", "predict": "postulate and_inv_rect_Type2 : (x1 : cic.Univ) -> (x2 : cic.Univ) -> (Hterm : cic.Term cic.prop) -> matita_basics_logic.And x1 x2 -> (P : (z341 : cic.Term cic.prop) -> matita_basics_logic.And x1 x2 -> cic.Univ univs.Type2) -> (H1 : (x136 : cic.Term cic.prop) -> (x135 : cic.Term cic.prop) -> (z342 : cic.Term cic.prop) -> matita_basics_logic.eq (cic.lift cic.prop (univs.Type2)) (matita_basics_logic.And x1 x2) (Hterm) (matita_basics_logic.conj x1 x2) (x136) (x135) -> cic.Term univs.Type2) -> (x : matita_basics_logic.conj x1 x2) -> (x136 : cic.Term cic.prop) -> (x135 : cic.Term cic.prop) -> P (x) (x136) (x135)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nOption_rect_Type5. För alla element $_A$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $Q_$ från element $_x_594$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type5$, för alla element $_H_None$ av $cic.Term$ av $univs.Type5$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$, för alla funktioner $_H_Some$ från element $x_595$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $univs.Type5$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_595$, för alla element $x_594$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $univs.Type5$ och $Q_$ applicerat på $x_594$.\nassistant\n", "label": "postulate option_rect_Type5 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_594 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ univs.Type5) -> (_H_None : cic.Term univs.Type5 (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_595 : cic.Term univs.Type0 _A) -> cic.Term univs.Type5 (Q_ (matita_basics_types.Some _A x_595))) -> (x_594 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term univs.Type5 (Q_ x_594)", "predict": "postulate option_rect_Type5 : (A : Univ) -> (Q : Term Type0 -> Option A -> Term Type5) -> (H_None : Term Type5) -> (H_Some : (x : Term Type0) -> A -> Term Type5) -> (x : Term Type0) -> Term Type5 -> Q x (option A)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nMonotonic_pred. $cic.Term$ holds for $cic.prop$ and $matita_basics_relations.monotonic$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.le$ and $matita_arithmetics_nat.pred$.\nassistant\n", "label": "postulate monotonic_pred : cic.Term cic.prop (matita_basics_relations.monotonic matita_arithmetics_nat.nat matita_arithmetics_nat.le matita_arithmetics_nat.pred)", "predict": "postulate monotonic_pred : (cic.prop : Term) -> monotonic (nat : matita_arithmetics_nat) (le : Relation Nat) (pred : Nat -> Nat)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nExists_mid. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $P$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $l1$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$. Soit $x$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $l2$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $x$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_lists_list.Exists$ appliqué à $A$ et $P$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l1$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $x$ et $l2$.\nassistant\n", "label": "Axiom Exists_mid : forall A : cic.Univ univs.Type0, forall P : ((__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop), forall l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall x : cic.Term univs.Type0 A, forall l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall __ : cic.Term cic.prop (P x), cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 (matita_basics_lists_list.cons A x l2))) .", "predict": "Axiom exists_mid : forall A : univs.Type0, forall P : Term univs.Type0 -> A -> prop, forall l1 : list (Term univs.Type0), forall x : Term univs.Type0, forall l2 : list (Term univs.Type0), forall p : prop, (P x -> term p (exists (P A) (append A l1) (cons A x) l2)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nLet_clause_1572. Soient $m$ et $n$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $H$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $m$ et $n$ et $matita_arithmetics_nat.O$. Soit $auto$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $m$ et $matita_arithmetics_nat.O$. Alors pour tous les éléments $auto'$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n$ et $matita_arithmetics_nat.O$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $m$ et $matita_arithmetics_nat.O$.\nassistant\n", "label": "Axiom let_clause_1572 : forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd m n) matita_arithmetics_nat.O), forall auto : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m matita_arithmetics_nat.O), forall auto' : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n matita_arithmetics_nat.O), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m matita_arithmetics_nat.O) .", "predict": "Axiom clause_1572 : forall m : cic.Term (univs.Type0) : forall n : matita_arithmetics_nat.nat, forall posn : cic.Term (cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.O) n)) : forall H : cic.Term (cic.prop (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd m n) matita_arithmetics_nat.O)) : forall auto : cic.Term (cic.prop (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_arithmetics_nat.nat) m matita_arithmetics_nat.O)) : forall auto' : cic.Term (cic.prop (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_arithmetics_nat.nat) n matita_arithmetics_nat.O)) : cic.prop (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_arithmetics_nat.nat) m matita_arithmetics_nat.O) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nLet_clause_10331. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $lt4n$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$. Let $m$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $le4m$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $m$. Let $Hind$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_exp.exp$ applied to $matita_arithmetics_nat.S$ applied to $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_exp.exp$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $m$. Let $a$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $lea$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $a$. Let $Hinda$ be an element of $cic.Term$ of $cic.prop$ and $", "label": "postulate let_clause_10331 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (lt4n : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) n)) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (le4m : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))) m)) -> (Hind : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S m) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) m))) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (lea : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))) a)) -> (Hinda : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.plus (matita_arithmetics", "predict": "matita_arithmetics_exp.exp$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $a$. Let $b$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $leb$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $b$. Let $Hindb$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_exp.exp$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $b$. Let $c$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $lec$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $c$. Let $Hindc$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_exp.exp$ applied to $matita_arithmetics_nat.S$ applied to $matita_ar"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nSum_rect_Type2. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_541$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type2$, pour toutes les fonctions $_H_inl$ des éléments $x_542$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_basics_types.inl$ appliqué à $_A$ et $_B$ et $x_542$, pour toutes les fonctions $_H_inr$ des éléments $x_543$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_basics_types.inr$ appliqué à $_A$ et $_B$ et $x_543$, pour tous les éléments $x_541$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $univs.Type2$ et $Q_$ appliqué à $x_541$.\nassistant\n", "label": "postulate Sum_rect_Type2 : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_541 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ univs.Type2) -> (_H_inl : (x_542 : cic.Term univs.Type0 _A) -> cic.Term univs.Type2 (Q_ (matita_basics_types.inl _A _B x_542))) -> (_H_inr : (x_543 : cic.Term univs.Type0 _B) -> cic.Term univs.Type2 (Q_ (matita_basics_types.inr _A _B x_543))) -> (x_541 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Term univs.Type2 (Q_ x_541)", "predict": "postulate sum_rect_Type2 : (A : Univ Type0) -> (B : Univ Type0) -> (Q : Term Type0 -> Sum A B -> Univ Type2) -> (H_inl : (x : Term Type0) -> A -> Term Type2) -> (H_inr : (x : Term Type0) -> B -> Term Type2) -> (x : Term Type0) -> Sum A B -> Type2) -> Q x (inl x A) && Q x (inr x B)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nFilter. Soit $T$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $_p$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $T$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, pour tous les éléments $_l$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $T$, $cic.Term$ tient pour $univs.Type0$ et $matita_basics_lists_list.list$ appliqué à $T$.\nassistant\n", "label": "Axiom filter : forall T : cic.Univ univs.Type0, forall _p : ((__ : cic.Term univs.Type0 T) -> cic.Term univs.Type0 matita_basics_bool.bool), forall _l : cic.Term univs.Type0 (matita_basics_lists_list.list T), cic.Term univs.Type0 (matita_basics_lists_list.list T) .", "predict": "Axiom filter : forall T : univs.Type0, forall _p : Term univs.Type0 -> T -> Term univs.Type0 -> bool, forall _l : Term univs.Type0 -> list (Term univs.Type0), T -> univs.Type0 -> list (Term univs.Type0) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nSum_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all elements $_xxx$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $nil$, $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $nil$.\nassistant\n", "label": "sum_body : A : cic.Univ univs.Type0 -> nil : cic.Term univs.Type0 A -> _xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A nil) -> cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A nil) .", "predict": "sum_body : (A : Elem (univs Type0) (cic Univ)) -> Proof (forall (nil : Elem (cic Term) (univs Type0)) (A) (forall (xxx : Elem (cic Term) (univs Type0)) (Dop (A nil)) (Term (univs Type0) (ACop (A nil)))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nPrime_smallest_factor_n. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $matita_arithmetics_primes.smallest_factor$ applicerat på $n$.\nassistant\n", "label": "prime_smallest_factor_n : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) -> cic.Term cic.prop (matita_arithmetics_primes.prime (matita_arithmetics_primes.smallest_factor n)) .", "predict": "prime_smallest_factor_n : n : Elem (univs : Type0) -> Proof (forall (n : Elem (matita_arithmetics_nat : nat)) (Lt (S (O n)) (prime (smallest_factor n)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nFoldr. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$. Alors pour tous les éléments $_b$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $_l$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, $cic.Term$ tient pour $univs.Type0$ et $B$.\nassistant\n", "label": "postulate foldr : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) -> (_b : cic.Term univs.Type0 B) -> (_l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> cic.Term univs.Type0 B", "predict": "postulate foldr : (A : univs.Type0) -> (B : univs.Type0) -> (f : Term (times (plus A B)) (Term (plus A B))) -> (b : Term B) -> (l : list (Term A)) -> Term (univs.Type0)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nDPair_rect_CProp1. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $_f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_660$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_DPair$ from elements $dpi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_dpi2$ of $cic.Term$ of $univs.Type0$ and $_f$ applied to $dpi1$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_DPair$ applied to $A$ and $_f$ and $dpi1$ and $_dpi2$, for all elements $x_660$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_660$.\nassistant\n", "label": "postulate DPair_rect_CProp1 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (Q_ : (_x_660 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop) -> (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (x_660 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term cic.prop (Q_ x_660)", "predict": "postulate dpair_rect_CProp1 : (A : Univ Type0) -> (f : Term Type0 -> A -> Univ Type0) -> (Q : (x : Term Type0) -> DPair A (f x) -> Prop) -> (H_mk_DPair : (dpi1 : Term Type0) -> A -> (dpi2 : Term Type0) -> f dpi1 -> Prop) -> (x : Term Type0) -> DPair A (f x) -> Prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nLt_times_n_to_lt_r. Låt $n$ och $p$ och $q$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.times$ applicerat på $n$ och $p$ och $matita_arithmetics_nat.times$ applicerat på $n$ och $q$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $p$ och $q$.\nassistant\n", "label": "axiom lt_times_n_to_lt_r (n p q : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.times n p) (matita_arithmetics_nat.times n q))) : cic.Term cic.prop (matita_arithmetics_nat.lt p q)", "predict": "axiom lt_times_n_to_lt_r (n p q : matita_arithmetics_nat.nat) : matita_arithmetics_nat.lt (matita_arithmetics_nat.times n p) (matita_arithmetics_nat.times n q)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nInjn_Sn_n. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_permutation.injn$ applied to $f$ and $matita_arithmetics_nat.S$ applied to $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_permutation.injn$ applied to $f$ and $n$.\nassistant\n", "label": "Axiom injn_Sn_n : forall f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_permutation.injn f (matita_arithmetics_nat.S n)), cic.Term cic.prop (matita_arithmetics_permutation.injn f n) .", "predict": "Axiom injn_Sn_n : forall n : matita_arithmetics_nat.nat, forall p : cic.prop, forall f : univs.Type0 -> matita_arithmetics_nat.nat -> univs.Type0 -> matita_arithmetics_nat.nat, matita_arithmetics_permutation.injn f (matita_arithmetics_nat.S n) p ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nLog_exp. Låt $p$ och $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_log.log$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $p$ och $n$ och $m$ och $matita_arithmetics_nat.plus$ applicerat på $n$ och $matita_arithmetics_log.log$ applicerat på $p$ och $m$.\nassistant\n", "label": "Axiom log_exp : forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_log.log p (matita_arithmetics_nat.times (matita_arithmetics_exp.exp p n) m)) (matita_arithmetics_nat.plus n (matita_arithmetics_log.log p m))) .", "predict": "Axiom log_exp : forall p : univs.Type0, forall n : matita_arithmetics_nat.nat, forall m : matita_arithmetics_nat.nat, (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p -> forall __1 : matita_arithmetics_nat.lt (matita_arithmetics_nat.O) m, eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (log p (exp p n) m) (plus n (log p m))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nSub_pi2. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $P$ och $P'$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $__$ från element $x$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__$ av $cic.Term$ av $cic.prop$ och $P$ applicerat på $x$ till element av $cic.Term$ av $cic.prop$ och $P'$ applicerat på $x$, för alla element $x$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och funktionen som avbildar $x$ som $P$ applicerat på $x$, håller $cic.Term$ för $cic.prop$ och $P'$ applicerat på $matita_basics_types.pi1$ applicerat på $A$ och funktionen som avbildar $x0$ som $P$ applicerat på $x0$ och $x$.\nassistant\n", "label": "sub_pi2 : A : cic.Univ univs.Type0 -> P : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> P' : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> __ : (x : cic.Term univs.Type0 A -> __ : cic.Term cic.prop (P x) -> cic.Term cic.prop (P' x)) -> x : cic.Term univs.Type0 (matita_basics_types.Sig A (x : cic.Term univs.Type0 A => P x)) -> cic.Term cic.prop (P' (matita_basics_types.pi1 A (x0 : cic.Term univs.Type0 A => P x0) x)) .", "predict": "sub_pi2 : (A : Elem (cic.Univ (univs.Type0))) -> (P : (x : Elem (cic.Term (univs.Type0))) -> (A -> Elem (cic.Univ (cic.prop))) -> (P' : (x : Elem (cic.Term (univs.Type0))) -> (A -> Elem (cic.Term (cic.prop))) -> Proof (forall (x : Elem (cic.Term (univs.Type0))) (P x) -> forall (x : Elem (cic.Term (univs.Type0))) (P' x)) -> Proof (forall (x : Elem (matita_basics_types.Sig (A))) (forall (x0 : Elem (cic.Term (univs.Type0))) (P x0)) -> forall (x : Elem (cic.Term (univs.Type0))) (P (matita_basics_types.pi1 A) x)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nDPair_inv_rect_CProp1. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x2$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$. Soit $P$ une fonction des éléments $_z1158$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H1$ une fonction des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $x2$ appliqué à $dpi1$ et des éléments $_z1159$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$. Alors $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "postulate DPair_inv_rect_CProp1 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> (P : (_z1158 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1159 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P Hterm)", "predict": "postulate dpair_inv_rect_CProp1 : (x1 : Univ Type0) -> (x2 : Term Type0 -> Univ Type0) -> (Hterm : DPair x1 x2) -> (P : (z1158 : Term Type0) -> DPair x1 x2 -> Prop) -> (H1 : (dpi1 : Term Type0) -> (x1) -> (dpi2 : Term Type0) -> (x2) -> (z1159 : Prop) -> (eq (lift Type0 Type2) (DPair x1 x2)) -> (Hterm) -> (mk_DPair x1 x2) -> (dpi1) -> (dpi2) -> Prop) -> (P (mk_DPair x1 x2) (dpi1) (dpi2))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nExists_mid. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $P$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Then for all elements $l1$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $x$ of $cic.Term$ of $univs.Type0$ and $A$, for all elements $l2$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $P$ applied to $x$, $cic.Term$ holds for $cic.prop$ and $matita_basics_lists_list.Exists$ applied to $A$ and $P$ and $matita_basics_lists_list.append$ applied to $A$ and $l1$ and $matita_basics_lists_list.cons$ applied to $A$ and $x$ and $l2$.\nassistant\n", "label": "Axiom Exists_mid : forall A : cic.Univ univs.Type0, forall P : ((__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop), forall l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall x : cic.Term univs.Type0 A, forall l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall __ : cic.Term cic.prop (P x), cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 (matita_basics_lists_list.cons A x l2))) .", "predict": "Axiom exists_mid : forall A : univs.Type0, forall P : Term univs.Type0 -> A -> Univ prop, forall l1 : matita_basics_lists_list A, forall x : Term univs.Type0, forall l2 : matita_basics_lists_list A, forall __ : prop, forall q : P x, Term prop (matita_basics_lists_list Exists A P (matita_basics_lists_list append A l1) (matita_basics_lists_list cons A x) l2) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nLprim_invariant. Pour tous les éléments $n$ et $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $acc$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $i$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_chebyshev_bertrand256.primes_below$ appliqué à $acc$ et $i$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_chebyshev_bertrand256.primes_below$ appliqué à $matita_arithmetics_chebyshev_bertrand256.lprim$ appliqué à $n$ et $i$ et $acc$ et $matita_arithmetics_nat.plus$ appliqué à $n$ et $i$.\nassistant\n", "label": "Axiom lprim_invariant : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall acc : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat), forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) i), forall __1 : cic.Term cic.prop (matita_arithmetics_chebyshev_bertrand256.primes_below acc i), cic.Term cic.prop (matita_arithmetics_chebyshev_bertrand256.primes_below (matita_arithmetics_chebyshev_bertrand256.lprim n i acc) (matita_arithmetics_nat.plus n i)) .", "predict": "Axiom lprim_invariant : forall n : univs.Type0, forall i : matita_arithmetics_nat.nat, forall acc : univs.Type0, forall acc_list : matita_basics_lists_list.list, forall __ : cic.prop, forall __1 : matita_arithmetics_chebyshev_bertrand256.primes_below (acc : univs.Type0) (i : matita_arithmetics_nat.nat), forall __2 : cic.prop, forall __3 : matita_arithmetics_chebyshev_bertrand256.primes_below (n : univs.Type0) (i : matita_arithmetics_nat.nat), (cic.Term (cic.prop) (matita_arithmetics_chebyshev_bertrand256.primes_below (n : univs.Type0) (i : matita_arithmetics_nat.nat) (acc : univs.Type0)) (matita_arithmetics_nat.plus (n : univs.Type0) (i : matita_arithmetics_nat.nat))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nRange_rect_Type0_body. For all elements $_A$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_927$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type0$, for all functions $_H_mk_range$ from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $univs.Type0$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_927$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $univs.Type0$ and $Q_$ applied to $x_927$.\nassistant\n", "label": "postulate range_rect_Type0_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_927 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type0) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_927 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term univs.Type0 (Q_ x_927)", "predict": "postulate range_rect_Type0_body : (A : Univ) -> (Q : (x : Term Type0) -> range A) -> (H : (e : Enum (Nat)) -> A) -> (upto : Nat) -> (filter : (x : Term Type0) -> Nat -> Bool) -> (x : Term Type0) -> range (Q x)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nAop_rect_CProp2. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $_nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour toutes les fonctions $Q_$ des éléments $_x_881$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_Aop$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $", "label": "axiom Aop_rect_CProp2 (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_881 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop) (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) (x_881 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) : cic.Term cic.prop (Q_ x_881)", "predict": "cic.prop$, la propriété suivante est vraie : $Q_$(op) (a, b, c) = Q_$(op) (op (a, b), c) = Q_$(op) (a, op (b, c)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nDop_rect_CProp4. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $_nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour toutes les fonctions $Q_$ des éléments $_x_957$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_Dop$ des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $_nil$ et $_nil$ et des fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $b$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ à des éléments de $cic.Term", "label": "Axiom Dop_rect_CProp4 : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_957 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ cic.prop), forall _H_mk_Dop : ((sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))), forall x_957 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil), cic.Term cic.prop (Q_ x_957) .", "predict": "$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $_nil$ et $sum$ et $b$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nSig_rect_Type1. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_674$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $univs.Type1$. Låt $_H_mk_Sig$ vara en funktion från element $pi1$ av $cic.Term$ av $univs.Type0$ och $A$ och element $_pi2$ av $cic.Term$ av $cic.prop$ och $_f$ applicerat på $pi1$ till element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_basics_types.mk_Sig$ applicerat på $A$ och $_f$ och $pi1$ och $_pi2$. Då för alla element $x_674$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$, håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_674$.\nassistant\n", "label": "axiom Sig_rect_Type1 (A : cic.Univ univs.Type0) (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) (Q_ : (_x_674 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ univs.Type1) (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term univs.Type1 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) (x_674 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) : cic.Term univs.Type1 (Q_ x_674)", "predict": "axiom sig_rect_Type1 (A : univs.Type0) (f : Term univs.Type0 → A → prop) (Q : Sig A f → univs.Type1) : ∀ x_674 : Term univs.Type0, Sig A f → Term univs.Type1, Q (mk_Sig A f x_674)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nEven_or_odd. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $a$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $a$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $a$.\nassistant\n", "label": "even_or_odd : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (a : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a))))) .", "predict": "even_or_odd : (n : Elem (Nat (Univ Type0))) -> Proof (or (Eq (lift Type0 Type2) n) (Eq (times (S (S (O))) a) n)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nAop_rect_Type1. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Alors pour toutes les fonctions $Q_$ des éléments $_x_791$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type1$, pour toutes les fonctions $_H_mk_Aop$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c", "label": "postulate Aop_rect_Type1 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_791 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ univs.Type1) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type1 (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_791 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term univs.Type1 (Q_ x_791)", "predict": "$ et des fonctions $_comm$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $b$ et $op$ appliqué à $b$ et $a$ et des fonctions $_id$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $a$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nAop_discr. Let $a1$ be an element of $cic.Univ$ of $univs.Type", "label": "postulate Aop_discr : (a1 : cic.Univ univs.Type0) -> (a2 : cic.Term univs.Type0 a1) -> (x : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop a1 a2)) -> (y : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop a1 a2)) -> (_e : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop a1 a2)) x y)) -> cic.Term univs.Type2 (matita_arithmetics_bigops.match_Aop a1 a2 (cic.succ univs.Type2) (\\ __ : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop a1 a2) -> cic.univ univs.Type2) (\\ t0 : ((__ : cic.Term univs.Type0 a1) -> (__1 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ t1 : ((a : cic.Term univs.Type0 a1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (t0 a2 a) a)) -> \\ t2 : ((a : cic.Term univs.Type0 a1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (t0 a a2) a)) -> \\ t3 : ((a : cic.Term univs.Type0 a1) -> (b : cic.Term univs.Type0 a1) -> (c : cic.Term univs.Type0 a1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (t0 a (t0 b c)) (t0 (t0 a b) c))) -> matita_arithmetics_bigops.match_Aop a1 a2 (cic.succ univs.Type2) (\\ __ : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop a1 a2) -> cic.univ univs.Type2) (\\ u0 : ((__ : cic.Term univs.Type0 a1) -> (__1 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ u1 : ((a : cic.Term univs.Type0 a1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (u0 a2 a) a)) -> \\ u2 : ((a : cic.Term univs.Type0 a1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (u0 a a2) a)) -> \\ u3 : ((a : cic.Term univs.Type0 a1) -> (b : cic.Term univs.Type0 a1) -> (c : cic.Term univs.Type0 a1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (u0 a (u0 b c)) (u0 (u0 a b) c))) -> cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (\\ P : cic.Univ univs.Type1 -> cic.prod univs.Type1 univs.Type1 (cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R0 (cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1", "predict": "$. Let $a2$ be an element of $cic.Univ$ of $univs.Type$. Let $a3$ be an element of $cic.Univ$ of $univs.Type$. Let $a4$ be an element of $cic.Univ$ of $univs.Type$. Let $a5$ be an element of $cic.Univ$ of $univs.Type$. Let $a6$ be an element of $cic.Univ$ of $univs.Type$. Let $a7$ be an element of $cic.Univ$ of $univs.Type$. Let $a8$ be an element of $cic.Univ$ of $univs.Type$. Let $a9$ be an element of $cic.Univ$ of $univs.Type$. Let $a10$ be an element of $cic.Univ$ of $univs.Type$. Let $a11$ be an element of $cic.Univ$ of $univs.Type$. Let $a12$ be an element of $cic.Univ$ of $univs.Type$. Let $a13$ be an element of $cic.Univ$ of $univs.Type$. Let $a14$ be an element of $cic.Univ$ of $univs.Type$. Let $a15$ be an element of $cic.Univ$ of $univs.Type$. Let $a16$ be an element of $cic.Univ$ of $univs.Type$. Let $a17$ be an element of $cic.Univ$ of $univs.Type$. Let $a18$ be an element of $cic.Univ$ of $univs.Type$. Let $a19$ be an element of $cic.Univ$ of $univs.Type$. Let $a20$ be an element of $cic.Univ$ of $univs.Type$. Let $a21$ be an element of $cic.Univ$ of $univs.Type$. Let $a22$ be an element of $cic.Univ$ of $univs.Type$. Let $a23$ be an element of $cic.Univ$ of $univs.Type$. Let $a24$ be an element of $cic"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nDPair_rect_CProp2. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $_f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $univs.Type0$, för alla funktioner $Q_$ från element $_x_658$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_DPair$ från element $dpi1$ av $cic.Term$ av $univs.Type0$ och $A$ och element $_dpi2$ av $cic.Term$ av $univs.Type0$ och $_f$ applicerat på $dpi1$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.mk_DPair$ applicerat på $A$ och $_f$ och $dpi1$ och $_dpi2$, för alla element $x_658$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_658$.\nassistant\n", "label": "axiom DPair_rect_CProp2 (A : cic.Univ univs.Type0) (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) (Q_ : (_x_658 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop) (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) (x_658 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) : cic.Term cic.prop (Q_ x_658)", "predict": "axiom dpair_rect_cprop2 (A : univs.Type0) (f : ∀ x : univs.Type0, A → univs.Type0) (Q : ∀ x : univs.Type0, DPair A (f x) → prop) (H_mk_DPair : ∀ x : univs.Type0, ∀ y : univs.Type0, (A → f x → prop) → (DPair A (f x) → prop)) (x_658 : univs.Type0) (d : DPair A (f x_658)) : prop := Q x_658 d"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nLet_clause_15622. Soient $m$ et $n$ et $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $posn$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $posm$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$, pour tous les éléments $pnm$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $c$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $_clearme$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $d$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous", "label": "let_clause_15622 : m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) -> c : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (d : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times", "predict": " les éléments $e$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, il existe un élément $f$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, tel que pour tous les éléments $g$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, il existe un élément $h$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, tel que pour tous les éléments $i$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nExp_pi. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Then for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_bigops.bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $matita_arithmetics_exp.exp$ applied to $f$ applied to $i$ and $m$ and $matita_arithmetics_exp.exp$ applied to $matita_arithmetics_bigops.bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $f$ applied to $i$ and $m$.\nassistant\n", "label": "axiom exp_pi (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (λ i => p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (λ i => matita_arithmetics_exp.exp (f i) m)) (matita_arithmetics_exp.exp (matita_arithmetics_bigops.bigop n (λ i => p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (λ i => f i)) m))", "predict": "axiom exp_pi (n m : univs.Type0) (p : ∀ i : univs.Type0, matita_arithmetics_nat.nat → matita_basics_bool.bool) : ∀ f : ∀ i : univs.Type0, matita_arithmetics_nat.nat → matita_arithmetics_nat.nat, prop (eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (bigop n (λ i : univs.Type0, p i matita_arithmetics_nat.nat) matita_arithmetics_nat.nat) (exp (bigop n (λ i : univs.Type0, p i matita_arithmetics_nat.nat) matita_arithmetics_nat.nat) (exp (bigop n (λ i : univs.Type0, p i matita_arithmetics_nat.nat) matita_arithmetics_nat.nat) (S (O) (times (S (O)) (f i m))))) (exp (bigop n (λ i : univs.Type0, p i matita_arithmetics_nat.nat) matita_arithmetics_nat.nat) (f i m)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nBool_rect_CProp2_body. För alla funktioner $Q_$ från element $_x_356$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Univ$ av $cic.prop$, för alla element $_H_true$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_bool.true$, för alla element $_H_false$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_bool.false$, för alla element $x_356$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_356$.\nassistant\n", "label": "Axiom bool_rect_CProp2_body : forall Q_ : ((_x_356 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop), forall _H_true : cic.Term cic.prop (Q_ matita_basics_bool.true), forall _H_false : cic.Term cic.prop (Q_ matita_basics_bool.false), forall x_356 : cic.Term univs.Type0 matita_basics_bool.bool, cic.Term cic.prop (Q_ x_356) .", "predict": "Axiom bool_rect_CProp2_body : forall Q : x356 : Elem (Term (univs Type0)) -> bool -> Prop, forall H_true : Term prop, Q true, forall H_false : Term prop, Q false, forall x356 : Elem (Term (univs Type0)), Q x356 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nProd_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Alors pour tous les éléments $_xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $nil$, pour tous les éléments $_x_969$ et $_x_970$ de $cic.Term$ de $univs.Type0$ et de $A$, $cic.Term$ tient pour $univs.Type0$ et $A$.\nassistant\n", "label": "prod_body : A : cic.Univ univs.Type0 -> nil : cic.Term univs.Type0 A -> _xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A nil) -> _x_969 : cic.Term univs.Type0 A -> _x_970 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A .", "predict": "prod_body : (A : Elem (univ cic.Univ) (Type0)) -> (nil : Elem (cic.Term) (Type0) (A)) -> Proof (forall (x : Elem (cic.Term) (Type0) (Dop (A) nil)) (forall (x_969 : Elem (cic.Term) (Type0) (A)) (forall (x_970 : Elem (cic.Term) (Type0) (A)) (Proof (in (cic.Term) (Type0) (A))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nDop_inv_rect_Type2. For all elements $x1$ of $cic.Univ$ of $univs.Type0$, for all elements $x2$ of $cic.Term$ of $univs.Type0$ and $x1$, for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1716$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type2$, for all functions $_H1$ from elements $sum$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ and functions $prod$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $prod$ applied to", "label": "axiom Dop_inv_rect_Type2 (x1 : cic.Univ univs.Type0) (x2 : cic.Term univs.Type0 x1) (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) (P : (_z1716 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> cic.Univ univs.Type2) (_H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> (prod : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_null : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> (_distr : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> (_z1717 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term univs.Type2 (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) : cic.Term univs.Type2 (P Hterm)", "predict": " $a$ and $b$ and $c$ and $x2$ and $x2$, there exists a function $F$ from elements $x1$ of $cic.Univ$ of $univs.Type0$ and elements $x2$ of $cic.Term$ of $univs.Type0$ and elements $Hterm$ of $cic.Term$ of $univs.Type0$ and elements $P$ of $cic.Univ$ of $univs.Type2$ and elements $_H1$ of $cic.Term$ of $univs.Type0$ and elements $prod$ of $cic.Term$ of $univs.Type0$ and elements $__$ of $cic.Term$ of $univs.Type0$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and elements $a$ of $cic.Term$ of $univs.Type0$ and elements $b$ of $cic.Term$ of $univs.Type0$ and elements $c$ of $cic.Term$ of $univs.Type0$ to elements of $cic.Univ$ of $univs.Type2$ such that for all elements $x1$ of $cic.Univ$ of $univs.Type0$ and elements $x2$ of $cic.Term$ of $univs.Type0$ and elements $Hterm$ of $cic.Term$ of $univs.Type0$ and elements $P$ of $cic.Univ$ of $univs.Type2$ and elements $_H1$ of $cic.Term$ of $univs.Type0$ and elements $prod$ of $cic.Term$ of $univs.Type0$ and elements $__$ of $cic.Term$ of $univs.Type0$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and elements $a$ of $cic.Term$ of $univs.Type0$ and elements $b$ of $cic.Term$ of $univs.Type0$ and elements $c$ of $cic.Term$ of $univs.Type0$, $F$ is equal to $x1$ and $x2$ and $Hterm$ and $P$ and $_H1$ and $prod$ and $__$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nUnit_rect_Type2. Soit $Q_$ une fonction des éléments $_x_503$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $univs.Type2$. Alors pour tous les éléments $_H_it$ de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_basics_types.it$, pour tous les éléments $x_503$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$, $cic.Term$ tient pour $univs.Type2$ et $Q_$ appliqué à $x_503$.\nassistant\n", "label": "unit_rect_Type2 : Q_ : (_x_503 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Univ univs.Type2) -> _H_it : cic.Term univs.Type2 (Q_ matita_basics_types.it) -> x_503 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Term univs.Type2 (Q_ x_503) .", "predict": "unit_rect_Type2 : (Q : Elem (cic.Term (univs.Type0)) (matita_basics_types.unit) -> Elem (cic.Univ (univs.Type2))) -> Proof (forall (H_it : Elem (cic.Term (univs.Type2))) (forall (x_503 : Elem (cic.Term (univs.Type0))) (Eq (Q x_503) (matita_basics_types.it)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nTrue_to_andb_true. Låt $b1$ och $b2$ vara element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $b1$ och $matita_basics_bool.true$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $b2$ och $matita_basics_bool.true$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $matita_basics_bool.andb$ applicerat på $b1$ och $b2$ och $matita_basics_bool.true$.\nassistant\n", "label": "postulate true_to_andb_true : (b1 : cic.Term univs.Type0 matita_basics_bool.bool) -> (b2 : cic.Term univs.Type0 matita_basics_bool.bool) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) b1 matita_basics_bool.true)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) b2 matita_basics_bool.true)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_basics_bool.andb b1 b2) matita_basics_bool.true)", "predict": "postulate true_to_andb_true : (b1 : univs.Type0) -> (b2 : matita_basics_bool.bool) -> all (prop (eq (lift univs.Type0 univs.Type2) (matita_basics_bool.bool))) (\\ b -> all (prop (eq (lift univs.Type0 univs.Type2) (matita_basics_bool.bool))) (\\ b2 -> and (prop (eq (lift univs.Type0 univs.Type2) (matita_basics_bool.bool))) (andb b1 b2) (matita_basics_bool.true)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nExp_S_sigma_p. För alla element $a$ och $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_exp.exp$ applicerat på $matita_arithmetics_nat.S$ applicerat på $a$ och $n$ och $matita_arithmetics_bigops.bigop$ applicerat på $matita_arithmetics_nat.S$ applicerat på $n$ och funktionen som avbildar $k$ som $matita_basics_bool.true$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.plus$ och funktionen som avbildar $k$ som $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_binomial.bc$ applicerat på $n$ och $k$ och $matita_arithmetics_exp.exp$ applicerat på $a$ och $matita_arithmetics_nat.minus$ applicerat på $n$ och $k$.\nassistant\n", "label": "postulate exp_S_sigma_p : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_exp.exp (matita_arithmetics_nat.S a) n) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n) (\\ k : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_bool.true) matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_nat.plus (\\ k : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_nat.times (matita_arithmetics_binomial.bc n k) (matita_arithmetics_exp.exp a (matita_arithmetics_nat.minus n k)))))", "predict": "postulate exp_S_sigma_p : (a : Term univ Type0) -> (n : Nat) -> Prop -> Eq (lift univ Type2 (Nat) (exp (S a) n)) (bigop (S n) (k -> true)) (Nat) (O) (plus (times (bc n k) (exp a (minus n k))))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nExp_to_eq_O. För alla element $n$ och $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_exp.exp$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $m$ och $matita_arithmetics_nat.O$.\nassistant\n", "label": "exp_to_eq_O : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) -> __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_exp.exp n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m matita_arithmetics_nat.O) .", "predict": "exp_to_eq_O : (n : Elem (cic Term) (univs Type0)) -> (m : Elem (cic Term) (matita_arithmetics_nat nat)) -> Proof (forall __ (matita_arithmetics_nat (S (matita_arithmetics_nat O)) n) (forall __1 (matita_basics_logic (eq (lift (univs Type0) (univs Type2)) (matita_arithmetics_exp (exp n m))) (matita_arithmetics_nat (S (matita_arithmetics_nat O)) m)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nMatch_max_spec. Let $_n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $return_sort$ be an element of $cic.Sort$. Let $return_type$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $z$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_minimization.max_spec$ applied to $_n$ and $_f$ and $__$ to elements of $cic.Univ$ of $return_sort$. Then for all functions $case_found_max_spec$ from elements $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $_n$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $_f$ applied to $m$ and $matita_basics_bool.true$ and functions $__2$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $i$ and elements $__3$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $_n$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $_f$ applied to $i$ and $matita_basics_bool.false$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $m$ and $matita_arithmetics_minimization.found_max_spec$ applied to $_n$ and $_f$ and $m$ and $__$ and $__1$ and $__2$, for all functions $case_not_found_max_spec$ from functions $__$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita", "label": "match_max_spec : _n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> return_sort : cic.Sort -> return_type : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> z : cic.Term cic.prop (matita_arithmetics_minimization.max_spec _n _f __) -> cic.Univ return_sort) -> case_found_max_spec : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt m _n) -> __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f m) matita_basics_bool.true) -> __2 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __2 : cic.Term cic.prop (matita_arithmetics_nat.lt m i) -> __3 : cic.Term cic.prop (matita_arithmetics_nat.lt i _n) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f i) matita_basics_bool.false)) -> cic.Term return_sort (return_type m (matita_arithmetics_minimization.found_max_spec _n _f m __ __1 __2))) -> case_not_found_max_spec : (__ : (i : cic.Term univs.Type0 matita_arithmetics", "predict": "_arithmetics_nat.nat$ to elements of $cic.Term$ of $cic.prop$ and $matita_arithmetics_minimization.max_spec$ applied to $_n$ and $_f$ and $i$ and elements $z$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_minimization.not_found_max_spec$ applied to $_n$ and $_f$ and $i$ and $z$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $i$ and $matita_basics_logic.conj$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $_f$ applied to $i$ and $matita_basics_bool.false$ and $case_found_max_spec$ applied to $i$ and $z$ and $case_not_found_max_spec$ applied to $i$ and $z$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nRewrite_r. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Alors pour toutes les fonctions $P$ des éléments $__$ de $cic.Term$ de $univs.Type2$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type2$, pour tous les éléments $__$ de $cic.Term$ de $univs.Type2$ et de $P$ appliqué à $x$, pour tous les éléments $y$ de $cic.Term$ de $univs.Type2$ et de $A$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $y$ et $x$, $cic.Term$ tient pour $univs.Type2$ et $P$ appliqué à $y$.\nassistant\n", "label": "postulate rewrite_r : (A : cic.Univ univs.Type2) -> (x : cic.Term univs.Type2 A) -> (P : (__ : cic.Term univs.Type2 A) -> cic.Univ univs.Type2) -> (__ : cic.Term univs.Type2 (P x)) -> (y : cic.Term univs.Type2 A) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq A y x)) -> cic.Term univs.Type2 (P y)", "predict": "postulate rewrite_r : (A : univs.Type2) -> (x : Term univs.Type2 A) -> (P : (y : Term univs.Type2 A) -> Univ univs.Type2) -> (y : Term univs.Type2 A) -> (x' : Term univs.Type2 A) -> (eq : prop (matita_basics_logic.eq A y x)) -> Term univs.Type2 (P y)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nSig_inv_rect_CProp1. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $x2$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1224$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $x2$ appliqué à $pi1$ et des éléments $_z1225$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sig$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_Sig$ appliqué à $x1$ et $x2$ et $pi1$ et $_pi2$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $x1$ et $x2$ et $pi1$ et $_pi2$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "Axiom Sig_inv_rect_CProp1 : forall x1 : cic.Univ univs.Type0, forall x2 : ((__ : cic.Term univs.Type0 x1) -> cic.Univ cic.prop), forall Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2), forall P : ((_z1224 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> cic.Univ cic.prop), forall _H1 : ((pi1 : cic.Term univs.Type0 x1) -> (_pi2 : cic.Term cic.prop (x2 pi1)) -> (_z1225 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2)) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))), cic.Term cic.prop (P Hterm) .", "predict": "Axiom sig_inv_rect_CProp1 : forall x1 : univs.Type0, forall x2 : Term univs.Type0 -> Univ, forall Hterm : Term univs.Type0 & Sig x1 x2, forall P : Term univs.Type0 & Sig x1 x2 -> Prop, forall pi1 : Term univs.Type0 -> x1, forall pi2 : Term univs.prop -> x2, forall z1224 : Term univs.Type0 & Sig x1 x2, forall z1225 : Prop & Eq (lift univs.Type0 univs.Type2) (Sig x1 x2) Hterm (mk_Sig x1 x2 pi1 pi2) (P (mk_Sig x1 x2 pi1 pi2)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nIs_nil. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $__$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$. Then $cic.Univ$ holds for $cic.prop$.\nassistant\n", "label": "axiom is_nil (A : cic.Univ univs.Type0) (__ : cic.Term univs.Type0 (matita_basics_lists_list.list A)) : cic.Univ cic.prop", "predict": "axiom is_nil (A : univs.Type0) (x : cic.Term univs.Type0 (matita_basics_lists_list A)) : cic.Univ (cic.prop)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nRange_rect_Type1_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_925$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type1$. Let $_H_mk_range$ be a function from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$. Let $x_925$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$. Then $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_925$.\nassistant\n", "label": "Axiom range_rect_Type1_body : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_925 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type1), forall _H_mk_range : ((_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))), forall x_925 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A), cic.Term univs.Type1 (Q_ x_925) .", "predict": "Axiom range_rect_Type1_body : forall A : univs.Type0, forall Q_ : x_925 : cic.Term univs.Type0 -> matita_arithmetics_bigops.range A -> cic.Univ univs.Type1, forall H_mk_range : enum : __ : cic.Term univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term univs.Type0 -> upto : cic.Term univs.Type0 -> matita_arithmetics_nat.nat -> filter : __ : cic.Term univs.Type0 -> matita_arithmetics_nat.nat -> matita_basics_bool.bool -> cic.Term univs.Type1, forall x_925 : cic.Term univs.Type0 -> matita_arithmetics_bigops.range A, Q_ x_925 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nLet_clause_1553. Let $n$ and $n0$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $a$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $a$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $a$. Let $a$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme0$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $a$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $a$. Then for all elements $Hn$ of $cic.Term$ of $cic", "label": "let_clause_1553 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (a : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n0 (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n0 (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a))))) -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n0 (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n0 (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)))) ->", "predict": ".prop$ and $matita_basics_logic.And$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $matita_basics_logic.eq$ applied"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nMonotonic. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_R$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$, håller $cic.Univ$ för $cic.prop$.\nassistant\n", "label": "monotonic : A : cic.Univ univs.Type0 -> _R : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> _f : (__ : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> cic.Univ cic.prop .", "predict": "monotonic : (A : Elem (univs Type0)) -> (R : Term (univs Type0) -> A -> Prop) -> (x : Term (univs Type0) -> A) -> Proof (forall (f : Term (univs Type0) -> A -> Term (univs Type0) -> A) (forall (x : Term (univs Type0)) (forall (y : A) (R x y))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nPi1_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_xxx$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $f$. Alors $cic.Term$ tient pour $univs.Type0$ et $A$.\nassistant\n", "label": "pi1_body : A : cic.Univ univs.Type0 -> f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> _xxx : cic.Term univs.Type0 (matita_basics_types.Sig A f) -> cic.Term univs.Type0 A .", "predict": "pi1_body : (A : Elem (univs Type0) (cic Univ)) -> (f : (x : Elem (cic Term) (univs Type0)) -> Elem (cic Univ) (cic prop)) -> (xxx : Elem (cic Term) (matita_basics_types Sig) (A, f)) -> Elem (cic Term) (univs Type0) (A) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nSameF_p_le. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $p$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Alors pour toutes les fonctions $f$ et $g$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$, pour tous les éléments $n$ et $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $m$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_bigops.sameF_p$ appliqué à $m$ et $p$ et $A$ et $f$ et $g$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_bigops.sameF_p$ appliqué à $n$ et $p$ et $A$ et $f$ et $g$.\nassistant\n", "label": "sameF_p_le : A : cic.Univ univs.Type0 -> p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 A) -> g : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 A) -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.le n m) -> __1 : cic.Term cic.prop (matita_arithmetics_bigops.sameF_p m p A f g) -> cic.Term cic.prop (matita_arithmetics_bigops.sameF_p n p A f g) .", "predict": "sameF_p_le : (A : Elem (univs Type0)) -> (p : (a : Elem (cic Term)) -> (n : Elem (matita_arithmetics_nat Nat)) -> Elem (cic Term)) -> Proof (forall (f : (a : Elem (cic Term)) -> (n : Elem (matita_arithmetics_nat Nat))) -> forall (g : (a : Elem (cic Term)) -> (n : Elem (matita_arithmetics_nat Nat))) -> forall (n : Elem (cic Term)) -> forall (m : Elem (matita_arithmetics_nat Nat)) -> (Leq n m) -> forall (x : Elem (cic Term)) -> (Leq m (sameF_p x)) -> (and (A) (f) (g))) -> Proof (forall (n : Elem (cic Term)) -> forall (m : Elem (matita_arithmetics_nat Nat)) -> (Leq n m) -> (sameF_p x) -> (and (A) (f) (g))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nLet_clause_1549. Let $m$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Then for all elements $eqm0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $m$, for all elements $x1106$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x1106$ and $matita_arithmetics_nat.minus$ applied to $x1106$ and $m$.\nassistant\n", "label": "axiom let_clause_1549 (m n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (eqm0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O m)) (x1106 : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1106 (matita_arithmetics_nat.minus x1106 m))", "predict": "axiom let_clause_1549 (m n : Term Type0) (posn : Prop (Lt (nd 0) n)) : ∀ eqm0 : Prop (Eq (lift Type0 Type2 nat) (nd 0) m), ∀ x1106 : Term Type0, Prop (Eq (lift Type0 Type2 nat) x1106 (minus x1106 m))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nLet_clause_1068. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $permf$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_permutation.permut$ applicerat på $f$ och $n$. Låt $i$ och $j$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $lein$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $i$ och $n$. Låt $lejn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $j$ och $n$. Då för alla element $a$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $matita_arithmetics_nat.le$ applicerat på $a$ och $n$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $f$ applicerat på $a$ och $i$, för alla element $lean$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $a$ och $n$, för alla element $fa$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $f$ applicerat på $a$ och $i$, för alla element $b$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $matita_arithmetics_nat.le$ applicerat på $b$ och $n$ och $matita_basics_logic.eq$ applicerat på", "label": "postulate let_clause_1068 : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (permf : cic.Term cic.prop (matita_arithmetics_permutation.permut f n)) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (lein : cic.Term cic.prop (matita_arithmetics_nat.le i n)) -> (lejn : cic.Term cic.prop (matita_arithmetics_nat.le j n)) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le a n) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i))) -> (lean : cic.Term cic.prop (matita_arithmetics_nat.le a n)) -> (fa : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i)) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le b n", "predict": " $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $f$ applicerat på $b$ och $j$, för alla element $lebn$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $b$ och $n$, för alla element $fb$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $f$ applicerat på $b$ och $j$, för alla element $a$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $matita_arithmetics_nat.le$ applicerat på $a$ och $n$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $f$ applicerat på $a$ och $i$, för alla element $lean1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $a$ och $n$, för alla element $fa1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $f$ applicerat på $a$ och $i$, för alla element $b$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme2$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $matita_arithmetics_nat.le"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nOption_rect_Type4_body. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_590$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type4$, pour tous les éléments $_H_None$ de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_basics_types.None$ appliqué à $_A$, pour toutes les fonctions $_H_Some$ des éléments $x_591$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_basics_types.Some$ appliqué à $_A$ et $x_591$, pour tous les éléments $x_590$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$, $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_590$.\nassistant\n", "label": "option_rect_Type4_body : _A : cic.Univ univs.Type0 -> Q_ : (_x_590 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Univ univs.Type4) -> _H_None : cic.Term univs.Type4 (Q_ (matita_basics_types.None _A)) -> _H_Some : (x_591 : cic.Term univs.Type0 _A -> cic.Term univs.Type4 (Q_ (matita_basics_types.Some _A x_591))) -> x_590 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Term univs.Type4 (Q_ x_590) .", "predict": "option_rect_Type4_body : (A : Elem (univs Type0)) -> Proof (forall (x_590 : Term (univs Type0)) (option (A : Elem (univs Type4))) (forall (H_None : Term (univs Type4)) (Q_ (x_590 : None (A : Elem (univs Type4))) (forall (H_Some : (x_591 : Term (univs Type0)) (A : Elem (univs Type4))) (Q_ (x_591 : Some (A : Elem (univs Type4)))))) (forall (x_590 : Term (univs Type0)) (option (A : Elem (univs Type4))) (Term (univs Type4)) (Q_ (x_590)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nLt_div_S_div. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_div_and_mod.div$ applicerat på $n$ och $matita_arithmetics_nat.S$ applicerat på $m$ och $matita_arithmetics_div_and_mod.div$ applicerat på $n$ och $m$.\nassistant\n", "label": "lt_div_S_div : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp m (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))) n) -> cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_div_and_mod.div n (matita_arithmetics_nat.S m)) (matita_arithmetics_div_and_mod.div n m)) .", "predict": "lt_div_S_div : (n : Elem (univs Type0)) -> (m : Elem nat) -> Proof (forall (x : Elem (Prop (Lt (nd 0) m))) (forall (y : Elem (Prop (Le (pow m (nd 2)) (plus (times m (nd 2)) (nd 1))))) (Lt (div (nd 2) (pow m (nd 2))) (div n m))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nProd_rect_Type0_body. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_702$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $_H_mk_Prod$ une fonction des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $_A$ et $_B$ et $_fst$ et $_snd$. Alors pour tous les éléments $x_702$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_702$.\nassistant\n", "label": "Prod_rect_Type0_body : _A : cic.Univ univs.Type0 -> _B : cic.Univ univs.Type0 -> Q_ : (_x_702 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) -> cic.Univ univs.Type0) -> _H_mk_Prod : (_fst : cic.Term univs.Type0 _A -> _snd : cic.Term univs.Type0 _B -> cic.Term univs.Type0 (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) -> x_702 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) -> cic.Term univs.Type0 (Q_ x_702) .", "predict": "prod_rect_Type0_body : (A : Elem (univs Type0)) -> (B : Elem (univs Type0)) -> Proof (forall (x_702 : Elem (cic Term) (univs Type0)) (Q_ : Prod A B : Elem (cic Univ) (univs Type0)) (H_mk_Prod : (fst : Elem (cic Term) (univs Type0)) -> (A : Elem (cic Term) (univs Type0)) -> (snd : Elem (cic Term) (univs Type0)) -> (B : Elem (cic Term) (univs Type0)) -> Proof (Q_ (mk_Prod A B fst snd))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nBigop_prod. Låt $k1$ och $k2$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $p1$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $p2$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Låt $op$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $B$ och $nil$. Då för alla funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $matita_arithmetics_bigops.bigop$ applicerat på $k1$ och funktionen som avbildar $x$ som $p1$ applicerat på $x$ och $B$ och $nil$ och $matita_arithmetics_bigops.op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $x$ som $matita_arithmetics_bigops.bigop$ applicerat på", "label": "axiom bigop_prod (k1 k2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (p2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (B : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 B) (op : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop B nil)) (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop k1 (λ x => p1 x) B nil (matita_arithmetics_bigops.op B nil op) (λ x => matita_arithmetics_bigops.bigop k2 (λ i => p2 x i) B nil (matita_arithmetics_bigops.op B nil op) (λ i => f x i))) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.times k1 k2) (λ i => matita_basics_bool.andb (p1 (matita_arithmetics_div_and_mod.div i k2)) (p2 (matita_arithmetics_div_and_mod.div i k2) (matita_arithmetics_div_and_mod.mod i k2))) B nil (matita_arithmetics_bigops.op B nil op) (λ i => f (matita_arithmetics_div_and_mod.div i k2) (matita_arithmetics_div_and_mod.mod i k2))))", "predict": " $k2$ och $f$ och $x$ och $p2$ applicerat på $f$ och $x$ och $B$ och $nil$ och $matita_arithmetics_bigops.op$ applicerat på $B$ och $nil$ och $op$ är ärligt egna."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nAnd_rect_CProp1_body. Låt $_A$ och $_B$ vara element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_162$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_conj$ vara en funktion från element $x_164$ av $cic.Term$ av $cic.prop$ och $_A$ och element $x_163$ av $cic.Term$ av $cic.prop$ och $_B$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_logic.conj$ applicerat på $_A$ och $_B$ och $x_164$ och $x_163$. Låt $x_162$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$. Då håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_162$.\nassistant\n", "label": "And_rect_CProp1_body : _A : cic.Univ cic.prop -> _B : cic.Univ cic.prop -> Q_ : (_x_162 : cic.Term cic.prop (matita_basics_logic.And _A _B) -> cic.Univ cic.prop) -> _H_conj : (x_164 : cic.Term cic.prop _A -> x_163 : cic.Term cic.prop _B -> cic.Term cic.prop (Q_ (matita_basics_logic.conj _A _B x_164 x_163))) -> x_162 : cic.Term cic.prop (matita_basics_logic.And _A _B) -> cic.Term cic.prop (Q_ x_162) .", "predict": "and_rect_CProp1_body : (A : Elem (Univ (prop))) -> (B : Elem (Univ (prop))) -> Proof (and A B) -> Proof (forall (x : Term (prop)) -> if (and (conj A B) x) (Q x)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nR4. Låt $T0$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $a0$ av $cic.Term$ av $univs.Type0$ och $T0$, för alla funktioner $T1$ från element $x0$ av $cic.Term$ av $univs.Type0$ och $T0$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $x0$ till element av $cic.Univ$ av $univs.Type0$, för alla element $a1$ av $cic.Term$ av $univs.Type0$ och $T1$ applicerat på $a0$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$, för alla funktioner $T2$ från element $x0$ av $cic.Term$ av $univs.Type0$ och $T0$ och element $p0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $x0$ och element $x1$ av $cic.Term$ av $univs.Type0$ och $T1$ applicerat på $x0$ och $p0$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T1$ applicerat på $x0$ och $p0$ och $matita_basics_logic.R1$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $T1$ och $a1$ och $x0$ och $p0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$, för alla element $a2$ av $cic.Term$ av $univs.Type0$ och $T2$ applicerat på $a0$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $a1$ och $matita_basics", "label": "Axiom R4 : forall T0 : cic.Univ univs.Type0, forall a0 : cic.Term univs.Type0 T0, forall T1 : ((x0 : cic.Term univs.Type0 T0) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> cic.Univ univs.Type0), forall a1 : cic.Term univs.Type0 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0)), forall T2 : ((x0 : cic.Term univs.Type0 T0) -> (p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> (x1 : cic.Term univs.Type0 (T1 x0 p0)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T1 x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 T0) a0 T1 a1 x0 p0) x1)) -> cic.Univ univs.Type0), forall a2 : cic.Term univs.Type0 (T2 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0) a1 (mat", "predict": "_logic.R2$ applicerat på $cic.lift$ applicerat sur $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $a1$ till element av $cic.Univ$ av $univs.Type0$.\n\nAxiom r4 : forall T0 : univs.Type0, forall a0 : cic.Term univs.Type0, forall T1 : (x0 : cic.Term univs.Type0) -> T0 -> cic.prop (cic.lift univs.Type0 univs.Type2 T0 a0) -> forall a1 : cic.Term univs.Type0, forall T2 : (x0 : cic.Term univs.Type0) -> T0 -> (p0 : cic.Term cic.prop) -> (cic.eq (cic.lift univs.Type0 univs.Type2 T0 a0) (x0)) -> forall x1 : cic.Term univs.Type0, forall p0 : cic.Term cic.prop, forall T1 : (x0 : cic.Term univs.Type0) -> T0 -> cic.eq (T1 a0) (p0) -> forall x1 : cic.Term univs.Type0, forall p0 : cic.Term cic.prop, forall T1 : (x0 : cic.Term univs.Type0) -> T0 -> (cic.eq (T1 x0) p0) -> forall x1 : cic.Term univs.Type0, forall p0 : cic.Term cic.prop, forall T1 : (x0 : cic.Term univs.Type0) -> T0 -> (cic.eq (T1 x0) p0) -> forall x1 : cic.Term univs.Type0, forall p0 : cic.Term cic.prop, forall T1 : (x0 : cic.Term univs.Type0) -> T0 -> (cic.eq (T1 x0) p0) -> forall x1 : cic.Term univs.Type0, forall p0 : cic.Term cic.prop, forall T1 : (x0 : cic.Term univs.Type0) -> T0 -> (cic.eq (T1 x0) p0) -> forall x1 : cic.Term univs.Type0, forall p0 : cic.Term cic.prop, forall T1 : (x0 : cic.Term univ"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nDPair_rect_Type4_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_640$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $univs.Type4$. Let $_H_mk_DPair$ be a function from elements $dpi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_dpi2$ of $cic.Term$ of $univs.Type0$ and $_f$ applied to $dpi1$ to elements of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $matita_basics_types.mk_DPair$ applied to $A$ and $_f$ and $dpi1$ and $_dpi2$. Let $x_640$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$. Then $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_640$.\nassistant\n", "label": "postulate DPair_rect_Type4_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (Q_ : (_x_640 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ univs.Type4) -> (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term univs.Type4 (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (x_640 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term univs.Type4 (Q_ x_640)", "predict": "postulate dpair_rect_Type4_body : (A : Univ Type0) -> (f : Term Type0 A -> Univ Type0) -> (x_640 : DPair A (f _)) -> Term Type4 (Q_ x_640)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nOption_rect_CProp0. Pour tous les éléments $_A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $Q_$ des éléments $_x_634$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $_H_None$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.None$ appliqué à $_A$, pour toutes les fonctions $_H_Some$ des éléments $x_635$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.Some$ appliqué à $_A$ et $x_635$, pour tous les éléments $x_634$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_634$.\nassistant\n", "label": "postulate option_rect_CProp0 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_634 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop) -> (_H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_635 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_635))) -> (x_634 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term cic.prop (Q_ x_634)", "predict": "postulate option_rect_CProp0 : (A : Univ) -> (Q : Term A -> Prop) -> (H_None : Term (option None A)) -> (H_Some : (x : Term A) -> Term (option (Some x) A)) -> (x : Term A) -> Prop = Q x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nDPair_inv_rect_Type4. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x2$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$. Soit $P$ une fonction des éléments $_z1110$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type4$. Alors pour toutes les fonctions $_H1$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $x2$ appliqué à $dpi1$ et des éléments $_z1111$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$ à des éléments de $cic.Term$ de $univs.Type4$ et de $P$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$, $cic.Term$ tient pour $univs.Type4$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "postulate DPair_inv_rect_Type4 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> (P : (_z1110 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ univs.Type4) -> (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1111 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type4 (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type4 (P Hterm)", "predict": "postulate dpair_inv_rect_Type4 : (x1 : Univ Type0) -> (x2 : Term Type0 -> Univ Type0) -> (Hterm : Term Type0 (DPair x1 x2)) -> (P : (z1110 : Term Type0) -> (DPair x1 x2) -> Univ Type4) -> (H1 : Term Type0) -> (dpi2 : Term Type0) -> (z1111 : Prop (Eq (lift Type0 Type2) (DPair x1 x2))) -> (Hterm : Term Type0) -> (dpair : DPair x1 x2) -> (dpi1 : Term Type0) -> (P (dpair) (dpi1) (dpi2) z1111)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nInvert_permut_f. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $m$ and $n$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_permutation.injn$ applied to $f$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_permutation.invert_permut$ applied to $n$ and $f$ and $f$ applied to $m$ and $m$.\nassistant\n", "label": "postulate invert_permut_f : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le m n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_permutation.injn f n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_permutation.invert_permut n f (f m)) m)", "predict": "postulate invert_permut_f : (f : Term (Type0 × Nat)) -> (n : Term (Type0 × Nat)) -> (p : Leq (nd 0) (nd 1)) -> (q : Inj (nd 2) (f ∘ n)) -> Prop (Eq (lift (Type0 × Type2)) (invert_permut n f) (f m))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nLt_to_log_O. För alla element $n$ och $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_log.log$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.O$.\nassistant\n", "label": "postulate lt_to_log_O : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt m n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_log.log n m) matita_arithmetics_nat.O)", "predict": "postulate lt_to_log_O : (n : univs.Type0) -> (m : matita_arithmetics_nat.nat) -> (p : matita_arithmetics_nat.lt m (nd 0)) -> (q : matita_arithmetics_nat.lt (nd 0) n) -> cic.prop (cic.lift (univs.Type0) (univs.Type2) (matita_arithmetics_nat.nat)) (matita_arithmetics_log.log n m (nd 0))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nProd_inv_rect_Type3. Let $x1$ and $x2$ be elements of $cic.Univ$ of $univs.Type0$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z1248$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type3$. Let $_H1$ be a function from elements $_fst$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_snd$ of $cic.Term$ of $univs.Type0$ and $x2$ and elements $_z1249$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.mk_Prod$ applied to $x1$ and $x2$ and $_fst$ and $_snd$ to elements of $cic.Term$ of $univs.Type3$ and $P$ applied to $matita_basics_types.mk_Prod$ applied to $x1$ and $x2$ and $_fst$ and $_snd$. Then $cic.Term$ holds for $univs.Type3$ and $P$ applied to $Hterm$.\nassistant\n", "label": "postulate Prod_inv_rect_Type3 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2)) -> (P : (_z1248 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2)) -> cic.Univ univs.Type3) -> (_H1 : (_fst : cic.Term univs.Type0 x1) -> (_snd : cic.Term univs.Type0 x2) -> (_z1249 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod x1 x2)) Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term univs.Type3 (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term univs.Type3 (P Hterm)", "predict": "postulate prod_inv_rect_Type3 : (x1 : Univ Type0) -> (x2 : Univ Type0) -> Hterm : Term Type0 (Prod x1 x2) -> (P : (z1248 : Term Type0 (Prod x1 x2)) -> Univ Type3) -> (H1 : (fst : Term Type0 x1) -> (snd : Term Type0 x2) -> (z1249 : Prop (Eq (lift Type0 Type2 (Prod x1 x2)) (Hterm))) -> (Eq (mk_Prod x1 x2) (Hterm)) -> (Eq (mk_Prod x1 x2) (fst)) -> (Eq (mk_Prod x1 x2) (snd))) -> Term Type3 (P (mk_Prod x1 x2) (fst) (snd))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nCoerc_pair_sigma. Låt $A$ och $B$ vara element av $cic.Univ$ av $univs.Type0$. Låt $P$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $p$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.snd$ applicerat på $A$ och $B$ och $p$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $matita_basics_types.Sig$ applicerat på $B$ och funktionen som avbildar $x$ som $P$ applicerat på $x$.\nassistant\n", "label": "postulate coerc_pair_sigma : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 B) -> cic.Univ cic.prop) -> (p : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> (__ : cic.Term cic.prop (P (matita_basics_types.snd A B p))) -> cic.Term univs.Type0 (matita_basics_types.Prod A (matita_basics_types.Sig B (\\ x : cic.Term univs.Type0 B -> P x)))", "predict": "postulate coerc_pair_sigma : (A : univs.Type0) -> (B : univs.Type0) -> all (p : cic.Term univs.Type0) (matita_basics_types.Prod A B) (all (x : cic.Term (cic.prop)) (P x (matita_basics_types.snd A B) p)) (cic.Term univs.Type0) (matita_basics_types.Prod A (matita_basics_types.Sig B)) (fun (x : A) -> P x (matita_basics_types.snd A B) p)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nRange_rect_Type0. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_927$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type0$. Let $_H_mk_range$ be a function from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $univs.Type0$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$. Then for all elements $x_927$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $univs.Type0$ and $Q_$ applied to $x_927$.\nassistant\n", "label": "Axiom range_rect_Type0 : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_927 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type0), forall _H_mk_range : ((_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))), forall x_927 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A), cic.Term univs.Type0 (Q_ x_927) .", "predict": "Axiom range_rect_Type0 : forall A : Univ, Type0 -> (forall x_927 : Term, Type0 -> Q_ x_927 (range A)) -> (forall enum : (forall $ : Term, Type0 -> nat) -> A -> upto : Term, Type0 -> nat -> (forall $ : Term, Type0 -> bool) -> filter : (forall $ : Term, Type0 -> nat) -> bool) -> forall x_927 : Term, Type0, Q_ x_927 (mk_range A (enum $) (upto $) (filter $)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nOp_body. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour tous les éléments $_xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $nil$, pour tous les éléments $_x_807$ et $_x_808$ de $cic.Term$ de $univs.Type0$ et de $A$, $cic.Term$ tient pour $univs.Type0$ et $A$.\nassistant\n", "label": "Axiom op_body : forall A : cic.Univ univs.Type0, forall nil : cic.Term univs.Type0 A, forall _xxx : cic.Term univs.Type0 (matita_basics_lists_list.Aop A nil), forall _x_807 : cic.Term univs.Type0 A, forall _x_808 : cic.Term univs.Type0 A, cic.Term univs.Type0 A .", "predict": "Axiom op_body : forall A : univs.Type0, forall nil : cic.Term, forall _xxx : cic.Term, forall _x_807 : A, forall _x_808 : A, cic.Term : univs.Type0, A ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nEq_rect_CProp4_body. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Then for all elements $_x$ of $cic.Term$ of $univs.Type2$ and $A$, for all functions $Q_$ from elements $x_22$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $_x_23$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_22$ to elements of $cic.Univ$ of $cic.prop$, for all elements $_H_refl$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $_x$ and $matita_basics_logic.refl$ applied to $A$ and $_x$, for all elements $x_22$ of $cic.Term$ of $univs.Type2$ and $A$, for all elements $x_23$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_22$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_22$ and $x_23$.\nassistant\n", "label": "eq_rect_CProp4_body : A : cic.Univ univs.Type2 -> _x : cic.Term univs.Type2 A -> Q_ : (x_22 : cic.Term univs.Type2 A -> _x_23 : cic.Term cic.prop (matita_basics_logic.eq A _x x_22) -> cic.Univ cic.prop) -> _H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x)) -> x_22 : cic.Term univs.Type2 A -> x_23 : cic.Term cic.prop (matita_basics_logic.eq A _x x_22) -> cic.Term cic.prop (Q_ x_22 x_23) .", "predict": "eq_rect_CProp4_body : (A : univs.Type2) -> Proof (forall (x : cic.Term univs.Type2) (A : Proof (forall (x_22 : cic.Term univs.Type2) (A : Proof (forall (x_23 : cic.Term cic.prop) (matita_basics_logic.eq A x) (x_22)) (forall (x_23 : cic.Term cic.prop) (matita_basics_logic.eq A x) (x_22))) (forall (x_22 : cic.Term univs.Type2) (A : Proof (forall (x_23 : cic.Term cic.prop) (matita_basics_logic.eq A x) (x_22))) (forall (x_22 : cic.Term univs.Type2) (A : Proof (forall (x_23 : cic.Term cic.prop) (matita_basics_logic.eq A x) (x_22)))))) (forall (x_22 : cic.Term univs.Type2) (A : Proof (forall (x_23 : cic.Term cic.prop) (matita_basics_logic.eq A x) (x_22))) (forall (x_23 : cic.Term cic.prop) (matita_basics_logic.eq A x) (x_22))) (forall (x_22 : cic.Term univs.Type2) (A : Proof (forall (x_23 : cic.Term cic.prop) (matita_basics_logic.eq A x) (x_22))) (forall (x_23 : cic.Term cic.prop) (matita_basics_logic.eq A x) (x_22)))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nFalse_rect_CProp4_body. Låt $Q_$ vara en funktion från element $_x_73$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $x_73$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_73$.\nassistant\n", "label": "Axiom False_rect_CProp4_body : forall Q_ : ((_x_73 : cic.Term cic.prop matita_basics_logic.False) -> cic.Univ cic.prop), forall x_73 : cic.Term cic.prop matita_basics_logic.False, cic.Term cic.prop (Q_ x_73) .", "predict": "Axiom false_rect_CProp4_body : forall x_73 : Term prop, False -> Prop ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nTrue_rect_Type5. För alla funktioner $Q_$ från element $_x_44$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$ till element av $cic.Univ$ av $univs.Type5$, för alla element $_H_I$ av $cic.Term$ av $univs.Type5$ och $Q_$ applicerat på $matita_basics_logic.I$, för alla element $x_44$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$, håller $cic.Term$ för $univs.Type5$ och $Q_$ applicerat på $x_44$.\nassistant\n", "label": "postulate True_rect_Type5 : (Q_ : (_x_44 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ univs.Type5) -> (_H_I : cic.Term univs.Type5 (Q_ matita_basics_logic.I)) -> (x_44 : cic.Term cic.prop matita_basics_logic.True) -> cic.Term univs.Type5 (Q_ x_44)", "predict": "postulate true_rect_Type5 : (Q : Term (prop c) -> True) -> (H_I : Term (Type5 univ)) -> (x_44 : Term (prop c)) -> Term (Type5 univ) (Q (I)) (x_44)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nMatch_unit. Låt $return_sort$ vara ett element av $cic.Sort$. Låt $return_type$ vara en funktion från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$ till element av $cic.Univ$ av $return_sort$. Låt $case_it$ vara ett element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $matita_basics_types.it$. Låt $z$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$. Då håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.\nassistant\n", "label": "postulate match_unit : (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ return_sort) -> (case_it : cic.Term return_sort (return_type matita_basics_types.it)) -> (z : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Term return_sort (return_type z)", "predict": "postulate match_unit : (return_sort : cic.Sort) -> (return_type : univs.Type0 -> matita_basics_types.unit -> cic.Univ) -> (case_it : return_sort -> return_type) -> (z : univs.Type0) -> cic.Term (return_sort) (return_type z)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nEq_transpose. Låt $i$ och $j$ och $k$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $j$ och $i$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $i$ och $k$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $j$ och $k$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_permutation.transpose$ applicerat på $i$ och $j$ och $n$ och $matita_arithmetics_permutation.transpose$ applicerat på $i$ och $k$ och $matita_arithmetics_permutation.transpose$ applicerat på $k$ och $j$ och $matita_arithmetics_permutation.transpose$ applicerat på $i$ och $k$ och $n$.\nassistant\n", "label": "Axiom eq_transpose : forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall j : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall k : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) j i)), forall __1 : cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) i k)), forall __2 : cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) j k)), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_permutation.transpose i j n) (matita_arithmetics_permutation.transpose i k (matita_arithmetics_permutation.transpose k j (matita_arithmetics_permutation.transpose i k n)))) .", "predict": "Axiom eq_transpose : forall i : univs.Type0, forall j : univs.Type0, forall k : univs.Type0, forall n : matita_arithmetics_nat.nat, forall p : cic.Term (cic.prop (cic.lift (univs.Type0) (univs.Type2)) (matita_arithmetics_nat.nat) j i), forall q : cic.Term (cic.prop (cic.lift (univs.Type0) (univs.Type2)) (matita_arithmetics_nat.nat) i k), forall r : cic.Term (cic.prop (cic.lift (univs.Type0) (univs.Type2)) (matita_arithmetics_nat.nat) j k), (eq (matita_arithmetics_permutation.transpose i j n) (matita_arithmetics_permutation.transpose i k (matita_arithmetics_permutation.transpose k j))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nInj_mk_Sig. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $P$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $x$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $P$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sig$ appliqué à $A$ et $P$ et $x$ et $matita_basics_types.mk_Sig$ appliqué à $A$ et $P$ et $matita_basics_types.pi1$ appliqué à $A$ et $P$ et $x$ et $matita_basics_types.pi2$ appliqué à $A$ et $P$ et $x$.\nassistant\n", "label": "Axiom inj_mk_Sig : forall A : cic.Univ univs.Type0, forall P : ((__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop), forall x : cic.Term univs.Type0 (matita_basics_types.Sig A P), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig A P)) x (matita_basics_types.mk_Sig A P (matita_basics_types.pi1 A P x) (matita_basics_types.pi2 A P x))) .", "predict": "Axiom inj_mk_Sig : forall A : univs.Type0, forall P : Term univs.Type0 -> A -> prop, forall x : Sig A (P : Term univs.Type0), prop (univs.Type0 = univs.Type2) (Sig A (P x)) (pi1 A (P x)) (pi2 A (P x)) x) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nBool_rect_CProp4_body. Soit $Q_$ une fonction des éléments $_x_347$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_true$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_bool.true$. Alors pour tous les éléments $_H_false$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_bool.false$, pour tous les éléments $x_347$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_347$.\nassistant\n", "label": "axiom bool_rect_CProp4_body (Q_ : (_x_347 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) (_H_true : cic.Term cic.prop (Q_ matita_basics_bool.true)) (_H_false : cic.Term cic.prop (Q_ matita_basics_bool.false)) (x_347 : cic.Term univs.Type0 matita_basics_bool.bool) : cic.Term cic.prop (Q_ x_347)", "predict": "axiom bool_rect_CProp4_body (Q : ∀ x_347 : univs.Type0 → matita_basics_bool.bool, Q) (H_true : Q matita_basics_bool.true) (H_false : ∀ x_347 : univs.Type0, Q matita_basics_bool.false) : ∀ x_347 : univs.Type0, Q x_347"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nACop_rect_Type0_body. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_901$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type0$, för alla funktioner $_H_mk_ACop$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$, för alla element $x_901$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_901$.\nassistant\n", "label": "ACop_rect_Type0_body : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_901 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Univ univs.Type0) -> _H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> _comm : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> x_901 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Term univs.Type0 (Q_ x_901) .", "predict": "acop_rect_Type0_body : (A : Elem (univs Type0)) -> (nil : Elem (Term (Type0))) -> (A : Elem (univ (Type0))) -> Proof (forall (x_901 : Term (Type0)), (Eq (op (A) (nil)) (Q_ (x_901)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nSum_inv_rect_CProp0. Låt $x1$ och $x2$ vara element av $cic.Univ$ av $univs.Type0$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z1032$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$. Låt $_H1$ vara en funktion från element $x_582$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_z1033$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.inl$ applicerat på $x1$ och $x2$ och $x_582$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.inl$ applicerat på $x1$ och $x2$ och $x_582$. Låt $_H2$ vara en funktion från element $x_583$ av $cic.Term$ av $univs.Type0$ och $x2$ och element $_z1033$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.inr$ applicerat på $x1$ och $x2$ och $x_583$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.inr$ applicerat på $x1$ och $x2$ och $x_583$. Då håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "Axiom Sum_inv_rect_CProp0 : forall x1 : cic.Univ univs.Type0, forall x2 : cic.Univ univs.Type0, forall Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2), forall P : ((_z1032 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> cic.Univ cic.prop), forall _H1 : ((x_582 : cic.Term univs.Type0 x1) -> (_z1033 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inl x1 x2 x_582))) -> cic.Term cic.prop (P (matita_basics_types.inl x1 x2 x_582))), forall _H2 : ((x_583 : cic.Term univs.Type0 x2) -> (_z1033 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inr x1 x2 x_583))) -> cic.Term cic.prop (P (matita_basics_types.inr x1 x2 x_583))), cic.Term cic.prop (P Hterm) .", "predict": "Axiom sum_inv_rect_CProp0 : forall x1 : univs.Type0, forall x2 : univs.Type0, forall Hterm : matita_basics_types.Sum x1 x2, forall P : _z1032 -> matita_basics_types.Sum x1 x2 -> cic.prop, forall x_582 : x1 -> _z1033, forall x_583 : x2 -> _z1033, (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2) Hterm (matita_basics_types.inl x1 x2) x_582) (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2) Hterm (matita_basics_types.inr x1 x2) x_583)) -> P Hterm (x_582, x_583)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nAop_rect_CProp1. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Then for all functions $Q_$ from elements $_x_883$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements $x_8", "label": "Aop_rect_CProp1 : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_883 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> cic.Univ cic.prop) -> _H_mk_Aop : (op : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _nill : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> _nilr : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> _assoc : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> x_883 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> cic.Term cic.prop (Q_ x_883) .", "predict": "83$ of $cic.Term$ of $univs.Type0$, we have $Q_$(x_883) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nLet_mop. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $p$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Alors pour tous les éléments $B$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $nil$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $R$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $B$ et $nil$, pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $a$ et $_x_969$ et $_x_970$ de $cic.Term$ de $univs.Type0$ et de $B$, $cic.Term$ tient pour $univs.Type0$ et $B$.\nassistant\n", "label": "axiom let_mop (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (B : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 B) (R : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop B nil)) (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) (a _x_969 _x_970 : cic.Term univs.Type0 B) : cic.Term univs.Type0 B", "predict": "axiom mop (n : univs.Type0) (p : ∀ B : cic.Univ, ∀ nil : cic.Term, ∀ R : B → Dop, ∀ f : ∀ a : univs.Type0, ∀ _x_969 : univs.Type0, ∀ _x_970 : univs.Type0, n) : ∀ B : cic.Univ, ∀ nil : cic.Term, ∀ R : B → Dop, ∀ f : ∀ a : univs.Type0, ∀ _x_969 : univs.Type0, ∀ _x_970 : univs.Type0, n)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nLt_n_fact_n. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $n$ and $matita_arithmetics_factorial.fact$ applied to $n$.\nassistant\n", "label": "axiom lt_n_fact_n (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) : cic.Term cic.prop (matita_arithmetics_nat.lt n (matita_arithmetics_factorial.fact n))", "predict": "axiom lt_n_fact_n (n : univs.Type0) (x : matita_arithmetics_nat.nat) (p : matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) : cic.prop (matita_arithmetics_nat.lt n (matita_arithmetics_factorial.fact n))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nMod_times_mod. Soient $n$ et $m$ et $p$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $p$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $n$ et $p$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $matita_arithmetics_div_and_mod.mod$ appliqué à $n$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $p$ et $p$.\nassistant\n", "label": "postulate mod_times_mod : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod n p) (matita_arithmetics_div_and_mod.mod (matita_arithmetics_div_and_mod.mod n (matita_arithmetics_nat.times m p)) p))", "predict": "postulate mod_times_mod : (n : Term Type0) -> (m : Nat) -> (p : Lt O p) -> (q : Lt O m) -> Prop -> Eq (lift Type0 Type2) (Nat) -> Eq (mod n p) (mod (times m p) p)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nLet_clause_1075. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $bijf$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_permutation.bijn$ applied to $f$ and $matita_arithmetics_nat.S$ applied to $n$. Let $fS$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $matita_arithmetics_nat.S$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $n$. Let $i$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $lein$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $i$ and $n$. Let $a$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $matita_arithmetics_nat.le$ applied to $a$ and $matita_arithmetics_nat.S$ applied to $n$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $a$ and $i$. Then for all elements $lean$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $a$ and $matita_arithmetics_nat.S$ applied to $n$, for all elements $fa$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$", "label": "let_clause_1075 : f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> bijf : cic.Term cic.prop (matita_arithmetics_permutation.bijn f (matita_arithmetics_nat.S n)) -> fS : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f (matita_arithmetics_nat.S n)) (matita_arithmetics_nat.S n)) -> i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> lein : cic.Term cic.prop (matita_arithmetics_nat.le i n) -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _clearme : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le a (matita_arithmetics_nat.S n)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i)) -> lean : cic.Term cic.prop (matita_arithmetics_nat.le a (matita_arithmetics_nat.S n)) -> fa : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i) -> Hc : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a (matita_arithmetics_nat.S n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) i a) .", "predict": " and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $a$ and $i$, $bijf$ is true."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nLe_Psi_BPsi1. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_chebyshev_factorization.B$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ applied to $n$.\nassistant\n", "label": "axiom le_Psi_BPsi1 (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_chebyshev_psi.Psi (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_nat.times (matita_arithmetics_chebyshev_factorization.B (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_chebyshev_chebyshev_psi.Psi n)))", "predict": "axiom le_Psi_BPsi1 (n : matita_arithmetics_nat.nat) : ∀ __ : cic.prop, (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) → (cic.prop) (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_chebyshev_psi.Psi (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_nat.times (matita_arithmetics_chebyshev_factorization.B (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_chebyshev_chebyshev_psi.Psi n)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nDop_rect_Type0. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_955$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type0$, för alla funktioner $_H_mk_Dop$ från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $_nil$ och $_nil$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $prod$ applicerat på $a$ och $b$ och $prod$ applicerat på $a$ och $c$ till element av $cic.Term$ av $univs.Type0$ och $", "label": "axiom Dop_rect_Type0 (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_955 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ univs.Type0) (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) (x_955 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) : cic.Term univs.Type0 (Q_ x_955)", "predict": "A$ dan $dop_rect_Type0 : (A : univs.Type0) → _nil : cic.Term univs.Type0 → Q_ : ∀ x : cic.Term univs.Type0, Dop A _nil (matita_arithmetics_bigops.Dop (Q_ x)) → _H_mk_Dop : ∀ (x : sum (cic.Term univs.Type0) (matita_arithmetics_bigops.ACop A _nil)) (y : matita_arithmetics_bigops.ACop A _nil) : prod (x : cic.Term univs.Type0) (A : univs.Type0) → prod (x : cic.Term univs.Type0) (A : univs.Type0) → ∀ (a : cic.Term univs.Type0) (A : univs.Type0) : matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (A) (prod a _nil) _nil → ∀ (a : cic.Term univs.Type0) (A : univs.Type0) : matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil)) (sum b c) (matita_arithmetics_bigops.aop__o__op A _nil) (sum (prod a b) (prod a c)) (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil))) (sum (prod a (matita_arithmetics_bigops.aop__o__op A _nil)) (prod (a : cic.Term univs.Type0) (A : univs.Type0)) (b : cic.Term univs.Type0) (A : univs.Type0)) (c : cic.Term univs.Type0) (A : univs.Type0)) : matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (A) (dop_rect_Type0 A _nil (Q_ x))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nRefute_none_by_refl. Let $A$ and $B$ be elements of $cic.Univ$ of $univs.Type0$. Let $P$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Then for all functions $Q$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Univ$ of $univs.Type0$, for all elements $x$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $A$, for all functions $H$ from elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $A$ and $x$ and $matita_basics_types.None$ applied to $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.False$, for all functions $__$ from elements $v$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $A$ and $x$ and $matita_basics_types.Some$ applied to $A$ and $v$ to elements of $cic.Term$ of $univs.Type0$ and $Q$ applied to $P$ applied to $v$, $cic.Term$ holds for $univs.Type0$ and $Q$ applied to $matita_basics_types.match_option$ applied to $A$ and $univs.Type0$ and the function that maps $y$ to $cic.prod$ applied to $cic.prop$ and $univs.Type0$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $A$ and $x$ and $y$ and the function that maps $__1$ to $B$", "label": "postulate refute_none_by_refl : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) -> (Q : (__ : cic.Term univs.Type0 B) -> cic.Univ univs.Type0) -> (x : cic.Term univs.Type0 (matita_basics_types.option A)) -> (H : (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option A)) x (matita_basics_types.None A))) -> cic.Term cic.prop matita_basics_logic.False) -> (__ : (v : cic.Term univs.Type0 A) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option A)) x (matita_basics_types.Some A v))) -> cic.Term univs.Type0 (Q (P v))) -> cic.Term univs.Type0 (Q (matita_basics_types.match_option A univs.Type0 (\\ y : cic.Term univs.Type0 (matita_basics_types.option A) -> cic.prod cic.prop univs.Type0 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option A)) x y) (\\ __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option A)) x y) -> B)) (\\ E : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option A)) x (matita_basics_types.None A)) -> matita_basics_logic.match_False univs.Type0 (\\ _0 : cic.Term cic.prop matita_basics_logic.False -> B) (", "predict": " and $P$ applied to $y$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nOption_rect_CProp3. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $Q_$ från element $_x_622$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$, för alla element $_H_None$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$, för alla funktioner $_H_Some$ från element $x_623$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_623$, för alla element $x_622$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_622$.\nassistant\n", "label": "option_rect_CProp3 : _A : cic.Univ univs.Type0 -> Q_ : (_x_622 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Univ cic.prop) -> _H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A)) -> _H_Some : (x_623 : cic.Term univs.Type0 _A -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_623))) -> x_622 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Term cic.prop (Q_ x_622) .", "predict": "option_rect_CProp3 : (A : Elem (univ : Univ)) -> Proof (forall (Q : (x : Elem (univ : Univ)) -> Option A -> Prop) (H_None : Proof (Q (x : Elem (univ : Univ)) (None : Option A)) (H_Some : (x : Elem (univ : Univ)) -> Proof (Q (x) (Some A))) (x : Elem (univ : Univ))) -> Proof (forall (x : Elem (univ : Univ)) (Q : (x : Elem (univ : Univ)) -> Option A) -> Prop) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nTrue_rect_CProp0. Låt $Q_$ vara en funktion från element $_x_64$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $_H_I$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_logic.I$, för alla element $x_64$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_64$.\nassistant\n", "label": "axiom True_rect_CProp0 (Q_ : (_x_64 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ cic.prop) (_H_I : cic.Term cic.prop (Q_ matita_basics_logic.I)) (x_64 : cic.Term cic.prop matita_basics_logic.True) : cic.Term cic.prop (Q_ x_64)", "predict": "axiom true_rect_CProp0 (Q : prop → True → Univ prop) : ∀ H_I : prop, ∀ x_64 : prop, term (Q x_64)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nExp_pi. Soient $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour toutes les fonctions $p$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_bigops.bigop$ appliqué à $n$ et la fonction qui envoie $i$ à $p$ appliqué à $i$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ et la fonction qui envoie $i$ à $matita_arithmetics_exp.exp$ appliqué à $f$ appliqué à $i$ et $m$ et $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_bigops.bigop$ appliqué à $n$ et la fonction qui envoie $i$ à $p$ appliqué à $i$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $m$.\nassistant\n", "label": "Axiom exp_pi : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall p : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (fun i => p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (fun i => matita_arithmetics_exp.exp (f i) m)) (matita_arithmetics_exp.exp (matita_arithmetics_bigops.bigop n (fun i => p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (fun i => f i)) m)) .", "predict": "Axiom exp_pi : forall n : univs.Type0, forall m : matita_arithmetics_nat.nat, forall p : forall __ : univs.Type0, forall i : matita_arithmetics_nat.nat, prop (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (p i)) (matita_arithmetics_bigops.bigop n (p i) matita_arithmetics_nat.nat) (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_exp.exp (f i) m) (matita_arithmetics_exp.exp (matita_arithmetics_bigops.bigop n (p i) matita_arithmetics_nat.nat) (f i) m) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nDPair_inv_rect_CProp1. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$. Då för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1158$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $dpi1$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_dpi2$ av $cic.Term$ av $univs.Type0$ och $x2$ applicerat på $dpi1$ och element $_z1159$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_DPair$ applicerat på $x1$ och $x2$ och $dpi1$ och $_dpi2$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.mk_DPair$ applicerat på $x1$ och $x2$ och $dpi1$ och $_dpi2$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "postulate DPair_inv_rect_CProp1 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> (P : (_z1158 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1159 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P Hterm)", "predict": "postulate dpair_inv_rect_CProp1 : (x1 : univs.Type0) -> (x2 : (x : univs.Type0) -> univs.Type0) -> (Hterm : univs.Type0) -> (matita_basics_types.DPair x1 x2) -> (P : (z1158 : univs.Type0) -> matita_basics_types.DPair x1 x2 -> univs.Type0) -> (H1 : dpi1 : univs.Type0) -> (dpi2 : x1) -> (z1159 : univs.Type0) -> (matita_basics_logic.eq (univs.Type0) (univs.Type2)) -> (matita_basics_types.DPair x1 x2) -> (Hterm) -> (matita_basics_types.mk_DPair x1 x2) -> (dpi1) -> (dpi2) -> (P (matita_basics_types.mk_DPair x1 x2) (dpi1) (dpi2))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nProd_inv_rect_Type4. Pour tous les éléments $x1$ et $x2$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1242$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type4$, pour toutes les fonctions $_H1$ des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $x2$ et des éléments $_z1243$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Prod$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_Prod$ appliqué à $x1$ et $x2$ et $_fst$ et $_snd$ à des éléments de $cic.Term$ de $univs.Type4$ et de $P$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $x1$ et $x2$ et $_fst$ et $_snd$, $cic.Term$ tient pour $univs.Type4$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "Prod_inv_rect_Type4 : x1 : cic.Univ univs.Type0 -> x2 : cic.Univ univs.Type0 -> Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) -> P : (_z1242 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) -> cic.Univ univs.Type4) -> _H1 : (_fst : cic.Term univs.Type0 x1 -> _snd : cic.Term univs.Type0 x2 -> _z1243 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod x1 x2)) Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) -> cic.Term univs.Type4 (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term univs.Type4 (P Hterm) .", "predict": "prod_inv_rect_Type4 : (x1 : Elem (cic.Univ) (univs.Type0)) -> (x2 : Elem (cic.Univ) (univs.Type0)) -> (Hterm : Elem (cic.Term) (univs.Type0)) -> (matita_basics_types.Prod x1 x2) -> (P : (z1242 : Elem (cic.Term) (univs.Type0)) -> (matita_basics_types.Prod x1 x2) -> Elem (cic.Univ) (univs.Type4)) -> (H1 : (fst : Elem (cic.Term) (univs.Type0)) -> (x1) -> (snd : Elem (cic.Term) (univs.Type0)) -> (x2) -> (z1243 : Elem (cic.Term) (cic.prop)) -> (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_basics_types.Prod x1 x2) Hterm) -> (P (matita_basics_types.mk_Prod x1 x2) (fst) (snd))) -> Proof (forall (z1243 : Elem (cic.Term) (cic.prop)) (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_basics_types.Prod x1 x2) Hterm) (P (matita_basics_types.mk_Prod x1 x2) (fst) (snd))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nLet_clause_17041. For all elements $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $posm$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, for all elements $a$ and $x1029$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x1029$ and $matita_arithmetics_bigops.aop__o__op$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $matita_arithmetics_sigma_pi.plusAC$ and $x1029$ and $matita_arithmetics_nat.O$.\nassistant\n", "label": "postulate let_clause_17041 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x1029 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1029 (matita_arithmetics_bigops.aop__o__op matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_sigma_pi.plusAC x1029 matita_arithmetics_nat.O))", "predict": "postulate clause_17041 : (m : cic.Term univs.Type0) -> (posm : cic.Term (cic.prop . matita_arithmetics_nat.lt (matita_arithmetics_nat.O) m)) -> (a : univs.Type0) -> (x1029 : matita_arithmetics_nat.nat) -> cic.Term (cic.prop . matita_basics_logic.eq (cic.lift (univs.Type0 . univs.Type2) (matita_arithmetics_nat.nat)) (x1029 . matita_arithmetics_bigops.aop__o__op (matita_arithmetics_nat.nat) (matita_arithmetics_nat.O) (matita_arithmetics_sigma_pi.plusAC) (x1029) (matita_arithmetics_nat.O)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nLet_clause_1033. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $lt1n$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$. Let $x2515$ and $x2516$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x2515$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $x2516$ and $matita_arithmetics_div_and_mod.div$ applied to $x2515$ and $x2516$ and $matita_arithmetics_div_and_mod.mod$ applied to $x2515$ and $x2516$.\nassistant\n", "label": "let_clause_1033 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> lt1n : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) -> x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516))) .", "predict": "let_clause_1033 : (n : Elem (Term (univs Type0)) (nat (matita_arithmetics_nat))) -> (lt1n : Elem (Term (prop)) (lt (matita_arithmetics_nat (S (matita_arithmetics_nat (O))) n)) -> (x2515 : Elem (Term (univs Type0)) (nat (matita_arithmetics_nat))) -> (x2516 : Elem (Term (univs Type0)) (nat (matita_arithmetics_nat))) -> Proof (Eq (lift (univs Type0) (univs Type2)) (nat (matita_arithmetics_nat))) (x2515) (plus (times x2516 (div (mod (x2515) x2516)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nLet_clause_1034. Soient $n$ et $m$ et $q$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $posm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$. Soient $x2515$ et $x2516$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2515$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_div_and_mod.mod$ appliqué à $x2515$ et $x2516$ et $matita_arithmetics_nat.times$ appliqué à $x2516$ et $matita_arithmetics_div_and_mod.div$ appliqué à $x2515$ et $x2516$.\nassistant\n", "label": "let_clause_1034 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> q : cic.Term univs.Type0 matita_arithmetics_nat.nat -> posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_div_and_mod.mod x2515 x2516) (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)))) .", "predict": "let_clause_1034 : (n : Elem (Term (Type0 (univs))) -> m : Elem (Term (Type0 (univs))) -> q : Elem (Term (Type0 (univs))) -> posn : Elem (Term (prop (matita_arithmetics_nat (nat)))) -> posm : Elem (Term (prop (matita_arithmetics_nat (lt) (O (matita_arithmetics_nat)) n)) -> x2515 : Elem (Term (Type0 (univs))) -> x2516 : Elem (Term (Type0 (univs))) -> Proof (and (eq (lift (univs) (Type2)) (matita_arithmetics_nat (nat))) (x2515) (plus (mod (matita_arithmetics_div_and_mod) x2515 x2516) (times x2516 (div (matita_arithmetics_div_and_mod) x2515 x2516)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nUnit_inv_rect_CProp1. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$. Låt $P$ vara en funktion från element $_z960$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$ till element av $cic.Univ$ av $cic.prop$. Låt $_H1$ vara en funktion från element $_z961$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.unit$ och $Hterm$ och $matita_basics_types.it$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.it$. Då håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "Axiom unit_inv_rect_CProp1 : forall Hterm : cic.Term univs.Type0 matita_basics_types.unit, forall P : ((_z960 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ cic.prop), forall _H1 : ((_z961 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm matita_basics_types.it)) -> cic.Term cic.prop (P matita_basics_types.it)), cic.Term cic.prop (P Hterm) .", "predict": "Axiom unit_inv_rect_CProp1 : forall Hterm : univs.Type0 -> matita_basics_types.unit, forall P : _z960 -> univ -> cic.prop, forall _H1 : _z961 -> cic.prop -> matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2) (matita_basics_types.unit) Hterm) (matita_basics_types.it) -> cic.Term (cic.prop) (P (matita_basics_types.it)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nLe_plus. For all elements $n1$ and $n2$ and $m1$ and $m2$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n1$ and $n2$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $m1$ and $m2$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.plus$ applied to $n1$ and $m1$ and $matita_arithmetics_nat.plus$ applied to $n2$ and $m2$.\nassistant\n", "label": "axiom le_plus (n1 n2 m1 m2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.le n1 n2)) (__1 : cic.Term cic.prop (matita_arithmetics_nat.le m1 m2)) : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.plus n1 m1) (matita_arithmetics_nat.plus n2 m2))", "predict": "axiom le_plus (n1 n2 : cic.Term univs.Type0) (m1 m2 : matita_arithmetics_nat.nat) (p : cic.prop) (q : matita_arithmetics_nat.le n1 n2) (r : matita_arithmetics_nat.le m1 m2) : cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.plus n1 m1) (matita_arithmetics_nat.plus n2 m2))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nLet_aop. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $R$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $B$ and $nil$. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Then for all elements $a$ of $cic.Term$ of $univs.Type0$ and $B$, $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $B$ and $nil$.\nassistant\n", "label": "axiom let_aop (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (B : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 B) (R : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop B nil)) (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) (a : cic.Term univs.Type0 B) : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil)", "predict": "axiom let_aop (n : univs.Type0) (p : ∀ a : univs.Type0, matita_arithmetics_nat.nat → cic.Term univs.Type0 matita_basics_bool.bool) (B : univ univs.Type0) (nil : cic.Term univs.Type0 B) (R : B → matita_arithmetics_bigops.Dop B nil) (f : ∀ a : univs.Type0, matita_arithmetics_nat.nat → cic.Term univs.Type0 B) : ∀ a : univs.Type0, B → cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nRange_inv_rect_Type3. For all elements $x1$ of $cic.Univ$ of $univs.Type0$, for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $x1$, for all functions $P$ from elements $_z1644$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $x1$ to elements of $cic.Univ$ of $univs.Type3$, for all functions $_H1$ from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ and elements $_z1645$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_bigops.range$ applied to $x1$ and $Hterm$ and $matita_arithmetics_bigops.mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $cic.Term$ of $univs.Type3$ and $P$ applied to $matita_arithmetics_bigops.mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$, $cic.Term$ holds for $univs.Type3$ and $P$ applied to $Hterm$.\nassistant\n", "label": "Axiom range_inv_rect_Type3 : forall x1 : cic.Univ univs.Type0, forall Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1), forall P : ((_z1644 : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1)) -> cic.Univ univs.Type3), forall _H1 : ((_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 x1) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (_z1645 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.range x1)) Hterm (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter))) -> cic.Term univs.Type3 (P (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter))), cic.Term univs.Type3 (P Hterm) .", "predict": "Axiom range_inv_rect_Type3 : forall x1 : Univ, forall Hterm : Term, (range x1 -> forall P : _z1644 -> range x1 -> Univ, forall _H1 : enum (forall __ : Term, nat) x1 -> upto : nat, filter : _ -> nat -> Term, z1645 : Term, eq (lift Univ Type2) (range x1) Hterm (mk_range x1 (enum (forall __ : Term, nat)) x1 (upto : nat) (filter : _ -> nat -> Term))) (forall z1645 : Term, prop) (eq (lift Type0 Type2) (range x1) Hterm (mk_range x1 (enum (forall __ : Term, nat)) x1 (upto : nat) (filter : _ -> nat -> Term))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nRange_inv_rect_CProp2. Pour tous les éléments $x1$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $x1$, pour toutes les fonctions $P$ des éléments $_z1680$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $x1$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des fonctions $_enum$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_upto$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_filter$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ et des éléments $_z1681$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.range$ appliqué à $x1$ et $Hterm$ et $matita_arithmetics_bigops.mk_range$ appliqué à $x1$ et $_enum$ et $_upto$ et $_filter$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_bigops.mk_range$ appliqué à $x1$ et $_enum$ et $_upto$ et $_filter$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "Axiom range_inv_rect_CProp2 : forall x1 : cic.Univ univs.Type0, forall Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1), forall P : ((_z1680 : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1)) -> cic.Univ cic.prop), forall _H1 : ((_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 x1) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (_z1681 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.range x1)) Hterm (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter))), cic.Term cic.prop (P Hterm) .", "predict": "Axiom range_inv_rect_CProp2 : forall x1 : Univ, forall Hterm : Term Type0, forall r : range x1, forall P : (z1680 : Term Type0) -> range x1 -> Prop, forall H1 : (enum : (t : Type0) -> nat) -> (x1 : Univ) -> (upto : Term Type0) -> (filter : (t : Type0) -> nat) -> (b : bool) -> (z1681 : Term prop) -> (eq (lift Type0 Type2) (range x1) (Hterm) (mk_range x1)) -> (P (mk_range x1) (enum) (upto) (filter) b z1681) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nMatch_option. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $return_sort$ be an element of $cic.Sort$. Then for all functions $return_type$ from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$ to elements of $cic.Univ$ of $return_sort$, for all elements $case_None$ of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_basics_types.None$ applied to $_A$, for all functions $case_Some$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_basics_types.Some$ applied to $_A$ and $__$, for all elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.\nassistant\n", "label": "postulate match_option : (_A : cic.Univ univs.Type0) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ return_sort) -> (case_None : cic.Term return_sort (return_type (matita_basics_types.None _A))) -> (case_Some : (__ : cic.Term univs.Type0 _A) -> cic.Term return_sort (return_type (matita_basics_types.Some _A __))) -> (z : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term return_sort (return_type z)", "predict": "postulate match_option : (A : Univ Type0) -> return_sort : Sort -> (z : Term Type0 (option A)) -> (case_None : Term return_sort (return_type z)) -> (case_Some : (x : Term Type0) -> A -> Term return_sort (return_type (Some x))) -> (z : Term Type0 (option A)) -> Term return_sort (return_type z)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nList_ind. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_716$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_nil$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_lists_list.nil$ appliqué à $_A$. Soit $_H_cons$ une fonction des éléments $x_718$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $x_717$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ et des éléments $_x_720$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $x_717$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_lists_list.cons$ appliqué à $_A$ et $x_718$ et $x_717$. Alors pour tous les éléments $x_716$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_716$.\nassistant\n", "label": "list_ind : _A : cic.Univ univs.Type0 -> Q_ : (_x_716 : cic.Term univs.Type0 (matita_basics_lists_list.list _A) -> cic.Univ cic.prop) -> _H_nil : cic.Term cic.prop (Q_ (matita_basics_lists_list.nil _A)) -> _H_cons : (x_718 : cic.Term univs.Type0 _A -> x_717 : cic.Term univs.Type0 (matita_basics_lists_list.list _A) -> _x_720 : cic.Term cic.prop (Q_ x_717) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.cons _A x_718 x_717))) -> x_716 : cic.Term univs.Type0 (matita_basics_lists_list.list _A) -> cic.Term cic.prop (Q_ x_716) .", "predict": "list_ind : (A : Elem (cic.Univ (univs.Type0))) -> (Q : (x : Elem (cic.Term (univs.Type0))) -> (L : Elem (matita_basics_lists_list.list (cic.Univ (univs.Type0)))) -> Proof (Q A (nil (cic.Univ (cic.prop)))) -> (x : Elem (cic.Term (univs.Type0))) -> (y : Elem (cic.Term (univs.Type0))) -> (L : Elem (matita_basics_lists_list.list (cic.Univ (univs.Type0)))) -> Proof (Q (cons x y) (L)) -> (x : Elem (cic.Term (univs.Type0))) -> (L : Elem (matita_basics_lists_list.list (cic.Univ (univs.Type0)))) -> Proof (forall (x : Elem (cic.Term (univs.Type0))) (L : Elem (matita_basics_lists_list.list (cic.Univ (univs.Type0)))) (Q x L)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nReflexive. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_R$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $A$. Then $cic.Univ$ holds for $cic.prop$.\nassistant\n", "label": "axiom reflexive (A : cic.Univ univs.Type0) (_R : cic.Term univs.Type0 (matita_basics_relations.relation A)) : cic.Univ cic.prop", "predict": "axiom reflexive (A : univs.Type0) (R : cic.Term univs.Type0 (matita_basics_relations.relation)) : cic.Univ (cic.prop)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nExists_forall_lt. För alla funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, för alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.Or$ applicerat på $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $i$ som $matita_basics_logic.And$ applicerat på $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $i$ och $matita_basics_bool.true$ och $cic.prod$ applicerat på $univs.Type0$ och $cic.prop$ och $matita_arithmetics_nat.nat$ och funktionen som avbildar $i$ som $cic.prod$ applicerat på $cic.prop$ och $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och funktionen som avbildar $__$ som $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $i$ och $matita_basics_bool.false$.\nassistant\n", "label": "axiom exists_forall_lt (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.ex matita_arithmetics_nat.nat (λ i => matita_basics_logic.And (matita_arithmetics_nat.lt i n) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.true))) (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat (λ i => cic.prod cic.prop cic.prop (matita_arithmetics_nat.lt i n) (λ __ => matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false))))", "predict": "axiom exists_forall_lt (f : Term (univ Type0) → nat → Term (univ Type0) → bool) (n : Term (univ Type0) → nat) : ∀ i : Term (univ Type0), (prop (or (ex (and (lt (f i) n) (eq (lift (Type0) (Type2)) (f i))) (true))) ∧ (prop (and (prop (lt i n)) (eq (lift (Type0) (Type2)) (f i))) ∧ (prop (and (prop (lt i n)) (eq (f i) true))) ∧ (prop (and (prop (lt i n)) (eq (f i) false)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nLog_exp. For all elements $p$ and $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $p$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_log.log$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_exp.exp$ applied to $p$ and $n$ and $m$ and $matita_arithmetics_nat.plus$ applied to $n$ and $matita_arithmetics_log.log$ applied to $p$ and $m$.\nassistant\n", "label": "axiom log_exp (p n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_log.log p (matita_arithmetics_nat.times (matita_arithmetics_exp.exp p n) m)) (matita_arithmetics_nat.plus n (matita_arithmetics_log.log p m)))", "predict": "axiom log_exp (p n m : Term Type0) (x : Nat < S (O p)) (y : Nat < O m) : prop (Eq (lift Type0 Type2 Nat) (log p (exp p n * m) + log p m))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nProd_rect_CProp4. Let $_A$ and $_B$ be elements of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_704$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_Prod$ be a function from elements $_fst$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_snd$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_Prod$ applied to $_A$ and $_B$ and $_fst$ and $_snd$. Then for all elements $x_704$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_704$.\nassistant\n", "label": "axiom Prod_rect_CProp4 (_A _B : cic.Univ univs.Type0) (Q_ : (_x_704 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ cic.prop) (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) (x_704 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) : cic.Term cic.prop (Q_ x_704)", "predict": "axiom prod_rect_CProp4 (A B : Univ Type0) (Q : x : Term Type0 → Prod A B → Univ prop) : ∀ x : Prod A B, Term (prop (Q x))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nProd_inv_rect_Type4. Låt $x1$ och $x2$ vara element av $cic.Univ$ av $univs.Type0$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z1242$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type4$. Då för alla funktioner $_H1$ från element $_fst$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_snd$ av $cic.Term$ av $univs.Type0$ och $x2$ och element $_z1243$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_Prod$ applicerat på $x1$ och $x2$ och $_fst$ och $_snd$ till element av $cic.Term$ av $univs.Type4$ och $P$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $x1$ och $x2$ och $_fst$ och $_snd$, håller $cic.Term$ för $univs.Type4$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "Axiom Prod_inv_rect_Type4 : forall x1 : cic.Univ univs.Type0, forall x2 : cic.Univ univs.Type0, forall Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2), forall P : ((_z1242 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2)) -> cic.Univ univs.Type4), forall _H1 : ((_fst : cic.Term univs.Type0 x1) -> (_snd : cic.Term univs.Type0 x2) -> (_z1243 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod x1 x2)) Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term univs.Type4 (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))), cic.Term univs.Type4 (P Hterm) .", "predict": "Axiom prod_inv_rect_Type4 : forall x1 : univs.Type0, forall x2 : univs.Type0, forall Hterm : Prod x1 x2, forall P : (z1242 : Term univs.Type0) -> Prod x1 x2 -> Univ univs.Type4, forall H1 : fst (Term univs.Type0) x1 -> snd (Term univs.Type0) x2 -> z1243 : Prop -> eq (lift univs.Type0 univs.Type2 (Prod x1 x2) Hterm) (mk_Prod x1 x2) (fst (Term univs.Type0) x1) (snd (Term univs.Type0) x2), forall z1243 : Prop, forall z1242 : Term univs.Type0, forall x1 : univs.Type0, forall x2 : univs.Type0, forall Hterm : Prod x1 x2, forall P : (z1242 : Term univs.Type0) -> Prod x1 x2 -> Univ univs.Type4, P (mk_Prod x1 x2) (fst (Term univs.Type0) x1) (snd (Term univs.Type0) x2) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nEq_gcd_SO_to_not_divides. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_primes.divides$ applicerat på $n$ och $m$.\nassistant\n", "label": "eq_gcd_SO_to_not_divides : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) -> __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) -> cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides n m)) .", "predict": "eq_gcd_SO_to_not_divides : (n : Elem (cic Term) (univs Type0)) -> (m : Elem (cic Term) (matita_arithmetics_nat nat)) -> Proof (forall (n : Elem (cic Term) (matita_arithmetics_nat Lt (S (matita_arithmetics_nat O) n))) (forall (m : Elem (cic Term) (matita_arithmetics_nat gcd (n m))) (S (matita_arithmetics_nat O)))) (not (matita_arithmetics_primes divides n m))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nOrd_exp. Let $p$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $p$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.ord$ applied to $matita_arithmetics_exp.exp$ applied to $p$ and $m$ and $p$ and $m$.\nassistant\n", "label": "Axiom ord_exp : forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_ord.ord (matita_arithmetics_exp.exp p m) p) m) .", "predict": "Axiom ord_exp : forall p : matita_arithmetics_nat.nat, forall m : matita_arithmetics_nat.nat, forall __ : cic.prop, forall : matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p -> cic.Term (cic.prop) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_ord.ord (matita_arithmetics_exp.exp p m) p)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nIter. Soit $H$ un élément de $cic.Univ$ de $univs.Type0$. Soit $__$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $H$ à des éléments de $cic.Term$ de $univs.Type0$ et de $H$. Soit $__1$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__2$ de $cic.Term$ de $univs.Type0$ et de $H$, $cic.Term$ tient pour $univs.Type0$ et $H$.\nassistant\n", "label": "axiom iter (H : cic.Univ univs.Type0) (__ : (__ : cic.Term univs.Type0 H) -> cic.Term univs.Type0 H) (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__2 : cic.Term univs.Type0 H) : cic.Term univs.Type0 H", "predict": "axiom iter (H : Univ Type0) (f : Term Type0 → H → Term Type0) (n : Nat) (x : Term Type0) : ∀ y : Term Type0, x → f y H = x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nFold_filter. Let $A$ and $B$ be elements of $cic.Univ$ of $univs.Type0$. Let $_a$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$. Let $p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $op$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $matita_basics_lists_list.fold$ applied to $A$ and $B$ and $op$ and $nil$ and the function that maps $i$ to $p$ applied to $i$ and the function that maps $i$ to $f$ applied to $i$ and $l$ and $matita_basics_lists_list.fold$ applied to $A$ and $B$ and $op$ and $nil$ and the function that maps $i$ to $matita_basics_bool.true$ and the function that maps $i$ to $f$ applied to $i$ and $matita_basics_lists_list.filter$ applied to $A$ and $p$ and $l$.\nassistant\n", "label": "fold_filter : A : cic.Univ univs.Type0 -> B : cic.Univ univs.Type0 -> _a : cic.Term univs.Type0 A -> l : cic.Term univs.Type0 (matita_basics_lists_list.list A) -> p : (__ : cic.Term univs.Type0 A -> cic.Term univs.Type0 matita_basics_bool.bool) -> op : (__ : cic.Term univs.Type0 B -> __1 : cic.Term univs.Type0 B -> cic.Term univs.Type0 B) -> nil : cic.Term univs.Type0 B -> f : (__ : cic.Term univs.Type0 A -> cic.Term univs.Type0 B) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_basics_lists_list.fold A B op nil (i : cic.Term univs.Type0 A => p i) (i : cic.Term univs.Type0 A => f i) l) (matita_basics_lists_list.fold A B op nil (i : cic.Term univs.Type0 A => matita_basics_bool.true) (i : cic.Term univs.Type0 A => f i) (matita_basics_lists_list.filter A p l))) .", "predict": "fold_filter : (A : Elem (univs Type0)) -> (B : Elem (univs Type0)) -> (a : Term (univs Type0)) -> (l : Term (univs Type0) -> List (univs Type0)) -> (p : (i : Elem (univs Type0)) -> (A : Elem (univs Type0)) -> Term (univs Type0)) -> (op : (i : Elem (univs Type0)) -> (j : Elem (univs Type0)) -> (B : Elem (univs Type0)) -> Term (univs Type0)) -> (nil : Term (univs Type0)) -> (f : (i : Elem (univs Type0)) -> (A : Elem (univs Type0)) -> Term (univs Type0)) -> Proof (Eq (lift (univs Type0) (univs Type2)) B) (fold (A) (B) op nil (i => p i A) (i => f i A) l) (fold (A) (B) op nil (i => True) (i => f i A) (filter (A) p l)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nNot_rect_Type3_body. Soit $_A$ un élément de $cic.Univ$ de $cic.prop$. Soit $Q_$ une fonction des éléments $_x_88$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type3$. Soit $_H_nmk$ une fonction des fonctions $x_89$ des éléments $__$ de $cic.Term$ de $cic.prop$ et de $_A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$ à des éléments de $cic.Term$ de $univs.Type3$ et de $Q_$ appliqué à $matita_basics_logic.nmk$ appliqué à $_A$ et $x_89$. Soit $x_88$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $_A$. Alors $cic.Term$ tient pour $univs.Type3$ et $Q_$ appliqué à $x_88$.\nassistant\n", "label": "Axiom Not_rect_Type3_body : forall _A : cic.Univ cic.prop, forall Q_ : ((_x_88 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ univs.Type3), forall _H_nmk : ((x_89 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term univs.Type3 (Q_ (matita_basics_logic.nmk _A x_89))), forall x_88 : cic.Term cic.prop (matita_basics_logic.Not _A), cic.Term univs.Type3 (Q_ x_88) .", "predict": "Axiom not_rect_Type3_body : forall A : cic.prop, forall Q : x88 : cic.Term -> cic.prop -> matita_basics_logic.not A -> univs.Type3 -> Q x88 (matita_basics_logic.nmk A (x89 Q A)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nProd. Låt $s1$ och $s2$ vara element av $Sort$. Låt $a$ vara ett element av $Univ$ av $s1$. Låt $b$ vara en funktion från element av $Term$ av $s1$ och $a$ till element av $Univ$ av $s2$. Då håller $Univ$ för $rule$ applicerat på $s1$ och $s2$.\nassistant\n", "label": "axiom prod (s1 s2 : Sort) (a : Univ s1) (b : Term s1 a -> Univ s2) : Univ (rule s1 s2)", "predict": "axiom prod (s1 s2 : Sort) (a : s1 → Univ) (b : term s1 → a → Univ) : Univ (rule s1 s2)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nLog_exp1. För alla element $p$ och $n$ och $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_log.log$ applicerat på $p$ och $matita_arithmetics_exp.exp$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_log.log$ applicerat på $p$ och $n$.\nassistant\n", "label": "log_exp1 : p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_log.log p (matita_arithmetics_exp.exp n m)) (matita_arithmetics_nat.times m (matita_arithmetics_nat.S (matita_arithmetics_log.log p n)))) .", "predict": "log_exp1 : (p : Elem (cic Term) (univs Type0)) -> (n : Elem (cic Term) (matita_arithmetics_nat nat)) -> (m : Elem (cic Term) (matita_arithmetics_nat nat)) -> Proof (forall (__) : (cic Term) (matita_arithmetics_nat lt) (matita_arithmetics_nat S) (matita_arithmetics_nat O) p) (le (matita_arithmetics_log log) p (matita_arithmetics_exp exp) n m) (times m (matita_arithmetics_nat S) (matita_arithmetics_log log) p n)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nDop_inv_rect_CProp1. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $x1$ och $x2$. Då för alla funktioner $P$ från element $_z1752$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $prod$ applicerat på $a$ och $x2$ och $x2$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $c$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univ", "label": "Dop_inv_rect_CProp1 : x1 : cic.Univ univs.Type0 -> x2 : cic.Term univs.Type0 x1 -> Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2) -> P : (_z1752 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2) -> cic.Univ cic.prop) -> _H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2) -> prod : (__ : cic.Term univs.Type0 x1 -> __1 : cic.Term univs.Type0 x1 -> cic.Term univs.Type0 x1) -> _null : (a : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> _distr : (a : cic.Term univs.Type0 x1 -> b : cic.Term univs.Type0 x1 -> c : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> _z1753 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr)) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term cic.prop (P Hterm) .", "predict": "s.Type2$ och $x1$ och $distr$ applicerat på $a$ och $b$ och $c$ och $x2$ och $x2$ och $x2$, är det giltig att $Hterm$ är ekvivalent med $P$ och $_H1$ och $prod$ och $_null$ och $matita_basics_logic.eq$ och $distr$ och $x2$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nLet_clause_1572. Let $m$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Let $H$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $m$ and $n$ and $matita_arithmetics_nat.O$. Then for all elements $auto$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $m$ and $matita_arithmetics_nat.O$, for all elements $auto'$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $matita_arithmetics_nat.O$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $m$ and $matita_arithmetics_nat.O$.\nassistant\n", "label": "axiom let_clause_1572 (m n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd m n) matita_arithmetics_nat.O)) (auto : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m matita_arithmetics_nat.O)) (auto' : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n matita_arithmetics_nat.O)) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m matita_arithmetics_nat.O)", "predict": "axiom let_clause_1572 (m n : Term Type0) (posn : Prop (Lt (nd 0) n)) (H : Prop (Eq (lift Type0 Type2) (gcd m n) (nd 0))) : ∀ auto : Prop (Eq (lift Type0 Type2) (nat) m) ∧ ∀ auto' : Prop (Eq (lift Type0 Type2) (nat) n) ∧ ∀ auto'' : Prop (Eq (lift Type0 Type2) (nat) m) ∧ ∀ auto''' : Prop (Eq (lift Type0 Type2) (nat) n), Prop (Eq (lift Type0 Type2) (nat) m)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nInvert_permut_f. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $m$ och $n$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_permutation.injn$ applicerat på $f$ och $n$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_permutation.invert_permut$ applicerat på $n$ och $f$ och $f$ applicerat på $m$ och $m$.\nassistant\n", "label": "postulate invert_permut_f : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le m n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_permutation.injn f n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_permutation.invert_permut n f (f m)) m)", "predict": "postulate invert_permut_f : (f : Term (Type0 -> Nat)) -> (n : Term (Type0 -> Nat)) -> Prop (Leq (injn (permute f n)) n) -> Prop (Eq (lift (Type0 , Type2) (Nat)) (invert_permut f n (f m)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nIff_trans. Soient $A$ et $B$ et $C$ des éléments de $cic.Univ$ de $cic.prop$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.iff$ appliqué à $A$ et $B$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.iff$ appliqué à $B$ et $C$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.iff$ appliqué à $A$ et $C$.\nassistant\n", "label": "axiom iff_trans (A B C : cic.Univ cic.prop) (__ : cic.Term cic.prop (matita_basics_logic.iff A B)) (__1 : cic.Term cic.prop (matita_basics_logic.iff B C)) : cic.Term cic.prop (matita_basics_logic.iff A C)", "predict": "axiom iff_trans (A B C : Prop) (x : iff A B) (y : iff B C) : iff A C"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nBool_ind. For all functions $Q_$ from elements $_x_326$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $cic.prop$, for all elements $_H_true$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_bool.true$, for all elements $_H_false$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_bool.false$, for all elements $x_326$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_326$.\nassistant\n", "label": "axiom bool_ind (Q_ : (_x_326 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) (_H_true : cic.Term cic.prop (Q_ matita_basics_bool.true)) (_H_false : cic.Term cic.prop (Q_ matita_basics_bool.false)) (x_326 : cic.Term univs.Type0 matita_basics_bool.bool) : cic.Term cic.prop (Q_ x_326)", "predict": "axiom bool_ind (Q : ∀ x : cic.Term univs.Type0, matita_basics_bool.bool → cic.Univ) (H_true : Q (matita_basics_bool.true) : cic.prop) (H_false : Q (matita_basics_bool.false) : cic.prop) (x : cic.Term univs.Type0) : matita_basics_bool.bool → cic.prop := Q x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nLet_clause_1034. Let $n$ and $m$ and $q$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $posn$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, for all elements $posm$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, for all elements $x2515$ and $x2516$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x2515$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_div_and_mod.mod$ applied to $x2515$ and $x2516$ and $matita_arithmetics_nat.times$ applied to $x2516$ and $matita_arithmetics_div_and_mod.div$ applied to $x2515$ and $x2516$.\nassistant\n", "label": "Axiom let_clause_1034 : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall q : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), forall x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_div_and_mod.mod x2515 x2516) (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)))) .", "predict": "Axiom clause_1034 : forall n : univs.Type0, forall m : univs.Type0, forall q : matita_arithmetics_nat.nat, forall posn : cic.prop, forall posm : cic.prop, forall x2515 : univs.Type0, forall x2516 : univs.Type0, (cic.Term (cic.prop) (matita_arithmetics_nat.lt (matita_arithmetics_nat.O) n) /\\ cic.Term (cic.prop) (matita_arithmetics_nat.lt (matita_arithmetics_nat.O) m) /\\ cic.Term (univs.Type0) (cic.lift (univs.Type0) (univs.Type2) (matita_arithmetics_nat.nat)) (x2515) /\\ cic.Term (univs.Type0) (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2) (matita_arithmetics_nat.nat)) (matita_arithmetics_div_and_mod.mod (x2515) (x2516)) (matita_arithmetics_nat.times (x2516) (matita_arithmetics_div_and_mod.div (x2515) (x2516)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nLet_clause_1075. For all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $bijf$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_permutation.bijn$ applied to $f$ and $matita_arithmetics_nat.S$ applied to $n$, for all elements $fS$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $matita_arithmetics_nat.S$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $n$, for all elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $lein$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $i$ and $n$, for all elements $a$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $matita_arithmetics_nat.le$ applied to $a$ and $matita_arithmetics_nat.S$ applied to $n$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $a$ and $i$, for all elements $lean$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $a$ and $matita_arithmetics_nat.S$ applied to $n$, for all elements $fa$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$", "label": "axiom let_clause_1075 (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (bijf : cic.Term cic.prop (matita_arithmetics_permutation.bijn f (matita_arithmetics_nat.S n))) (fS : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f (matita_arithmetics_nat.S n)) (matita_arithmetics_nat.S n))) (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) (lein : cic.Term cic.prop (matita_arithmetics_nat.le i n)) (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le a (matita_arithmetics_nat.S n)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i))) (lean : cic.Term cic.prop (matita_arithmetics_nat.le a (matita_arithmetics_nat.S n))) (fa : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i)) (Hc : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a (matita_arithmetics_nat.S n))) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) i a)", "predict": " and $matita_arithmetics_nat.nat$ and $f$ applied to $a$ and $i$, let $x$ be the result of $matita_arithmetics_permutation.bijn$ applied to $f$ and $matita_arithmetics_nat.S$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $n$ and $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $matita_arithmetics_nat.S$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $n$, then $x$ is equal to $bijf$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nACop_inv_rect_CProp4. Pour tous les éléments $x1$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $x2$ de $cic.Term$ de $univs.Type0$ et de $x1$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1602$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $aop$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $x1$ et $x2$ et des fonctions $_comm$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $matita_arithmetics_bigops.op$ appliqué à $x1$ et $x2$ et $aop$ et $a$ et $b$ et $matita_arithmetics_bigops.op$ appliqué à $x1$ et $x2$ et $aop$ et $b$ et $a$ et des éléments $_z1603$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.ACop$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_arithmetics_bigops.mk_ACop$ appliqué à $x1$ et $x2$ et $aop$ et $_comm$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_bigops.mk_ACop$ appliqué à $x1$ et $x2$ et $aop$ et $_comm$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "Axiom ACop_inv_rect_CProp4 : forall x1 : cic.Univ univs.Type0, forall x2 : cic.Term univs.Type0 x1, forall Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2), forall P : ((_z1602 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> cic.Univ cic.prop), forall _H1 : ((aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (_comm : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (matita_arithmetics_bigops.op x1 x2 aop a b) (matita_arithmetics_bigops.op x1 x2 aop b a))) -> (_z1603 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop x1 x2)) Hterm (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))), cic.Term cic.prop (P Hterm) .", "predict": "Axiom cop_inv_rect_CProp4 : forall x1 : Univ, forall x2 : Term, forall Hterm : Term, forall P : (z1602 : Term) -> ACop x1 x2 -> Prop, forall aop : (a : Term) -> (b : Term) -> Prop, forall _comm : (a : Term) -> (b : Term) -> Prop, forall x1 : Univ, forall x2 : Term, forall z1603 : Term, forall P : (x1 : Univ) -> (x2 : Term) -> Prop, forall aop : (x1 : Term) -> (x2 : Term) -> Prop, forall _comm : (x1 : Term) -> (x2 : Term) -> Prop, forall x1 : Univ, forall x2 : Term, forall Hterm : Term, forall aop : (x1 : Term) -> (x2 : Term) -> Prop, forall _comm : (x1 : Term) -> (x2 : Term) -> Prop, forall x1 : Univ, forall x2 : Term, forall P : (x1 : Term) -> (x2 : Term) -> Prop, forall aop : (x1 : Term) -> (x2 : Term) -> Prop, forall _comm : (x1 : Term) -> (x2 : Term) -> Prop, forall x1 : Univ, forall x2 : Term, forall Hterm : Term, forall aop : (x1 : Term) -> (x2 : Term) -> Prop, forall _comm : (x1 : Term) -> (x2 : Term) -> Prop, forall x1 : Univ, forall x2 : Term, forall P : (x1 : Term) -> (x2 : Term) -> Prop, forall aop : (x1 : Term) -> (x2 : Term) -> Prop, forall _comm : (x1 : Term) -> (x2 : Term) -> Prop, forall x1 : Univ, forall x2 : Term, forall z1603 : Term, forall P : (x1 : Term) -> (x2 : Term) -> Prop, forall aop : (x1 : Term) -> (x2 : Term) -> Prop, forall _comm : (x1 : Term) -> (x2 : Term) -> Prop, forall x1 : Univ, forall x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nEq_rect_Type3. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type2$. Låt $_x$ vara ett element av $cic.Term$ av $univs.Type2$ och $A$. Låt $Q_$ vara en funktion från element $x_10$ av $cic.Term$ av $univs.Type2$ och $A$ och element $_x_11$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_10$ till element av $cic.Univ$ av $univs.Type3$. Låt $_H_refl$ vara ett element av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $_x$ och $matita_basics_logic.refl$ applicerat på $A$ och $_x$. Då för alla element $x_10$ av $cic.Term$ av $univs.Type2$ och $A$, för alla element $x_11$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_10$, håller $cic.Term$ för $univs.Type3$ och $Q_$ applicerat på $x_10$ och $x_11$.\nassistant\n", "label": "postulate eq_rect_Type3 : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_10 : cic.Term univs.Type2 A) -> (_x_11 : cic.Term cic.prop (matita_basics_logic.eq A _x x_10)) -> cic.Univ univs.Type3) -> (_H_refl : cic.Term univs.Type3 (Q_ _x (matita_basics_logic.refl A _x))) -> (x_10 : cic.Term univs.Type2 A) -> (x_11 : cic.Term cic.prop (matita_basics_logic.eq A _x x_10)) -> cic.Term univs.Type3 (Q_ x_10 x_11)", "predict": "postulate eq_rect_Type3 : (A : univs.Type2) -> (x : cic.Term univs.Type2 A) -> (Q : (x10 : cic.Term univs.Type2 A) -> (x11 : cic.prop (matita_basics_logic.eq A x) x10) -> univs.Type3) -> (H_refl : Q x (matita_basics_logic.refl A x)) -> (forall (x10 : cic.Term univs.Type2 A) -> forall (x11 : cic.prop (matita_basics_logic.eq A x) x10) -> cic.Term univs.Type3 (Q x10 x11))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nFilter_False. Låt $return_sort$ vara ett element av $cic.Sort$. Då för alla funktioner $return_type$ från element $z$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Univ$ av $return_sort$, för alla funktioner $return$ från element $z$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $z$, för alla element $z$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$, håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.\nassistant\n", "label": "postulate filter_False : (return_sort : cic.Sort) -> (return_type : (z : cic.Term cic.prop matita_basics_logic.False) -> cic.Univ return_sort) -> (return : (z : cic.Term cic.prop matita_basics_logic.False) -> cic.Term return_sort (return_type z)) -> (z : cic.Term cic.prop matita_basics_logic.False) -> cic.Term return_sort (return_type z)", "predict": "postulate filter_false : (return_sort : cic.Sort) -> (return_type : (z : cic.Term (cic.prop . matita_basics_logic.False)) -> cic.Univ return_sort) -> (return : (z : cic.Term (cic.prop . matita_basics_logic.False)) -> cic.Term (return_sort) (return_type z)) -> (z : cic.Term (cic.prop . matita_basics_logic.False)) -> cic.Term (return_sort) (return_type z)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nDpi1__o__op. Let $x0$ be an element of $cic.Univ$ of $univs.Type0$. Let $x1$ be an element of $cic.Term$ of $univs.Type0$ and $x0$. Let $x2$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x0$ and $x1$ to elements of $cic.Univ$ of $univs.Type0$. Let $x3$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $matita_arithmetics_bigops.Aop$ applied to $x0$ and $x1$ and $x2$. Then for all elements $_x_887$ and $_x_888$ of $cic.Term$ of $univs.Type0$ and $x0$, $cic.Term$ holds for $univs.Type0$ and $x0$.\nassistant\n", "label": "postulate dpi1__o__op : (x0 : cic.Univ univs.Type0) -> (x1 : cic.Term univs.Type0 x0) -> (x2 : (__ : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x0 x1)) -> cic.Univ univs.Type0) -> (x3 : cic.Term univs.Type0 (matita_basics_types.DPair (matita_arithmetics_bigops.Aop x0 x1) x2)) -> (_x_887 : cic.Term univs.Type0 x0) -> (_x_888 : cic.Term univs.Type0 x0) -> cic.Term univs.Type0 x0", "predict": "postulate dpi1__o__op : (x0 : Univ Type0) -> (x1 : Term Type0) -> (x2 : (x : Term Type0) -> Aop x1 x) -> (x3 : DPair (Aop x1 x0) (x2 x)) -> all (Term Type0) (x0) (x3)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nAop_inv_rect_CProp0. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x2$ un élément de $cic.Term$ de $univs.Type0$ et de $x1$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $x1$ et $x2$. Soit $P$ une fonction des éléments $_z1428$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H1$ une fonction des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $x2$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $a$ et $x2$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$", "label": "Axiom Aop_inv_rect_CProp0 : forall x1 : cic.Univ univs.Type0, forall x2 : cic.Term univs.Type0 x1, forall Hterm : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2), forall P : ((_z1428 : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> cic.Univ cic.prop), forall _H1 : ((op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1429 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.Aop x1 x2)) Hterm (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))), cic.Term cic.prop (P Hterm) .", "predict": " et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ et $a$ et des fonctions $_assocr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $a$ et des fonctions $_assocl$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ et $a$. Aop_inv_rect_CProp0 : forall x1 : cic.Univ, forall x2 : cic.Term, forall Hterm : matita_basics_lists_list.Aop x1 x2, forall P : _z1428 -> matita_basics_lists_list"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nLet_clause_1033. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $ltn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $H$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $H1$ vara en funktion från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $m$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $m$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$. Då för alla element $", "label": "postulate let_clause_1033 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (ltn : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> (_clearme : cic.Term cic.prop (matita_arithmetics_primes.prime (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) -> (H : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) -> (H1 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_primes.divides m (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) -> (x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat)", "predict": "x$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, har vi $ltn \\land _clearme \\land H \\land H1 x$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nUnit_inv_rect_CProp2. Pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$, pour toutes les fonctions $P$ des éléments $_z954$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $_z955$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.unit$ et $Hterm$ et $matita_basics_types.it$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.it$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "postulate unit_inv_rect_CProp2 : (Hterm : cic.Term univs.Type0 matita_basics_types.unit) -> (P : (_z954 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ cic.prop) -> (_H1 : (_z955 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm matita_basics_types.it)) -> cic.Term cic.prop (P matita_basics_types.it)) -> cic.Term cic.prop (P Hterm)", "predict": "postulate unit_inv_rect_CProp2 : (Hterm : univs.Type0 -> matita_basics_types.unit) -> (P : (_z954 : univs.Type0 -> matita_basics_types.unit) -> cic.Univ -> cic.prop) -> (H1 : (z955 : univs.Type0 -> matita_basics_types.unit) -> cic.prop -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm) -> (x : cic.Term (cic.prop (P (matita_basics_types.it) x))) -> x ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nFilter_Or. Let $_A$ and $_B$ be elements of $cic.Univ$ of $cic.prop$. Let $return_sort$ be an element of $cic.Sort$. Let $return_type$ be a function from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $return_sort$. Let $return$ be a function from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $_A$ and $_B$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $z$. Let $z$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $_A$ and $_B$. Then $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.\nassistant\n", "label": "Axiom filter_Or : forall _A : cic.Univ cic.prop, forall _B : cic.Univ cic.prop, forall return_sort : cic.Sort, forall return_type : ((z : cic.Term cic.prop (matita_basics_logic.Or _A _B)) -> cic.Univ return_sort), forall return : ((z : cic.Term cic.prop (matita_basics_logic.Or _A _B)) -> cic.Term return_sort (return_type z)), forall z : cic.Term cic.prop (matita_basics_logic.Or _A _B), cic.Term return_sort (return_type z) .", "predict": "Axiom filter_or : forall A : Prop, forall B : Prop, forall return_sort : Sort, forall return_type : (Term Prop -> Or A B -> Sort) -> (Term Prop -> Or A B -> Term) -> (Term Prop -> Or A B) -> Term (return_type (return (A \\/ B)) (return_sort)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nAll_inv_append. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $P$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $l1$ and $l2$ be elements of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.All$ applied to $A$ and $P$ and $matita_basics_lists_list.append$ applied to $A$ and $l1$ and $l2$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.And$ applied to $matita_basics_lists_list.All$ applied to $A$ and $P$ and $l1$ and $matita_basics_lists_list.All$ applied to $A$ and $P$ and $l2$.\nassistant\n", "label": "postulate All_inv_append : (A : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.All A P (matita_basics_lists_list.append A l1 l2))) -> cic.Term cic.prop (matita_basics_logic.And (matita_basics_lists_list.All A P l1) (matita_basics_lists_list.All A P l2))", "predict": "postulate all_inv_append : (A : Univ Type0) -> (P : Term A -> Univ prop) -> (l1 : Term A) -> (l2 : Term A) -> (x : All A (P x)) -> All A (P (append A l1 l2))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nACop_rect_CProp5_body. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all functions $Q_$ from elements $_x_905$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_ACop$ from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_905$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_905$.\nassistant\n", "label": "ACop_rect_CProp5_body : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_905 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Univ cic.prop) -> _H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> _comm : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> x_905 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Term cic.prop (Q_ x_905) .", "predict": "acop_rect_cprop5_body : (A : Elem (univs Type0)) -> (nil : Elem (Term Type0)) -> A -> Proof (forall (Q_ : (x_905 : Elem (Term Type0)) -> (matita_arithmetics_bigops ACop A nil) -> Elem (univs prop)) (forall (H_mk_ACop : (aop : Elem (Term Type0)) -> (matita_arithmetics_bigops Aop A nil) -> (forall (comm : (a : Elem (Term Type0)) -> (A) -> (b : Elem (Term Type0)) -> (A) -> Proof (matita_basics_logic eq (univs Type0 (univs Type2) A) (matita_arithmetics_bigops op A nil aop a b) (matita_arithmetics_bigops op A nil aop b a)))) (forall (x_905 : Elem (Term Type0)) -> (matita_arithmetics_bigops ACop A nil) -> Proof (Term (prop)) (Q_ (x_905)))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nOption_inv_rect_CProp0. Pour tous les éléments $x1$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $x1$, pour toutes les fonctions $P$ des éléments $_z1098$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $x1$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $_z1099$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.option$ appliqué à $x1$ et $Hterm$ et $matita_basics_types.None$ appliqué à $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.None$ appliqué à $x1$, pour toutes les fonctions $_H2$ des éléments $x_635$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_z1099$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.option$ appliqué à $x1$ et $Hterm$ et $matita_basics_types.Some$ appliqué à $x1$ et $x_635$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.Some$ appliqué à $x1$ et $x_635$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "option_inv_rect_CProp0 : x1 : cic.Univ univs.Type0 -> Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) -> P : (_z1098 : cic.Term univs.Type0 (matita_basics_types.option x1) -> cic.Univ cic.prop) -> _H1 : (_z1099 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.None x1)) -> cic.Term cic.prop (P (matita_basics_types.None x1))) -> _H2 : (x_635 : cic.Term univs.Type0 x1 -> _z1099 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.Some x1 x_635)) -> cic.Term cic.prop (P (matita_basics_types.Some x1 x_635))) -> cic.Term cic.prop (P Hterm) .", "predict": "option_inv_rect_CProp0 : (x1 : Elem (univs Type0)) -> (Hterm : Elem (cic Term) (option x1)) -> (P : (z1098 : Elem (cic Term) (option x1)) -> Elem (cic Univ) (cic prop)) -> (H1 : (z1099 : Elem (cic Term) (cic prop)) -> Eq (lift (univs Type0) (univs Type2)) (option x1) Hterm (None x1)) -> (P (None x1)) -> (x_635 : Elem (cic Term) (univs Type0)) -> (x1 : Elem (cic Term) (univs Type0)) -> (z1099 : Elem (cic Term) (cic prop)) -> Eq (lift (univs Type0) (univs Type2)) (option x1) Hterm (Some x1 x_635) -> (P (Some x1 x_635)) -> Proof (Eq (prop (term (P (Hterm))) (prop (term (P (Hterm))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nNull_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $xxx$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $nil$. Låt $a$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.prod$ applicerat på $A$ och $nil$ och $xxx$ och $a$ och $nil$ och $nil$.\nassistant\n", "label": "postulate null_body : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A nil)) -> (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.prod A nil xxx a nil) nil)", "predict": "postulate null_body : (A : univs.Type0) -> cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.prod A nil)) (matita_arithmetics_bigops.Dop A nil) (a : cic.Term univs.Type0 A) (nil : cic.Term univs.Type0) (nil : cic.Term univs.Type0)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nTo_max. Låt $i$ och $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $i$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $m$ och $i$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.max$ applicerat på $n$ och $m$ och $i$.\nassistant\n", "label": "Axiom to_max : forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.le n i), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.le m i), cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.max n m) i) .", "predict": "Axiom to_max : forall i : univs.Type0, forall n : matita_arithmetics_nat.nat, forall m : matita_arithmetics_nat.nat, (matita_arithmetics_nat.le n i -> forall __1 : matita_arithmetics_nat.le m i, matita_arithmetics_nat.le (matita_arithmetics_nat.max n m) i) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nUnit_rect_CProp2. Soit $Q_$ une fonction des éléments $_x_515$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_it$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.it$. Alors pour tous les éléments $x_515$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_515$.\nassistant\n", "label": "axiom unit_rect_CProp2 (Q_ : (_x_515 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ cic.prop) (_H_it : cic.Term cic.prop (Q_ matita_basics_types.it)) (x_515 : cic.Term univs.Type0 matita_basics_types.unit) : cic.Term cic.prop (Q_ x_515)", "predict": "axiom unit_rect_CProp2 (Q : ∀ x : univs.Type0 × matita_basics_types.unit, cic.prop) (H : cic.prop) : ∀ x : cic.Term (x_515 : univs.Type0) (u : matita_basics_types.unit), Q (x_515, u)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nLop_Sfalse. Soient $m$ et $i$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $acc$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_chebyshev_bertrand256.list_divides$ appliqué à $acc$ et $i$ et $matita_basics_bool.false$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_chebyshev_bertrand256.lprim$ appliqué à $matita_arithmetics_nat.S$ appliqué à $m$ et $i$ et $acc$ et $matita_arithmetics_chebyshev_bertrand256.lprim$ appliqué à $m$ et $matita_arithmetics_nat.S$ appliqué à $i$ et $matita_basics_lists_list.append$ appliqué à $matita_arithmetics_nat.nat$ et $acc$ et $matita_basics_lists_list.cons$ appliqué à $matita_arithmetics_nat.nat$ et $i$ et $matita_basics_lists_list.nil$ appliqué à $matita_arithmetics_nat.nat$.\nassistant\n", "label": "Axiom lop_Sfalse : forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall acc : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat), forall __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_chebyshev_bertrand256.list_divides acc i) matita_basics_bool.false), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) (matita_arithmetics_chebyshev_bertrand256.lprim (matita_arithmetics_nat.S m) i acc) (matita_arithmetics_chebyshev_bertrand256.lprim m (matita_arithmetics_nat.S i) (matita_basics_lists_list.append matita_arithmetics_nat.nat acc (matita_basics_lists_list.cons matita_arithmetics_nat.nat i (matita_basics_lists_list.nil matita_arithmetics_nat.nat))))) .", "predict": "Axiom lop_Sfalse : forall m : cic.Term univs.Type0, forall i : matita_arithmetics_nat.nat, forall acc : cic.Term univs.Type0 & matita_basics_lists_list.list matita_arithmetics_nat.nat, forall __ : cic.Term prop & matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_bool.bool) (matita_arithmetics_chebyshev_bertrand256.list_divides acc i) & matita_basics_bool.false -> prop (cic.lift univs.Type0 univs.Type2) (matita_basics_lists_list.list matita_arithmetics_nat.nat) (matita_arithmetics_chebyshev_bertrand256.lprim (matita_arithmetics_nat.S m) i) (acc) (matita_arithmetics_chebyshev_bertrand256.lprim m (matita_arithmetics_nat.S i)) (matita_basics_lists_list.append (matita_arithmetics_nat.nat) acc (matita_basics_lists_list.cons (matita_arithmetics_nat.nat) i (matita_basics_lists_list.nil (matita_arithmetics_nat.nat)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nGcd_n_n. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $n$ et $n$.\nassistant\n", "label": "axiom gcd_n_n (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n n) n)", "predict": "axiom gcd_n_n (n : matita_arithmetics_nat.nat) : cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_gcd.gcd n n n))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nUnit_rect_Type0. Soit $Q_$ une fonction des éléments $_x_507$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $_H_it$ un élément de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_types.it$. Soit $x_507$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$. Alors $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_507$.\nassistant\n", "label": "Axiom unit_rect_Type0 : forall Q_ : ((_x_507 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ univs.Type0), forall _H_it : cic.Term univs.Type0 (Q_ matita_basics_types.it), forall x_507 : cic.Term univs.Type0 matita_basics_types.unit, cic.Term univs.Type0 (Q_ x_507) .", "predict": "Axiom unit_rect_Type0 : forall Q : univs.Type0 -> matita_basics_types.unit -> cic.Univ, forall H_it : cic.Term univs.Type0, forall x_507 : matita_basics_types.unit, Q x_507 = H_it ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nDPair_inv_rect_Type4. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$. Då för alla funktioner $P$ från element $_z1110$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type4$, för alla funktioner $_H1$ från element $dpi1$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_dpi2$ av $cic.Term$ av $univs.Type0$ och $x2$ applicerat på $dpi1$ och element $_z1111$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_DPair$ applicerat på $x1$ och $x2$ och $dpi1$ och $_dpi2$ till element av $cic.Term$ av $univs.Type4$ och $P$ applicerat på $matita_basics_types.mk_DPair$ applicerat på $x1$ och $x2$ och $dpi1$ och $_dpi2$, håller $cic.Term$ för $univs.Type4$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "postulate DPair_inv_rect_Type4 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> (P : (_z1110 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ univs.Type4) -> (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1111 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type4 (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type4 (P Hterm)", "predict": "postulate dpair_inv_rect_Type4 : (x1 : univs.Type0) -> (x2 : (univs.Type0 -> univs.Type0)) -> (Hterm : dpair x1 x2) -> (P : (z1110 : univs.Type0) -> dpair x1 x2 -> univs.Type4) -> (H1 : dpi1 : univs.Type0 -> x1) -> (dpi2 : univs.Type0 -> x2) -> (z1111 : term (prop (lift univs.Type0 univs.Type2) (dpair x1 x2) Hterm)) -> (eq (mk_DPair x1 x2) (dpair x1 x2)) -> (P (mk_DPair x1 x2) (dpi1 dpi2))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nDpi1__o__op. Låt $x0$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x1$ vara ett element av $cic.Term$ av $univs.Type0$ och $x0$. Låt $x2$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$. Låt $x3$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $matita_basics_lists_list.Aop$ applicerat på $x0$ och $x1$ och $x2$. Låt $_x_807$ och $_x_808$ vara element av $cic.Term$ av $univs.Type0$ och $x0$. Då håller $cic.Term$ för $univs.Type0$ och $x0$.\nassistant\n", "label": "dpi1__o__op : x0 : cic.Univ univs.Type0 -> x1 : cic.Term univs.Type0 x0 -> x2 : (__ : cic.Term univs.Type0 (matita_basics_lists_list.Aop x0 x1) -> cic.Univ univs.Type0) -> x3 : cic.Term univs.Type0 (matita_basics_types.DPair (matita_basics_lists_list.Aop x0 x1) x2) -> _x_807 : cic.Term univs.Type0 x0 -> _x_808 : cic.Term univs.Type0 x0 -> cic.Term univs.Type0 x0 .", "predict": "dpi1__o__op : x0 : Elem (univs : Type0) -> x1 : Elem (univs : Type0) -> x0 -> x2 : (x : Elem (univs : Type0) -> matita_basics_lists_list.Aop) -> x0 -> x1 -> x2 -> Elem (univs : Type0) -> x3 : Elem (univs : Type0) -> matita_basics_types.DPair (matita_basics_lists_list.Aop x0 x1) x2 -> x0 -> x0 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nLet_clause_15625. Låt $m$ och $n$ och $a$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $posm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Låt $pnm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $c$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$", "label": "let_clause_15625 : m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) -> c : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (d : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m", "predict": " applicerat på $matita_arithmetics_nat.O$.\n\nlet_clause_15625 : m : Elem (Term (univs Type0)) * n : Elem (Term (matita_arithmetics_nat nat)) * a : Elem (Term (univs Type0)) * b : Elem (Term (matita_arithmetics_nat nat)) * posn : Prop (matita_arithmetics_nat lt (matita_arithmetics_nat O) n) * posm : Prop (matita_arithmetics_nat lt (matita_arithmetics_nat O) m) * pnm : Prop (matita_basics_logic eq (cic lift (univs Type0) (univs Type2)) (matita_arithmetics_gcd gcd n m) (matita_arithmetics_nat S (matita_arithmetics_nat O))) * c : Elem (Term (univs Type0)) * _clearme : Prop (matita_basics_logic ex (matita_arithmetics_nat nat) (f : d : Elem (Term (univs Type0)) -> matita_basics_logic Or (matita_basics_logic eq (cic lift (univs Type0) (univs Type2)) (matita_arithmetics_nat nat)) (matita_basics_logic eq (matita_arithmetics_nat minus (matita_arithmetics_nat times c n) (matita_arithmetics_nat times d m)) (matita_arithmetics_nat S (matita_arithmetics_nat O)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nLet_clause_15691. Soient $m$ et $n$ et $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $posm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$. Soit $pnm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Soit $c$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $d$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Soit $d$ un élément de $cic.Term$ de $univs.Type0$", "label": "axiom let_clause_15691 (m n a b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (λ d => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme", "predict": " et de $matita_arithmetics_nat.nat$. Let_clause_15691 : $posn \\land posm \\land pnm \\land _clearme \\land d = matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)$ ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nUnit_rect_Type5. Soit $Q_$ une fonction des éléments $_x_499$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $univs.Type5$. Soit $_H_it$ un élément de $cic.Term$ de $univs.Type5$ et de $Q_$ appliqué à $matita_basics_types.it$. Alors pour tous les éléments $x_499$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$, $cic.Term$ tient pour $univs.Type5$ et $Q_$ appliqué à $x_499$.\nassistant\n", "label": "unit_rect_Type5 : Q_ : (_x_499 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Univ univs.Type5) -> _H_it : cic.Term univs.Type5 (Q_ matita_basics_types.it) -> x_499 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Term univs.Type5 (Q_ x_499) .", "predict": "unit_rect_Type5 : (Q : Elem (Term (Type0 (univs))) (unit (matita_basics_types)) -> Elem (Univ (Type5 (univs))) -> Proof (forall (x_499 : Elem (Term (Type0 (univs))) (unit (matita_basics_types))) (Eq (Q x_499))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nNot_rect_CProp5. Låt $_A$ vara ett element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_103$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_nmk$ vara en funktion från funktioner $x_104$ från element $__$ av $cic.Term$ av $cic.prop$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_logic.nmk$ applicerat på $_A$ och $x_104$. Då för alla element $x_103$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_103$.\nassistant\n", "label": "axiom Not_rect_CProp5 (_A : cic.Univ cic.prop) (Q_ : (_x_103 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ cic.prop) (_H_nmk : (x_104 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ (matita_basics_logic.nmk _A x_104))) (x_103 : cic.Term cic.prop (matita_basics_logic.Not _A)) : cic.Term cic.prop (Q_ x_103)", "predict": "axiom not_rect_CProp5 (A : cic.Univ cic.prop) (Q : ∀ x : cic.Term cic.prop, not A) : ∀ x : cic.Term (x : not A), term cic.prop (Q x)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nPermut_mod. Låt $p$ och $a$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $p$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_primes.divides$ applicerat på $p$ och $a$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_permutation.permut$ applicerat på funktionen som avbildar $n$ som $matita_arithmetics_div_and_mod.mod$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $n$ och $p$ och $matita_arithmetics_nat.pred$ applicerat på $p$.\nassistant\n", "label": "axiom permut_mod (p a : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_primes.prime p)) (__1 : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides p a))) : cic.Term cic.prop (matita_arithmetics_permutation.permut (λ n => matita_arithmetics_div_and_mod.mod (matita_arithmetics_nat.times a n) p) (matita_arithmetics_nat.pred p))", "predict": "axiom permut_mod (p a : Term Type0) (x : prime p) (y : not (divides p a)) : ∀ n : Term prop, permut (mod (times a n) p) (pred p)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nAop_rect_CProp4_body. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_795$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_Aop$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_b", "label": "Axiom Aop_rect_CProp4_body : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_795 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop), forall _H_mk_Aop : ((op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))), forall x_795 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil), cic.Term cic.prop (Q_ x_795) .", "predict": "asics_lists_list.Aop$ applicerat sur $A$ et $_nil$ et $A$ et $_H_mk_Aop$ applicerat sur $op$ et $a$ et $A$ et $_nill$ applicerat sur $a$ et $A$ et $matita_basics_logic.eq$ applicerat sur $cic.lift$ applicerat sur $univs.Type0$ et $univs.Type2$ et $A$ et $op$ applicerat sur $a$ et $_nil$ et $a$ et $matita_basics_logic.eq$ applicerat sur $cic.lift$ applicerat sur $univs.Type0$ et $univs.Type2$ et $A$ et $op$ applicerat sur $a$ et $op$ applicerat sur $b$ et $c$ et $op$ applicerat sur $op$ applicerat sur $a$ et $b$ et $c$ : Prop ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nInj_mk_Sig. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $P$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $x$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $P$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Sig$ applicerat på $A$ och $P$ och $x$ och $matita_basics_types.mk_Sig$ applicerat på $A$ och $P$ och $matita_basics_types.pi1$ applicerat på $A$ och $P$ och $x$ och $matita_basics_types.pi2$ applicerat på $A$ och $P$ och $x$.\nassistant\n", "label": "inj_mk_Sig : A : cic.Univ univs.Type0 -> P : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> x : cic.Term univs.Type0 (matita_basics_types.Sig A P) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig A P)) x (matita_basics_types.mk_Sig A P (matita_basics_types.pi1 A P x) (matita_basics_types.pi2 A P x))) .", "predict": "inj_mk_Sig : (A : Elem (univs Type0)) -> (P : (x : Elem (cic Term (univs Type0))) -> Elem (cic Univ (cic prop))) -> Proof (forall (x : Elem (cic Term (univs Type0))) (matita_basics_types Sig A P) (cic Term (cic prop)) (matita_basics_logic eq (univs Type0 (univs Type2)) (matita_basics_types Sig A P x) (matita_basics_types mk_Sig A P (matita_basics_types pi1 A P x) (matita_basics_types pi2 A P x)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nExp_sigma_l. Let $n$ and $a$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_bigops.bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $matita_arithmetics_exp.exp$ applied to $a$ and $f$ applied to $i$ and $matita_arithmetics_exp.exp$ applied to $a$ and $matita_arithmetics_bigops.bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.plus$ and the function that maps $i$ to $f$ applied to $i$.\nassistant\n", "label": "axiom exp_sigma_l (n a : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (λ i => p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (λ i => matita_arithmetics_exp.exp a (f i))) (matita_arithmetics_exp.exp a (matita_arithmetics_bigops.bigop n (λ i => p i) matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_nat.plus (λ i => f i))))", "predict": "axiom exp_sigma_l (n a : univs.Type0) (p : ∀ i : univs.Type0, matita_arithmetics_nat.nat → matita_basics_bool.bool) (f : ∀ i : univs.Type0, matita_arithmetics_nat.nat → matita_arithmetics_nat.nat) : cic.prop (univs.Type0, matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (p i) matita_arithmetics_nat.nat) (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_nat.times (matita_arithmetics_exp.exp a (f i)) (matita_arithmetics_exp.exp a)) (matita_arithmetics_bigops.bigop n (p i) matita_arithmetics_nat.nat) (matita_arithmetics_nat.O) (matita_arithmetics_nat.plus (f i))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nLet_clause_15311. Soient $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$. Soit $_clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.divides$ appliqué à $n$ et $m$. Soient $d$ et $p$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $eqm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $n$ et $matita_arithmetics_nat.S$ appliqué à $p$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $m$ et $matita_arithmetics_nat.plus$ appliqué à $n$ et $matita_arithmetics_nat.times$ appliqué à $n$ et $p$.\nassistant\n", "label": "Axiom let_clause_15311 : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), forall _clearme : cic.Term cic.prop (matita_arithmetics_primes.divides n m), forall d : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall eqm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times n (matita_arithmetics_nat.S p))), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.plus n (matita_arithmetics_nat.times n p))) .", "predict": "Axiom clause_15311 : forall n : univs.Type0, forall m : matita_arithmetics_nat.nat, forall posm : cic.Term (matita_arithmetics_nat.lt (matita_arithmetics_nat.O) m), forall _clearme : cic.Term (matita_arithmetics_primes.divides n m), forall d : univs.Type0, forall p : matita_arithmetics_nat.nat, forall eqm : cic.Term (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_nat.nat) m) (matita_arithmetics_nat.times n (matita_arithmetics_nat.S p)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nLet_clause_15491. Pour tous les éléments $m$ et $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $eqn0$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $x1106$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x1106$ et $matita_arithmetics_nat.minus$ appliqué à $x1106$ et $n$.\nassistant\n", "label": "postulate let_clause_15491 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (eqn0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O n)) -> (x1106 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1106 (matita_arithmetics_nat.minus x1106 n))", "predict": "postulate clause_15491 : (m : cic.Term univs.Type0) -> (n : matita_arithmetics_nat.nat) -> (eqn0 : cic.Term (cic.prop (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_nat.nat) matita_arithmetics_nat.O) n)) -> (x1106 : cic.Term univs.Type0) -> (cic.Term (cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_nat.nat)) x1106 n) (matita_arithmetics_nat.minus x1106 n)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nBool_rect_CProp1. För alla funktioner $Q_$ från element $_x_359$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Univ$ av $cic.prop$, för alla element $_H_true$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_bool.true$, för alla element $_H_false$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_bool.false$, för alla element $x_359$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_359$.\nassistant\n", "label": "axiom bool_rect_CProp1 (Q_ : (_x_359 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) (_H_true : cic.Term cic.prop (Q_ matita_basics_bool.true)) (_H_false : cic.Term cic.prop (Q_ matita_basics_bool.false)) (x_359 : cic.Term univs.Type0 matita_basics_bool.bool) : cic.Term cic.prop (Q_ x_359)", "predict": "axiom bool_rect_CProp1 (Q : cTerm (Type0 → bool) → prop) (H_true : Q (true : bool)) (H_false : Q (false : bool)) (x_359 : cTerm Type0) : Q x_359"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nEq_rect_CProp3. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $_x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $Q_$ une fonction des éléments $x_28$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $_x_29$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_28$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour tous les éléments $_H_refl$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$, pour tous les éléments $x_28$ de $cic.Term$ de $univs.Type2$ et de $A$, pour tous les éléments $x_29$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_28$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_28$ et $x_29$.\nassistant\n", "label": "postulate eq_rect_CProp3 : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_28 : cic.Term univs.Type2 A) -> (_x_29 : cic.Term cic.prop (matita_basics_logic.eq A _x x_28)) -> cic.Univ cic.prop) -> (_H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x))) -> (x_28 : cic.Term univs.Type2 A) -> (x_29 : cic.Term cic.prop (matita_basics_logic.eq A _x x_28)) -> cic.Term cic.prop (Q_ x_28 x_29)", "predict": "postulate eq_rect_CProp3 : (A : Univ) -> (x : Term Type2 A) -> (Q : (x28 : Term Type2 A) -> Prop (Eq A x x28)) -> (H_refl : Prop (Q x (refl A x))) -> (x28 : Term Type2 A) -> (x29 : Prop (Eq A x x28)) -> Prop (Q x28 x29)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nFilter_Not. Pour tous les éléments $_A$ de $cic.Univ$ de $cic.prop$, pour tous les éléments $return_sort$ de $cic.Sort$, pour toutes les fonctions $return_type$ des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $_A$ à des éléments de $cic.Univ$ de $return_sort$, pour toutes les fonctions $return$ des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $_A$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $z$, pour tous les éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $_A$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.\nassistant\n", "label": "Axiom filter_Not : forall _A : cic.Univ cic.prop, forall return_sort : cic.Sort, forall return_type : ((z : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ return_sort), forall return : ((z : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Term return_sort (return_type z)), forall z : cic.Term cic.prop (matita_basics_logic.Not _A), cic.Term return_sort (return_type z) .", "predict": "Axiom filter_not : forall A : cic.Univ, forall return_sort : cic.Sort, forall z : cic.Term, forall return : (A -> return_sort), forall not_A : A, forall return_type : (return not_A) -> return_sort, forall z : (return not_A), (cic.Term) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nSub_comp_l. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $R$ och $R1$ och $R2$ av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $A$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_relations.subR$ applicerat på $A$ och $R1$ och $R2$, håller $cic.Term$ för $cic.prop$ och $matita_basics_relations.subR$ applicerat på $A$ och $matita_basics_relations.Rcomp$ applicerat på $A$ och $R1$ och $R$ och $matita_basics_relations.Rcomp$ applicerat på $A$ och $R2$ och $R$.\nassistant\n", "label": "sub_comp_l : A : cic.Univ univs.Type0 -> R : cic.Term univs.Type0 (matita_basics_relations.relation A) -> R1 : cic.Term univs.Type0 (matita_basics_relations.relation A) -> R2 : cic.Term univs.Type0 (matita_basics_relations.relation A) -> __ : cic.Term cic.prop (matita_basics_relations.subR A R1 R2) -> cic.Term cic.prop (matita_basics_relations.subR A (matita_basics_relations.Rcomp A R1 R) (matita_basics_relations.Rcomp A R2 R)) .", "predict": "sub_comp_l : (A : Elem (univs Type0)) -> Proof (forall (R : Elem (cic Term)) (R1 : Elem (cic Term)) (R2 : Elem (cic Term)), (and (relation R A) (subR A R1 R2) (and (comp R A R) (comp R2 A R)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nPad_bigop1. För alla element $k$ och $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla funktioner $p$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, för alla element $B$ av $cic.Univ$ av $univs.Type0$, för alla element $nil$ av $cic.Term$ av $univs.Type0$ och $B$, för alla funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $B$, för alla funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $k$, för alla funktioner $__1$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $i$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $k$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $p$ applicerat på $i$ och $matita_basics_bool.false$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $matita_arithmetics_bigops.big", "label": "axiom pad_bigop1 (k n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (B : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 B) (op : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) (__ : cic.Term cic.prop (matita_arithmetics_nat.le n k)) (__1 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le n i)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt i k)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p i) matita_basics_bool.false)) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop n (λ i => p i) B nil op (λ i => f i)) (matita_arithmetics_bigops.bigop k (λ i => p i) B nil op (λ i => f i)))", "predict": "op$ applicerat på $n$ och $op$ och $nil$ och $f$ och $k$ och $p$ applicerat på $k$ och $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och $op$ och $nil$ och $f$ och $k$ och $p$ applicerat på $k$ och $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och $op$ och $nil$ och $f$ och $k$ och $p$ applicerat på $k$ och $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och $op$ och $nil$ och $f$ och $k$ och $p$ applicerat på $k$ och $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och $op$ och $nil$ och $f$ och $k$ och $p$ applicerat på $k$ och $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och $op$ och $nil$ och $f$ och $k$ och $p$ applicerat på $k$ och $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och $op$ och $nil$ och $f$ och $k$ och $p$ applicerat på $k$ och $"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nMinus_plus_m_m. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.plus$ applied to $n$ and $m$ and $m$.\nassistant\n", "label": "minus_plus_m_m : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus n m) m)) .", "predict": "minus_plus_m_m : (n : cic.Term univs.Type0) -> (m : matita_arithmetics_nat.nat) -> cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus n m) m)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nNot_rect_Type2_body. Låt $_A$ vara ett element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_91$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type2$. Låt $_H_nmk$ vara en funktion från funktioner $x_92$ från element $__$ av $cic.Term$ av $cic.prop$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_basics_logic.nmk$ applicerat på $_A$ och $x_92$. Låt $x_91$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$. Då håller $cic.Term$ för $univs.Type2$ och $Q_$ applicerat på $x_91$.\nassistant\n", "label": "axiom Not_rect_Type2_body (_A : cic.Univ cic.prop) (Q_ : (_x_91 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ univs.Type2) (_H_nmk : (x_92 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term univs.Type2 (Q_ (matita_basics_logic.nmk _A x_92))) (x_91 : cic.Term cic.prop (matita_basics_logic.Not _A)) : cic.Term univs.Type2 (Q_ x_91)", "predict": "axiom not_rect_Type2_body (A : Univ prop) (Q : x : Term prop → not A → Univ Type2) (H_nmk : x : prop → A → Term prop → False → Term Type2) (x_91 : not A) : Term (Q x_91)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nExists_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $_P$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$, för alla element $_l$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$, håller $cic.Univ$ för $cic.prop$.\nassistant\n", "label": "postulate Exists_body : (A : cic.Univ univs.Type0) -> (_P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (_l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> cic.Univ cic.prop", "predict": "postulate exists_body : (A : univs.Type0) -> all (P : Term univs.Type0 -> A -> Prop) -> all (l : Term univs.Type0) -> list (matita_basics_lists_list) (A) -> all (cic.Univ) (cic.prop)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nF_max_true. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $i$ som $matita_basics_logic.And$ applicerat på $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $i$ och $matita_basics_bool.true$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $matita_arithmetics_minimization.max$ applicerat på $n$ och $f$ och $matita_basics_bool.true$.\nassistant\n", "label": "postulate f_max_true : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.And (matita_arithmetics_nat.lt i n) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.true)))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f (matita_arithmetics_minimization.max n f)) matita_basics_bool.true)", "predict": "postulate f_max_true : (f : Term (Type0) Nat -> Term (Type0) Bool) -> (n : Term (Type0) Nat) -> all (prop (and (Lt (nd  i) n) (Eq (lift (Type0) (Type2)) (f i))) (Eq (lift (Type0) (Type2)) (f (max n))) (True))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nLet_clause_1068. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $permf$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_permutation.permut$ applied to $f$ and $n$. Let $i$ and $j$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $lein$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $i$ and $n$. Let $lejn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $j$ and $n$. Then for all elements $a$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $matita_arithmetics_nat.le$ applied to $a$ and $n$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $a$ and $i$, for all elements $lean$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $a$ and $n$, for all elements $fa$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $a$ and $i$, for all elements $b$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $matita_arithmetics_nat.le$ applied to $b$ and $n$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.n", "label": "Axiom let_clause_1068 : forall f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall permf : cic.Term cic.prop (matita_arithmetics_permutation.permut f n), forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall j : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall lein : cic.Term cic.prop (matita_arithmetics_nat.le i n), forall lejn : cic.Term cic.prop (matita_arithmetics_nat.le j n), forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le a n) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i)), forall lean : cic.Term cic.prop (matita_arithmetics_nat.le a n), forall fa : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i), forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme0 : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le b n) (matita_basics_logic.eq (cic.lift univs.Type0 univs", "predict": "at$ and $f$ applied to $b$ and $j$, for all elements $lebn$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $b$ and $n$, for all elements $fb$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $b$ and $j$, permf implies $matita_basics_logic.eq$ applied to $a$ and $b$.\naxiom let_clause_1068 : forall f : Term (Type0 * nat) -> Term (Type0 * nat), forall n : Term (Type0 * nat), forall permf : prop (permut f n), forall i : Term (Type0 * nat), forall j : Term (Type0 * nat), forall lein : prop (le i n), forall lejn : prop (le j n), forall a : Term (Type0 * nat), forall _clearme : prop (and (le a n) (eq (lift Type0 Type2) (f a i))), forall lean : prop (le a n), forall fa : prop (eq (lift Type0 Type2) (f a i)), forall b : Term (Type0 * nat), forall _clearme0 : prop (and (le b n) (eq (lift Type0 Type2) (f b j))), forall lebn : prop (le b n), forall fb : prop (eq (lift Type0 Type2) (f b j))) : permf -> eq a b ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nLt_ord_rem. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.prime$ applied to $n$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$. Then for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $n$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_ord.ord_rem$ applied to $m$ and $n$ and $m$.\nassistant\n", "label": "Axiom lt_ord_rem : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_primes.prime n), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), forall __2 : cic.Term cic.prop (matita_arithmetics_primes.divides n m), cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_ord.ord_rem m n) m) .", "predict": "Axiom lt_ord_rem : forall n : univs.Type0, forall m : matita_arithmetics_nat.nat, forall __ : matita_arithmetics_primes.prime n, forall __1 : matita_arithmetics_nat.lt matita_arithmetics_nat.O m, forall __2 : matita_arithmetics_primes.divides n m, cic.Term (cic.prop (matita_arithmetics_ord.ord_rem m n) < m) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nACop_rect_CProp0. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_913$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_ACop$ une fonction des éléments $aop$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ et des fonctions $_comm$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $_nil$ et $aop$ et $a$ et $b$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $_nil$ et $aop$ et $b$ et $a$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_ACop$ appliqué à $A$ et $_nil$ et $aop$ et $_comm$. Soit $x_913$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_913$.\nassistant\n", "label": "postulate ACop_rect_CProp0 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_913 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (x_913 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term cic.prop (Q_ x_913)", "predict": "postulate acop_rect_cprop0 : (A : Univ Type0) -> _nil : Term Type0 A -> (x : Term Type0) -> (aop : Term Type0) -> (comm : (a : Term Type0) -> (b : Term Type0) -> Prop) -> (x_913 : Term Type0 (ACop A _nil)) -> (Q : (x : Term Type0) -> (aop : Term Type0) -> Prop) -> (mk_ACop : (A : Univ Type0) -> _nil : Term Type0 A -> Aop) -> (H_mk_ACop : (aop : Term Type0) -> (comm : (a : Term Type0) -> (b : Term Type0) -> Eq (lift Type0 Type2 A) (op A _nil aop a b)) -> (op A _nil aop b a) -> (op A _nil aop b) -> (Q x_913) -> (Q (mk_ACop A _nil aop) (comm a b)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nDpi1. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $univs.Type0$, for all elements $_xxx$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $f$, $cic.Term$ holds for $univs.Type0$ and $A$.\nassistant\n", "label": "Axiom dpi1 : forall A : cic.Univ univs.Type0, forall f : ((__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0), forall _xxx : cic.Term univs.Type0 (matita_basics_types.DPair A f), cic.Term univs.Type0 A .", "predict": "Axiom dpi1 : forall A : univs.Type0, forall f : Term univs.Type0 -> A -> Univ univs.Type0, forall x : Term univs.Type0, DPair A (f x) : Term univs.Type0 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nF3_ind. Soient $A1$ et $A2$ et $A3$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A2$ et des éléments $__2$ de $cic.Term$ de $univs.Type0$ et de $A3$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $P$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation3$ appliqué à $A1$ et $A2$ et $A3$. Soit $__$ une fonction des éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $__$ des éléments $a1$ de $cic.Term$ de $univs.Type0$ et de $A1$ et des éléments $a2$ de $cic.Term$ de $univs.Type0$ et de $A2$ et des éléments $a3$ de $cic.Term$ de $univs.Type0$ et de $A3$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $f$ appliqué à $a1$ et $a2$ et $a3$ et $n$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $a1$ et $a2$ et $a3$ et des éléments $a1$ de $cic.Term$ de $univs.Type0$ et de $A1$ et des éléments $a2$ de $cic.Term$ de $univs.Type0$ et de $A2$ et des éléments $a3$ de $cic.Term$ de $univs.Type0$ et de $A3$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $a1$ et $a2$ et $a3$ et $n$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $a1$ et $a2$ et $a", "label": "axiom f3_ind (A1 A2 A3 : cic.Univ univs.Type0) (f : (__ : cic.Term univs.Type0 A1) -> (__1 : cic.Term univs.Type0 A2) -> (__2 : cic.Term univs.Type0 A3) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) (P : cic.Term univs.Type0 (matita_basics_relations.relation3 A1 A2 A3)) (__ : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : (a1 : cic.Term univs.Type0 A1) -> (a2 : cic.Term univs.Type0 A2) -> (a3 : cic.Term univs.Type0 A3) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (f a1 a2 a3) n)) -> cic.Term cic.prop (P a1 a2 a3)) -> (a1 : cic.Term univs.Type0 A1) -> (a2 : cic.Term univs.Type0 A2) -> (a3 : cic.Term univs.Type0 A3) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a1 a2 a3) n)) -> cic.Term cic.prop (P a1 a2 a3)) (a1 : cic.Term univs.Type0 A1) (a2 : cic.Term univs.Type0 A2) (a3 : cic.Term univs.Type0 A3) : cic.Term cic.prop (P a1 a2 a3)", "predict": "3$ et des éléments $a1$ de $cic.Term$ de $univs.Type0$ et de $A1$ et des éléments $a2$ de $cic.Term$ de $univs.Type0$ et de $A2$ et des éléments $a3$ de $cic.Term$ de $univs.Type0$ et de $A3$ et des éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $a1$ et $a2$ et $a3$ et $n$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $a1$ et $a2$ et $a3$ et des éléments $a1$ de $cic.Term$ de $univs.Type0$ et de $A1$ et des éléments $a2$ de $cic.Term$ de $univs.Type0$ et de $A2$ et des éléments $a3$ de $cic.Term$ de $univs.Type0$ et de $A3$.\n\nf3_ind : (A1 : Univ Type0) → (A2 : Univ Type0) → (A3 : Univ Type0) → (f : Term Type0 → A1 → Term Type0 → A2 → Term Type0 → A3 → Term Type0) → (P : A1 → A2 → A3 → Relation3) → (n : Nat) → (a1 : Term Type0 → A1) → (a2 : Term Type0 → A2) → (a3 : Term Type0 → A3) → (x : Prop) → (Lt : Nat → Prop) → (f a1 a2 a3 n) → (P a1 a2 a3) → (a1 : Term Type0 → A1) → (a2 : Term Type0 → A2) → (a3 : Term Type0 → A3) → (y : Prop) → (Eq : Type0 → Type2 → Nat → Prop) → (f a1 a2 a3 n) →"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nMatch_list. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $return_sort$ vara ett element av $cic.Sort$. Låt $return_type$ vara en funktion från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$ till element av $cic.Univ$ av $return_sort$. Låt $case_nil$ vara ett element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $matita_basics_lists_list.nil$ applicerat på $_A$. Låt $case_cons$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $_A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $matita_basics_lists_list.cons$ applicerat på $_A$ och $__$ och $__1$. Låt $z$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$. Då håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.\nassistant\n", "label": "postulate match_list : (_A : cic.Univ univs.Type0) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ return_sort) -> (case_nil : cic.Term return_sort (return_type (matita_basics_lists_list.nil _A))) -> (case_cons : (__ : cic.Term univs.Type0 _A) -> (__1 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term return_sort (return_type (matita_basics_lists_list.cons _A __ __1))) -> (z : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term return_sort (return_type z)", "predict": "postulate match_list : (A : univs.Type0) -> return_sort -> (z : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> return_type z"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nBigop_Strue. Låt $k$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $p$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Låt $op$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $B$. Då för alla funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $p$ applicerat på $k$ och $matita_basics_bool.true$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $matita_arithmetics_bigops.bigop$ applicerat på $matita_arithmetics_nat.S$ applicerat på $k$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $op$ applicerat på $f$ applicerat på $k$ och $matita_arithmetics_bigops.bigop$ applicerat på $k$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$.\nassistant\n", "label": "axiom bigop_Strue (k : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (B : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 B) (op : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p k) matita_basics_bool.true)) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S k) (λ i => p i) B nil op (λ i => f i)) (op (f k) (matita_arithmetics_bigops.bigop k (λ i => p i) B nil op (λ i => f i))))", "predict": "axiom bigop_strue (k : Term Type0 Nat) (p : Term Type0 Nat → Prop) (B : Univ Type0) (nil : Term Type0 B) (op : Term Type0 B → Term Type0 B → Term Type0 B) : ∀ f : Term Type0 Nat → Term Type0 B, ∀ i : Prop (eq (lift Type0 Type2 Bool) (p k true)) (eq (bigop Nat S k (λ i, p i B)) (bigop (λ i, f i) (λ i, op (f i) k) (λ i, p i B)) (nil (op (f k) (λ i, p i B))))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nLstar_ind_r_aux. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $R$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $B$. Let $b1$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Then for all elements $P$ of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation2$ applied to $matita_arithmetics_nat.nat$ and $B$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.O$ and $b1$, for all functions $__1$ from elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $b2$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $l$ and $b1$ and $b$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $R$ applied to $b$ and $b2$ and elements $__3$ of $cic.Term$ of $cic.prop$ and $P$ applied to $l$ and $b$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.plus$ applied to $l$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $b2$, for all elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $b$ and $b2$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $l$ and $b$ and $b2$, for all elements $__3$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $b$ and $b1$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $l$ and $b2$.\nassistant\n", "label": "lstar_ind_r_aux : B : cic.Univ univs.Type0 -> R : cic.Term univs.Type0 (matita_basics_relations.relation B) -> b1 : cic.Term univs.Type0 B -> P : cic.Term univs.Type0 (matita_basics_relations.relation2 matita_arithmetics_nat.nat B) -> __ : cic.Term cic.prop (P matita_arithmetics_nat.O b1) -> __1 : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b : cic.Term univs.Type0 B -> b2 : cic.Term univs.Type0 B -> __1 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b) -> __2 : cic.Term cic.prop (R b b2) -> __3 : cic.Term cic.prop (P l b) -> cic.Term cic.prop (P (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b2)) -> l : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b : cic.Term univs.Type0 B -> b2 : cic.Term univs.Type0 B -> __2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b b2) -> __3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) b b1) -> cic.Term cic.prop (P l b2) .", "predict": "lstar_ind_r_aux : (B : Elem (univs Type0) (cic Univ)) -> (R : Elem (cic Term) (matita_basics_relations relation B)) -> (b1 : Elem (cic Term) (univs Type0) B) -> Proof (forall (P : Elem (cic Term) (univs Type0) (matita_basics_relations relation2 (matita_arithmetics_nat nat) B)) (forall (b : Elem (cic Term) (univs Type0) B) (forall (P : Elem (cic Term) (cic prop)) (forall (l : Elem (cic Term) (univs Type0) (matita_arithmetics_nat nat)) (forall (b : Elem (cic Term) (univs Type0) B) (forall (b2 : Elem (cic Term) (univs Type0) B) (forall (p : Elem (cic Term) (cic prop)) (forall (l : Elem (cic Term) (univs Type0) (matita_arithmetics_nat nat)) (forall (b : Elem (cic Term) (univs Type0) B) (forall (b2 : Elem (cic Term) (univs Type0) B) (forall (p : Elem (cic Term) (cic prop)) (forall (l : Elem (cic Term) (univs Type0) (matita_arithmetics_nat nat)) (forall (b : Elem (cic Term) (univs Type0) B) (forall (b2 : Elem (cic Term) (univs Type0) B) (forall (p : Elem (cic Term) (cic prop)) (forall (l : Elem (cic Term) (univs Type0) (matita_arithmetics_nat nat)) (forall (b : Elem (cic Term) (univs Type0) B) (forall (b2 : Elem (cic Term) (univs Type0) B) (forall (p : Elem (cic Term) (cic prop)) (forall (l : Elem (cic Term) (univs Type0) (matita_arithmetics_nat nat)) (forall (b : Elem (cic Term) (un"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nDiv_mod_spec_rect_Type5_body. For all elements $_n$ and $_m$ and $_q$ and $_r$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all functions $Q_$ from elements $_x_817$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$ to elements of $cic.Univ$ of $univs.Type5$, for all functions $_H_div_mod_spec_intro$ from elements $x_819$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $_r$ and $_m$ and elements $x_818$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $_n$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $_q$ and $_m$ and $_r$ to elements of $cic.Term$ of $univs.Type5$ and $Q_$ applied to $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_819$ and $x_818$, for all elements $x_817$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$, $cic.Term$ holds for $univs.Type5$ and $Q_$ applied to $x_817$.\nassistant\n", "label": "Axiom div_mod_spec_rect_Type5_body : forall _n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _q : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _r : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall Q_ : ((_x_817 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ univs.Type5), forall _H_div_mod_spec_intro : ((x_819 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_818 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term univs.Type5 (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_819 x_818))), forall x_817 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r), cic.Term univs.Type5 (Q_ x_817) .", "predict": "Axiom div_mod_spec_rect_Type5_body : forall n : univs.Type0, forall m : matita_arithmetics_nat.nat, forall q : univs.Type0, forall r : matita_arithmetics_nat.nat, forall Q : (x : cic.Term) -> (matita_arithmetics_div_and_mod.div_mod_spec n m q r) -> cic.Univ, forall H_div_mod_spec_intro : (x : cic.Term) -> (matita_arithmetics_nat.lt r m) -> (x : cic.Term) -> (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q m) r)) -> cic.Term, forall x_817 : cic.Term, forall Q : (x : cic.Term) -> (matita_arithmetics_div_and_mod.div_mod_spec n m q r) -> cic.Univ, forall x_819 : cic.Term, forall x_818 : cic.Term, (matita_arithmetics_div_and_mod.div_mod_spec_intro n m q r x_819 x_818) -> (cic.Term (univs.Type5) (Q x_817)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nAop_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $_xxx$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $nil$. Then $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $nil$.\nassistant\n", "label": "postulate aop_body : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (_xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A nil)) -> cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A nil)", "predict": "postulate aop_body : (A : Univ Type0) -> (nil : Term Type0) -> (x : Term Type0) -> ACop A nil -> Term Type0 (Aop A nil)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nDop_rect_Type4. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Then for all functions $Q_$ from elements $_x_945$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type4$, for all functions $_H_mk_Dop$ from elements $sum$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and functions $prod$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $matita_arithmetics_bigops.mk_Dop$ applied to $A", "label": "postulate Dop_rect_Type4 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_945 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ univs.Type4) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_945 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term univs.Type4 (Q_ x_945)", "predict": "$ and $_nil$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $matita_arithmetics_bigops.mk_Dop$ applied to $A$ and $_nil$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $matita_arithmetics_bigops.mk_Dop$ applied to $A$ and $_nil$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $matita_arithmetics_bigops.mk_Dop$ applied to $A$ and $_nil$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $matita_arithmetics_bigops.mk_Dop$ applied to $A$ and $_nil$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$ and $matita_arithmetics_bigops"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nLet_clause_1078. Let $a$ and $b$ and $q$ and $r$ and $q1$ and $r1$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $a$ and $b$ and $q$ and $r$. Let $ltrb$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $r$ and $b$. Let $spec$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $a$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $q$ and $b$ and $r$. Let $_clearme0$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $a$ and $b$ and $q1$ and $r1$. Let $ltr1b$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $r1$ and $b$. Let $spec1$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $a$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $q1$ and $b$ and $r1$. Then for all elements $leqq1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $q$ and $q1$, for all elements $ltqq1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $q$ and $q1$, $cic.Term$ holds for $cic.prop$ and $matita_b", "label": "postulate let_clause_1078 : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (r1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q r)) -> (ltrb : cic.Term cic.prop (matita_arithmetics_nat.lt r b)) -> (spec : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q b) r))) -> (_clearme0 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q1 r1)) -> (ltr1b : cic.Term cic.prop (matita_arithmetics_nat.lt r1 b)) -> (spec1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q1 b) r1))) -> (leqq1 : cic.Term cic.prop (matita_arithmetics_nat.le q q1)) -> (ltqq1 : cic.Term cic.prop (matita_arithmetics_nat.lt q q1)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a (matita_arithmetics_nat.plus r (matita_arithmetics_nat.times b q)))", "predict": "asics_logic.and$ applied to $leqq1$ and $ltrb$ and $spec$ and $ltq1$ and $spec1$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nSplit_eq. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $matita_basics_lists_list.length$ appliqué à $A$ et $l$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $A$ et $l$ et $matita_basics_lists_list.append$ appliqué à $A$ et $matita_basics_types.fst$ appliqué à $matita_basics_lists_list.list$ appliqué à $A$ et $matita_basics_lists_list.list$ appliqué à $A$ et $matita_basics_lists_list.split$ appliqué à $A$ et $l$ et $n$ et $matita_basics_types.snd$ appliqué à $matita_basics_lists_list.list$ appliqué à $A$ et $matita_basics_lists_list.list$ appliqué à $A$ et $matita_basics_lists_list.split$ appliqué à $A$ et $l$ et $n$.\nassistant\n", "label": "Axiom split_eq : forall A : cic.Univ univs.Type0, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall l : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall __ : cic.Term cic.prop (matita_arithmetics_nat.le n (matita_basics_lists_list.length A l)), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l (matita_basics_lists_list.append A (matita_basics_types.fst (matita_basics_lists_list.list A) (matita_basics_lists_list.list A) (matita_basics_lists_list.split A l n)) (matita_basics_types.snd (matita_basics_lists_list.list A) (matita_basics_lists_list.list A) (matita_basics_lists_list.split A l n)))) .", "predict": "Axiom split_eq : forall A : univs.Type0, forall n : matita_arithmetics_nat.nat, forall l : matita_basics_lists_list.list A, forall __ : cic.prop, forall x : cic.Term, forall y : cic.Term, forall z : cic.Term, forall w : cic.Term, forall v : cic.Term, forall u : cic.Term, forall t : cic.Term, forall s : cic.Term, forall r : cic.Term, forall q : cic.Term, forall p : cic.Term, forall o : cic.Term, forall m : cic.Term, forall l : matita_basics_lists_list.list A, forall k : cic.Term, forall j : cic.Term, forall i : cic.Term, forall h : cic.Term, forall g : cic.Term, forall f : cic.Term, forall e : cic.Term, forall d : cic.Term, forall c : cic.Term, forall b : cic.Term, forall a : cic.Term, (cic.Term (cic.lift univs.Type0 univs.Type2) (matita_basics_lists_list.list A) (matita_basics_lists_list.append A (matita_basics_types.fst (matita_basics_lists_list.list A)) (matita_basics_lists_list.split A l) n) (matita_basics_types.snd (matita_basics_lists_list.list A)) (matita_basics_lists_list.split A l) n) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nLet_clause_1545. Let $m$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $H$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $m$ and $n$ and $matita_arithmetics_nat.O$. Let $_clearme$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $matita_arithmetics_nat.O$ and $n$. Let $q1$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $H1$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.O$ and $q1$. Let $_clearme0$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $matita_arithmetics_nat.O$ and $m$. Let $q2$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $H2$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $m$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.O$ and $q2$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $m$ and $matita_arithmetics_nat.O$.\nassistant\n", "label": "let_clause_1545 : m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd m n) matita_arithmetics_nat.O) -> _clearme : cic.Term cic.prop (matita_arithmetics_primes.divides matita_arithmetics_nat.O n) -> q1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> H1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.times matita_arithmetics_nat.O q1)) -> _clearme0 : cic.Term cic.prop (matita_arithmetics_primes.divides matita_arithmetics_nat.O m) -> q2 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> H2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times matita_arithmetics_nat.O q2)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m matita_arithmetics_nat.O) .", "predict": "let_clause_1545 : (m : Elem (Term (univs Type0))) -> (n : Elem (nat (matita_arithmetics))) -> (H : Elem (prop (matita_basics_logic))) -> (H : Elem (prop (matita_basics_logic))) -> (q1 : Elem (nat (matita_arithmetics))) -> (H1 : Elem (prop (matita_basics_logic))) -> (q2 : Elem (nat (matita_arithmetics))) -> (H2 : Elem (prop (matita_basics_logic))) -> Proof (and (prop (matita_basics_logic)) (eq (lift (univs Type0) (univs Type2)) (nat (matita_arithmetics))) (and (prop (matita_basics_logic)) (eq (lift (univs Type0) (univs Type2)) (nat (matita_arithmetics))) (and (prop (matita_basics_logic)) (eq (lift (univs Type0) (univs Type2)) (nat (matita_arithmetics))) (and (prop (matita_basics_logic)) (eq (lift (univs Type0) (univs Type2)) (nat (matita_arithmetics)))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nUnique_filter. For all elements $S$ of $cic.Univ$ of $univs.Type0$, for all elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $S$, for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $S$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.unique$ applied to $S$ and $l$, $cic.Term$ holds for $cic.prop$ and $matita_basics_lists_list.unique$ applied to $S$ and $matita_basics_lists_list.filter$ applied to $S$ and $f$ and $l$.\nassistant\n", "label": "axiom unique_filter (S : cic.Univ univs.Type0) (l : cic.Term univs.Type0 (matita_basics_lists_list.list S)) (f : (__ : cic.Term univs.Type0 S) -> cic.Term univs.Type0 matita_basics_bool.bool) (__ : cic.Term cic.prop (matita_basics_lists_list.unique S l)) : cic.Term cic.prop (matita_basics_lists_list.unique S (matita_basics_lists_list.filter S f l))", "predict": "axiom unique_filter (S : cic.Univ) (l : cic.Term) (f : ∀ x : S, ∀ y : S, f x y : cic.Term) (x : cic.prop) (y : matita_basics_lists_list.unique S l) : cic.prop (matita_basics_lists_list.unique S (matita_basics_lists_list.filter S f l))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nLet_m2. Pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, pour tous les éléments $n$ et $i$ et $b$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $univs.Type0$ et $matita_arithmetics_nat.nat$.\nassistant\n", "label": "Axiom let_m2 : forall f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term univs.Type0 matita_arithmetics_nat.nat .", "predict": "Axiom m2 : forall f : Elem (Term (Type0)) (nat) -> Elem (Term (Type0)) (bool), forall n : Term (Type0), forall i : nat, forall b : Term (Type0), Term (Type0) (nat) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nList_rect_CProp3. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_761$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $_H_nil$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_lists_list.nil$ appliqué à $_A$, pour toutes les fonctions $_H_cons$ des éléments $x_763$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $x_762$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ et des éléments $_x_765$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $x_762$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_lists_list.cons$ appliqué à $_A$ et $x_763$ et $x_762$, pour tous les éléments $x_761$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_761$.\nassistant\n", "label": "postulate list_rect_CProp3 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_761 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ cic.prop) -> (_H_nil : cic.Term cic.prop (Q_ (matita_basics_lists_list.nil _A))) -> (_H_cons : (x_763 : cic.Term univs.Type0 _A) -> (x_762 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_765 : cic.Term cic.prop (Q_ x_762)) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.cons _A x_763 x_762))) -> (x_761 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term cic.prop (Q_ x_761)", "predict": "postulate list_rect_CProp3 : (A : Univ Type0) -> (Q : Term A -> List (Term A) -> Prop) -> (H_nil : Prop) -> (H_cons : (x : Term Type0) -> (a : Term A) -> (x' : Term Type0) -> (a' : Term A) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0) -> Prop) -> (x : Term Type0"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nDistributive2. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$. Alors pour toutes les fonctions $_g$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$, $cic.Univ$ tient pour $cic.prop$.\nassistant\n", "label": "axiom distributive2 (A B : cic.Univ univs.Type0) (_f : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) (_g : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) : cic.Univ cic.prop", "predict": "axiom distributive2 (A B : univs.Type0) (f : ∀ x : cic.Term univs.Type0, ∀ y : A, ∀ z : B, cic.Term univs.Type0) (g : ∀ x : cic.Term univs.Type0, ∀ y : B, ∀ z : B, cic.Term univs.Type0) : cic.Univ (cic.prop)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nFilter_And. Låt $_A$ och $_B$ vara element av $cic.Univ$ av $cic.prop$. Låt $return_sort$ vara ett element av $cic.Sort$. Då för alla funktioner $return_type$ från element $z$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $return_sort$, för alla funktioner $return$ från element $z$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $z$, för alla element $z$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.\nassistant\n", "label": "axiom filter_And (_A _B : cic.Univ cic.prop) (return_sort : cic.Sort) (return_type : (z : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ return_sort) (return : (z : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Term return_sort (return_type z)) (z : cic.Term cic.prop (matita_basics_logic.And _A _B)) : cic.Term return_sort (return_type z)", "predict": "axiom filter_and (A B : Prop) (return_sort : Sort) : ∀ return_type : Term Prop → And A B → Term return_sort → ∀ z : Term Prop → And A B → Term (return_type z)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nLet_clause_1033. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $len$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $p$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $lep$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_sqrt.sqrt$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $p$, för alla element $ltp$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $p$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $Hc$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $matita_arithmetics_nat.leb$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_chebyshev_ber", "label": "postulate let_clause_1033 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (len : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))) n)) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (lep : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_sqrt.sqrt (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) p)) -> (ltp : cic.Term cic.prop (matita_arithmetics_nat.lt p (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)))) -> (Hc : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_nat.leb (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_chebyshev_bertrand.k (matita_arithmetics_nat.times (matita_arithmetics_nat.S (", "predict": "nasconi.bern$ applicerat på $matita_arithmetics_nat.nat$ applicerat på $n$ och $p$.\n\npostulate let_clause_1033 : (n : Term Type0 Nat) -> (len : Prop (le (exp (S (S (S (S (S (S (S (O))))) (S)) (S)) (O)) n)) -> (p : Term Type0 Nat) -> (lep : Prop (le (S (times (S (S (O))) (S))) n)) -> (ltp : Prop (lt p (S (times (S (S (O))) (S))))) -> (Hc : Prop (eq (lift Type0 Type2) (bool (leb (S (times (S (S (O))) (S))) n))) -> (bern : Nat) -> (postulate : Prop (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and ("}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nNot_eq_O_S. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.S$ applicerat på $n$.\nassistant\n", "label": "Axiom not_eq_O_S : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O (matita_arithmetics_nat.S n))) .", "predict": "Axiom not_eq_O_S : forall n : univs.Type0, matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_nat.S n)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nLt_SO_smallest_factor. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_primes.smallest_factor$ appliqué à $n$.\nassistant\n", "label": "axiom lt_SO_smallest_factor (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_primes.smallest_factor n))", "predict": "axiom lt_SO_smallest_factor (n : cic.Term univs.Type0 ∧ matita_arithmetics_nat.nat) : ∀ __ : cic.Term cic.prop ∧ matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n, cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_primes.smallest_factor n))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nOption_inv_rect_CProp1. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $x1$, pour toutes les fonctions $P$ des éléments $_z1092$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $x1$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $_z1093$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.option$ appliqué à $x1$ et $Hterm$ et $matita_basics_types.None$ appliqué à $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.None$ appliqué à $x1$, pour toutes les fonctions $_H2$ des éléments $x_631$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_z1093$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.option$ appliqué à $x1$ et $Hterm$ et $matita_basics_types.Some$ appliqué à $x1$ et $x_631$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.Some$ appliqué à $x1$ et $x_631$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "axiom option_inv_rect_CProp1 (x1 : cic.Univ univs.Type0) (Hterm : cic.Term univs.Type0 (matita_basics_types.option x1)) (P : (_z1092 : cic.Term univs.Type0 (matita_basics_types.option x1)) -> cic.Univ cic.prop) (_H1 : (_z1093 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.None x1))) -> cic.Term cic.prop (P (matita_basics_types.None x1))) (_H2 : (x_631 : cic.Term univs.Type0 x1) -> (_z1093 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.Some x1 x_631))) -> cic.Term cic.prop (P (matita_basics_types.Some x1 x_631))) : cic.Term cic.prop (P Hterm)", "predict": "axiom option_inv_rect_CProp1 (x1 : Univ Type0) (Hterm : Option (Term Type0)) : ∀ P : (Option (Term Type0) → Univ → Prop), ∀ H1 : (Term Type0 → Prop) × (Eq (lift Type0 Type2) (Option (Term Type0))) × (Option (Term Type0) → Univ → Prop), ∀ H2 : (Term Type0 → Univ → Prop) × (Eq (lift Type0 Type2) (Option (Term Type0))) × (Option (Term Type0) → Univ → Prop), ∀ z1092 : Term Type0, ∀ z1093 : Term prop, ∀ H : Eq (lift Type0 Type2) (Option (Term Type0)) × (Option (Term Type0) → Univ → Prop), ∀ x : Term Type0, ∀ Hterm : Option (Term Type0), ∀ None : Option (Term Type0), ∀ P : (Option (Term Type0) → Univ → Prop), ∀ x1 : Term Type0, ∀ z1093 : Term prop, ∀ eq : Eq (lift Type0 Type2) (Option (Term Type0)) × (Option (Term Type0) → Univ → Prop), ∀ x : Term Type0, ∀ Hterm : Option (Term Type0), ∀ None : Option (Term Type0), ∀ P : (Option (Term Type0) → Univ → Prop), ∀ x1 : Term Type0, ∀ x_631 : Term Type0, ∀ z1093 : Term prop, ∀ eq : Eq (lift Type0 Type2) (Option (Term Type0)) × (Option (Term Type0) → Univ → Prop), ∀ x : Term Type0, ∀ Hterm : Option (Term Type0), ∀ Some : Option (Term Type0), ∀ x_631 : Term Type0, ∀ P : (Option (Term Type0) → Univ → Prop), ∀ x1 : Term Type0, ∀ x_631 : Term Type0, ∀ z1093 : Term prop, ∀ eq : Eq (lift Type0 Type2) (Option (Term Type0)) × (Option (Term Type0) → Univ → Prop), ∀ x : Term Type0, ∀ Hterm : Option (Term Type0), ∀ Some : Option (Term Type0), ∀ x_63"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nBi_RC_reflexive. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $R$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.bi_relation$ appliqué à $A$ et $B$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_relations.bi_reflexive$ appliqué à $A$ et $B$ et $matita_basics_relations.bi_RC$ appliqué à $A$ et $B$ et $R$.\nassistant\n", "label": "postulate bi_RC_reflexive : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (R : cic.Term univs.Type0 (matita_basics_relations.bi_relation A B)) -> cic.Term cic.prop (matita_basics_relations.bi_reflexive A B (matita_basics_relations.bi_RC A B R))", "predict": "postulate bi_RC_reflexive : (A : Univ Type0) -> (B : Univ Type0) -> (R : bi_relation A B) -> prop (bi_reflexive A B (bi_RC A B R))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nLe_exp1. För alla element $n$ och $m$ och $a$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $a$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $n$ och $a$ och $matita_arithmetics_exp.exp$ applicerat på $m$ och $a$.\nassistant\n", "label": "le_exp1 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O a) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.le n m) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp n a) (matita_arithmetics_exp.exp m a)) .", "predict": "le_exp1 : (n : Elem (cic Term) (univs Type0)) -> (m : Elem (cic Term) (univs Type0)) -> (a : Elem (cic Term) (matita_arithmetics_nat nat)) -> Proof (forall (__) : (cic Term) (matita_arithmetics_nat lt) (matita_arithmetics_nat O) a) -> Proof (forall (___1) : (cic Term) (matita_arithmetics_nat le) n m) -> Proof (matita_arithmetics_exp le (matita_arithmetics_exp exp n a) (matita_arithmetics_exp exp m a)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nEq_rect_CProp3. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type2$. Låt $_x$ vara ett element av $cic.Term$ av $univs.Type2$ och $A$. Låt $Q_$ vara en funktion från element $x_28$ av $cic.Term$ av $univs.Type2$ och $A$ och element $_x_29$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_28$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_refl$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $_x$ och $matita_basics_logic.refl$ applicerat på $A$ och $_x$. Låt $x_28$ vara ett element av $cic.Term$ av $univs.Type2$ och $A$. Låt $x_29$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_28$. Då håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_28$ och $x_29$.\nassistant\n", "label": "axiom eq_rect_CProp3 (A : cic.Univ univs.Type2) (_x : cic.Term univs.Type2 A) (Q_ : (x_28 : cic.Term univs.Type2 A) -> (_x_29 : cic.Term cic.prop (matita_basics_logic.eq A _x x_28)) -> cic.Univ cic.prop) (_H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x))) (x_28 : cic.Term univs.Type2 A) (x_29 : cic.Term cic.prop (matita_basics_logic.eq A _x x_28)) : cic.Term cic.prop (Q_ x_28 x_29)", "predict": "axiom eq_rect_CProp3 (A : univs.Type2) (x : cic.Term univs.Type2 A) (Q : x_28 : cic.Term univs.Type2 A → x_29 : cic.Term (cic.prop × matita_basics_logic.eq) (A, x) → univs.Type2) (H_refl : Q x (matita_basics_logic.refl A x)) (x_28 : cic.Term univs.Type2 A) (x_29 : cic.Term (cic.prop × matita_basics_logic.eq) (A, x)) : Q x_28 x_29"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nDistributive2. Let $A$ and $B$ be elements of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Let $_g$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Then $cic.Univ$ holds for $cic.prop$.\nassistant\n", "label": "distributive2 : A : cic.Univ univs.Type0 -> B : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 B -> cic.Term univs.Type0 B) -> _g : (__ : cic.Term univs.Type0 B -> __1 : cic.Term univs.Type0 B -> cic.Term univs.Type0 B) -> cic.Univ cic.prop .", "predict": "distributive2 : (A : Elem (univs Type0)) -> (B : Elem (univs Type0)) -> Proof (cic Univ (f (and A (and B)) (g (and (f A B) (f (and B A) (and (g A B) (g (and B A) (and (f (and (g A B) (f (and B A) (and (g A B) (g (and B A) (and (f (and (g A B) (f (and B A) (and (g A B) (g (and B A) (and (f (and (g A B) (f (and B A) (and (g A B) (g (and B A) (and (f (and (g A B) (f (and B A) (and (g A B) (g (and B A) (and (f (and (g A B) (f (and B A) (and (g A B) (g (and B A) (and (f (and (g A B) (f (and B A) (and (g A B) (g (and B A) (and (f (and (g A B) (f (and B A) (and (g A B) (g (and B A) (and (f (and (g A B) (f (and B A) (and (g A B) (g (and B A) (and (f (and (g A B) (f (and B A) (and (g A B) (g (and B A) (and (f (and (g A B) (f (and B A) (and (g A B) (g (and B A) (and (f (and (g A B) (f (and B A) (and (g A B) (g (and B A) (and (f (and (g A B) (f (and B A) (and (g A B) (g (and B A) (and (f (and (g A B) (f (and B A) (and (g A B) (g (and B A) (and (f (and (g A B) (f (and B A) (and (g A"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nAnd_inv_ind. Låt $x1$ och $x2$ vara element av $cic.Univ$ av $cic.prop$. Låt $Hterm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$. Då för alla funktioner $P$ från element $_z323$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $x_120$ av $cic.Term$ av $cic.prop$ och $x1$ och element $x_119$ av $cic.Term$ av $cic.prop$ och $x2$ och element $_z324$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_120$ och $x_119$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_120$ och $x_119$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "And_inv_ind : x1 : cic.Univ cic.prop -> x2 : cic.Univ cic.prop -> Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2) -> P : (_z323 : cic.Term cic.prop (matita_basics_logic.And x1 x2) -> cic.Univ cic.prop) -> _H1 : (x_120 : cic.Term cic.prop x1 -> x_119 : cic.Term cic.prop x2 -> _z324 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_120 x_119)) -> cic.Term cic.prop (P (matita_basics_logic.conj x1 x2 x_120 x_119))) -> cic.Term cic.prop (P Hterm) .", "predict": "and_inv_ind : (x1 : Elem (cic.Univ (cic.prop))) -> (x2 : Elem (cic.Univ (cic.prop))) -> (Hterm : Elem (cic.Term (cic.prop))) -> Proof (and (x1) (x2)) -> Proof (forall (P : (z323 : Elem (cic.Term (cic.prop))) -> (and (x1) (x2))) -> Proof (forall (H1 : (x120 : Elem (cic.Term (cic.prop))) -> (x119 : Elem (cic.Term (cic.prop))) -> (z324 : Elem (cic.Term (cic.prop))) -> (eq (lift (cic.prop)) (univs.Type2)) -> (and (x1) (x2)) -> (Hterm) -> (conj (x1) (x2)) -> (x120) -> (x119)) -> (P (conj (x1) (x2)) (x120) (x119))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nOrd_rem_eq. För alla element $n$ och $p$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_ord.ord_rem$ applicerat på $n$ och $p$ och $matita_basics_types.snd$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_ord.p_ord$ applicerat på $n$ och $p$.\nassistant\n", "label": "postulate ord_rem_eq : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_ord.ord_rem n p) (matita_basics_types.snd matita_arithmetics_nat.nat matita_arithmetics_nat.nat (matita_arithmetics_ord.p_ord n p)))", "predict": "postulate ord_rem_eq : (n : cic.Term univs.Type0) -> (p : matita_arithmetics_nat.nat) -> cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_nat.nat) (matita_arithmetics_ord.ord_rem n p)) (matita_basics_types.snd (matita_arithmetics_nat.nat) (matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord n p)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nBigop_diff. Låt $p$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Låt $op$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $B$ och $nil$. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$. Låt $i$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $p$ applicerat på $i$ och $matita_basics_bool.true$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $x$ som $p$ applicerat på $x$ och $B$ och $nil$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $x$ som $f$ applicerat på $x$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $B$ och $nil$ och $op$ och $f$ applicerat på $i$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $x$ som $matita_basics_bool.andb$ applicerat på $matita_basics_bool.notb$ applic", "label": "axiom bigop_diff (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (B : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 B) (op : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil)) (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) (i n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i n)) (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p i) matita_basics_bool.true)) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop n (λ x => p x) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (λ x => f x)) (matita_arithmetics_bigops.aop__o__op B nil op (f i) (matita_arithmetics_bigops.bigop n (λ x => matita_basics_bool.andb (matita_basics_bool.notb (matita_arithmetics_nat.eqb i x)) (p x)) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (λ x => f x))))", "predict": "erat på $p$ applicerat på $i$ och $matita_basics_bool.true$ och $p$ applicerat på $i$ och $matita_basics_bool.true$ ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nDivides_fact. Soient $n$ et $i$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $i$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $i$ et $n$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_primes.divides$ appliqué à $i$ et $matita_arithmetics_factorial.fact$ appliqué à $n$.\nassistant\n", "label": "Axiom divides_fact : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O i), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.le i n), cic.Term cic.prop (matita_arithmetics_primes.divides i (matita_arithmetics_factorial.fact n)) .", "predict": "Axiom divides_fact : forall n : univs.Type0, forall i : matita_arithmetics_nat.nat, (prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O i) -> prop (matita_arithmetics_nat.le i n) -> prop (matita_arithmetics_primes.divides i (matita_arithmetics_factorial.fact n))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nBinomial_law. Let $a$ and $b$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_exp.exp$ applied to $matita_arithmetics_nat.plus$ applied to $a$ and $b$ and $n$ and $matita_arithmetics_bigops.bigop$ applied to $matita_arithmetics_nat.S$ applied to $n$ and the function that maps $k$ to $matita_basics_bool.true$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.plus$ and the function that maps $k$ to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_binomial.bc$ applied to $n$ and $k$ and $matita_arithmetics_exp.exp$ applied to $a$ and $matita_arithmetics_nat.minus$ applied to $n$ and $k$ and $matita_arithmetics_exp.exp$ applied to $b$ and $k$.\nassistant\n", "label": "Axiom binomial_law : forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_exp.exp (matita_arithmetics_nat.plus a b) n) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n) (fun k => matita_basics_bool.true) matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_nat.plus (fun k => matita_arithmetics_nat.times (matita_arithmetics_nat.times (matita_arithmetics_binomial.bc n k) (matita_arithmetics_exp.exp a (matita_arithmetics_nat.minus n k))) (matita_arithmetics_exp.exp b k)))) .", "predict": "Axiom binomial_law : forall a : Type0, forall b : Type0, forall n : nat, (prop (eq (lift Type0 Type2 nat) (bigop (S n) (fun k => true))) (binomial (n) (k) (exp a (minus n k)) (exp b k))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nDiv_mod_spec_rect_CProp3. Låt $_n$ och $_m$ och $_q$ och $_r$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Q_$ vara en funktion från element $_x_845$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_div_mod_spec_intro$ vara en funktion från element $x_847$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $_r$ och $_m$ och element $x_846$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $_n$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $_q$ och $_m$ och $_r$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ och $x_847$ och $x_846$. Låt $x_845$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$. Då håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_845$.\nassistant\n", "label": "postulate div_mod_spec_rect_CProp3 : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Q_ : (_x_845 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ cic.prop) -> (_H_div_mod_spec_intro : (x_847 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_846 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term cic.prop (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_847 x_846))) -> (x_845 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Term cic.prop (Q_ x_845)", "predict": "postulate div_mod_spec_rect_CProp3 : (n : Term Type0) -> (m : Term Type0) -> (q : Term Type0) -> (r : Term Type0) -> (Q : prop (div_mod_spec n m q r)) -> (H_div_mod_spec_intro : lt r m) -> (x_846 : prop (Eq (lift Type0 Type2 Nat) n (plus (times q m) r))) -> (x_847 : prop (Eq (div_mod_spec n m q r) (Q (div_mod_spec_intro n m q r) H_div_mod_spec_intro x_846))) -> prop (Q (div_mod_spec n m q r))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nCongruent_times. Låt $n$ och $m$ och $n1$ och $m1$ och $p$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $p$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_congruence.congruent$ applicerat på $n$ och $n1$ och $p$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_congruence.congruent$ applicerat på $m$ och $m1$ och $p$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_congruence.congruent$ applicerat på $matita_arithmetics_nat.times$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $n1$ och $m1$ och $p$.\nassistant\n", "label": "congruent_times : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p) -> __1 : cic.Term cic.prop (matita_arithmetics_congruence.congruent n n1 p) -> __2 : cic.Term cic.prop (matita_arithmetics_congruence.congruent m m1 p) -> cic.Term cic.prop (matita_arithmetics_congruence.congruent (matita_arithmetics_nat.times n m) (matita_arithmetics_nat.times n1 m1) p) .", "predict": "congruent_times : (n : Elem (univs Type0)) -> (m : Elem (matita_arithmetics_nat nat)) -> (n1 : Elem (univs Type0)) -> (m1 : Elem (matita_arithmetics_nat nat)) -> (p : Elem (matita_arithmetics_nat nat)) -> Proof (and (forall (x : Elem (cic prop (matita_arithmetics_congruence congruent) n n1 p)) (forall (y : Elem (cic prop (matita_arithmetics_congruence congruent) m m1 p)) (congruent (times n m) (times n1 m1) p))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nACop_inv_rect_Type0. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $x2$ av $cic.Term$ av $univs.Type0$ och $x1$, för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1596$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type0$, för alla funktioner $_H1$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $matita_arithmetics_bigops.op$ applicerat på $x1$ och $x2$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $x1$ och $x2$ och $aop$ och $b$ och $a$ och element $_z1597$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_arithmetics_bigops.mk_ACop$ applicerat på $x1$ och $x2$ och $aop$ och $_comm$ till element av $cic.Term$ av $univs.Type0$ och $P$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $x1$ och $x2$ och $aop$ och $_comm$, håller $cic.Term$ för $univs.Type0$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "Axiom ACop_inv_rect_Type0 : forall x1 : cic.Univ univs.Type0, forall x2 : cic.Term univs.Type0 x1, forall Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2), forall P : ((_z1596 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> cic.Univ univs.Type0), forall _H1 : ((aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (_comm : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (matita_arithmetics_bigops.op x1 x2 aop a b) (matita_arithmetics_bigops.op x1 x2 aop b a))) -> (_z1597 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop x1 x2)) Hterm (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) -> cic.Term univs.Type0 (P (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))), cic.Term univs.Type0 (P Hterm) .", "predict": "Axiom cop_inv_rect_Type0 : forall x1 : univs.Type0, forall x2 : cic.Term, forall Hterm : cic.Term, forall P : _z1596 -> matita_arithmetics_bigops.ACop x1 x2 -> univs.Type0, forall _H1 : aop : cic.Term -> matita_arithmetics_bigops.Aop x1 x2 -> a : cic.Term -> b : cic.Term -> eq (cic.lift univs.Type0 univs.Type2 x1) (matita_arithmetics_bigops.op x1 x2 aop a b) (matita_arithmetics_bigops.op x1 x2 aop b a) -> P (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm) = P (matita_arithmetics_bigops.ACop x1 x2 Hterm) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nAop_rect_Type3. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Then for all functions $Q_$ from elements $_x_787$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type3$, for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_lists_list.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for", "label": "Aop_rect_Type3 : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_787 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil) -> cic.Univ univs.Type3) -> _H_mk_Aop : (op : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _nill : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> _nilr : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> _assoc : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type3 (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> x_787 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil) -> cic.Term univs.Type3 (Q_ x_787) .", "predict": " all elements $x$ of $cic.Term$ of $univs.Type0$ and $A$, the proof of $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type3$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x$ and $Q_$ applied to $x$ and $x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nBool_inv_rect_CProp2. For all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all functions $P$ from elements $_z635$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $_z636$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Hterm$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_bool.true$, for all functions $_H2$ from elements $_z636$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Hterm$ and $matita_basics_bool.false$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_bool.false$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "axiom bool_inv_rect_CProp2 (Hterm : cic.Term univs.Type0 matita_basics_bool.bool) (P : (_z635 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) (_H1 : (_z636 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.true)) -> cic.Term cic.prop (P matita_basics_bool.true)) (_H2 : (_z636 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.false)) -> cic.Term cic.prop (P matita_basics_bool.false)) : cic.Term cic.prop (P Hterm)", "predict": "axiom bool_inv_rect_CProp2 (Hterm : Term Type0) (b : bool) (P : (z635 : Term Type0) → (b : bool) → Univ) (H1 : (z636 : Term prop) → Eq (lift Type0 Type2) (bool) b Hterm true) (H2 : (z636 : Term prop) → Eq (lift Type0 Type2) (bool) b Hterm false) : Term (prop) (P Hterm)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nSig_ind_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $_f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $Q_$ des éléments $_x_664$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_Sig$ des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $_f$ appliqué à $pi1$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $A$ et $_f$ et $pi1$ et $_pi2$, pour tous les éléments $x_664$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_664$.\nassistant\n", "label": "Sig_ind_body : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> Q_ : (_x_664 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) -> cic.Univ cic.prop) -> _H_mk_Sig : (pi1 : cic.Term univs.Type0 A -> _pi2 : cic.Term cic.prop (_f pi1) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> x_664 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) -> cic.Term cic.prop (Q_ x_664) .", "predict": "sig_ind_body : (A : Elem (univ (Type0))) -> Proof (forall (f : Elem (Term (univ (Type0))) (A -> Elem (univ (prop))) (forall (Q_ : Elem (Sig (x_664 : Term (univ (Type0))) (A)) (f -> Elem (univ (prop))) (forall (H_mk_Sig : Elem (Term (pi1 : Type0)) (A) (pi2 : Term (prop)) (f (pi1) -> Elem (Term (prop))) (Q_ (mk_Sig A f pi1 pi2)) (forall (x_664 : Elem (Sig A) (f)) (Proof (and (Term (prop) (Q_ x_664))))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nExists_mid. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $P$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $l1$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$, för alla element $x$ av $cic.Term$ av $univs.Type0$ och $A$, för alla element $l2$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $P$ applicerat på $x$, håller $cic.Term$ för $cic.prop$ och $matita_basics_lists_list.Exists$ applicerat på $A$ och $P$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l1$ och $matita_basics_lists_list.cons$ applicerat på $A$ och $x$ och $l2$.\nassistant\n", "label": "axiom Exists_mid (A : cic.Univ univs.Type0) (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) (x : cic.Term univs.Type0 A) (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) (__ : cic.Term cic.prop (P x)) : cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 (matita_basics_lists_list.cons A x l2)))", "predict": "axiom exists_mid (A : univs.Type0) (P : Term univs.Type0 → A → univ) : ∀ l1 : matita_basics_lists_list.list A, ∀ x : Term univs.Type0, ∀ l2 : matita_basics_lists_list.list A, ∀ p : prop, (P x A → exists (matita_basics_lists_list.append A l1) (matita_basics_lists_list.cons A x l2))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nPi1. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $_xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $f$, $cic.Term$ tient pour $univs.Type0$ et $A$.\nassistant\n", "label": "pi1 : A : cic.Univ univs.Type0 -> f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> _xxx : cic.Term univs.Type0 (matita_basics_types.Sig A f) -> cic.Term univs.Type0 A .", "predict": "pi1 : (A : Elem (cic.Univ) (univs.Type0)) -> (f : Func (cic.Term) (A -> Elem (cic.Univ) (cic.prop))) -> (x : Elem (cic.Term) (univs.Type0) * Elem (matita_basics_types.Sig) (A)) -> Proof (cic.Term) (univs.Type0) A) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nCongruent_n_mod_times. Låt $n$ och $m$ och $p$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $p$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_congruence.congruent$ applicerat på $n$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $n$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $p$ och $p$.\nassistant\n", "label": "Axiom congruent_n_mod_times : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), cic.Term cic.prop (matita_arithmetics_congruence.congruent n (matita_arithmetics_div_and_mod.mod n (matita_arithmetics_nat.times m p)) p) .", "predict": "Axiom congruent_n_mod_times : forall n : univs.Type0, forall m : univs.Type0, forall p : nat, (Lt n p -> Lt m p -> congruent n (mod n (times m p))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nAnd_inv_rect_CProp2. För alla element $x1$ och $x2$ av $cic.Univ$ av $cic.prop$, för alla element $Hterm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z371$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $x_160$ av $cic.Term$ av $cic.prop$ och $x1$ och element $x_159$ av $cic.Term$ av $cic.prop$ och $x2$ och element $_z372$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_160$ och $x_159$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_160$ och $x_159$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "axiom And_inv_rect_CProp2 (x1 x2 : cic.Univ cic.prop) (Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2)) (P : (_z371 : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> cic.Univ cic.prop) (_H1 : (x_160 : cic.Term cic.prop x1) -> (x_159 : cic.Term cic.prop x2) -> (_z372 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_160 x_159))) -> cic.Term cic.prop (P (matita_basics_logic.conj x1 x2 x_160 x_159))) : cic.Term cic.prop (P Hterm)", "predict": "axiom and_inv_rect_CProp2 (x1 x2 : cic.Univ) (Hterm : cic.Term (cic.prop)) (P : ∀ z371 : cic.Term (cic.prop), and x1 x2 → Univ (cic.prop)) (H1 : ∀ x160 : cic.Term (cic.prop) → x1 → ∀ x159 : cic.Term (cic.prop) → x2 → Eq (lift (cic.prop) (univs.Type2)) (and x1 x2) Hterm (conj x1 x2) x160 x159) : ∀ z372 : cic.Term (cic.prop), P (conj x1 x2) x160 x159"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nLstar_ind_body. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_R$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation$ appliqué à $B$. Soit $Q_$ une fonction des éléments $x_1233$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $x_1232$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $x_1231$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $_x_1234$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $_R$ et $x_1233$ et $x_1232$ et $x_1231$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $_H_lstar_O$ des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_nat.O$ et $b$ et $b$ et $matita_arithmetics_lstar.lstar_O$ appliqué à $B$ et $_R$ et $b$, pour toutes les fonctions $_H_lstar_S$ des éléments $b1$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $x_1236$ de $cic.Term$ de $cic.prop$ et de $_R$ appliqué à $b1$ et $b$ et des éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $b2$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $x_1235$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $_R$ et $l$ et $b$ et $b2$ et des éléments $_x_1238$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $l$ et $b$ et $b2$ et $x_1235$ à", "label": "Axiom lstar_ind_body : forall B : cic.Univ univs.Type0, forall _R : cic.Term univs.Type0 (matita_basics_relations.relation B), forall Q_ : ((x_1233 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_1232 : cic.Term univs.Type0 B) -> (x_1231 : cic.Term univs.Type0 B) -> (_x_1234 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B _R x_1233 x_1232 x_1231)) -> cic.Univ cic.prop), forall _H_lstar_O : ((b : cic.Term univs.Type0 B) -> cic.Term cic.prop (Q_ matita_arithmetics_nat.O b b (matita_arithmetics_lstar.lstar_O B _R b))), forall _H_lstar_S : ((b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (x_1236 : cic.Term cic.prop (_R b1 b)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b2 : cic.Term univs.Type0 B) -> (x_1235 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B _R l b b2)) -> (_x_1238 : cic.Term cic.prop (Q_ l b b2 x_1235)) -> cic.Term cic.prop (Q_ (matita_arithmetics_nat", "predict": " des éléments de $cic.Univ$ de $cic.prop$, nous avons $\\forall b : cic.Term \\times univs.Type0 \\times B, \\forall b1 : cic.Term \\times univs.Type0 \\times B, \\forall l : cic.Term \\times univs.Type0 \\times nat, \\forall b2 : cic.Term \\times univs.Type0 \\times B, \\forall x_1236 : cic.Term \\times univs.Type0 \\times prop, \\forall x_1235 : cic.Term \\times univs.Type0 \\times prop, \\forall x_1238 : cic.Term \\times univs.Type0 \\times prop, \\forall Q_ : (x_1233 : cic.Term \\times univs.Type0 \\times nat) -> (x_1232 : cic.Term \\times univs.Type0 \\times B) -> (x_1231 : cic.Term \\times univs.Type0 \\times B) -> (x_1234 : cic.Term \\times univs.Type0 \\times lstar) -> (b : cic.Term \\times univs.Type0 \\times B) -> (b1 : cic.Term \\times univs.Type0 \\times B) -> (l : cic.Term \\times univs.Type0 \\times nat) -> (b2 : cic.Term \\times univs.Type0 \\times B) -> (x_1236 : cic.Term \\times univs.Type0 \\times prop) -> (x_1235 : cic.Term \\times univs.Type0 \\times prop) -> (x_1238 : cic.Term \\times univs.Type0 \\times prop) -> (Q_ (matita_arithmetics_nat.O, b, b, matita_arithmetics_lstar.lstar_O, B, _R, b) (b1, b, b2, x_1236, l, x_1235, b2, x_1235) (x_1236, x_1235, x_1238) : c\nProof (lstar_ind_body : forall B : univs.Type0, forall _R : relation (B : univs.Type0), forall Q_ : ("}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nNot_inv_rect_CProp1. Let $x1$ be an element of $cic.Univ$ of $cic.prop$. Let $Hterm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $x1$. Let $P$ be a function from elements $_z311$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $x1$ to elements of $cic.Univ$ of $cic.prop$. Let $_H1$ be a function from functions $x_113$ from elements $__$ of $cic.Term$ of $cic.prop$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.False$ and elements $_z312$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_basics_logic.Not$ applied to $x1$ and $Hterm$ and $matita_basics_logic.nmk$ applied to $x1$ and $x_113$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_logic.nmk$ applied to $x1$ and $x_113$. Then $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "axiom Not_inv_rect_CProp1 (x1 : cic.Univ cic.prop) (Hterm : cic.Term cic.prop (matita_basics_logic.Not x1)) (P : (_z311 : cic.Term cic.prop (matita_basics_logic.Not x1)) -> cic.Univ cic.prop) (_H1 : (x_113 : (__ : cic.Term cic.prop x1) -> cic.Term cic.prop matita_basics_logic.False) -> (_z312 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.Not x1)) Hterm (matita_basics_logic.nmk x1 x_113))) -> cic.Term cic.prop (P (matita_basics_logic.nmk x1 x_113))) : cic.Term cic.prop (P Hterm)", "predict": "axiom not_inv_rect_CProp1 (x1 : cic.Univ) (Hterm : cic.Term (cic.prop)) (P : ∀ z311 : cic.Term (cic.prop) (matita_basics_logic.Not x1), cic.Univ) (H1 : ∀ x_113 : ∀ ⋯ , matita_basics_logic.False, ∀ z312 : cic.Term (cic.prop) (matita_basics_logic.eq (cic.lift (cic.prop) (univs.Type2)) (matita_basics_logic.Not x1) Hterm) (matita_basics_logic.nmk x1 x_113), cic.Term (cic.prop)) : P (matita_basics_logic.nmk x1 x_113)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nDop_inv_ind. For all elements $x1$ of $cic.Univ$ of $univs.Type0$, for all elements $x2$ of $cic.Term$ of $univs.Type0$ and $x1$, for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1698$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $sum$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ and functions $prod$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $prod$ applied to $a$ and $matita_arithmetics_bigops.aop__", "label": "axiom Dop_inv_ind (x1 : cic.Univ univs.Type0) (x2 : cic.Term univs.Type0 x1) (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) (P : (_z1698 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> cic.Univ cic.prop) (_H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> (prod : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_null : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> (_distr : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> (_z1699 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) : cic.Term cic.prop (P Hterm)", "predict": "op__x$ applied to $b$ and $c$ and $x2$ and $x2$ and functions $_distr$ applied to $a$ and $b$ and $c$ and $x1$ and $x1$ and functions $_distr$ applied to $a$ and $b$ and $c$ and $x1$ and $x1$ and functions $_distr$ applied to $a$ and $b$ and $c$ and $x1$ and $x1$ and functions $_distr$ applied to $a$ and $b$ and $c$ and $x1$ and $x1$ and functions $_distr$ applied to $a$ and $b$ and $c$ and $x1$ and $x1$ and functions $_distr$ applied to $a$ and $b$ and $c$ and $x1$ and $x1$ and functions $_distr$ applied to $a$ and $b$ and $c$ and $x1$ and $x1$ and functions $_distr$ applied to $a$ and $b$ and $c$ and $x1$ and $x1$ and functions $_distr$ applied to $a$ and $b$ and $c$ and $x1$ and $x1$ and functions $_distr$ applied to $a$ and $b$ and $c$ and $x1$ and $x1$ and functions $_distr$ applied to $a$ and $b$ and $c$ and $x1$ and $x1$ and functions $_distr$ applied to $a$ and $b$ and $c$ and $x1$ and $x1$ and functions $_distr$ applied to $a$ and $b$ and $c$ and $x1$ and $x1$ and functions $_distr$ applied to $a$ and $b$ and $c$ and $x1$ and $x1$ and functions $_distr$ applied to $a$ and $b$ and $c$ and $x1$ and $x1$ and functions $_distr$ applied to $a$ and $b$ and $c$ and $x1$ and $x1$ and functions $_distr$ applied to $a$ and $b$ and $c$ and $x1$ and"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nMonotonic_le_minus_l. För alla element $p$ och $q$ och $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $q$ och $p$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.minus$ applicerat på $q$ och $n$ och $matita_arithmetics_nat.minus$ applicerat på $p$ och $n$.\nassistant\n", "label": "Axiom monotonic_le_minus_l : forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall q : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.le q p), cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.minus q n) (matita_arithmetics_nat.minus p n)) .", "predict": "Axiom monotonic_le_minus_l : forall p : univs.Type0, forall q : univs.Type0, forall n : matita_arithmetics_nat.nat, forall __ : prop, (q >= p -> matita_arithmetics_nat.le (matita_arithmetics_nat.minus q n) (matita_arithmetics_nat.minus p n)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nDPair_rect_CProp1_body. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $_f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $univs.Type0$, för alla funktioner $Q_$ från element $_x_660$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_DPair$ från element $dpi1$ av $cic.Term$ av $univs.Type0$ och $A$ och element $_dpi2$ av $cic.Term$ av $univs.Type0$ och $_f$ applicerat på $dpi1$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.mk_DPair$ applicerat på $A$ och $_f$ och $dpi1$ och $_dpi2$, för alla element $x_660$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_660$.\nassistant\n", "label": "Axiom DPair_rect_CProp1_body : forall A : cic.Univ univs.Type0, forall _f : ((__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0), forall Q_ : ((_x_660 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop), forall _H_mk_DPair : ((dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))), forall x_660 : cic.Term univs.Type0 (matita_basics_types.DPair A _f), cic.Term cic.prop (Q_ x_660) .", "predict": "Axiom dpair_rect_cprop1_body : forall A : univs.Type0, forall f : Term univs.Type0 -> A -> univs.Type0, forall Q_ : x_660 : Term univs.Type0 -> DPair A (f x_660) -> prop, forall H_mk_DPair : dpi1 : Term univs.Type0 -> A -> f dpi1 -> prop, forall x_660 : Term univs.Type0, forall dpair : DPair A (f x_660), prop (Q_ x_660) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nCongruent_exp_pred_SO. För alla element $p$ och $a$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $p$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_primes.divides$ applicerat på $p$ och $a$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_congruence.congruent$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $a$ och $matita_arithmetics_nat.pred$ applicerat på $p$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$.\nassistant\n", "label": "congruent_exp_pred_SO : p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_primes.prime p) -> __1 : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides p a)) -> cic.Term cic.prop (matita_arithmetics_congruence.congruent (matita_arithmetics_exp.exp a (matita_arithmetics_nat.pred p)) (matita_arithmetics_nat.S matita_arithmetics_nat.O) p) .", "predict": "congruent_exp_pred_SO : (p : Elem (Term (univs Type0))) -> (a : Elem (nat matita_arithmetics)) -> Proof (forall (p : Elem (Term (prop (matita_arithmetics_primes prime)))) (forall (a : Elem (Term (prop (matita_basics_logic not (divides p a)))) (congruent (exp a (pred p (S (O))) p)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nBool_to_decidable_eq. Pour tous les éléments $b1$ et $b2$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.decidable$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $b1$ et $b2$.\nassistant\n", "label": "Axiom bool_to_decidable_eq : forall b1 : cic.Term univs.Type0 matita_basics_bool.bool, forall b2 : cic.Term univs.Type0 matita_basics_bool.bool, cic.Term cic.prop (matita_basics_logic.decidable (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) b1 b2)) .", "predict": "Axiom bool_to_decidable_eq : forall b1 : univs.Type0, forall b2 : matita_basics_bool.bool, cic.prop (matita_basics_logic.decidable (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) b1 b2)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nLength_map. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $l$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_lists_list.length$ appliqué à $B$ et $matita_basics_lists_list.map$ appliqué à $A$ et $B$ et $f$ et $l$ et $matita_basics_lists_list.length$ appliqué à $A$ et $l$.\nassistant\n", "label": "Axiom length_map : forall A : cic.Univ univs.Type0, forall B : cic.Univ univs.Type0, forall l : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall f : ((__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length B (matita_basics_lists_list.map A B f l)) (matita_basics_lists_list.length A l)) .", "predict": "Axiom length_map : forall A : univs.Type0, forall B : univs.Type0, forall l : matita_basics_lists_list.list A, forall f : forall x : cic.Term univs.Type0, forall a : A, cic.Term univs.Type0 B, forall p : cic.prop, forall e : matita_basics_logic.eq (univs.Type0) (univs.Type2), forall n : matita_arithmetics_nat.nat, forall m : matita_basics_lists_list.map A B f l, forall l' : matita_basics_lists_list.length A l, p ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nNot_le_S_S_to_not_le. For all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.S$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $m$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_arithmetics_nat.le$ applied to $n$ and $m$.\nassistant\n", "label": "Axiom not_le_S_S_to_not_le : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m))), cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) .", "predict": "Axiom not_le_S_S : forall n : univs.Type0, forall m : univs.Type0, forall __ : cic.prop, not (le (S n) (S m)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nDop. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, $cic.Univ$ holds for $univs.Type0$.\nassistant\n", "label": "Axiom Dop : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, cic.Univ univs.Type0 .", "predict": "A : univs.Type0 -> _nil : cic.Term univs.Type0 -> Proof (cic.Univ univs.Type0) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nBigop_0. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $B$ of $cic.Univ$ of $univs.Type0$, for all elements $nil$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $op$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $B$ and $nil$, for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $B$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $matita_arithmetics_bigops.bigop$ applied to $matita_arithmetics_nat.S$ applied to $n$ and the function that maps $i$ to $matita_basics_bool.true$ and $B$ and $nil$ and $matita_arithmetics_bigops.op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ and $matita_arithmetics_bigops.op$ applied to $B$ and $nil$ and $op$ and $matita_arithmetics_bigops.bigop$ applied to $n$ and the function that maps $i$ to $matita_basics_bool.true$ and $B$ and $nil$ and $matita_arithmetics_bigops.op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $matita_arithmetics_nat.S$ applied to $i$ and $f$ applied to $matita_arithmetics_nat.O$.\nassistant\n", "label": "bigop_0 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> B : cic.Univ univs.Type0 -> nil : cic.Term univs.Type0 B -> op : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop B nil) -> f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 B) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n) (i : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_basics_bool.true) B nil (matita_arithmetics_bigops.op B nil op) (i : cic.Term univs.Type0 matita_arithmetics_nat.nat => f i)) (matita_arithmetics_bigops.op B nil op (matita_arithmetics_bigops.bigop n (i : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_basics_bool.true) B nil (matita_arithmetics_bigops.op B nil op) (i : cic.Term univs.Type0 matita_arithmetics_nat.nat => f (matita_arithmetics_nat.S i))) (f matita_arithmetics_nat.O))) .", "predict": "bigop_0 : n : Elem (cic Term) (univs Type0) -> matita_arithmetics_nat nat -> Proof (forall (B : Elem (cic Univ) (univs Type0)) (nil : Elem (cic Term) (univs Type0)) (op : Elem (cic Term) (matita_arithmetics_bigops Aop)) (f : (i : Elem (cic Term) (matita_arithmetics_nat nat)) -> Elem (cic Term) (B))) (cic prop) (matita_basics_logic eq) (cic lift) (univs Type0) (univs Type2) B (matita_arithmetics_bigops bigop) (matita_arithmetics_nat S) n (i : Elem (cic Term) (matita_basics_bool true)) B nil (matita_arithmetics_bigops op) B nil op (f i) (matita_arithmetics_bigops op) B nil op (f (matita_arithmetics_nat S) i) (f (matita_arithmetics_nat O))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nUniv. Let $s$ be an element of $Sort$. Then $Univ$ holds for $succ$ applied to $s$.\nassistant\n", "label": "axiom univ (s : Sort) : Univ (succ s)", "predict": "axiom univ (s : Sort) : Univ (succ s)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nDPair_inv_rect_Type2. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $x2$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $univs.Type0$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1122$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type2$, pour toutes les fonctions $_H1$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $x2$ appliqué à $dpi1$ et des éléments $_z1123$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$ à des éléments de $cic.Term$ de $univs.Type2$ et de $P$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$, $cic.Term$ tient pour $univs.Type2$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "Axiom DPair_inv_rect_Type2 : forall x1 : cic.Univ univs.Type0, forall x2 : ((__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0), forall Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2), forall P : ((_z1122 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ univs.Type2), forall _H1 : ((dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1123 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type2 (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))), cic.Term univs.Type2 (P Hterm) .", "predict": "Axiom dpair_inv_rect_Type2 : forall x1 : Univ, forall x2 : Term Univ, forall Hterm : Term Univ, forall P : (z1122 : Term Univ) -> DPair x1 x2 -> Univ, forall dpi1 : Term Univ, forall dpi2 : Term Univ, forall z1123 : Term prop, forall eq : lift (Univ -> Univ) (DPair x1 x2) = Hterm -> mk_DPair x1 x2 = dpi1 /\\ dpi2 -> P (mk_DPair x1 x2) (dpi1 /\\ dpi2) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nOption_ind. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_586$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_None$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.None$ appliqué à $_A$. Alors pour toutes les fonctions $_H_Some$ des éléments $x_587$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.Some$ appliqué à $_A$ et $x_587$, pour tous les éléments $x_586$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_586$.\nassistant\n", "label": "Axiom option_ind : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_586 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop), forall _H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A)), forall _H_Some : ((x_587 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_587))), forall x_586 : cic.Term univs.Type0 (matita_basics_types.option _A), cic.Term cic.prop (Q_ x_586) .", "predict": "Axiom option_ind : forall A : univs.Type0, forall Q : (x : cic.Term) -> matita_basics_types.option -> cic.prop, (forall None : cic.Term -> Q None A, forall x : cic.Term, forall A : univs.Type0, forall H_Some : (x : x) -> (A -> cic.Term) -> Q (matita_basics_types.Some x) A, forall x : cic.Term, forall A : univs.Type0, forall x : cic.Term, forall A : univs.Type0, forall Q : (x : cic.Term) -> matita_basics_types.option -> cic.prop, (forall None : cic.Term -> Q None A, forall x : cic.Term, forall A : univs.Type0, forall H_Some : (x : x) -> (A -> cic.Term) -> Q (matita_basics_types.Some x) A)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nNot_rect_Type3. Let $_A$ be an element of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_88$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type3$. Let $_H_nmk$ be a function from functions $x_89$ from elements $__$ of $cic.Term$ of $cic.prop$ and $_A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.False$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_logic.nmk$ applied to $_A$ and $x_89$. Then for all elements $x_88$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $_A$, $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_88$.\nassistant\n", "label": "Not_rect_Type3 : _A : cic.Univ cic.prop -> Q_ : (_x_88 : cic.Term cic.prop (matita_basics_logic.Not _A) -> cic.Univ univs.Type3) -> _H_nmk : (x_89 : (__ : cic.Term cic.prop _A -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term univs.Type3 (Q_ (matita_basics_logic.nmk _A x_89))) -> x_88 : cic.Term cic.prop (matita_basics_logic.Not _A) -> cic.Term univs.Type3 (Q_ x_88) .", "predict": "not_rect_Type3 : (A : cic.Univ (cic.prop)) -> (Q_ : (x_88 : cic.Term (cic.prop)) -> matita_basics_logic.Not A) -> (H_nmk : (x_89 : (x : cic.Term (cic.prop)) -> A) -> matita_basics_logic.False) -> (x_88 : cic.Term (cic.prop)) -> matita_basics_logic.Not (A) -> cic.Term (univs.Type3) (Q_ x_88) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nDivides_to_congruent. Låt $n$ och $m$ och $p$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $p$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $m$ och $n$. Låt $__2$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $p$ och $matita_arithmetics_nat.minus$ applicerat på $n$ och $m$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_congruence.congruent$ applicerat på $n$ och $m$ och $p$.\nassistant\n", "label": "postulate divides_to_congruent : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le m n)) -> (__2 : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.minus n m))) -> cic.Term cic.prop (matita_arithmetics_congruence.congruent n m p)", "predict": "postulate divides_to_congruent : (n : Nat) -> (m : Nat) -> (p : Nat) -> Prop -> (__) -> (__) -> (__) -> congruent n m p"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nTimes_body. För alla element $__$ och $__1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $univs.Type0$ och $matita_arithmetics_nat.nat$.\nassistant\n", "label": "times_body : __ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_arithmetics_nat.nat .", "predict": "times_body : forall (x : univs.Type0) (y : matita_arithmetics_nat.nat), cic.Term (univs.Type0) (matita_arithmetics_nat.nat) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nDecidable_mem_nat. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.decidable$ appliqué à $matita_basics_lists_list.mem$ appliqué à $matita_arithmetics_nat.nat$ et $n$ et $l$.\nassistant\n", "label": "postulate decidable_mem_nat : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) -> cic.Term cic.prop (matita_basics_logic.decidable (matita_basics_lists_list.mem matita_arithmetics_nat.nat n l))", "predict": "postulate decidable_mem_nat : (n : cic.Term univs.Type0) -> (l : matita_basics_lists_list.list (matita_arithmetics_nat.nat)) -> cic.prop (matita_basics_logic.decidable (matita_basics_lists_list.mem (matita_arithmetics_nat.nat) n l))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nEqb_n_n. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_nat.eqb$ appliqué à $n$ et $n$ et $matita_basics_bool.true$.\nassistant\n", "label": "axiom eqb_n_n (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_nat.eqb n n) matita_basics_bool.true)", "predict": "axiom eqb_n_n (n : Term univs.Type0 ∧ nat) : prop (eq (lift univs.Type0 univs.Type2) (bool (eqb n n)) true)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nNat_inv_rect_Type0. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $P$ be a function from elements $_z683$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Univ$ of $univs.Type0$. Let $_H1$ be a function from elements $_z684$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $Hterm$ and $matita_arithmetics_nat.O$ to elements of $cic.Term$ of $univs.Type0$ and $P$ applied to $matita_arithmetics_nat.O$. Let $_H2$ be a function from elements $x_390$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_x_392$ from elements $_z684$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $Hterm$ and $x_390$ to elements of $cic.Term$ of $univs.Type0$ and $P$ applied to $x_390$ and elements $_z684$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $Hterm$ and $matita_arithmetics_nat.S$ applied to $x_390$ to elements of $cic.Term$ of $univs.Type0$ and $P$ applied to $matita_arithmetics_nat.S$ applied to $x_390$. Then $cic.Term$ holds for $univs.Type0$ and $P$ applied to $Hterm$.\nassistant\n", "label": "nat_inv_rect_Type0 : Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat -> P : (_z683 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Univ univs.Type0) -> _H1 : (_z684 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm matita_arithmetics_nat.O) -> cic.Term univs.Type0 (P matita_arithmetics_nat.O)) -> _H2 : (x_390 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _x_392 : (_z684 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm x_390) -> cic.Term univs.Type0 (P x_390)) -> _z684 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm (matita_arithmetics_nat.S x_390)) -> cic.Term univs.Type0 (P (matita_arithmetics_nat.S x_390))) -> cic.Term univs.Type0 (P Hterm) .", "predict": "nat_inv_rect_Type0 : (Hterm : Term Type0) -> (P : (z683 : Term Type0) -> (nat : Nat) -> Proof (Eq (lift Type0 Type2) (O : Nat))) -> Proof (Eq (H1 : (z684 : Term prop) -> (Eq (lift Type0 Type2) (O : Nat)) -> Term Type0) (P (O : Nat))) -> (x390 : Term Type0) -> (x392 : (z684 : Term prop) -> (Eq (lift Type0 Type2) (O : Nat)) -> Term Type0) -> Proof (Eq (H2 : (x390 : Term Type0) -> (nat : Nat) -> Proof (Eq (lift Type0 Type2) (O : Nat)) -> Term Type0) (P (x390 : Nat) (z684 : Term prop) (Eq (lift Type0 Type2) (O : Nat)))) -> Proof (Eq (H : (Hterm : Term Type0) -> Proof (Eq (lift Type0 Type2) (O : Nat))) (P (Hterm : Nat))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nLeq_sqrt_n. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_sqrt.sqrt$ appliqué à $n$ et $matita_arithmetics_sqrt.sqrt$ appliqué à $n$ et $n$.\nassistant\n", "label": "postulate leq_sqrt_n : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times (matita_arithmetics_sqrt.sqrt n) (matita_arithmetics_sqrt.sqrt n)) n)", "predict": "postulate leq_sqrt_n : (n : Nat) -> Prop\npostulate leq : (x : Real) -> (y : Real) -> Prop\npostulate times : (x : Real) -> (y : Real) -> Real\npostulate sqrt : (x : Real) -> Real"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nLstar_r_inv_lstar. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $R$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $B$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $b1$ och $b2$ av $cic.Term$ av $univs.Type0$ och $B$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar_r$ applicerat på $B$ och $R$ och $l$ och $b1$ och $b2$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $R$ och $l$ och $b1$ och $b2$.\nassistant\n", "label": "postulate lstar_r_inv_lstar : (B : cic.Univ univs.Type0) -> (R : cic.Term univs.Type0 (matita_basics_relations.relation B)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b2 : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B R l b1 b2)) -> cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b2)", "predict": "postulate lstar_r_inv_lstar : (B : Univ) -> (R : Term (relation (Type0 B))) -> (l : Nat) -> (b1 : Term (Type0 B)) -> (b2 : Term (Type0 B)) -> Prop (lstar_r B R l b1 b2)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nTrue_inv_rect_CProp3. Låt $Hterm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$. Låt $P$ vara en funktion från element $_z167$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H1$ från element $_z168$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_basics_logic.True$ och $Hterm$ och $matita_basics_logic.I$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_logic.I$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "True_inv_rect_CProp3 : Hterm : cic.Term cic.prop matita_basics_logic.True -> P : (_z167 : cic.Term cic.prop matita_basics_logic.True -> cic.Univ cic.prop) -> _H1 : (_z168 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 matita_basics_logic.True) Hterm matita_basics_logic.I) -> cic.Term cic.prop (P matita_basics_logic.I)) -> cic.Term cic.prop (P Hterm) .", "predict": "true_inv_rect_CProp3 : (Hterm : Elem (cic Term (cic prop) (matita_basics_logic True))) -> (P : (z167 : Elem (cic Term (cic prop) (matita_basics_logic True))) -> Univ (cic prop)) -> Proof (forall (H1 : (z168 : Elem (cic Term (cic prop) (matita_basics_logic eq))) (lift (cic prop) (univs Type2) (matita_basics_logic True) Hterm (matita_basics_logic I))) (Eq (cic Term (cic prop) (P (matita_basics_logic I))) (H1))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nFst. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $_xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $A$ et $B$, $cic.Term$ tient pour $univs.Type0$ et $A$.\nassistant\n", "label": "postulate fst : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (_xxx : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> cic.Term univs.Type0 A", "predict": "postulate fst : (A : univs.Type0) -> (B : univs.Type0) -> cic.Term (matita_basics_types.Prod A B) -> univs.Type0 -> cic.Term univs.Type0"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nDiv_mod_spec_ind_body. Låt $_n$ och $_m$ och $_q$ och $_r$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Q_$ vara en funktion från element $_x_809$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_div_mod_spec_intro$ vara en funktion från element $x_811$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $_r$ och $_m$ och element $x_810$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $_n$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $_q$ och $_m$ och $_r$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ och $x_811$ och $x_810$. Då för alla element $x_809$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_809$.\nassistant\n", "label": "div_mod_spec_ind_body : _n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _q : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _r : cic.Term univs.Type0 matita_arithmetics_nat.nat -> Q_ : (_x_809 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r) -> cic.Univ cic.prop) -> _H_div_mod_spec_intro : (x_811 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m) -> x_810 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r)) -> cic.Term cic.prop (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_811 x_810))) -> x_809 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r) -> cic.Term cic.prop (Q_ x_809) .", "predict": "div_mod_spec_ind_body : n : Elem (Term (univs Type0)) -> m : Elem (Term (univs Type0)) -> q : Elem (Term (univs Type0)) -> r : Elem (Term (univs Type0)) -> Q_ : (x_809 : Term (prop)) -> (div_mod_spec n m q r) -> Univ (prop) -> Proof (and (Lt r m) (Eq (lift (Type0) (Type2)) (nat)) (n (plus (times q m) r))) -> Proof (Q_ (div_mod_spec_intro n m q r) x_809)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nRange_rect_CProp5. For all elements $_A$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_931$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_range$ from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_931$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_931$.\nassistant\n", "label": "axiom range_rect_CProp5 (_A : cic.Univ univs.Type0) (Q_ : (_x_931 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ cic.prop) (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) (x_931 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) : cic.Term cic.prop (Q_ x_931)", "predict": "axiom range_rect_CProp5 (A : Univ) (Q : x : Term Type0 → Range A → Prop) (H_mk_range : enum : ∀ x : Term Type0 → Nat → Term Type0) (A : Nat) (upto : Nat) (filter : ∀ x : Term Type0 → Nat → Bool) : ∀ x : Term Type0, Q x (range A)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nBigop_I_gen. Soient $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $p$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Soit $nil$ un élément de $cic.Term$ de $univs.Type0$ et de $B$. Alors pour tous les éléments $op$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $B$ et $nil$, pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $a$ et $b$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $B$ et $matita_arithmetics_bigops.bigop$ appliqué à $matita_arithmetics_nat.minus$ appliqué à $b$ et $a$ et la fonction qui envoie $i$ à la fonction qui envoie $i0$ à $p$ appliqué à $i0$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $i$ et $a$ et $B$ et $nil$ et $matita_arithmetics_bigops.op$ appliqué à $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à la fonction qui envoie $i0$ à $f$ appliqué à $i0$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $i$ et $a$ et $matita_arithmetics_bigops.bigop$ appliqué à $b$ et la fonction qui envoie $i$ à $matita_basics_bool.andb$ appliqué à $matita_arithmetics_nat.leb$ appliqué à $a$ et $i$ et $p$ appliqué à $i$ et $B$ et $nil$ et $matita_arithmetics_bigops.op$ appliqué à $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à $f$ appliqué à $i$.\nassistant\n", "label": "axiom bigop_I_gen (a b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (B : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 B) (op : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop B nil)) (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) (__ : cic.Term cic.prop (matita_arithmetics_nat.le a b)) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.minus b a) (λ i => (λ i0 => p i0) (matita_arithmetics_nat.plus i a)) B nil (matita_arithmetics_bigops.op B nil op) (λ i => (λ i0 => f i0) (matita_arithmetics_nat.plus i a))) (matita_arithmetics_bigops.bigop b (λ i => matita_basics_bool.andb (matita_arithmetics_nat.leb a i) (p i)) B nil (matita_arithmetics_bigops.op B nil op) (λ i => f i)))", "predict": "axiom bigop_I_gen (a b : matita_arithmetics_nat.nat) (p : ∀ i : cic.Term (univs.Type0), ∀ j : matita_arithmetics_nat.nat, p i j → cic.Term (univs.Type0)) (B : cic.Univ (univs.Type0)) (nil : cic.Term (univs.Type0) × B) : ∀ op : matita_arithmetics_bigops.Aop (B × nil), ∀ f : ∀ i : cic.Term (univs.Type0), ∀ j : matita_arithmetics_nat.nat, f i j → cic.Term (univs.Type0) × B, ∀ i : cic.prop (matita_arithmetics_nat.le a b), ∀ i0 : cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) B), ∀ i : cic.prop (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.minus b a) (p i (matita_arithmetics_nat.plus i a))) (B × nil) (op (B × nil) op (f i (matita_arithmetics_nat.plus i a))) (matita_arithmetics_bigops.bigop b (f i (matita_arithmetics_nat.plus i a))) (matita_arithmetics_bigops.op (B × nil) op (op (B × nil))) (f i (matita_arithmetics_nat.plus i a))) : ∀ i : cic.prop (matita_basics_logic.andb (matita_arithmetics_nat.leb a i) (p i (f i (matita_arithmetics_nat.plus i a)))) (B × nil) (op (B × nil)) (op (B × nil)) (f i (matita_arithmetics_nat.plus i a)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nLet_clause_1033. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $len$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $p$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $lep$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_sqrt.sqrt$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $p$, pour tous les éléments $ltp$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $p$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $Hc$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_nat.leb$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_chebyshev_bertrand.k$ appliqué à $matita_arithmetics_nat", "label": "postulate let_clause_1033 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (len : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))) n)) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (lep : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_sqrt.sqrt (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) p)) -> (ltp : cic.Term cic.prop (matita_arithmetics_nat.lt p (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)))) -> (Hc : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_nat.leb (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_chebyshev_bertrand.k (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S mat", "predict": ".S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $Hd$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_nat.leb$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_chebyshev_bertrand.k$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $p$, pour tous les éléments $Hg$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_nat.leb$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_chebyshev_bertrand.k$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $p$, pour tous les éléments $Hh$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_nat.leb$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_chebyshev_bertrand.k$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nFlatten_to_mem. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $l1$ et $l2$ et $a$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour toutes les fonctions $__1$ des éléments $x$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.mem$ appliqué à $matita_basics_lists_list.list$ appliqué à $A$ et $x$ et $l$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_lists_list.length$ appliqué à $A$ et $x$ et $n$, pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_lists_list.length$ appliqué à $A$ et $a$ et $n$, pour tous les éléments $__3$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic", "label": "Axiom flatten_to_mem : forall A : cic.Univ univs.Type0, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall l : cic.Term univs.Type0 (matita_basics_lists_list.list (matita_basics_lists_list.list A)), forall l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall a : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall __1 : ((x : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__1 : cic.Term cic.prop (matita_basics_lists_list.mem (matita_basics_lists_list.list A) x l)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A x) n)), forall __2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A a) n), forall __3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.flatten A l) (matita_basics_lists_list.append A l1 (matita_basics_lists_list.append A a l2))), forall __4 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (fun q => matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l1) (matita_arithmetics_nat.times n q))), cic.Term cic.prop (matita_basics_lists_list.mem (matita_basics_lists_list.list A) a l) .", "predict": ".lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_lists_list.length$ appliqué à $A$ et $a$ et $l1$ et $l2$, pour tous les éléments $__4$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_lists_list.length$ appliqué à $A$ et $a$ et $l$ et $l1$ et $l2$, pour tous les éléments $x$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $y$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $w$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $v$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $u$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $t$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $s$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $r$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $q$ de $"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nSig_inv_rect_CProp1. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Univ$ of $cic.prop$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $x1$ and $x2$. Then for all functions $P$ from elements $_z1224$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $x2$ applied to $pi1$ and elements $_z1225$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Sig$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.mk_Sig$ applied to $x1$ and $x2$ and $pi1$ and $_pi2$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.mk_Sig$ applied to $x1$ and $x2$ and $pi1$ and $_pi2$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "axiom Sig_inv_rect_CProp1 (x1 : cic.Univ univs.Type0) (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ cic.prop) (Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) (P : (_z1224 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> cic.Univ cic.prop) (_H1 : (pi1 : cic.Term univs.Type0 x1) -> (_pi2 : cic.Term cic.prop (x2 pi1)) -> (_z1225 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2)) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) : cic.Term cic.prop (P Hterm)", "predict": "axiom sig_inv_rect_CProp1 (x1 : Univ Type0) (x2 : Term Type0 → Univ prop) : Hterm : Term Type0 → Sig x1 x2 → ∀ P : Term Type0 → Sig x1 x2 → ∀ pi1 : Term Type0 → x1 → pi2 : Term prop → x2 pi1 → z1224 : Term prop → eq (lift Type0 Type2) (Sig x1 x2) Hterm (mk_Sig x1 x2 pi1 pi2) P (mk_Sig x1 x2 pi1 pi2) : prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nLstar_ind_l_aux. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Soit $R$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour tous les éléments $b2$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $P$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation2$ appliqué à $matita_arithmetics_nat.nat$ et $B$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_nat.O$ et $b2$, pour toutes les fonctions $__1$ des éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $b1$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $R$ appliqué à $b1$ et $b$ et des éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $R$ et $l$ et $b$ et $b2$ et des éléments $__3$ de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $l$ et $b$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $l$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $b1$, pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $b1$ et $b$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $R$ et $l$ et $b1$ et $b$, pour tous les éléments $__3$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à", "label": "lstar_ind_l_aux : B : cic.Univ univs.Type0 -> R : (__ : cic.Term univs.Type0 B -> __1 : cic.Term univs.Type0 B -> cic.Univ cic.prop) -> b2 : cic.Term univs.Type0 B -> P : cic.Term univs.Type0 (matita_basics_relations.relation2 matita_arithmetics_nat.nat B) -> __ : cic.Term cic.prop (P matita_arithmetics_nat.O b2) -> __1 : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b1 : cic.Term univs.Type0 B -> b : cic.Term univs.Type0 B -> __1 : cic.Term cic.prop (R b1 b) -> __2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b b2) -> __3 : cic.Term cic.prop (P l b) -> cic.Term cic.prop (P (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1)) -> l : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b1 : cic.Term univs.Type0 B -> b : cic.Term univs.Type0 B -> __2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b) -> __3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) b b2) -> cic.Term cic.prop (P l b1) .", "predict": " $b$ et $b1$, pour tous les éléments $b$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $b1$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $b2$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $P$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation2$ appliqué à $matita_arithmetics_nat.nat$ et $B$, pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $b1$ et $b$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $b2$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $P$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation2$ appliqué à $matita_arithmetics_nat.nat$ et $B$, pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $b1$ et $b$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $b2$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $P$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation2$ appliqué à $matita_arithmetics_nat.nat$ et $B$, pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $b1$ et $b$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $b2$ de $cic.Term$ de $univs.Type0$ et de $B$, pour"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nRange_rect_CProp0_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_939$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $_H_mk_range$ from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_939$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_939$.\nassistant\n", "label": "range_rect_CProp0_body : _A : cic.Univ univs.Type0 -> Q_ : (_x_939 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Univ cic.prop) -> _H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 _A) -> _upto : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> x_939 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Term cic.prop (Q_ x_939) .", "predict": "range_rect_CProp0_body : (A : univs.Type0) -> (Q_ : (x_939 : cic.Term) -> univs.Univ -> cic.prop) -> Proof (forall (H_mk_range : (e : enum (univs.Type0)) -> matita_arithmetics_nat.nat -> cic.Term) (A : univs.Type0) (upto : matita_arithmetics_nat.nat) (filter : (e : cic.Term) -> matita_arithmetics_nat.nat -> matita_basics_bool.bool) -> cic.Term) -> Proof (forall (x_939 : cic.Term) (range_A : matita_arithmetics_bigops.range A) (cic.Term) (cic.prop) (Q_ x_939)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nLstar_inv_S. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $R$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $B$. Let $l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $b1$ and $b2$ be elements of $cic.Term$ of $univs.Type0$ and $B$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $l$ and $b1$ and $b2$, for all elements $l0$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.plus$ applied to $l0$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $l$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.ex2$ applied to $B$ and the function that maps $b$ to $R$ applied to $b1$ and $b$ and the function that maps $b$ to $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $l0$ and $b$ and $b2$.\nassistant\n", "label": "lstar_inv_S : B : cic.Univ univs.Type0 -> R : cic.Term univs.Type0 (matita_basics_relations.relation B) -> l : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b1 : cic.Term univs.Type0 B -> b2 : cic.Term univs.Type0 B -> __ : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b2) -> l0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.plus l0 (matita_arithmetics_nat.S matita_arithmetics_nat.O)) l) -> cic.Term cic.prop (matita_basics_logic.ex2 B (b : cic.Term univs.Type0 B => R b1 b) (b : cic.Term univs.Type0 B => matita_arithmetics_lstar.lstar B R l0 b b2)) .", "predict": "lstar_inv_S : (B : Elem (univs Type0)) -> (R : Term (univs Type0) (relation B)) -> (l : Term (univs Type0) (nat)) -> (b1 : Term (univs Type0) B) -> (b2 : Term (univs Type0) B) -> Proof (forall (x : Term (cic prop) (lstar B R l b1 b2)) (forall (l0 : Term (univs Type0) (nat)) (forall (x1 : Term (cic prop) (eq (lift (univs Type0) (univs Type2)) (nat))) (forall (x2 : Term (cic prop) (plus (nat) (S (O (nat))) l)) (Term (cic prop) (ex2 B (fun b => R b1 (b)) (fun b => lstar B R l0 b b2)))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nEq_rect_CProp0_body. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Let $_x$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $Q_$ be a function from elements $x_37$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $_x_38$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_37$ to elements of $cic.Univ$ of $cic.prop$. Then for all elements $_H_refl$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $_x$ and $matita_basics_logic.refl$ applied to $A$ and $_x$, for all elements $x_37$ of $cic.Term$ of $univs.Type2$ and $A$, for all elements $x_38$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_37$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_37$ and $x_38$.\nassistant\n", "label": "axiom eq_rect_CProp0_body (A : cic.Univ univs.Type2) (_x : cic.Term univs.Type2 A) (Q_ : (x_37 : cic.Term univs.Type2 A) -> (_x_38 : cic.Term cic.prop (matita_basics_logic.eq A _x x_37)) -> cic.Univ cic.prop) (_H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x))) (x_37 : cic.Term univs.Type2 A) (x_38 : cic.Term cic.prop (matita_basics_logic.eq A _x x_37)) : cic.Term cic.prop (Q_ x_37 x_38)", "predict": "axiom eq_rect_CProp0_body (A : Univ) (x : Term Type2 A) (Q : (x37 : Term Type2 A) → (x38 : Prop) → eq A x x37 → Prop) : ∀ H_refl : Prop, Q x (refl A x) → ∀ x37 : Term Type2 A, ∀ x38 : Prop, Q x37 x38"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nLe_plus_a. Soient $a$ et $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $n$ et $matita_arithmetics_nat.plus$ appliqué à $a$ et $m$.\nassistant\n", "label": "axiom le_plus_a (a n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.le n m)) : cic.Term cic.prop (matita_arithmetics_nat.le n (matita_arithmetics_nat.plus a m))", "predict": "axiom le_plus_a (a n m : Term Type0) (p : le n m) : prop (le n (plus a m))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nACop_rect_CProp3_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_907$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_ACop$ vara en funktion från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$. Då för alla element $x_907$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_907$.\nassistant\n", "label": "axiom ACop_rect_CProp3_body (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_907 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop) (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) (x_907 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) : cic.Term cic.prop (Q_ x_907)", "predict": "axiom acop_rect_cprop3_body (A : univs.Type0) (nil : Term univs.Type0 A) (Q : (x : Term univs.Type0) → ACop A nil → prop) (H_mk_ACop : (aop : Term univs.Type0) → Aop aop nil → (a : Term univs.Type0) → (b : Term univs.Type0) → eq (lift univs.Type0 univs.Type2 A) (op A nil aop a b) (op A nil aop b a) → prop) (comm : (a : Term univs.Type0) → A → (b : Term univs.Type0) → A → prop) : ∀ x : Term univs.Type0 → ACop A nil → prop := λ x, Q x (acop A nil)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nLe_priml. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_log.log$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_chebyshev_chebyshev_psi.prim$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$.\nassistant\n", "label": "postulate le_priml : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_log.log (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) (matita_arithmetics_nat.S (matita_arithmetics_chebyshev_chebyshev_psi.prim (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)))))", "predict": "postulate le_priml : (n : Term Type0) -> (x : Nat) -> Prop -> Lt O n -> Le (times (plus (plus (S (S O)) n)) (times (plus (plus (S (S O)) n) (log (times (plus (plus (S (S O)) n)) (times (plus (plus (S (S O)) n) (psi (times (plus (plus (S (S O)) n)) (times (plus (plus (S (S O)) n) (O))))) (times (plus (plus (S (S O)) n) (times (plus (plus (S (S O)) n) (O)))))) (times (plus (plus (S (S O)) n) (times (plus (plus (S (S O)) n) (O)))))) (plus (plus (S (S O)) n) (times (plus (plus (S (S O)) n) (O)))))) (Le (times (plus (plus (S (S O)) n)) (times (plus (plus (S (S O)) n) (times (plus (plus (S (S O)) n) (O))))) (times (plus (plus (S (S O)) n) (times (plus (plus (S (S O)) n) (O)))))) (prim (times (plus (plus (S (S O)) n)) (times (plus (plus (S (S O)) n) (O))))))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nOr_ind. Let $_A$ and $_B$ be elements of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_170$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $_H_or_introl$ from elements $x_171$ of $cic.Term$ of $cic.prop$ and $_A$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_logic.or_introl$ applied to $_A$ and $_B$ and $x_171$, for all functions $_H_or_intror$ from elements $x_172$ of $cic.Term$ of $cic.prop$ and $_B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_logic.or_intror$ applied to $_A$ and $_B$ and $x_172$, for all elements $x_170$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $_A$ and $_B$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_170$.\nassistant\n", "label": "Axiom Or_ind : forall _A : cic.Univ cic.prop, forall _B : cic.Univ cic.prop, forall Q_ : ((_x_170 : cic.Term cic.prop (matita_basics_logic.Or _A _B)) -> cic.Univ cic.prop), forall _H_or_introl : ((x_171 : cic.Term cic.prop _A) -> cic.Term cic.prop (Q_ (matita_basics_logic.or_introl _A _B x_171))), forall _H_or_intror : ((x_172 : cic.Term cic.prop _B) -> cic.Term cic.prop (Q_ (matita_basics_logic.or_intror _A _B x_172))), forall x_170 : cic.Term cic.prop (matita_basics_logic.Or _A _B), cic.Term cic.prop (Q_ x_170) .", "predict": "Axiom or_ind : forall A : Prop, forall B : Prop, forall Q : (x : Term Prop) -> Or A B -> Prop, forall H_or_introl : (x : Term Prop) -> A -> Q (or_introl A B x) -> forall H_or_intror : (x : Term Prop) -> B -> Q (or_intror A B x) -> forall x : Term Prop, Q (or A B x) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nR3. Soit $T0$ un élément de $cic.Univ$ de $univs.Type0$. Soit $a0$ un élément de $cic.Term$ de $univs.Type0$ et de $T0$. Soit $T1$ une fonction des éléments $x0$ de $cic.Term$ de $univs.Type0$ et de $T0$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $x0$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $a1$ un élément de $cic.Term$ de $univs.Type0$ et de $T1$ appliqué à $a0$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$. Soit $T2$ une fonction des éléments $x0$ de $cic.Term$ de $univs.Type0$ et de $T0$ et des éléments $p0$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $x0$ et des éléments $x1$ de $cic.Term$ de $univs.Type0$ et de $T1$ appliqué à $x0$ et $p0$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T1$ appliqué à $x0$ et $p0$ et $matita_basics_logic.R1$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $T1$ et $a1$ et $x0$ et $p0$ et $x1$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $a2$ un élément de $cic.Term$ de $univs.Type0$ et de $T2$ appliqué à $a0$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $a1$ et $", "label": "Axiom R3 : forall T0 : cic.Univ univs.Type0, forall a0 : cic.Term univs.Type0 T0, forall T1 : ((x0 : cic.Term univs.Type0 T0) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> cic.Univ univs.Type0), forall a1 : cic.Term univs.Type0 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0)), forall T2 : ((x0 : cic.Term univs.Type0 T0) -> (p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> (x1 : cic.Term univs.Type0 (T1 x0 p0)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T1 x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 T0) a0 T1 a1 x0 p0) x1)) -> cic.Univ univs.Type0), forall a2 : cic.Term univs.Type0 (T2 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0) a1 (matita_b", "predict": "matita_basics_logic.R1$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $T1$ et $a1$ et $x0$ et $p0$ et $x1$.\nAxiom r3 : forall T0 : univs.Type0, forall a0 : cic.Term univs.Type0 T0, forall T1 : (x0 : cic.Term univs.Type0 T0) -> __ -> cic.Univ univs.Type0, forall a1 : cic.Term univs.Type0 (T1 a0) (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0 a0)), forall T2 : (x0 : cic.Term univs.Type0 T0) -> (p0 : cic.Term univs.prop (cic.eq (cic.lift univs.Type0 univs.Type2 T0 a0) x0)) -> (x1 : cic.Term univs.Type0 (T1 x0 p0)) -> __ -> cic.Univ univs.Type0, forall a2 : cic.Term univs.Type0 (T2 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0 a0)) (a1 (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 T0 a0) (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0 a0))) (x0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0 a0))) (p0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0 a0))) (x1 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0 a0)))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nFalse_rect_CProp2. Soit $Q_$ une fonction des éléments $_x_76$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour tous les éléments $x_76$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_76$.\nassistant\n", "label": "False_rect_CProp2 : Q_ : (_x_76 : cic.Term cic.prop matita_basics_logic.False -> cic.Univ cic.prop) -> x_76 : cic.Term cic.prop matita_basics_logic.False -> cic.Term cic.prop (Q_ x_76) .", "predict": "false_rect_CProp2 : (Q : Elem (cic.prop (cic.Term (cic.prop))) (matita_basics_logic.False)) -> Proof (forall (x_76 : Elem (cic.Term (cic.prop))) (Q x_76)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nDivides_fact_to_le. Let $p$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.prime$ applied to $p$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $p$ and $matita_arithmetics_factorial.fact$ applied to $n$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $p$ and $n$.\nassistant\n", "label": "Axiom divides_fact_to_le : forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_primes.prime p), forall __1 : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_factorial.fact n)), cic.Term cic.prop (matita_arithmetics_nat.le p n) .", "predict": "Axiom divides_fact_to_le : forall p : Type0, forall n : nat, (prime p -> divides p (fact n) -> le p n) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nEq_to_bijn. Låt $f$ och $g$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara en funktion från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $i$ och $n$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $f$ applicerat på $i$ och $g$ applicerat på $i$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_permutation.bijn$ applicerat på $f$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_permutation.bijn$ applicerat på $g$ och $n$.\nassistant\n", "label": "postulate eq_to_bijn : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (g : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le i n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f i) (g i))) -> (__1 : cic.Term cic.prop (matita_arithmetics_permutation.bijn f n)) -> cic.Term cic.prop (matita_arithmetics_permutation.bijn g n)", "predict": "postulate eq_to_bijn : (f : Term Type0 Nat) -> (g : Term Type0 Nat) -> (n : Nat) -> (i : Term Type0 Nat) -> Proof (Leq (bijn f n) (Eq (lift Type0 Type2) (f i) (g i))) -> Proof (forall (bijn g n) (Eq (bijn f n)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nAll_below. Let $_l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $matita_arithmetics_nat.nat$. Then for all elements $_n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Univ$ holds for $cic.prop$.\nassistant\n", "label": "postulate all_below : (_l : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) -> (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop", "predict": "postulate all_below : (l : Term Type0 (list Nat)) -> (n : Term Type0 Nat) -> Univ (prop)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nSig_rect_CProp1_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $Q_$ des éléments $_x_686$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_Sig$ des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $_f$ appliqué à $pi1$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $A$ et $_f$ et $pi1$ et $_pi2$, pour tous les éléments $x_686$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_686$.\nassistant\n", "label": "Sig_rect_CProp1_body : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> Q_ : (_x_686 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) -> cic.Univ cic.prop) -> _H_mk_Sig : (pi1 : cic.Term univs.Type0 A -> _pi2 : cic.Term cic.prop (_f pi1) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> x_686 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) -> cic.Term cic.prop (Q_ x_686) .", "predict": "sig_rect_CProp1_body : (A : Elem (univs Type0)) -> (f : Elem (cic Term) Type0 -> Elem (cic Univ) (cic prop)) -> Proof (forall (Q_ : (x_686 : Elem (cic Term) Type0) -> Sig (A) (f x_686)) (forall (pi1 : Elem (cic Term) Type0) (pi2 : Elem (cic Term) (cic prop)) (f pi1) (Q_ (matita_basics_types mk_Sig A f pi1 pi2))) (forall (x_686 : Elem (cic Term) Type0) (matita_basics_types Sig A f) (cic Term) (cic prop) (Q_ x_686))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nAnd_ind_body. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $Q_$ des éléments $_x_118$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_conj$ des éléments $x_120$ de $cic.Term$ de $cic.prop$ et de $_A$ et des éléments $x_119$ de $cic.Term$ de $cic.prop$ et de $_B$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_logic.conj$ appliqué à $_A$ et $_B$ et $x_120$ et $x_119$, pour tous les éléments $x_118$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_118$.\nassistant\n", "label": "Axiom And_ind_body : forall _A : cic.Univ cic.prop, forall _B : cic.Univ cic.prop, forall Q_ : ((_x_118 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ cic.prop), forall _H_conj : ((x_120 : cic.Term cic.prop _A) -> (x_119 : cic.Term cic.prop _B) -> cic.Term cic.prop (Q_ (matita_basics_logic.conj _A _B x_120 x_119))), forall x_118 : cic.Term cic.prop (matita_basics_logic.And _A _B), cic.Term cic.prop (Q_ x_118) .", "predict": "Axiom and_ind_body : forall A : Prop, forall B : Prop, forall Q : forall x : Term Prop, (and A B : Univ Prop -> Prop) -> forall x : Term Prop, (and A B : Term Prop -> Prop) -> forall x : Term Prop, (and A B : Prop) -> (Q (conj A B) x) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nLe_pi. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $p$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $g1$ och $g2$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara en funktion från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $p$ applicerat på $i$ och $matita_basics_bool.true$ till element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $g1$ applicerat på $i$ och $g2$ applicerat på $i$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.times$ och funktionen som avbildar $i$ som $g1$ applicerat på $i$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $matita_arithmetics_nat", "label": "postulate le_pi : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (g1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (g2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_arithmetics_nat.le (g1 i) (g2 i))) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> g1 i)) (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> g2 i)))", "predict": ".nat$ och $matita_arithmetics_nat.plus$ och funktionen som avbildar $i$ som $g2$ applicerat på $i$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nDop_inv_rect_Type4. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be an element of $cic.Term$ of $univs.Type0$ and $x1$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $x1$ and $x2$. Then for all functions $P$ from elements $_z1704$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type4$, for all functions $_H1$ from elements $sum$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ and functions $prod$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $prod$ applied to $a$ and", "label": "Dop_inv_rect_Type4 : x1 : cic.Univ univs.Type0 -> x2 : cic.Term univs.Type0 x1 -> Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2) -> P : (_z1704 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2) -> cic.Univ univs.Type4) -> _H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2) -> prod : (__ : cic.Term univs.Type0 x1 -> __1 : cic.Term univs.Type0 x1 -> cic.Term univs.Type0 x1) -> _null : (a : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> _distr : (a : cic.Term univs.Type0 x1 -> b : cic.Term univs.Type0 x1 -> c : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> _z1705 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr)) -> cic.Term univs.Type4 (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term univs.Type4 (P Hterm) .", "predict": " $b$ and $c$ and $x2$ and $x2$ and functions $_plus$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $plus$ applied to $a$ and $b$ and $c$ and $x2$ and $x2$ and functions $_neg$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $neg$ applied to $a$ and $x2$ and $x2$ and functions $_minus$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $minus$ applied to $a$ and $b$ and $x2$ and $x2$, we have $Hterm$ and $P$ and $_H1$ and $prod$ and $_null$ and $distr$ and $plus$ and $neg$ and $minus$.\ndop_inv_rect_Type4 : (x1 : Elem (univs Type0) (cic Univ)) -> (x2 : Elem (univs Type0) (cic Term)) -> Proof (Hterm : Elem (univs Type0) (matita_arithmetics_bigops Dop (x1) ("}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nDivides_plus. För alla element $n$ och $p$ och $q$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $p$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $q$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $matita_arithmetics_nat.plus$ applicerat på $p$ och $q$.\nassistant\n", "label": "axiom divides_plus (n p q : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_primes.divides n p)) (__1 : cic.Term cic.prop (matita_arithmetics_primes.divides n q)) : cic.Term cic.prop (matita_arithmetics_primes.divides n (matita_arithmetics_nat.plus p q))", "predict": "axiom divides_plus (n p q : Term Type0) (x : divides n p) (y : divides n q) : divides n (plus p q)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nLstar_ind_r_aux. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $R$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $B$. Let $b1$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $P$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation2$ applied to $matita_arithmetics_nat.nat$ and $B$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.O$ and $b1$. Let $__1$ be a function from elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $b2$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $l$ and $b1$ and $b$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $R$ applied to $b$ and $b2$ and elements $__3$ of $cic.Term$ of $cic.prop$ and $P$ applied to $l$ and $b$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.plus$ applied to $l$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $b2$. Let $l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $b$ and $b2$ be elements of $cic.Term$ of $univs.Type0$ and $B$. Then for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $l$ and $b$ and $b2$, for all elements $__3$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $b$ and $b1$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $l$ and $b2$.\nassistant\n", "label": "Axiom lstar_ind_r_aux : forall B : cic.Univ univs.Type0, forall R : cic.Term univs.Type0 (matita_basics_relations.relation B), forall b1 : cic.Term univs.Type0 B, forall P : cic.Term univs.Type0 (matita_basics_relations.relation2 matita_arithmetics_nat.nat B), forall __ : cic.Term cic.prop (P matita_arithmetics_nat.O b1), forall __1 : ((l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 B) -> (b2 : cic.Term univs.Type0 B) -> (__1 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b)) -> (__2 : cic.Term cic.prop (R b b2)) -> (__3 : cic.Term cic.prop (P l b)) -> cic.Term cic.prop (P (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b2)), forall l : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 B, forall b2 : cic.Term univs.Type0 B, forall __2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b b2), forall __3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) b b1), cic.Term cic.prop (P l b2) .", "predict": "Axiom lstar_ind_r_aux : forall B : univs.Type0, forall R : matita_basics_relations.relation B, forall b1 : B, forall P : matita_basics_relations.relation2 (matita_arithmetics_nat.nat) B, forall $: prop (P (matita_arithmetics_nat.O) b1), forall $1 : (l : matita_arithmetics_nat.nat -> b : B -> b2 : B -> $ : prop (matita_arithmetics_lstar.lstar B R l b1 b b2) -> $2 : prop (R b b2) -> $3 : prop (P l b)) -> (l : matita_arithmetics_nat.nat -> b : B -> b2 : B -> $ : prop (P l b2)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nEq_rect_CProp5_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $_x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $Q_$ une fonction des éléments $x_25$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $_x_26$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_25$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_refl$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$. Soit $x_25$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $x_26$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_25$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_25$ et $x_26$.\nassistant\n", "label": "Axiom eq_rect_CProp5_body : forall A : cic.Univ univs.Type2, forall _x : cic.Term univs.Type2 A, forall Q_ : ((x_25 : cic.Term univs.Type2 A) -> (_x_26 : cic.Term cic.prop (matita_basics_logic.eq A _x x_25)) -> cic.Univ cic.prop), forall _H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x)), forall x_25 : cic.Term univs.Type2 A, forall x_26 : cic.Term cic.prop (matita_basics_logic.eq A _x x_25), cic.Term cic.prop (Q_ x_25 x_26) .", "predict": "Axiom eq_rect_CProp5_body : forall A : univs.Type2, forall x : cic.Term A, forall Q_ : x -> A -> cic.Term (cic.prop (matita_basics_logic.eq A x)), forall H_refl : Q_ x (matita_basics_logic.refl A x), forall x_25 : A, forall x_26 : cic.Term (cic.prop (matita_basics_logic.eq A x_25)), (Q_ x_25 x_26) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nDiv_mod_spec_rect_Type2_body. Soient $_n$ et $_m$ et $_q$ et $_r$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $Q_$ une fonction des éléments $_x_825$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $_n$ et $_m$ et $_q$ et $_r$ à des éléments de $cic.Univ$ de $univs.Type2$. Alors pour toutes les fonctions $_H_div_mod_spec_intro$ des éléments $x_827$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $_r$ et $_m$ et des éléments $x_826$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $_n$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $_q$ et $_m$ et $_r$ à des éléments de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_arithmetics_div_and_mod.div_mod_spec_intro$ appliqué à $_n$ et $_m$ et $_q$ et $_r$ et $x_827$ et $x_826$, pour tous les éléments $x_825$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $_n$ et $_m$ et $_q$ et $_r$, $cic.Term$ tient pour $univs.Type2$ et $Q_$ appliqué à $x_825$.\nassistant\n", "label": "div_mod_spec_rect_Type2_body : _n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _q : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _r : cic.Term univs.Type0 matita_arithmetics_nat.nat -> Q_ : (_x_825 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r) -> cic.Univ univs.Type2) -> _H_div_mod_spec_intro : (x_827 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m) -> x_826 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r)) -> cic.Term univs.Type2 (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_827 x_826))) -> x_825 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r) -> cic.Term univs.Type2 (Q_ x_825) .", "predict": "div_mod_spec_rect_Type2_body : n : Elem (Term (univs Type0)) -> m : Elem (Term (univs Type0)) -> q : Elem (Term (univs Type0)) -> r : Elem (Term (univs Type0)) -> Q_ : (x_825 : Elem (Term (univs Type0))) -> (div_mod_spec n m q r) -> Elem (Univ (univs Type2)) -> Proof (forall (x_827 : Elem (Term (cic prop))) (forall (x_826 : Elem (Term (cic prop))) (forall (x_825 : Elem (Term (univs Type0))) (Q_ (div_mod_spec_intro n m q r) x_827 x_826) (div_mod_spec n m q r) (forall (x_825 : Elem (Term (univs Type0))) (Q_ x_825)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nProd_inv_ind. Låt $x1$ och $x2$ vara element av $cic.Univ$ av $univs.Type0$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $x1$ och $x2$. Då för alla funktioner $P$ från element $_z1236$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $_fst$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_snd$ av $cic.Term$ av $univs.Type0$ och $x2$ och element $_z1237$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_Prod$ applicerat på $x1$ och $x2$ och $_fst$ och $_snd$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $x1$ och $x2$ och $_fst$ och $_snd$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "Axiom Prod_inv_ind : forall x1 : cic.Univ univs.Type0, forall x2 : cic.Univ univs.Type0, forall Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2), forall P : ((_z1236 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2)) -> cic.Univ cic.prop), forall _H1 : ((_fst : cic.Term univs.Type0 x1) -> (_snd : cic.Term univs.Type0 x2) -> (_z1237 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod x1 x2)) Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term cic.prop (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))), cic.Term cic.prop (P Hterm) .", "predict": "Axiom prod_inv_ind : forall x1 : univs.Type0, forall x2 : univs.Type0, forall Hterm : Prod x1 x2, forall P : Term (univs.Type0 -> Prod x1 x2 -> Univ), forall _H1 : Term (fst : Term univs.Type0 -> x1 -> snd : Term univs.Type0 -> x2 -> z1237 : Term cic.prop -> eq (lift univs.Type0 univs.Type2 (Prod x1 x2) Hterm) (mk_Prod x1 x2 (fst _H1) (snd _H1))) -> P (mk_Prod x1 x2 (fst _H1) (snd _H1)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nTrue_rect_Type3. Pour toutes les fonctions $Q_$ des éléments $_x_46$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$ à des éléments de $cic.Univ$ de $univs.Type3$, pour tous les éléments $_H_I$ de $cic.Term$ de $univs.Type3$ et de $Q_$ appliqué à $matita_basics_logic.I$, pour tous les éléments $x_46$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$, $cic.Term$ tient pour $univs.Type3$ et $Q_$ appliqué à $x_46$.\nassistant\n", "label": "Axiom True_rect_Type3 : forall Q_ : ((_x_46 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ univs.Type3), forall _H_I : cic.Term univs.Type3 (Q_ matita_basics_logic.I), forall x_46 : cic.Term cic.prop matita_basics_logic.True, cic.Term univs.Type3 (Q_ x_46) .", "predict": "Axiom true_rect_Type3 : forall Q : cic.Term (cic.prop -> matita_basics_logic.True -> univs.Type3), forall H_I : cic.Term (univs.Type3), forall I : matita_basics_logic.I, forall x_46 : cic.Term (cic.prop), Q x_46 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nTimes_div_le. Soient $a$ et $b$ et $c$ et $d$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $b$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $d$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_div_and_mod.div$ appliqué à $a$ et $b$ et $matita_arithmetics_div_and_mod.div$ appliqué à $c$ et $d$ et $matita_arithmetics_div_and_mod.div$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $c$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $d$.\nassistant\n", "label": "postulate times_div_le : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O b)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O d)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div a b) (matita_arithmetics_div_and_mod.div c d)) (matita_arithmetics_div_and_mod.div (matita_arithmetics_nat.times a c) (matita_arithmetics_nat.times b d)))", "predict": "postulate times_div_le : (a : Term Type0) -> (b : Nat) -> (c : Term Type0) -> (d : Nat) -> (p : Prop) -> (q : Prop) -> (r : Prop) -> and (Lt O b) (Lt O d) (Le (times (div a b) (div c d)) (times a c) (times b d))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nAop_ind_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all functions $Q_$ from elements $_x_861$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc", "label": "Axiom Aop_ind_body : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_861 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop), forall _H_mk_Aop : ((op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))), forall x_861 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil), cic.Term cic.prop (Q_ x_861) .", "predict": "$, the proposition $P$ holds."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nRange_rect_Type4. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_917$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type4$. Soit $_H_mk_range$ une fonction des fonctions $_enum$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_upto$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_filter$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_range$ appliqué à $_A$ et $_enum$ et $_upto$ et $_filter$. Soit $x_917$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$. Alors $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_917$.\nassistant\n", "label": "Axiom range_rect_Type4 : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_917 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type4), forall _H_mk_range : ((_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))), forall x_917 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A), cic.Term univs.Type4 (Q_ x_917) .", "predict": "Axiom range_rect_Type4 : forall A : Univ Type0, forall Q_ : x : Term Type0 -> range A -> Term Type0, forall H_mk_range : (enum : __ -> nat) -> A -> (upto : __ -> nat) -> (filter : __ -> nat -> bool) -> Term Type4, forall x_917 : Term Type0 -> range A, Q_ x_917 : Term Type4 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nEq_rect_CProp4. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Let $_x$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $Q_$ be a function from elements $x_22$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $_x_23$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_22$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_refl$ be an element of $cic.Term$ of $cic.prop$ and $Q_$ applied to $_x$ and $matita_basics_logic.refl$ applied to $A$ and $_x$. Let $x_22$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Then for all elements $x_23$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_22$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_22$ and $x_23$.\nassistant\n", "label": "eq_rect_CProp4 : A : cic.Univ univs.Type2 -> _x : cic.Term univs.Type2 A -> Q_ : (x_22 : cic.Term univs.Type2 A -> _x_23 : cic.Term cic.prop (matita_basics_logic.eq A _x x_22) -> cic.Univ cic.prop) -> _H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x)) -> x_22 : cic.Term univs.Type2 A -> x_23 : cic.Term cic.prop (matita_basics_logic.eq A _x x_22) -> cic.Term cic.prop (Q_ x_22 x_23) .", "predict": "eq_rect_CProp4 : (A : univs.Type2) -> (x : cic.Term univs.Type2 A) -> (Q_ : (x_22 : cic.Term univs.Type2 A) -> (x_23 : cic.Term (cic.prop)) -> matita_basics_logic.eq A x x_22) -> (H_refl : cic.Term (cic.prop) (Q_ x (matita_basics_logic.refl A x))) -> (x_22 : cic.Term univs.Type2 A) -> Proof (forall (x_23 : cic.Term (cic.prop)) (matita_basics_logic.eq A x x_22), (cic.Term (cic.prop) (Q_ x_22 x_23))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nACop_rect_CProp3. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_907$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_ACop$ vara en funktion från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$. Då för alla element $x_907$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_907$.\nassistant\n", "label": "axiom ACop_rect_CProp3 (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_907 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop) (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) (x_907 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) : cic.Term cic.prop (Q_ x_907)", "predict": "axiom acop_rect_cprop3 (A : univs.Type0) (nil : Term univs.Type0 A) (Q : ∀ x : Term univs.Type0 (acop A nil), prop) (H_mk_acop : ∀ aop : Term univs.Type0, A → prop) (comm : ∀ a : Term univs.Type0, A → ∀ b : Term univs.Type0, A, prop) : ∀ x : Term univs.Type0 (acop A nil), prop := Q (mk_acop A nil) (aop) (comm a b) (op A nil aop a b) (op A nil aop b a)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nMk_Aop. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $op$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$. Let $_nill$ be a function from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $nil$ and $a$ and $a$. Let $_nilr$ be a function from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $nil$ and $a$. Then for all functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$, $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $nil$.\nassistant\n", "label": "mk_Aop : A : cic.Univ univs.Type0 -> nil : cic.Term univs.Type0 A -> op : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _nill : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op nil a) a)) -> _nilr : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a nil) a)) -> _assoc : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A nil) .", "predict": "mk_aop : (A : Elem (univs Type0)) -> (nil : Term (univs Type0)) -> (op : (a : Term (univs Type0)) -> (A : Elem (univs Type0)) -> (b : Term (univs Type0)) -> (A : Elem (univs Type0)) -> Term (univs Type0)) -> (nill : (a : Term (univs Type0)) -> (A : Elem (univs Type0)) -> Prop (cic) (eq (lift (univs Type0) (univs Type2)) A) (op nil a) a)) -> (nilr : (a : Term (univs Type0)) -> (A : Elem (univs Type0)) -> Prop (cic) (eq (lift (univs Type0) (univs Type2)) A) (op a nil) a)) -> (assoc : (a : Term (univs Type0)) -> (A : Elem (univs Type0)) -> (b : Term (univs Type0)) -> (A : Elem (univs Type0)) -> (c : Term (univs Type0)) -> (A : Elem (univs Type0)) -> Prop (cic) (eq (lift (univs Type0) (univs Type2)) A) (op (op a b) c) (op (op a b) c))) -> Proof (forall (A : Elem (univs Type0)) (nil : Term (univs Type0)) (op : (a : Term (univs Type0)) -> (A : Elem (univs Type0)) -> (b : Term (univs Type0)) -> (A : Elem (univs Type0)) -> Term (univs Type0)) (nill : (a : Term (univs Type0)) -> (A : Elem (univs Type0)) -> Prop (cic) (eq (lift (univs Type0) (univs Type2)) A) (op nil a) a)) (nilr : (a : Term (univs Type0)) -> (A : Elem (univs Type0)) -> Prop (cic) (eq (lift (un"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nMatch_lstar. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_R$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $B$. Då för alla element $return_sort$ av $cic.Sort$, för alla funktioner $return_type$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__2$ av $cic.Term$ av $univs.Type0$ och $B$ och element $z$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $_R$ och $__$ och $__1$ och $__2$ till element av $cic.Univ$ av $return_sort$, för alla funktioner $case_lstar_O$ från element $b$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $matita_arithmetics_nat.O$ och $b$ och $b$ och $matita_arithmetics_lstar.lstar_O$ applicerat på $B$ och $_R$ och $b$, för alla funktioner $case_lstar_S$ från element $b1$ av $cic.Term$ av $univs.Type0$ och $B$ och element $b$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__$ av $cic.Term$ av $cic.prop$ och $_R$ applicerat på $b1$ och $b$ och element $l$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $b2$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $_R$ och $l$ och $b$ och $b2$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $matita_arithmetics_nat.plus$ applicerat på $l$ och $mat", "label": "Axiom match_lstar : forall B : cic.Univ univs.Type0, forall _R : cic.Term univs.Type0 (matita_basics_relations.relation B), forall return_sort : cic.Sort, forall return_type : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 B) -> (__2 : cic.Term univs.Type0 B) -> (z : cic.Term cic.prop (matita_arithmetics_lstar.lstar B _R __ __1 __2)) -> cic.Univ return_sort), forall case_lstar_O : ((b : cic.Term univs.Type0 B) -> cic.Term return_sort (return_type matita_arithmetics_nat.O b b (matita_arithmetics_lstar.lstar_O B _R b))), forall case_lstar_S : ((b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (_R b1 b)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b2 : cic.Term univs.Type0 B) -> (__1 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B _R l b b2)) -> cic.Term return_sort (return_type (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2 (matita_arithmetics_lstar.lstar_S B _R b1 b __ l b2 __1))), forall __ : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __1 : cic.Term univs.Type0 B, forall __2 : cic.Term univs.Type0 B, forall z : cic.Term cic.prop (matita_arithmetics_lstar.lstar B _R __ __1 __2), cic.Term return_sort (return_type __ __1 __2 z) .", "predict": "ita_arithmetics_nat.nat$ applicerat på $b$ och $b2$ et element de $cic.Univ$ de $return_sort$ ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nDop_rect_CProp5_body. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $_nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour toutes les fonctions $Q_$ des éléments $_x_959$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_Dop$ des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $_nil$ et $_nil$ et des fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $b$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $", "label": "Dop_rect_CProp5_body : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_959 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil) -> cic.Univ cic.prop) -> _H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> prod : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _null : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> _distr : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> x_959 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil) -> cic.Term cic.prop (Q_ x_959) .", "predict": "matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $_nil$ et $_nil$ et $sum$ et $b$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ est vraie."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nProd_rect_Type1. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_700$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type1$. Soit $_H_mk_Prod$ une fonction des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $_A$ et $_B$ et $_fst$ et $_snd$. Soit $x_700$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$. Alors $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_700$.\nassistant\n", "label": "axiom Prod_rect_Type1 (_A _B : cic.Univ univs.Type0) (Q_ : (_x_700 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ univs.Type1) (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term univs.Type1 (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) (x_700 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) : cic.Term univs.Type1 (Q_ x_700)", "predict": "axiom prod_rect_Type1 (A B : Univ Type0) (Q : x : Term Type0 → Prod A B → Univ Type1) : x : Term Type0 → Prod A B → Term Type1 → Q x (mk_Prod A B) (fst x) (snd x)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nTransitive_divides. $cic.Term$ håller för $cic.prop$ och $matita_basics_relations.transitive$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_primes.divides$.\nassistant\n", "label": "axiom transitive_divides : cic.Term cic.prop (matita_basics_relations.transitive matita_arithmetics_nat.nat matita_arithmetics_primes.divides)", "predict": "axiom transitive_divides (c : Term prop) (x y : Nat) (a : divides x y) : divides (nat a) y"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nMonotonic_le_times_r. Pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_relations.monotonic$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.le$ et la fonction qui envoie $m$ à $matita_arithmetics_nat.times$ appliqué à $n$ et $m$.\nassistant\n", "label": "axiom monotonic_le_times_r (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_relations.monotonic matita_arithmetics_nat.nat matita_arithmetics_nat.le (λ m => matita_arithmetics_nat.times n m))", "predict": "axiom monotonic_le_times_r (n : cic.Term univs.Type0) (m : matita_arithmetics_nat.nat) : cic.prop → matita_basics_relations.monotonic (matita_arithmetics_nat.nat) (matita_arithmetics_nat.le) (λ m, matita_arithmetics_nat.times n m)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nLstar_r_inv_lstar. Pour tous les éléments $B$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $R$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation$ appliqué à $B$, pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $b1$ et $b2$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar_r$ appliqué à $B$ et $R$ et $l$ et $b1$ et $b2$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $R$ et $l$ et $b1$ et $b2$.\nassistant\n", "label": "lstar_r_inv_lstar : B : cic.Univ univs.Type0 -> R : cic.Term univs.Type0 (matita_basics_relations.relation B) -> l : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b1 : cic.Term univs.Type0 B -> b2 : cic.Term univs.Type0 B -> __ : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B R l b1 b2) -> cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b2) .", "predict": "lstar_r_inv_lstar : (B : Elem (cic.Univ (univs.Type0))) -> (R : Elem (cic.Term (univs.Type0) (matita_basics_relations.relation))) -> (l : Elem (cic.Term (univs.Type0) (matita_arithmetics_nat.nat))) -> (b1 : Elem (cic.Term (univs.Type0) B)) -> (b2 : Elem (cic.Term (univs.Type0) B)) -> (__) : Elem (cic.Term (cic.prop) (matita_arithmetics_lstar.lstar_r B R l b1 b2)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nPermut_transpose. Pour tous les éléments $i$ et $j$ et $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $i$ et $n$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $j$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_permutation.permut$ appliqué à $matita_arithmetics_permutation.transpose$ appliqué à $i$ et $j$ et $n$.\nassistant\n", "label": "axiom permut_transpose (i j n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.le i n)) (__1 : cic.Term cic.prop (matita_arithmetics_nat.le j n)) : cic.Term cic.prop (matita_arithmetics_permutation.permut (matita_arithmetics_permutation.transpose i j) n)", "predict": "axiom permut_transpose (i j n : cic.Term univs.Type0) (x : cic.prop (matita_arithmetics_nat.le i n)) (y : cic.prop (matita_arithmetics_nat.le j n)) : cic.prop (matita_arithmetics_permutation.permut (matita_arithmetics_permutation.transpose i j) n)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nR3. Soit $T0$ un élément de $cic.Univ$ de $univs.Type0$. Soit $a0$ un élément de $cic.Term$ de $univs.Type0$ et de $T0$. Soit $T1$ une fonction des éléments $x0$ de $cic.Term$ de $univs.Type0$ et de $T0$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $x0$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $a1$ un élément de $cic.Term$ de $univs.Type0$ et de $T1$ appliqué à $a0$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$. Soit $T2$ une fonction des éléments $x0$ de $cic.Term$ de $univs.Type0$ et de $T0$ et des éléments $p0$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $x0$ et des éléments $x1$ de $cic.Term$ de $univs.Type0$ et de $T1$ appliqué à $x0$ et $p0$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T1$ appliqué à $x0$ et $p0$ et $matita_basics_logic.R1$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $T1$ et $a1$ et $x0$ et $p0$ et $x1$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $a2$ un élément de $cic.Term$ de $univs.Type0$ et de $T2$ appliqué à $a0$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $a1$ et $matita", "label": "axiom R3 (T0 : cic.Univ univs.Type0) (a0 : cic.Term univs.Type0 T0) (T1 : (x0 : cic.Term univs.Type0 T0) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> cic.Univ univs.Type0) (a1 : cic.Term univs.Type0 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0))) (T2 : (x0 : cic.Term univs.Type0 T0) -> (p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> (x1 : cic.Term univs.Type0 (T1 x0 p0)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T1 x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 T0) a0 T1 a1 x0 p0) x1)) -> cic.Univ univs.Type0) (a2 : cic.Term univs.Type0 (T2 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0) a1 (matita_basics", "predict": "_basics_logic.R1$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $T1$ et $a1$ et $x0$ et $p0$ et $x1$.\n\naxiom r3 (T0 : univs.Type0) (a0 : Term T0) (T1 : ∀ x0 : Term T0, ∀ p0 : prop (lift univs.Type0 univs.Type2 T0 a0) (eq (lift univs.Type0 univs.Type2 T0 a0) x0)) (a1 : Term (T1 a0)) (T2 : ∀ x0 : Term T0, ∀ p0 : prop (lift univs.Type0 univs.Type2 T0 a0) (eq (lift univs.Type0 univs.Type2 T0 a0) x0), ∀ x1 : Term (T1 x0), ∀ p1 : prop (eq (T1 x0) p0) (R1 (lift univs.Type0 univs.Type2 T0 a0) (eq (lift univs.Type0 univs.Type2 T0 a0) x0) p0) (R1 (lift univs.Type0 univs.Type2 T0 a0) (eq (lift univs.Type0 univs.Type2 T0 a0) x0) p0) (R1 (lift univs.Type0 univs.Type2 T0 a0) (eq (lift univs.Type0 univs.Type2 T0 a0) x0) p0)) (a2 : Term (T2 a0 a1 (R1 (lift univs.Type0 univs.Type2 T0 a0) (eq (lift univs.Type0 univs.Type2 T0 a0) x0) p0) (R1 (lift univs.Type0 univs.Type2 T0 a0) (eq (lift univs.Type0 univs.Type2 T0 a0) x0) p0) (R1 (lift univs.Type0 univs.Type2 T0 a0) (eq (lift univs.Type0 univs.Type2 T"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nOption_rect_CProp0_body. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_634$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $_H_None$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$, för alla funktioner $_H_Some$ från element $x_635$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_635$, för alla element $x_634$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_634$.\nassistant\n", "label": "option_rect_CProp0_body : _A : cic.Univ univs.Type0 -> Q_ : (_x_634 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Univ cic.prop) -> _H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A)) -> _H_Some : (x_635 : cic.Term univs.Type0 _A -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_635))) -> x_634 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Term cic.prop (Q_ x_634) .", "predict": "option_rect_CProp0_body : (A : Elem (univs Type0)) -> (Q_ : (x_634 : Elem (Term Type0)) -> Option A -> Elem (univs prop)) -> Proof (forall (H_None : Term (prop)) (Q_ (None A)) (forall (H_Some : (x_635 : Term Type0) -> A -> Term (prop)) (Q_ (Some A) x_635) (forall (x_634 : Term Type0) (Option A) (Q_ x_634))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nAll_nth. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $P$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.All$ appliqué à $A$ et $P$ et $l$, pour tous les éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.option$ appliqué à $A$ et $matita_basics_lists_list.nth_opt$ appliqué à $A$ et $n$ et $l$ et $matita_basics_types.Some$ appliqué à $A$ et $a$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $a$.\nassistant\n", "label": "Axiom All_nth : forall A : cic.Univ univs.Type0, forall P : ((__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop), forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall l : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall __ : cic.Term cic.prop (matita_basics_lists_list.All A P l), forall a : cic.Term univs.Type0 A, forall __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option A)) (matita_basics_lists_list.nth_opt A n l) (matita_basics_types.Some A a)), cic.Term cic.prop (P a) .", "predict": "Axiom all_nth : forall A : Univ, forall P : forall __ : Term Type0, A -> Univ prop, forall n : Term nat, forall l : Term list Type0, forall __ : prop, forall l : All A P, forall a : Term Type0, forall __1 : prop, forall l : eq (lift Univ Type0) (Option A), forall n : nth_opt A n l, forall a : Some A, P a ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nDop_discr. Låt $a1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $a2$ vara ett element av $cic.Term$ av $univs.Type0$ och $a1", "label": "Dop_discr : a1 : cic.Univ univs.Type0 -> a2 : cic.Term univs.Type0 a1 -> x : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop a1 a2) -> y : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop a1 a2) -> _e : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop a1 a2)) x y) -> cic.Term univs.Type2 (matita_arithmetics_bigops.match_Dop a1 a2 (cic.succ univs.Type2) (__ : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop a1 a2) => cic.univ univs.Type2) (t0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) => t1 : (__ : cic.Term univs.Type0 a1 -> __1 : cic.Term univs.Type0 a1 -> cic.Term univs.Type0 a1) => t2 : (a : cic.Term univs.Type0 a1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (t1 a a2) a2)) => t3 : (a : cic.Term univs.Type0 a1 -> b : cic.Term univs.Type0 a1 -> c : cic.Term univs.Type0 a1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (t1 a (matita_arithmetics_bigops.aop__o__op a1 a2 t0 b c)) (matita_arithmetics_bigops.aop__o__op a1 a2 t0 (t1 a b) (t1 a c)))) => matita_arithmetics_bigops.match_Dop a1 a2 (cic.succ univs.Type2) (__ : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop a1 a2) => cic.univ univs.Type2) (u0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) => u1 : (__ : cic.Term univs.Type0 a1 -> __1 : cic.Term univs.Type0 a1 -> cic.Term univs.Type0 a1) => u2 : (a : cic.Term univs.Type0 a1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (u1 a a2) a2)) => u3 : (a : cic.Term univs.Type0 a1 -> b : cic.Term univs.Type0 a1 -> c : cic.Term univs.Type0 a1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (u1 a (matita_arithmetics_bigops.aop__o__op a1 a2 u0 b c)) (matita_arithmetics_bigops.aop__o__op a1 a2 u0 (u1 a b) (u1 a c)))) => cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (P : cic.Univ univs.Type1 => cic.prod univs.Type1 univs.Type1 (cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) u0) (e0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop", "predict": "$. Då kan vi konstruera $dop_discr : a1 -> a2 -> dop.discr$ som en funktion från $a1$ till $a2$ till $dop.discr$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nAll_append. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $P$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$. Låt $l1$ och $l2$ vara element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.All$ applicerat på $A$ och $P$ och $l1$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.All$ applicerat på $A$ och $P$ och $l2$, håller $cic.Term$ för $cic.prop$ och $matita_basics_lists_list.All$ applicerat på $A$ och $P$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l1$ och $l2$.\nassistant\n", "label": "Axiom All_append : forall A : cic.Univ univs.Type0, forall P : ((__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop), forall l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall __ : cic.Term cic.prop (matita_basics_lists_list.All A P l1), forall __1 : cic.Term cic.prop (matita_basics_lists_list.All A P l2), cic.Term cic.prop (matita_basics_lists_list.All A P (matita_basics_lists_list.append A l1 l2)) .", "predict": "Axiom all_append : forall A : univs.Type0, forall P : Term univs.Type0 -> A -> prop, forall l1 : list (Term univs.Type0), forall l2 : list (Term univs.Type0), forall __ : prop, (All A P l1 -> All A P l2 -> All A P (append A l1 l2)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nFilter_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $_xxx$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $A$, för alla element $_x_941$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_bool.bool$.\nassistant\n", "label": "filter_body : A : cic.Univ univs.Type0 -> _xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.range A) -> _x_941 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool .", "predict": "filter_body : A : Elem (univs Type0) -> Proof (forall (x : Term (univs Type0)) (range (matita arithmetics bigops)) (forall (x_941 : Term (univs Type0)) (nat (matita arithmetics nat))) (Term (univs Type0)) (bool (matita basics bool))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nPair_elim2. Låt $A$ och $B$ och $C$ och $C'$ vara element av $cic.Univ$ av $univs.Type0$. Låt $T$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $C$. Låt $T'$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $C'$. Låt $p$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$. Då för alla funktioner $P$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $C$ och element $__2$ av $cic.Term$ av $univs.Type0$ och $C'$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $__$ från element $lft$ av $cic.Term$ av $univs.Type0$ och $A$ och element $rgt$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$ och $p$ och $matita_basics_types.mk_Prod$ applicerat på $A$ och $B$ och $lft$ och $rgt$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $A$ och $B$ och $lft$ och $rgt$ och $T$ applicerat på $lft$ och $rgt$ och $T'$", "label": "Axiom pair_elim2 : forall A : cic.Univ univs.Type0, forall B : cic.Univ univs.Type0, forall C : cic.Univ univs.Type0, forall C' : cic.Univ univs.Type0, forall T : ((__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 C), forall T' : ((__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 C'), forall p : cic.Term univs.Type0 (matita_basics_types.Prod A B), forall P : ((__ : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> (__1 : cic.Term univs.Type0 C) -> (__2 : cic.Term univs.Type0 C') -> cic.Univ cic.prop), forall __ : ((lft : cic.Term univs.Type0 A) -> (rgt : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B)) p (matita_basics_types.mk_Prod A B lft rgt))) -> cic.Term cic.prop (P (matita_basics_types.mk_Prod A B lft rgt) (T lft rgt) (T' lft rgt))), cic.Term cic.prop (P p (matita_basics_types.match_Prod A B univs.Type0 (fun _0 => C) (fun lft => fun rgt => T lft rgt) p) (matita_basics_types.match_Prod A B univs.Type0 (fun _0 => C') (fun lft => fun rgt => T' lft rgt) p)) .", "predict": " applicerat på $lft$ och $rgt$ och $p$ och $P$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $A$ och $B$ och $lft$ och $rgt$ och $T$ applicerat på $lft$ och $rgt$ och $T'$ applicerat på $lft$ och $rgt$ och $p$ och $P$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $A$ och $B$ och $lft$ och $rgt$ och $T$ applicerat på $lft$ och $rgt$ och $T'$ applicerat på $lft$ och $rgt$ och $p$ och $P$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $A$ och $B$ och $lft$ och $rgt$ och $T$ applicerat på $lft$ och $rgt$ och $T'$ applicerat på $lft$ och $rgt$ och $p$ och $P$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $A$ och $B$ och $lft$ och $rgt$ och $T$ applicerat på $lft$ och $rgt$ och $T'$ applicerat på $lft$ och $rgt$ och $p$ och $P$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $A$ och $B$ och $lft$ och $rgt$ och $T$ applicerat på $lft$ och $rgt$ och $T'$ applicerat på $lft$ och $rgt$ och $p$ och $P$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $A$ och $B$ och $lft$ och $rgt$ och $T$ applicerat på $lft$ och $rgt$ och $T'$ applicerat på $lft$ och $rgt$ och $p$ och $P$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $A$ och $B$ och $lft"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nMin_exists. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soient $t$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $m$ et $t$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $m$ et $matita_basics_bool.true$. Soient $k$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $b$ et $m$, pour toutes les fonctions $__3$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__3$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $b$ et $i$ et des éléments $__4$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $m$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $i$ et $matita_basics_bool.false$, pour tous les éléments $__4$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $t$ et $matita_arithmetics_nat.plus$ appliqué à $k$ et $b$,", "label": "Axiom min_exists : forall f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall t : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt m t), forall __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.true), forall k : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __2 : cic.Term cic.prop (matita_arithmetics_nat.le b m), forall __3 : ((i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.le b i)) -> (__4 : cic.Term cic.prop (matita_arithmetics_nat.lt i m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)), forall __4 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) t (matita_arithmetics_nat.plus k b)), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.min k b f) m) .", "predict": " pour tous les éléments $__5$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $t$ et $matita_basics_bool.false$, il existe un élément $x$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.nat$ tel que $x$ est plus petit que $t$ et $x$ est différent de $m$ et $x$ est différent de $k$ et $x$ est différent de $b$ et $x$ est différent de $t$ et $x$ est différent de $m$ et $x$ est différent de $k$ et $x$ est différent de $b$ et $x$ est différent de $t$ et $x$ est différent de $m$ et $x$ est différent de $k$ et $x$ est différent de $b$ et $x$ est différent de $t$ et $x$ est différent de $m$ et $x$ est différent de $k$ et $x$ est différent de $b$ et $x$ est différent de $t$ et $x$ est différent de $m$ et $x$ est différent de $k$ et $x$ est différent de $b$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nLet_clause_16003. Låt $m$ och $n$ och $a$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $posm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Låt $pnm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $c$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicer", "label": "let_clause_16003 : m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) -> c : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (d : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times", "predict": "at på $matita_arithmetics_nat.O$.\n\nlet_clause_16003 : (m : Elem (Term (univs Type0))) -> (n : Elem (Term (univs Type0))) -> (a : Elem (Term (univs Type0))) -> (b : Elem (Term (univs Type0))) -> (posn : Prop (lt (nat (matita_arithmetics_nat O)) n)) -> (posm : Prop (lt (nat (matita_arithmetics_nat O)) m)) -> (pnm : Prop (eq (lift (univs Type0) (univs Type2)) (nat (gcd (nat n) (nat m))) (S (nat (O))))) -> (c : Elem (Term (univs Type0))) -> (clearme : Prop (ex (nat) (or (eq (lift (univs Type0) (univs Type2)) (nat c)) (and (not (eq (lift (univs Type0) (univs Type2)) (nat c))) (eq (minus (times (nat c) (nat n)) (times (nat d) (nat m))) (S (nat (O))))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nLt_div_S_div. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_exp.exp$ applied to $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_div_and_mod.div$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $m$ and $matita_arithmetics_div_and_mod.div$ applied to $n$ and $m$.\nassistant\n", "label": "axiom lt_div_S_div (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) (__1 : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp m (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))) n)) : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_div_and_mod.div n (matita_arithmetics_nat.S m)) (matita_arithmetics_div_and_mod.div n m))", "predict": "axiom lt_div_S_div (n m : Term Type0) : Prop → Lt (O : nat) m → Prop → Le (exp (S (S O)) n) (S (S O)) → Lt (div n (S m)) (div n m)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nSym_not_eq. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Alors pour tous les éléments $x$ et $y$ de $cic.Term$ de $univs.Type2$ et de $A$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $matita_basics_logic.eq$ appliqué à $A$ et $x$ et $y$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.Not$ appliqué à $matita_basics_logic.eq$ appliqué à $A$ et $y$ et $x$.\nassistant\n", "label": "axiom sym_not_eq (A : cic.Univ univs.Type2) (x y : cic.Term univs.Type2 A) (__ : cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq A x y))) : cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq A y x))", "predict": "axiom sym_not_eq (A : Univ (Type2)) (x y : Term (Type2) A) (p : Prop (Term (Type2) (not (eq A x y))) : Prop (Term (Type2) (not (eq A y x))))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nDop_rect_Type4. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Då för alla funktioner $Q_$ från element $_x_945$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type4$, för alla funktioner $_H_mk_Dop$ från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $_nil$ och $_nil$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $prod$ applicerat på $a$ och $b$ och $prod$ applicerat på $a$ och $c$ till element av $c", "label": "Axiom Dop_rect_Type4 : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_945 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ univs.Type4), forall _H_mk_Dop : ((sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))), forall x_945 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil), cic.Term univs.Type4 (Q_ x_945) .", "predict": "ic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $sum$ applicerat på $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $sum$ applicerat på $prod$ applicerat på $a$ och $b$ och $prod$ applicerat på $a$ och $c$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $sum$ applicerat på $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $sum$ applicerat på $prod$ applicerat på $a$ och $b$ och $prod$ applicerat på $a$ och $c$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $sum$ applicerat på $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $sum$ applicerat sur $prod$ applicerat sur $a$ et $b$ et $prod$ applicerat sur $a$ et $c$ à element de $cic.Term$ de $cic.prop$ et $matita_basics_logic.eq$ applicé"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nBool_rect_CProp1. Let $Q_$ be a function from elements $_x_359$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $cic.prop$. Then for all elements $_H_true$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_bool.true$, for all elements $_H_false$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_bool.false$, for all elements $x_359$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_359$.\nassistant\n", "label": "Axiom bool_rect_CProp1 : forall Q_ : ((_x_359 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop), forall _H_true : cic.Term cic.prop (Q_ matita_basics_bool.true), forall _H_false : cic.Term cic.prop (Q_ matita_basics_bool.false), forall x_359 : cic.Term univs.Type0 matita_basics_bool.bool, cic.Term cic.prop (Q_ x_359) .", "predict": "Axiom bool_rect_CProp1 : forall Q : x_359 : univs.Type0 -> matita_basics_bool.bool -> cic.prop, forall H_true : cic.Term cic.prop, forall H_false : cic.Term cic.prop, forall x_359 : cic.Term univs.Type0, Q x_359 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nMatch_ex2. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $_P$ and $_Q$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$, for all elements $return_sort$ of $cic.Sort$, for all functions $return_type$ from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex2$ applied to $A$ and $_P$ and $_Q$ to elements of $cic.Univ$ of $return_sort$, for all functions $case_ex2_intro$ from elements $x$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__$ of $cic.Term$ of $cic.prop$ and $_P$ applied to $x$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $_Q$ applied to $x$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_basics_logic.ex2_intro$ applied to $A$ and $_P$ and $_Q$ and $x$ and $__$ and $__1$, for all elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex2$ applied to $A$ and $_P$ and $_Q$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.\nassistant\n", "label": "postulate match_ex2 : (A : cic.Univ univs.Type0) -> (_P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (_Q : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term cic.prop (matita_basics_logic.ex2 A _P _Q)) -> cic.Univ return_sort) -> (case_ex2_intro : (x : cic.Term univs.Type0 A) -> (__ : cic.Term cic.prop (_P x)) -> (__1 : cic.Term cic.prop (_Q x)) -> cic.Term return_sort (return_type (matita_basics_logic.ex2_intro A _P _Q x __ __1))) -> (z : cic.Term cic.prop (matita_basics_logic.ex2 A _P _Q)) -> cic.Term return_sort (return_type z)", "predict": "postulate match_ex2 : (A : univs.Type0) -> (P : (x : cic.Term univs.Type0 A) -> cic.Univ) -> (Q : (x : cic.Term univs.Type0 A) -> cic.Univ) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term cic.prop) -> (matita_basics_logic.ex2 A P Q) -> cic.Univ return_sort) -> (case_ex2_intro : (x : cic.Term univs.Type0 A) -> (p : cic.Term cic.prop) -> (P x) -> (q : cic.Term cic.prop) -> (Q x) -> cic.Term return_sort (return_type (matita_basics_logic.ex2_intro A P Q x p q))) -> (z : cic.Term cic.prop) -> (matita_basics_logic.ex2 A P Q) -> cic.Term return_sort (return_type z)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nMatch_lstar. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_R$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation$ appliqué à $B$. Soit $return_sort$ un élément de $cic.Sort$. Soit $return_type$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__2$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $_R$ et $__$ et $__1$ et $__2$ à des éléments de $cic.Univ$ de $return_sort$. Soit $case_lstar_O$ une fonction des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_arithmetics_nat.O$ et $b$ et $b$ et $matita_arithmetics_lstar.lstar_O$ appliqué à $B$ et $_R$ et $b$. Soit $case_lstar_S$ une fonction des éléments $b1$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $_R$ appliqué à $b1$ et $b$ et des éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $b2$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $_R$ et $l$ et $b$ et $b2$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $l$ et $matita_ar", "label": "axiom match_lstar (B : cic.Univ univs.Type0) (_R : cic.Term univs.Type0 (matita_basics_relations.relation B)) (return_sort : cic.Sort) (return_type : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 B) -> (__2 : cic.Term univs.Type0 B) -> (z : cic.Term cic.prop (matita_arithmetics_lstar.lstar B _R __ __1 __2)) -> cic.Univ return_sort) (case_lstar_O : (b : cic.Term univs.Type0 B) -> cic.Term return_sort (return_type matita_arithmetics_nat.O b b (matita_arithmetics_lstar.lstar_O B _R b))) (case_lstar_S : (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (_R b1 b)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b2 : cic.Term univs.Type0 B) -> (__1 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B _R l b b2)) -> cic.Term return_sort (return_type (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2 (matita_arithmetics_lstar.lstar_S B _R b1 b __ l b2 __1))) (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__1 __2 : cic.Term univs.Type0 B) (z : cic.Term cic.prop (matita_arithmetics_lstar.lstar B _R __ __1 __2)) : cic.Term return_sort (return_type __ __1 __2 z)", "predict": "ithmetics_nat.nat$ et $b1$ et $b2$. Soit $case_lstar$ une fonction des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $case_lstar_O$ et $case_lstar_S$ appliqué à $b$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nFalse_rect_Type3. Låt $Q_$ vara en funktion från element $_x_69$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Univ$ av $univs.Type3$. Då för alla element $x_69$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$, håller $cic.Term$ för $univs.Type3$ och $Q_$ applicerat på $x_69$.\nassistant\n", "label": "False_rect_Type3 : Q_ : (_x_69 : cic.Term cic.prop matita_basics_logic.False -> cic.Univ univs.Type3) -> x_69 : cic.Term cic.prop matita_basics_logic.False -> cic.Term univs.Type3 (Q_ x_69) .", "predict": "false_rect_Type3 : (x_69 : Elem (Term (prop (False (matita_basics_logic)))) -> Elem (Univ (Type3))) -> Proof (forall (x_69 : Elem (Term (prop (False (matita_basics_logic)))) (Term (Univ (Type3)) (Q_ x_69))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nLt_min. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soient $n$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $i$ à $matita_basics_logic.And$ appliqué à $matita_basics_logic.And$ appliqué à $matita_arithmetics_nat.le$ appliqué à $b$ et $i$ et $matita_arithmetics_nat.lt$ appliqué à $i$ et $matita_arithmetics_nat.plus$ appliqué à $n$ et $b$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $i$ et $matita_basics_bool.true$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_minimization.min$ appliqué à $n$ et $b$ et $f$ et $matita_arithmetics_nat.plus$ appliqué à $n$ et $b$.\nassistant\n", "label": "postulate lt_min : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.And (matita_basics_logic.And (matita_arithmetics_nat.le b i) (matita_arithmetics_nat.lt i (matita_arithmetics_nat.plus n b))) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.true)))) -> cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_minimization.min n b f) (matita_arithmetics_nat.plus n b))", "predict": "postulate lt_min : (f : Term univs.Type0 -> nat -> Term univs.Type0) -> (n : Term univs.Type0) -> (b : nat) -> (p : Prop) -> (x : ex (nat -> bool)) -> (i : nat) -> Eq (lift univs.Type0 univs.Type2) (bool) -> (f i true) -> Prop (lt (min n b) (plus n b))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nEq_rect_Type5_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type2$. Låt $_x$ vara ett element av $cic.Term$ av $univs.Type2$ och $A$. Låt $Q_$ vara en funktion från element $x_7$ av $cic.Term$ av $univs.Type2$ och $A$ och element $_x_8$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_7$ till element av $cic.Univ$ av $univs.Type5$. Låt $_H_refl$ vara ett element av $cic.Term$ av $univs.Type5$ och $Q_$ applicerat på $_x$ och $matita_basics_logic.refl$ applicerat på $A$ och $_x$. Låt $x_7$ vara ett element av $cic.Term$ av $univs.Type2$ och $A$. Då för alla element $x_8$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_7$, håller $cic.Term$ för $univs.Type5$ och $Q_$ applicerat på $x_7$ och $x_8$.\nassistant\n", "label": "eq_rect_Type5_body : A : cic.Univ univs.Type2 -> _x : cic.Term univs.Type2 A -> Q_ : (x_7 : cic.Term univs.Type2 A -> _x_8 : cic.Term cic.prop (matita_basics_logic.eq A _x x_7) -> cic.Univ univs.Type5) -> _H_refl : cic.Term univs.Type5 (Q_ _x (matita_basics_logic.refl A _x)) -> x_7 : cic.Term univs.Type2 A -> x_8 : cic.Term cic.prop (matita_basics_logic.eq A _x x_7) -> cic.Term univs.Type5 (Q_ x_7 x_8) .", "predict": "eq_rect_Type5_body : (A : Elem (univs Type2)) -> (x : Elem (Term (univs Type2)) (A)) -> (Q_ : (x_7 : Term (univs Type2)) -> (A : Elem (Term (cic prop))) -> (matita_basics_logic.eq (A) x) -> Elem (univs Type5) (Q_ x_7)) -> (x_7 : Term (univs Type2)) -> (A : Elem (Term (cic prop))) -> (matita_basics_logic.refl (A) x) -> Proof (forall (x_8 : (matita_basics_logic.eq (A) x)) (Term (univs Type5)) (Q_ x_7) x_8)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nPermut_S_mod. Pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_permutation.permut$ appliqué à $matita_arithmetics_congruence.S_mod$ appliqué à $matita_arithmetics_nat.S$ appliqué à $n$ et $n$.\nassistant\n", "label": "axiom permut_S_mod (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_arithmetics_permutation.permut (matita_arithmetics_congruence.S_mod (matita_arithmetics_nat.S n)) n)", "predict": "axiom permut_S_mod (n : cic.Term univs.Type0) (x : matita_arithmetics_nat.nat) : cic.prop (matita_arithmetics_permutation.permut (matita_arithmetics_congruence.S_mod (matita_arithmetics_nat.S n) n))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nLt_S_S_to_lt. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $n$ och $matita_arithmetics_nat.S$ applicerat på $m$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $n$ och $m$.\nassistant\n", "label": "lt_S_S_to_lt : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m)) -> cic.Term cic.prop (matita_arithmetics_nat.lt n m) .", "predict": "lt_S_S_to_lt : (n : Elem (univs Type0)) -> (m : Elem (univs Type0)) -> Proof (Lt (S n) (S m)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nLhd_nil. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $A$ et $matita_basics_lists_list.lhd$ appliqué à $A$ et $matita_basics_lists_list.nil$ appliqué à $A$ et $n$ et $matita_basics_lists_list.nil$ appliqué à $A$.\nassistant\n", "label": "lhd_nil : A : cic.Univ univs.Type0 -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.lhd A (matita_basics_lists_list.nil A) n) (matita_basics_lists_list.nil A)) .", "predict": "lhd_nil : (A : Elem (cic.Univ) (Type0)) -> (n : Elem (cic.Term) (Type0) * Nat) -> Proof (and (cic.Term) (eq (lift (univs.Type0) (univs.Type2)) (list (A) (lhd (A) (nil (A)) (n) (nil (A))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nSig_rect_Type5. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $_f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $Q_$ des éléments $_x_668$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $univs.Type5$, pour toutes les fonctions $_H_mk_Sig$ des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $_f$ appliqué à $pi1$ à des éléments de $cic.Term$ de $univs.Type5$ et de $Q_$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $A$ et $_f$ et $pi1$ et $_pi2$, pour tous les éléments $x_668$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $univs.Type5$ et $Q_$ appliqué à $x_668$.\nassistant\n", "label": "Axiom Sig_rect_Type5 : forall A : cic.Univ univs.Type0, forall _f : ((__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop), forall Q_ : ((_x_668 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ univs.Type5), forall _H_mk_Sig : ((pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term univs.Type5 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))), forall x_668 : cic.Term univs.Type0 (matita_basics_types.Sig A _f), cic.Term univs.Type5 (Q_ x_668) .", "predict": "Axiom sig_rect_Type5 : forall A : Univ, forall f : Elem Term Type0 -> A -> Univ, forall Q_ : x : Elem Term Type0 -> Sig A -> Elem prop, forall H_mk_Sig : pi1 : Elem Term Type0 -> A -> Elem prop -> f pi1 -> Sig A -> x, forall x_668 : Elem Term Type0 -> Sig A -> Elem Term Type5, forall Q_ : x : Elem Term Type0 -> Sig A -> Elem prop, forall f : Elem Term Type0 -> A -> Elem Term Type5, forall pi1 : Elem Term Type0 -> A -> Elem prop, forall pi2 : Elem Term Type5, forall x_668 : Elem Term Type0 -> Sig A -> Elem Term Type5, forall Q_ : x : Elem Term Type0 -> Sig A -> Elem prop, forall f : Elem Term Type0 -> A -> Elem Term Type5, forall pi1 : Elem Term Type0 -> A -> Elem prop, forall pi2 : Elem Term Type5, forall x : Elem Term Type0 -> Sig A -> Elem Term Type5, forall Q_ : x : Elem Term Type0 -> Sig A -> Elem prop, forall f : Elem Term Type0 -> A -> Elem Term Type5, forall pi1 : Elem Term Type0 -> A -> Elem prop, forall pi2 : Elem Term Type5, forall x : Elem Term Type0 -> Sig A -> Elem Term Type5, forall Q_ : x : Elem Term Type0 -> Sig A -> Elem prop, forall f : Elem Term Type0 -> A -> Elem Term Type5, forall pi1 : Elem Term Type0 -> A -> Elem prop, forall pi2 : Elem Term Type5, forall x : Elem Term Type0 -> Sig A -> Elem Term Type5, forall Q_ : x : Elem Term Type0 -> Sig A -> Elem prop, forall f : Elem Term Type0 -> A -> Elem Term Type5, forall pi1 : Elem Term Type0 -> A -> Elem prop, forall pi2 : Elem Term Type5, forall x : Elem Term Type0 -> Sig A -> Elem Term Type5, forall Q_ : x : Elem Term Type0 -> Sig A -> Elem prop, forall f : Elem Term Type0 -> A -> Elem Term Type5, forall pi1 : Elem Term Type0 -> A -> Elem prop, forall pi2 : Elem Term Type5, forall x : Elem Term Type0 ->"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nProd_rect_CProp5_body. För alla element $_A$ och $_B$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $Q_$ från element $_x_706$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_Prod$ från element $_fst$ av $cic.Term$ av $univs.Type0$ och $_A$ och element $_snd$ av $cic.Term$ av $univs.Type0$ och $_B$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $_A$ och $_B$ och $_fst$ och $_snd$, för alla element $x_706$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_706$.\nassistant\n", "label": "Axiom Prod_rect_CProp5_body : forall _A : cic.Univ univs.Type0, forall _B : cic.Univ univs.Type0, forall Q_ : ((_x_706 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ cic.prop), forall _H_mk_Prod : ((_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))), forall x_706 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B), cic.Term cic.prop (Q_ x_706) .", "predict": "Axiom prod_rect_CProp5_body : forall A : univs.Type0, forall B : univs.Type0, forall Q : (x : univs.Type0) -> Prod A B -> cic.prop, forall H : (fst : univs.Type0) -> A -> (snd : univs.Type0) -> B -> cic.prop, forall x : univs.Type0, forall p : Prod A B, Q x p ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nCommutative2. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$. Alors $cic.Univ$ tient pour $cic.prop$.\nassistant\n", "label": "Axiom commutative2 : forall A : cic.Univ univs.Type0, forall B : cic.Univ univs.Type0, forall _f : ((__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B), cic.Univ cic.prop .", "predict": "Axiom commutative2 : forall A : univs.Type0, forall B : univs.Type0, forall f : Term univs.Type0 -> A -> Term univs.Type0 -> B -> Prop ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nDPair_rect_CProp3. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_656$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_DPair$ be a function from elements $dpi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_dpi2$ of $cic.Term$ of $univs.Type0$ and $_f$ applied to $dpi1$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_DPair$ applied to $A$ and $_f$ and $dpi1$ and $_dpi2$. Let $x_656$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_656$.\nassistant\n", "label": "axiom DPair_rect_CProp3 (A : cic.Univ univs.Type0) (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) (Q_ : (_x_656 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop) (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) (x_656 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) : cic.Term cic.prop (Q_ x_656)", "predict": "axiom dpair_rect_CProp3 (A : Univ Type0) (f : Term Type0 → A → Univ Type0) (Q_ : (x : Term Type0) → DPair A (f x) → Prop) (H_mk_DPair : (dpi1 : Term Type0) → A → (dpi2 : Term Type0) → f dpi1 → Prop) (x_656 : Term Type0) : DPair A (f x_656) → Prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nACop_rect_CProp2_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_909$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_ACop$ be a function from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$. Then for all elements $x_909$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_909$.\nassistant\n", "label": "postulate ACop_rect_CProp2_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_909 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (x_909 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term cic.prop (Q_ x_909)", "predict": "postulate acop_rect_cprop2_body : (A : univs.Type0) -> _nil : univs.Type0 -> A -> (x_909 : univs.Type0) -> matita_arithmetics_bigops.ACop A _nil -> cic.prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nACop_rect_CProp1. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_911$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_ACop$ be a function from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$. Let $x_911$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_911$.\nassistant\n", "label": "Axiom ACop_rect_CProp1 : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_911 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop), forall _H_mk_ACop : ((aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))), forall x_911 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil), cic.Term cic.prop (Q_ x_911) .", "predict": "Axiom acop_rect_cprop1 : forall A : univs.Type0, forall _nil : Term univs.Type0, forall Q_ : (x : Term univs.Type0) -> ACop A _nil -> Univ, forall _H_mk_ACop : (aop : Term univs.Type0) -> Aop A _nil -> (a : Term univs.Type0) -> (b : Term univs.Type0) -> eq (lift univs.Type0 univs.Type2 A) (op A _nil aop a) (op A _nil aop b) (a) -> (Q_ (mk_ACop A _nil aop) _comm a b) -> forall x_911 : ACop A _nil, prop (Q_ x_911) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nMem_filter_true. Låt $S$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $S$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $a$ vara ett element av $cic.Term$ av $univs.Type0$ och $S$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $S$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.mem$ applicerat på $S$ och $a$ och $matita_basics_lists_list.filter$ applicerat på $S$ och $f$ och $l$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $a$ och $matita_basics_bool.true$.\nassistant\n", "label": "postulate mem_filter_true : (S : cic.Univ univs.Type0) -> (f : (__ : cic.Term univs.Type0 S) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (a : cic.Term univs.Type0 S) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list S)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.mem S a (matita_basics_lists_list.filter S f l))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f a) matita_basics_bool.true)", "predict": "postulate mem_filter_true : (S : Univ Type0) -> (f : Term Type0 -> S -> Term Type0 -> Bool) -> (a : Term Type0 -> S) -> (l : List Type0 -> S) -> (x : Prop (mem S a) (filter S f l)) -> Eq (lift Type0 Type2) (f a) true"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nPair_elim2. Låt $A$ och $B$ och $C$ och $C'$ vara element av $cic.Univ$ av $univs.Type0$. Låt $T$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $C$. Då för alla funktioner $T'$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $C'$, för alla element $p$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$, för alla funktioner $P$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $C$ och element $__2$ av $cic.Term$ av $univs.Type0$ och $C'$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $__$ från element $lft$ av $cic.Term$ av $univs.Type0$ och $A$ och element $rgt$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$ och $p$ och $matita_basics_types.mk_Prod$ applicerat på $A$ och $B$ och $lft$ och $rgt$ till element av", "label": "postulate pair_elim2 : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (C : cic.Univ univs.Type0) -> (C' : cic.Univ univs.Type0) -> (T : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 C) -> (T' : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 C') -> (p : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> (P : (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> (__1 : cic.Term univs.Type0 C) -> (__2 : cic.Term univs.Type0 C') -> cic.Univ cic.prop) -> (__ : (lft : cic.Term univs.Type0 A) -> (rgt : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B)) p (matita_basics_types.mk_Prod A B lft rgt))) -> cic.Term cic.prop (P (matita_basics_types.mk_Prod A B lft rgt) (T lft rgt) (T' lft rgt))) -> cic.Term cic.prop (P p (matita_basics_types.match_Prod A B univs.Type0 (\\ _0 : cic.Term univs.Type0 (matita_basics_types.Prod A B) -> C) (\\ lft : cic.Term univs.Type0 A -> \\ rgt : cic.Term univs.Type0 B -> T lft rgt) p) (matita_basics_types.match_Prod A B univs.Type0 (\\ _0 : cic.Term univs.Type0 (matita_basics_types.Prod A B) -> C') (\\ lft : cic.Term univs.Type0 A -> \\ rgt : cic.Term univs.Type0 B -> T' lft rgt) p))", "predict": " $cic.Univ$ av $cic.prop$ och för alla element $x$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$, för alla element $y$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$, förenkla $T'$ applicerat på $x$ och $y$ till $T$ applicerat på $x$ och $y$.\npostulate pair_elim2 : (A : univs.Type0) -> (B : univs.Type0) -> (C : univs.Type0) -> (C' : univs.Type0) -> (T : Term univs.Type0 A -> Term univs.Type0 B -> Term univs.Type0 C) -> (T' : Term univs.Type0 A -> Term univs.Type0 B -> Term univs.Type0 C') -> (p : Prod (Term univs.Type0) (Prod A B)) -> (P : Term univs.Type0 p -> Term univs.Type0 C -> Term univs.Type0 C' -> Prop) -> (L : Term univs.Type0 A -> Term univs.Type0 B -> Prop) -> (R : Term univs.Type0 (lift univs.Type0 univs.Type2 (Prod A B)) p) -> (x : Prod A B) -> (y : Prod A B) -> Eq (T' x y) (T x y)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nNat_rect_CProp4_body. Let $Q_$ be a function from elements $_x_393$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_O$ be an element of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_nat.O$. Let $_H_S$ be a function from elements $x_394$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $_x_396$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $x_394$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_nat.S$ applied to $x_394$. Let $x_393$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_393$.\nassistant\n", "label": "nat_rect_CProp4_body : Q_ : (_x_393 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Univ cic.prop) -> _H_O : cic.Term cic.prop (Q_ matita_arithmetics_nat.O) -> _H_S : (x_394 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _x_396 : cic.Term cic.prop (Q_ x_394) -> cic.Term cic.prop (Q_ (matita_arithmetics_nat.S x_394))) -> x_393 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (Q_ x_393) .", "predict": "nat_rect_CProp4_body : (Q : (x : Elem (Term (univ Type0)) -> Nat) -> Elem (Univ prop)) -> (H_O : Elem (Term prop) (Q (nd 0))) -> (H_S : (x : Elem (Term (univ Type0)) -> Nat) -> (x_396 : Elem (Term prop)) -> Elem (Term prop) (Q (plus (nd 1) x)) (Q x)) -> (x_393 : Elem (Term (univ Type0)) (Nat)) -> Elem (Term prop) (Q x_393) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nLet_clause_1575. För alla element $m$ och $n$ och $a$ och $b$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $posn$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $posm$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla element $pnm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $c$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arith", "label": "postulate let_clause_1575 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics", "predict": "metics_nat.O$, för alla element $posp$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.lt$ applicerat på $c$ och $n$, för alla element $posq$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.lt$ applicerat på $d$ och $m$, för alla element $posr$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.lt$ applicerat på $c$ och $m$, för alla element $poss$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.lt$ applicerat på $d$ och $n$, för alla element $post$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.lt$ applicerat på $c$ och $d$, för alla element $posu$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.lt$ applicerat på $d$ och $c$, för alla element $posv$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.lt$ applicerat på $n$ och $m$, för alla element $posw$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.lt$ applicerat på $m$ och $n$, för alla element $posx$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.lt$ applicerat på $c$ och $posn$, för alla element $posy$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.lt$ applicerat på $d$ och $posm$, för alla element $posz$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.lt$ applicerat på $c$ och $posp$, för alla element $posaa$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.lt$ applicerat på $d$ och $posq$, för alla element $posab$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.lt$ applicerat på $c$ och"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nUnit_inv_rect_Type1. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$. Soit $P$ une fonction des éléments $_z930$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $univs.Type1$. Alors pour toutes les fonctions $_H1$ des éléments $_z931$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.unit$ et $Hterm$ et $matita_basics_types.it$ à des éléments de $cic.Term$ de $univs.Type1$ et de $P$ appliqué à $matita_basics_types.it$, $cic.Term$ tient pour $univs.Type1$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "unit_inv_rect_Type1 : Hterm : cic.Term univs.Type0 matita_basics_types.unit -> P : (_z930 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Univ univs.Type1) -> _H1 : (_z931 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm matita_basics_types.it) -> cic.Term univs.Type1 (P matita_basics_types.it)) -> cic.Term univs.Type1 (P Hterm) .", "predict": "unit_inv_rect_Type1 : (Hterm : Elem (Term (Type0) (unit))) -> (P : (z930 : Elem (Term (Type0) (unit))) -> Univ (Type1)) -> Proof (forall (H1 : (z931 : Elem (Term (prop)) (eq (lift (Type0) (Type2)) (unit))) (Hterm) (it (Term (Type1)) (P (it (unit))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nFilter_ex2. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_P$ and $_Q$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $return_sort$ be an element of $cic.Sort$. Then for all functions $return_type$ from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex2$ applied to $A$ and $_P$ and $_Q$ to elements of $cic.Univ$ of $return_sort$, for all functions $return$ from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex2$ applied to $A$ and $_P$ and $_Q$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $z$, for all elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex2$ applied to $A$ and $_P$ and $_Q$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.\nassistant\n", "label": "postulate filter_ex2 : (A : cic.Univ univs.Type0) -> (_P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (_Q : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term cic.prop (matita_basics_logic.ex2 A _P _Q)) -> cic.Univ return_sort) -> (return : (z : cic.Term cic.prop (matita_basics_logic.ex2 A _P _Q)) -> cic.Term return_sort (return_type z)) -> (z : cic.Term cic.prop (matita_basics_logic.ex2 A _P _Q)) -> cic.Term return_sort (return_type z)", "predict": "postulate filter_ex2 : (A : univs.Type0) -> (P Q : (x : cic.Term) -> univs.Type0) -> return_sort : cic.Sort -> (z : cic.Term) -> matita_basics_logic.ex2 A P Q -> univs.Type0 -> (return : (z : cic.Term) -> cic.prop) -> (return_type : (z : cic.Term) -> cic.prop -> return_sort) -> all (forall (z : cic.Term) (matita_basics_logic.ex2 A P Q) (cic.Term (return_sort (return_type z))) (cic.Term (return z)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nProd_rect_CProp2_body. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_710$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_Prod$ une fonction des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $_A$ et $_B$ et $_fst$ et $_snd$. Soit $x_710$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_710$.\nassistant\n", "label": "postulate Prod_rect_CProp2_body : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_710 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ cic.prop) -> (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) -> (x_710 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Term cic.prop (Q_ x_710)", "predict": "postulate prod_rect_CProp2_body : (A : Univ Type0) -> (B : Univ Type0) -> (Q : (x : Term Type0) -> Prod A B -> Prop) -> (H_mk_Prod : (fst : Term Type0) -> A -> (snd : Term Type0) -> B -> Term (prop)) -> (x_710 : Term Type0) -> Prod A B -> Prop = Q x_710 (mk_Prod A B fst snd)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nAop_inv_rect_CProp3. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Då för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1542$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $a$ och $x2$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $c$ av $c", "label": "axiom Aop_inv_rect_CProp3 (x1 : cic.Univ univs.Type0) (x2 : cic.Term univs.Type0 x1) (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) (P : (_z1542 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> cic.Univ cic.prop) (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1543 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) : cic.Term cic.prop (P Hterm)", "predict": "ic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ undan $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ undan $op$ applicerat på $op$ applicerat på $op$ applicerat på $a$ undan $op$ applicerat på $b$ undan $op$ applicerat på $c$ undan $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $x2$ undan $x1$ undan $"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nS. Assume that $Nat$. Then $Nat$.\nassistant\n", "label": "axiom s (x : Nat) : Nat", "predict": "axiom s : Nat → Nat"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nOr_inv_ind. Let $x1$ and $x2$ be elements of $cic.Univ$ of $cic.prop$. Let $Hterm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z389$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$. Let $_H1$ be a function from elements $x_171$ of $cic.Term$ of $cic.prop$ and $x1$ and elements $_z390$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_basics_logic.Or$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_logic.or_introl$ applied to $x1$ and $x2$ and $x_171$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_logic.or_introl$ applied to $x1$ and $x2$ and $x_171$. Let $_H2$ be a function from elements $x_172$ of $cic.Term$ of $cic.prop$ and $x2$ and elements $_z390$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_basics_logic.Or$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_logic.or_intror$ applied to $x1$ and $x2$ and $x_172$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_logic.or_intror$ applied to $x1$ and $x2$ and $x_172$. Then $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "Axiom Or_inv_ind : forall x1 : cic.Univ cic.prop, forall x2 : cic.Univ cic.prop, forall Hterm : cic.Term cic.prop (matita_basics_logic.Or x1 x2), forall P : ((_z389 : cic.Term cic.prop (matita_basics_logic.Or x1 x2)) -> cic.Univ cic.prop), forall _H1 : ((x_171 : cic.Term cic.prop x1) -> (_z390 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.Or x1 x2)) Hterm (matita_basics_logic.or_introl x1 x2 x_171))) -> cic.Term cic.prop (P (matita_basics_logic.or_introl x1 x2 x_171))), forall _H2 : ((x_172 : cic.Term cic.prop x2) -> (_z390 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.Or x1 x2)) Hterm (matita_basics_logic.or_intror x1 x2 x_172))) -> cic.Term cic.prop (P (matita_basics_logic.or_intror x1 x2 x_172))), cic.Term cic.prop (P Hterm) .", "predict": "Axiom or_inv_ind : forall x1 : Univ, forall x2 : Univ, forall Hterm : Term (prop), forall P : (Term (prop) -> Or x1 x2) -> Prop, forall H1 : (x1 : Term (prop) -> x2 : Term (prop) -> z389 : Term (prop) -> Or x1 x2 -> Hterm -> or_introl x1 x2 x171 -> Term (prop)) -> forall H2 : (x172 : Term (prop) -> x2 : Term (prop) -> z390 : Term (prop) -> eq (lift prop) (Type2) (or x1 x2) Hterm (or_intror x1 x2 x172) -> Term (prop)) -> P (or_introl x1 x2 x_171) /\\ P (or_intror x1 x2 x_172) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nMk_Aop. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Då för alla funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $nil$ och $a$ och $a$, för alla funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $nil$ och $a$, för alla funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $nil$.\nassistant\n", "label": "axiom mk_Aop (A : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 A) (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op nil a) a)) (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a nil) a)) (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) : cic.Term univs.Type0 (matita_basics_lists_list.Aop A nil)", "predict": "axiom mk_Aop (A : univs.Type0) (nil : Term univs.Type0 A) : ∀ op : Term univs.Type0 A → A → Term univs.Type0 A, ∀ a : Term univs.Type0 A, prop (eq (lift univs.Type0 univs.Type2 A) (op nil a)) ∧ ∀ a : Term univs.Type0 A, prop (eq (lift univs.Type0 univs.Type2 A) (op a nil)) ∧ ∀ a : Term univs.Type0 A, ∀ b : Term univs.Type0 A, ∀ c : Term univs.Type0 A, prop (eq (lift univs.Type0 univs.Type2 A) (op (op a b) c)) ) (A : univs.Type0) → prop (Term univs.Type0 (matita_basics_lists_list.Aop A) nil)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nCompose. För alla element $A$ och $B$ och $C$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $_f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $C$, för alla funktioner $_g$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $B$, för alla element $_x$ av $cic.Term$ av $univs.Type0$ och $A$, håller $cic.Term$ för $univs.Type0$ och $C$.\nassistant\n", "label": "compose : A : cic.Univ univs.Type0 -> B : cic.Univ univs.Type0 -> C : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 B -> cic.Term univs.Type0 C) -> _g : (__ : cic.Term univs.Type0 A -> cic.Term univs.Type0 B) -> _x : cic.Term univs.Type0 A -> cic.Term univs.Type0 C .", "predict": "compose : (A : Elem (cic.Univ (univs.Type0))) -> (B : Elem (cic.Univ (univs.Type0))) -> (C : Elem (cic.Univ (univs.Type0))) -> (f : (a : Elem (cic.Term (univs.Type0))) -> (b : Elem B) -> Elem (cic.Term (univs.Type0)) -> Elem C) -> (g : (a : Elem (cic.Term (univs.Type0))) -> (b : Elem A) -> Elem (cic.Term (univs.Type0)) -> Elem B) -> (x : Elem (cic.Term (univs.Type0))) -> Elem (cic.Term (univs.Type0)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nOption_inv_rect_Type0. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $x1$. Soit $P$ une fonction des éléments $_z1068$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $x1$ à des éléments de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $_H1$ des éléments $_z1069$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.option$ appliqué à $x1$ et $Hterm$ et $matita_basics_types.None$ appliqué à $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $P$ appliqué à $matita_basics_types.None$ appliqué à $x1$, pour toutes les fonctions $_H2$ des éléments $x_611$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_z1069$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.option$ appliqué à $x1$ et $Hterm$ et $matita_basics_types.Some$ appliqué à $x1$ et $x_611$ à des éléments de $cic.Term$ de $univs.Type0$ et de $P$ appliqué à $matita_basics_types.Some$ appliqué à $x1$ et $x_611$, $cic.Term$ tient pour $univs.Type0$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "axiom option_inv_rect_Type0 (x1 : cic.Univ univs.Type0) (Hterm : cic.Term univs.Type0 (matita_basics_types.option x1)) (P : (_z1068 : cic.Term univs.Type0 (matita_basics_types.option x1)) -> cic.Univ univs.Type0) (_H1 : (_z1069 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.None x1))) -> cic.Term univs.Type0 (P (matita_basics_types.None x1))) (_H2 : (x_611 : cic.Term univs.Type0 x1) -> (_z1069 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.Some x1 x_611))) -> cic.Term univs.Type0 (P (matita_basics_types.Some x1 x_611))) : cic.Term univs.Type0 (P Hterm)", "predict": "axiom option_inv_rect_Type0 (x1 : Univ Type0) (Hterm : option (Term Type0) x1) (P : ∀ z1068 : Term Type0 → option (Univ Type0) x1 → Prop) : ∀ H1 : (Term prop (lift Type0 Type2) (option (Term Type0) x1) Hterm None) → ∀ x611 : Term Type0 → (Term prop (lift Type0 Type2) (option (Term Type0) x1) Hterm (Some x1) x611) → ∀ x611 : Term Type0 → (Term prop (lift Type0 Type2) (option (Term Type0) x1) Hterm (Some x1) (P (Some x1) x611))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nAop_rect_CProp1_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Then for all functions $Q_$ from elements $_x_883$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and", "label": "Axiom Aop_rect_CProp1_body : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_883 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop), forall _H_mk_Aop : ((op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))), forall x_883 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil), cic.Term cic.prop (Q_ x_883) .", "predict": " $a$ and $op$ and $a$ and $_nilr$ and $a$ and $_assoc$ and $a$ and $b$ and $c$, the following holds: $Q_ = \\text{true}$ ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nOption_rect_Type2. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_602$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type2$. Let $_H_None$ be an element of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_basics_types.None$ applied to $_A$. Then for all functions $_H_Some$ from elements $x_603$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_basics_types.Some$ applied to $_A$ and $x_603$, for all elements $x_602$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$, $cic.Term$ holds for $univs.Type2$ and $Q_$ applied to $x_602$.\nassistant\n", "label": "postulate option_rect_Type2 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_602 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ univs.Type2) -> (_H_None : cic.Term univs.Type2 (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_603 : cic.Term univs.Type0 _A) -> cic.Term univs.Type2 (Q_ (matita_basics_types.Some _A x_603))) -> (x_602 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term univs.Type2 (Q_ x_602)", "predict": "postulate option_rect_Type2 : (A : Univ Type0) -> (Q : (x : Term Type0) -> option A -> Univ Type2) -> (H_None : Term Type2) -> (H_Some : (x : Term Type0) -> A -> Term Type2) -> (x : option A) -> Term Type2 (Q x)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nIncreasing_to_injective. For all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.increasing$ applied to $f$, $cic.Term$ holds for $cic.prop$ and $matita_basics_relations.injective$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $f$.\nassistant\n", "label": "postulate increasing_to_injective : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.increasing f)) -> cic.Term cic.prop (matita_basics_relations.injective matita_arithmetics_nat.nat matita_arithmetics_nat.nat f)", "predict": "postulate increasing_to_injective : (f : Term univs.Type0 Nat) -> (p : increasing (f : Nat -> Term univs.Type0 Nat)) -> prop (injective (Nat Nat) (Nat Nat) f)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nBi_symmetric. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $_R$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.bi_relation$ appliqué à $A$ et $B$. Alors $cic.Univ$ tient pour $cic.prop$.\nassistant\n", "label": "Axiom bi_symmetric : forall A : cic.Univ univs.Type0, forall B : cic.Univ univs.Type0, forall _R : cic.Term univs.Type0 (matita_basics_relations.bi_relation A B), cic.Univ cic.prop .", "predict": "Axiom bi_symmetric : forall A : univs.Type0, forall B : univs.Type0, forall _R : bi_relation A B, prop (cic.Univ) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nLe_1_fact. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_factorial.fact$ applicerat på $n$.\nassistant\n", "label": "postulate le_1_fact : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_factorial.fact n))", "predict": "postulate le_1_fact : (n : univs.Type0) -> matita_arithmetics_nat.nat -> cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_factorial.fact n))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nLstar_r_inv_lstar. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $R$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $B$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $b1$ och $b2$ vara element av $cic.Term$ av $univs.Type0$ och $B$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar_r$ applicerat på $B$ och $R$ och $l$ och $b1$ och $b2$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $R$ och $l$ och $b1$ och $b2$.\nassistant\n", "label": "postulate lstar_r_inv_lstar : (B : cic.Univ univs.Type0) -> (R : cic.Term univs.Type0 (matita_basics_relations.relation B)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b2 : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B R l b1 b2)) -> cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b2)", "predict": "postulate lstar_r_inv_lstar : (B : Univ) -> (R : Term (Relation (Type0 B))) -> (l : Nat) -> (b1 : Term (Type0 B)) -> (b2 : Term (Type0 B)) -> Prop (lstar_r B R l b1 b2)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nACop_inv_rect_CProp4. För alla element $x1$ av $cic.Univ$ av $univs.Type0$, för alla element $x2$ av $cic.Term$ av $univs.Type0$ och $x1$, för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1602$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $matita_arithmetics_bigops.op$ applicerat på $x1$ och $x2$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $x1$ och $x2$ och $aop$ och $b$ och $a$ och element $_z1603$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_arithmetics_bigops.mk_ACop$ applicerat på $x1$ och $x2$ och $aop$ och $_comm$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $x1$ och $x2$ och $aop$ och $_comm$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "Axiom ACop_inv_rect_CProp4 : forall x1 : cic.Univ univs.Type0, forall x2 : cic.Term univs.Type0 x1, forall Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2), forall P : ((_z1602 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> cic.Univ cic.prop), forall _H1 : ((aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (_comm : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (matita_arithmetics_bigops.op x1 x2 aop a b) (matita_arithmetics_bigops.op x1 x2 aop b a))) -> (_z1603 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop x1 x2)) Hterm (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))), cic.Term cic.prop (P Hterm) .", "predict": "Axiom cop_inv_rect_CProp4 : forall x1 : univs.Type0, forall x2 : cic.Term (univs.Type0) & x1, forall Hterm : cic.Term (univs.Type0) & matita_arithmetics_bigops.ACop (x1 & x2), forall P : (z1602 : cic.Term (univs.Type0)) -> matita_arithmetics_bigops.ACop (x1 & x2) -> cic.Univ -> prop, forall _H1 : (aop : cic.Term (univs.Type0)) -> matita_arithmetics_bigops.Aop (x1 & x2) -> (a : cic.Term (univs.Type0)) -> (b : cic.Term (univs.Type0)) -> prop, forall _comm : (a : cic.Term (univs.Type0)) -> (b : cic.Term (univs.Type0)) -> prop, forall x1 : univs.Type0, forall x2 : cic.Term (univs.Type0) & x1, forall aop : cic.Term (univs.Type0) & matita_arithmetics_bigops.Aop (x1 & x2), forall a : cic.Term (univs.Type0) & x1, forall b : cic.Term (univs.Type0) & x1, forall z1603 : prop, forall _z1602 : prop, forall _z1603 : prop, forall _Hterm : prop, forall _aop : prop, forall _comm : prop, forall x1 : univs.Type0, forall x2 : cic.Term (univs.Type0) & x1, forall Hterm : prop, forall aop : prop, forall a : prop, forall b : prop, forall z1603 : prop, forall _z1602 : prop, forall _z1603 : prop, forall _Hterm : prop, forall _aop : prop, forall _comm : prop, forall P : (x : cic.Term (univs.Type0)) -> (Hterm : prop) -> (aop : prop) -> (comm : prop) -> prop, forall x : cic.Term (univs.Type0) & x1, forall P : (x : cic.Term (univs.Type0)) ->"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nSig_rect_CProp4_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $Q_$ une fonction des éléments $_x_678$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_Sig$ une fonction des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $_f$ appliqué à $pi1$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $A$ et $_f$ et $pi1$ et $_pi2$. Soit $x_678$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_678$.\nassistant\n", "label": "postulate Sig_rect_CProp4_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_678 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ cic.prop) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_678 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term cic.prop (Q_ x_678)", "predict": "postulate sig_rect_CProp4_body : (A : Univ Type0) -> (f : Term Type0 -> A -> Prop) -> (Q : (x : Term Type0) -> Sig A f -> Prop) -> (H_mk_Sig : (pi1 : Term Type0) -> (pi2 : Prop) -> (f pi1) -> (Q (mk_Sig A f pi1 pi2)) -> Prop) -> (x_678 : Term Type0) -> (Q (Sig A f x_678))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nAnd_inv_ind. Soient $x1$ et $x2$ des éléments de $cic.Univ$ de $cic.prop$. Soit $Hterm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $x1$ et $x2$. Soit $P$ une fonction des éléments $_z323$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H1$ une fonction des éléments $x_120$ de $cic.Term$ de $cic.prop$ et de $x1$ et des éléments $x_119$ de $cic.Term$ de $cic.prop$ et de $x2$ et des éléments $_z324$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $cic.prop$ et $univs.Type2$ et $matita_basics_logic.And$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_logic.conj$ appliqué à $x1$ et $x2$ et $x_120$ et $x_119$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_logic.conj$ appliqué à $x1$ et $x2$ et $x_120$ et $x_119$. Alors $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "axiom And_inv_ind (x1 x2 : cic.Univ cic.prop) (Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2)) (P : (_z323 : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> cic.Univ cic.prop) (_H1 : (x_120 : cic.Term cic.prop x1) -> (x_119 : cic.Term cic.prop x2) -> (_z324 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_120 x_119))) -> cic.Term cic.prop (P (matita_basics_logic.conj x1 x2 x_120 x_119))) : cic.Term cic.prop (P Hterm)", "predict": "axiom and_inv_ind (x1 x2 : cic.Univ) (Hterm : cic.Term (cic.prop) (matita_basics_logic.And x1 x2)) (P : ∀ z323 : cic.Term (cic.prop) (matita_basics_logic.And x1 x2), cic.Univ (cic.prop)) (H1 : ∀ x120 : cic.Term (cic.prop) x1, ∀ x119 : cic.Term (cic.prop) x2, ∀ z324 : cic.Term (cic.prop) (matita_basics_logic.eq (cic.lift (cic.prop) (univs.Type2)) (matita_basics_logic.And x1 x2) Hterm (matita_basics_logic.conj x1 x2) x120 x119)) : P Hterm"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nSum_rect_Type3_body. For all elements $_A$ and $_B$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_536$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $univs.Type3$, for all functions $_H_inl$ from elements $x_537$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_types.inl$ applied to $_A$ and $_B$ and $x_537$, for all functions $_H_inr$ from elements $x_538$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_types.inr$ applied to $_A$ and $_B$ and $x_538$, for all elements $x_536$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$, $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_536$.\nassistant\n", "label": "postulate Sum_rect_Type3_body : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_536 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ univs.Type3) -> (_H_inl : (x_537 : cic.Term univs.Type0 _A) -> cic.Term univs.Type3 (Q_ (matita_basics_types.inl _A _B x_537))) -> (_H_inr : (x_538 : cic.Term univs.Type0 _B) -> cic.Term univs.Type3 (Q_ (matita_basics_types.inr _A _B x_538))) -> (x_536 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Term univs.Type3 (Q_ x_536)", "predict": "postulate sum_rect_Type3_body : (A : Univ) -> (B : Univ) -> (Q : Term A) -> (S : Sum A B) -> (x : Term A) -> (H_inl : Term x) -> (x : Term B) -> (H_inr : Term x) -> (x : Term (Sum A B)) -> Term (univs Type3) (Q (to Term (univs Type3) (S x)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nDPair_rect_Type1_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_648$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $univs.Type1$. Soit $_H_mk_DPair$ une fonction des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $_f$ appliqué à $dpi1$ à des éléments de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $A$ et $_f$ et $dpi1$ et $_dpi2$. Soit $x_648$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$. Alors $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_648$.\nassistant\n", "label": "DPair_rect_Type1_body : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) -> Q_ : (_x_648 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Univ univs.Type1) -> _H_mk_DPair : (dpi1 : cic.Term univs.Type0 A -> _dpi2 : cic.Term univs.Type0 (_f dpi1) -> cic.Term univs.Type1 (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> x_648 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Term univs.Type1 (Q_ x_648) .", "predict": "dpair_rect_Type1_body : (A : Elem (univs Type0)) -> (f : Elem (cic Term) (univs Type0) -> Elem (cic Univ) (univs Type0)) -> (Q_ : (x_648 : Elem (cic Term) (univs Type0)) -> DPair A (f x_648) -> Elem (cic Univ) (univs Type1)) -> (H_mk_DPair : (dpi1 : Elem (cic Term) (univs Type0)) -> A -> (dpi2 : Elem (cic Term) (univs Type0)) -> f dpi1 -> Elem (cic Term) (univs Type1) -> Q_ (mk_DPair A f dpi1) (dpi1, dpi2)) -> (x_648 : Elem (cic Term) (univs Type0)) -> DPair A (f x_648) -> Elem (cic Term) (univs Type1) -> Proof (Q_ x_648) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nIff_trans. For all elements $A$ and $B$ and $C$ of $cic.Univ$ of $cic.prop$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.iff$ applied to $A$ and $B$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.iff$ applied to $B$ and $C$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.iff$ applied to $A$ and $C$.\nassistant\n", "label": "postulate iff_trans : (A : cic.Univ cic.prop) -> (B : cic.Univ cic.prop) -> (C : cic.Univ cic.prop) -> (__ : cic.Term cic.prop (matita_basics_logic.iff A B)) -> (__1 : cic.Term cic.prop (matita_basics_logic.iff B C)) -> cic.Term cic.prop (matita_basics_logic.iff A C)", "predict": "postulate iff_trans : (A : cic.Univ) -> (B : cic.Univ) -> (C : cic.Univ) -> (x : cic.Term prop) -> (y : cic.Term prop) -> matita_basics_logic.iff A B -> matita_basics_logic.iff B C -> cic.Term prop (matita_basics_logic.iff A C)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nEq_rect_Type3. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type2$. Låt $_x$ vara ett element av $cic.Term$ av $univs.Type2$ och $A$. Då för alla funktioner $Q_$ från element $x_10$ av $cic.Term$ av $univs.Type2$ och $A$ och element $_x_11$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_10$ till element av $cic.Univ$ av $univs.Type3$, för alla element $_H_refl$ av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $_x$ och $matita_basics_logic.refl$ applicerat på $A$ och $_x$, för alla element $x_10$ av $cic.Term$ av $univs.Type2$ och $A$, för alla element $x_11$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_10$, håller $cic.Term$ för $univs.Type3$ och $Q_$ applicerat på $x_10$ och $x_11$.\nassistant\n", "label": "Axiom eq_rect_Type3 : forall A : cic.Univ univs.Type2, forall _x : cic.Term univs.Type2 A, forall Q_ : ((x_10 : cic.Term univs.Type2 A) -> (_x_11 : cic.Term cic.prop (matita_basics_logic.eq A _x x_10)) -> cic.Univ univs.Type3), forall _H_refl : cic.Term univs.Type3 (Q_ _x (matita_basics_logic.refl A _x)), forall x_10 : cic.Term univs.Type2 A, forall x_11 : cic.Term cic.prop (matita_basics_logic.eq A _x x_10), cic.Term univs.Type3 (Q_ x_10 x_11) .", "predict": "Axiom eq_rect_Type3 : forall A : univs.Type2, forall x : cic.Term A, forall Q : x -> A -> cic.Term univs.Type3, forall H_refl : x = A, forall x_10 : cic.Term A, forall x_11 : cic.prop, (eq (A x) (x_10) -> Q x_10 x_11) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nAop_rect_Type3. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_787$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type3$. Då för alla funktioner $_H_mk_Aop$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$", "label": "postulate Aop_rect_Type3 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_787 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ univs.Type3) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type3 (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_787 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term univs.Type3 (Q_ x_787)", "predict": " av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type3$ och $Q_$ applicerat på $a$ applicerat på $b$ applicerat på $c$ , finns det en funktion $_Aop_rect_Type3$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $univs.Type3$ som är definerad med följande princip: för alla $x$ av $cic.Term$ av $univs.Type0$ och $A$, är $Q_$ applicerat på $x$ och $_nil$ lika med $a$ och för alla $x$ av $cic.Term$ av $univs.Type0$ och $A$, är $Q_$ applicerat på $x$ och $op$ applicerat på $x$ och $_nil$ lika med $a$ och för alla $x$ av $cic.Term$ av $univs.Type0$ och $A$, är $Q_$ applicerat på $x$ och $op$ applicerat på $x$ och $x$ lika med $a$ och för alla $x$ av $cic.Term$ av $univs.Type0$ och $A$, är $Q_$ applicerat på $x$ och $op$ applicerat på $x$ och $op$ applicerat på $x$ och $x$ lika med $a$ ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nMin_spec_ind. Let $_n$ and $_b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $Q_$ be a function from elements $x_1075$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $_x_1076$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_minimization.min_spec$ applied to $_n$ and $_b$ and $_f$ and $x_1075$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_found_min_spec$ be a function from elements $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $x_1080$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $_b$ and $m$ and elements $x_1079$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $matita_arithmetics_nat.plus$ applied to $_n$ and $_b$ and elements $x_1078$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $_f$ applied to $m$ and $matita_basics_bool.true$ and functions $x_1077$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $_b$ and $i$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $m$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $_f$ applied to $i$ and $", "label": "Axiom min_spec_ind : forall _n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall Q_ : ((x_1075 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_1076 : cic.Term cic.prop (matita_arithmetics_minimization.min_spec _n _b _f x_1075)) -> cic.Univ cic.prop), forall _H_found_min_spec : ((m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_1080 : cic.Term cic.prop (matita_arithmetics_nat.le _b m)) -> (x_1079 : cic.Term cic.prop (matita_arithmetics_nat.lt m (matita_arithmetics_nat.plus _n _b))) -> (x_1078 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f m) matita_basics_bool.true)) -> (x_1077 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le _b i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool", "predict": "matita_basics_bool.true$. Then, $Q_$ has the following property: for all $x_1075$ in $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and for all $_x_1076$ in $cic.Term$ of $cic.prop$ and $matita_arithmetics_minimization.min_spec$ applied to $_n$ and $_b$ and $_f$ and $x_1075$, there exists $m$ in $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and $x_1080$ in $cic.Term$ of $cic.prop$ such that $Q_$ is satisfied by $m$ and $x_1080$ and $m$ is greater than or equal to $b$ and $m$ is less than $matita_arithmetics_nat.plus$ applied to $_n$ and $_b$ and $x_1079$ is satisfied and $x_1078$ is satisfied and $x_1077$ is satisfied."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nProd_ind. Let $_A$ and $_B$ be elements of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_690$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_Prod$ be a function from elements $_fst$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_snd$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_Prod$ applied to $_A$ and $_B$ and $_fst$ and $_snd$. Then for all elements $x_690$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_690$.\nassistant\n", "label": "axiom Prod_ind (_A _B : cic.Univ univs.Type0) (Q_ : (_x_690 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ cic.prop) (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) (x_690 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) : cic.Term cic.prop (Q_ x_690)", "predict": "axiom prod_ind (A B : Univ) (Q : ∀ x : Prod A B, Prop) : ∀ x : Prod A B, Q x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nNotb. För alla element $__$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_bool.bool$.\nassistant\n", "label": "Axiom notb : forall __ : cic.Term univs.Type0 matita_basics_bool.bool, cic.Term univs.Type0 matita_basics_bool.bool .", "predict": "Axiom notb : forall b : univs.Type0, matita_basics_bool.bool, cic.Term (univs.Type0) (matita_basics_bool.bool) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nMatch_Aop. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $return_sort$ un élément de $cic.Sort$. Soit $return_type$ une fonction des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $return_sort$. Alors pour toutes les fonctions $case_mk_Aop$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appl", "label": "match_Aop : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> return_sort : cic.Sort -> return_type : (z : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> cic.Univ return_sort) -> case_mk_Aop : (op : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _nill : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> _nilr : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> _assoc : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term return_sort (return_type (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> z : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> cic.Term return_sort (return_type z) .", "predict": "iqué à $A$ et $a$ et $b$ et $c$, $case_mk_Aop$ est égal à $return_type$ appliqué à $A$ et $a$ et $b$ et $c$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nLet_upper_bound. Let $__$ and $p$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_nat.nat$.\nassistant\n", "label": "let_upper_bound : __ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_arithmetics_nat.nat .", "predict": "let_upper_bound : let $__ : univs.Type0$ and $p : matita_arithmetics_nat.nat$ in $cic.Term$ : univs.Type0 and matita_arithmetics_nat.nat ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nLe_exp_to_le. For all elements $b$ and $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $b$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_exp.exp$ applied to $b$ and $n$ and $matita_arithmetics_exp.exp$ applied to $b$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $m$.\nassistant\n", "label": "axiom le_exp_to_le (b n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) b)) (__1 : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp b n) (matita_arithmetics_exp.exp b m))) : cic.Term cic.prop (matita_arithmetics_nat.le n m)", "predict": "axiom le_exp_to_le (b n m : Term Type0) (x : Lt (S 0) b) (y : Le (exp b n) (exp b m)) : Le n m"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nLet_clause_1595. Låt $p$ och $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Då för alla element $posm$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla element $primepn$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $primepm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $lt1gcd$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $n$ och $m$, för alla element $H$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $matita_arithmetics_primes.smallest_factor$ applicerat på $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $n$ och $m$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicer", "label": "let_clause_1595 : p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> primepn : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p n) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) -> primepm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) -> lt1gcd : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_gcd.gcd p (matita_arithmetics_nat.times n m))) -> H : cic.Term cic.prop (matita_arithmetics_primes.divides (matita_arithmetics_primes.smallest_factor (matita_arithmetics_gcd.gcd p (matita_arithmetics_nat.times n m))) m) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p n) (matita_arithmetics_gcd.gcd p m)) .", "predict": "at på $matita_arithmetics_primes.smallest_factor$ applicerat på $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $n$ och $m$ och $m$ och $matita_arithmetics_primes.smallest_factor$ applicerat på $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $n$ och $m$ och $m$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nExp_pi. Soient $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $p$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_bigops.bigop$ appliqué à $n$ et la fonction qui envoie $i$ à $p$ appliqué à $i$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ et la fonction qui envoie $i$ à $matita_arithmetics_exp.exp$ appliqué à $f$ appliqué à $i$ et $m$ et $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_bigops.bigop$ appliqué à $n$ et la fonction qui envoie $i$ à $p$ appliqué à $i$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $m$.\nassistant\n", "label": "postulate exp_pi : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_exp.exp (f i) m)) (matita_arithmetics_exp.exp (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i)) m))", "predict": "postulate exp_pi : (n : univs.Type0) -> (m : matita_arithmetics_nat.nat) -> (p : (i : univs.Type0) -> matita_arithmetics_nat.nat) -> (f : (i : univs.Type0) -> matita_arithmetics_nat.nat) -> cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (p _) matita_arithmetics_nat.nat) (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_exp.exp (f _) m)) (matita_arithmetics_exp.exp (matita_arithmetics_bigops.bigop (n (p _)) matita_arithmetics_nat.nat) (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_nat.times (f _) m))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nTrue_inv_rect_CProp2. Soit $Hterm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$. Alors pour toutes les fonctions $P$ des éléments $_z173$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $_z174$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $cic.prop$ et $univs.Type2$ et $matita_basics_logic.True$ et $Hterm$ et $matita_basics_logic.I$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_logic.I$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "True_inv_rect_CProp2 : Hterm : cic.Term cic.prop matita_basics_logic.True -> P : (_z173 : cic.Term cic.prop matita_basics_logic.True -> cic.Univ cic.prop) -> _H1 : (_z174 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 matita_basics_logic.True) Hterm matita_basics_logic.I) -> cic.Term cic.prop (P matita_basics_logic.I)) -> cic.Term cic.prop (P Hterm) .", "predict": "true_inv_rect_CProp2 : (Hterm : Elem (Term (prop)) (True)) -> Proof (forall (P : (z173 : Elem (Term (prop)) (True)) -> Univ (prop)) (forall (H1 : (z174 : Elem (Term (prop)) (eq (lift (prop) (Type2)) (True))) (Hterm (I (Term (prop)) (P (I (Term (prop))))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nMonotonic_lt_times_l. Soit $c$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $c$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_relations.monotonic$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.lt$ et la fonction qui envoie $t$ à $matita_arithmetics_nat.times$ appliqué à $t$ et $c$.\nassistant\n", "label": "Axiom monotonic_lt_times_l : forall c : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O c), cic.Term cic.prop (matita_basics_relations.monotonic matita_arithmetics_nat.nat matita_arithmetics_nat.lt (fun t => matita_arithmetics_nat.times t c)) .", "predict": "Axiom monotonic_lt_times_l : forall c : term Type0 nat, forall p : prop, (lt O c -> monotonic nat lt -> forall t : term prop, (p -> times t c)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nDivides_to_divides_times. Låt $p$ och $q$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $p$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_primes.divides$ applicerat på $p$ och $q$. Låt $__2$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $p$ och $n$. Låt $__3$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $q$ och $n$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $matita_arithmetics_nat.times$ applicerat på $p$ och $q$ och $n$.\nassistant\n", "label": "axiom divides_to_divides_times (p q n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_primes.prime p)) (__1 : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides p q))) (__2 : cic.Term cic.prop (matita_arithmetics_primes.divides p n)) (__3 : cic.Term cic.prop (matita_arithmetics_primes.divides q n)) : cic.Term cic.prop (matita_arithmetics_primes.divides (matita_arithmetics_nat.times p q) n)", "predict": "axiom divides_to_divides_times (p q n : Term Type0) (p_prime : prop (prime p)) (not_divides : prop (not (divides p q))) (divides_p_n : prop (divides p n)) (divides_q_n : prop (divides q n)) : prop (divides (times p q) n)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nList_rect_Type2_body. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_736$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type2$. Soit $_H_nil$ un élément de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_basics_lists_list.nil$ appliqué à $_A$. Alors pour toutes les fonctions $_H_cons$ des éléments $x_738$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $x_737$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ et des éléments $_x_740$ de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $x_737$ à des éléments de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_basics_lists_list.cons$ appliqué à $_A$ et $x_738$ et $x_737$, pour tous les éléments $x_736$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$, $cic.Term$ tient pour $univs.Type2$ et $Q_$ appliqué à $x_736$.\nassistant\n", "label": "list_rect_Type2_body : _A : cic.Univ univs.Type0 -> Q_ : (_x_736 : cic.Term univs.Type0 (matita_basics_lists_list.list _A) -> cic.Univ univs.Type2) -> _H_nil : cic.Term univs.Type2 (Q_ (matita_basics_lists_list.nil _A)) -> _H_cons : (x_738 : cic.Term univs.Type0 _A -> x_737 : cic.Term univs.Type0 (matita_basics_lists_list.list _A) -> _x_740 : cic.Term univs.Type2 (Q_ x_737) -> cic.Term univs.Type2 (Q_ (matita_basics_lists_list.cons _A x_738 x_737))) -> x_736 : cic.Term univs.Type0 (matita_basics_lists_list.list _A) -> cic.Term univs.Type2 (Q_ x_736) .", "predict": "list_rect_Type2_body : (A : Elem (univ cic.Univ)) -> (Q : (x : Elem (cic.Term)) -> (x : Elem (matita_basics_lists_list.list)) -> A) -> (H_nil : Elem (cic.Term)) -> (Q H_nil (matita_basics_lists_list.nil A)) -> (x : Elem (cic.Term)) -> (x : Elem (matita_basics_lists_list.list)) -> (A : Elem (cic.Univ)) -> (x : Elem (cic.Term)) -> (x : Elem (cic.Term)) -> (Q x (matita_basics_lists_list.cons A x)) -> (x : Elem (cic.Term)) -> (x : Elem (matita_basics_lists_list.list)) -> Proof (forall (x : Elem (cic.Term)) (x : Elem (matita_basics_lists_list.list)) (A : Elem (cic.Univ)) (Q x)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nLet_clause_1532. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $divnm$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $n$ and $m$. Then for all elements $H$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $n$, for all elements $d$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $auto$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $m$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.O$ and $d$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $m$ and $matita_arithmetics_nat.O$.\nassistant\n", "label": "let_clause_1532 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> divnm : cic.Term cic.prop (matita_arithmetics_primes.divides n m) -> H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O n) -> d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> auto : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times matita_arithmetics_nat.O d)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m matita_arithmetics_nat.O) .", "predict": "let_clause_1532 : (n : Elem (Term (Type0))) -> (m : Elem (nat (univs))) -> (divnm : Elem (Term (prop (matita_arithmetics_primes)) (n (m))) -> Proof (forall (H : Elem (Term (prop (matita_basics_logic)) (lift (Type0) (Type2)) (nat (matita_arithmetics_nat)) (O))) (forall (d : Elem (Term (Type0)) (nat (matita_arithmetics_nat))) (forall (auto : Elem (Term (prop (matita_basics_logic)) (eq (lift (Type0) (Type2)) (nat (matita_arithmetics_nat)) (O))) (eq (m (times (O) d)) (O)))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nACop_rect_CProp5. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_905$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_ACop$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$, för alla element $x_905$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_905$.\nassistant\n", "label": "Axiom ACop_rect_CProp5 : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_905 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop), forall _H_mk_ACop : ((aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))), forall x_905 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil), cic.Term cic.prop (Q_ x_905) .", "predict": "Axiom cop_rect_CProp5 : forall A : univs.Type0, forall _nil : cic.Term, A -> forall Q_ : _x_905 -> matita_arithmetics_bigops.ACop A _nil -> forall aop : cic.Term, matita_arithmetics_bigops.Aop A _nil -> forall a : cic.Term, forall b : cic.Term, A -> matita_basics_logic.eq (univs.Type0) (univs.Type2) A -> matita_arithmetics_bigops.op A _nil aop a b -> matita_arithmetics_bigops.op A _nil aop b a -> forall x_905 : cic.Term, A -> Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop) (comm a b) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nFilter_true. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $l$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$. Alors pour tous les éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$, pour toutes les fonctions $p$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $p$ appliqué à $a$ et $matita_basics_bool.true$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $A$ et $matita_basics_lists_list.filter$ appliqué à $A$ et $p$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $a$ et $l$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $a$ et $matita_basics_lists_list.filter$ appliqué à $A$ et $p$ et $l$.\nassistant\n", "label": "Axiom filter_true : forall A : cic.Univ univs.Type0, forall l : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall a : cic.Term univs.Type0 A, forall p : ((__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 matita_basics_bool.bool), forall __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p a) matita_basics_bool.true), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.filter A p (matita_basics_lists_list.cons A a l)) (matita_basics_lists_list.cons A a (matita_basics_lists_list.filter A p l))) .", "predict": "Axiom filter_true : forall A : univs.Type0, forall l : cic.Term (univs.Type0) * matita_basics_lists_list.list A, forall a : cic.Term (univs.Type0) * A, forall p : forall __ : cic.Term (univs.Type0) * A, matita_basics_bool.bool, forall __ : cic.Term (cic.prop) * matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_basics_bool.bool) * p (a) * matita_basics_bool.true, cic.Term (cic.prop) (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_basics_lists_list.list A) (matita_basics_lists_list.filter A p) (matita_basics_lists_list.cons A a) l) (matita_basics_lists_list.cons A a) (matita_basics_lists_list.filter A p) (l) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nBool_inv_rect_Type3. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Then for all functions $P$ from elements $_z599$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $univs.Type3$, for all functions $_H1$ from elements $_z600$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Hterm$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $univs.Type3$ and $P$ applied to $matita_basics_bool.true$, for all functions $_H2$ from elements $_z600$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Hterm$ and $matita_basics_bool.false$ to elements of $cic.Term$ of $univs.Type3$ and $P$ applied to $matita_basics_bool.false$, $cic.Term$ holds for $univs.Type3$ and $P$ applied to $Hterm$.\nassistant\n", "label": "postulate bool_inv_rect_Type3 : (Hterm : cic.Term univs.Type0 matita_basics_bool.bool) -> (P : (_z599 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ univs.Type3) -> (_H1 : (_z600 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.true)) -> cic.Term univs.Type3 (P matita_basics_bool.true)) -> (_H2 : (_z600 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.false)) -> cic.Term univs.Type3 (P matita_basics_bool.false)) -> cic.Term univs.Type3 (P Hterm)", "predict": "postulate bool_inv_rect_Type3 : (Hterm : Term Type0) -> Bool -> (P : (z599 : Term Type0) -> (b : Bool) -> Universe Type3) -> (H1 : (z600 : Prop) -> Eq (lift Type0 Type2) (and b (true))) -> (z600 -> Term Type3) -> (P true) -> (H2 : (z600 : Prop) -> Eq (lift Type0 Type2) (and b (false))) -> (z600 -> Term Type3) -> (P false) -> Universe Type3 (P Hterm)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nSig_rect_Type5_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_668$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $univs.Type5$. Then for all functions $_H_mk_Sig$ from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $_f$ applied to $pi1$ to elements of $cic.Term$ of $univs.Type5$ and $Q_$ applied to $matita_basics_types.mk_Sig$ applied to $A$ and $_f$ and $pi1$ and $_pi2$, for all elements $x_668$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$, $cic.Term$ holds for $univs.Type5$ and $Q_$ applied to $x_668$.\nassistant\n", "label": "Axiom Sig_rect_Type5_body : forall A : cic.Univ univs.Type0, forall _f : ((__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop), forall Q_ : ((_x_668 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ univs.Type5), forall _H_mk_Sig : ((pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term univs.Type5 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))), forall x_668 : cic.Term univs.Type0 (matita_basics_types.Sig A _f), cic.Term univs.Type5 (Q_ x_668) .", "predict": "Axiom sig_rect_Type5_body : forall A : Univ, forall f : Term Type0 -> A -> Univ, forall Q_ : (x : Term Type0) -> Sig A f -> Univ, forall H_mk_Sig : (pi1 : Term Type0) -> A -> (pi2 : Prop) -> f pi1 -> Term Type5, forall x_668 : Term Type0, Sig A f, Prop (Term Type5 (Q_ x_668)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nTrue_inv_rect_Type0. Låt $Hterm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$. Låt $P$ vara en funktion från element $_z155$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$ till element av $cic.Univ$ av $univs.Type0$. Låt $_H1$ vara en funktion från element $_z156$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_basics_logic.True$ och $Hterm$ och $matita_basics_logic.I$ till element av $cic.Term$ av $univs.Type0$ och $P$ applicerat på $matita_basics_logic.I$. Då håller $cic.Term$ för $univs.Type0$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "postulate True_inv_rect_Type0 : (Hterm : cic.Term cic.prop matita_basics_logic.True) -> (P : (_z155 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ univs.Type0) -> (_H1 : (_z156 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 matita_basics_logic.True) Hterm matita_basics_logic.I)) -> cic.Term univs.Type0 (P matita_basics_logic.I)) -> cic.Term univs.Type0 (P Hterm)", "predict": "postulate true_inv_rect_Type0 : (Hterm : Term (prop True)) -> (P : (z155 : Term (prop True)) -> Universe Type0) -> (H1 : (z156 : Term (prop True)) -> Eq (lift prop (Type2 True)) (Hterm)) -> (I : Term (prop True)) -> Term (Universe Type0) (P (I))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nLet_clause_1575. Låt $m$ och $n$ och $a$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $posm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Låt $pnm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $c$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicer", "label": "let_clause_1575 : m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) -> c : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (d : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m", "predict": "at på $matita_arithmetics_nat.O$.\n\nlet_clause_1575 : (m : Elem (Term (univs Type0))) -> (n : Elem (Term (univs Type0))) -> (a : Elem (Term (univs Type0))) -> (b : Elem (Term (univs Type0))) -> (posn : Prop (Lt (nat (matita_arithmetics_nat)) (O n))) -> (posm : Prop (Lt (nat (matita_arithmetics_nat)) (O m))) -> (pnm : Prop (Eq (lift (univs Type0) (univs Type2)) (nat (matita_arithmetics_gcd)) (n m) (S (nat (matita_arithmetics_nat)) (O)))) -> (c : Elem (Term (univs Type0))) -> (clearme : Prop (ex (nat (matita_arithmetics_nat)) (or (Eq (lift (univs Type0) (univs Type2)) (nat (matita_arithmetics_nat)) c) (and (Lt (nat (matita_arithmetics_nat)) (minus (times c (n)) (times d (m))) (O)) (Eq (lift (univs Type0) (univs Type2)) (nat (matita_arithmetics_nat)) c))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nAop_inv_rect_Type3. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be an element of $cic.Term$ of $univs.Type0$ and $x1$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z1512$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type3$. Then for all functions $_H1$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$", "label": "axiom Aop_inv_rect_Type3 (x1 : cic.Univ univs.Type0) (x2 : cic.Term univs.Type0 x1) (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) (P : (_z1512 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> cic.Univ univs.Type3) (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1513 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type3 (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) : cic.Term univs.Type3 (P Hterm)", "predict": " to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_neg$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $neg$ applied to $a$ and functions $_left_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_right_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_zero$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $zero$ applied to $x1$ and $a$ and functions $_plus$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nLet_clause_1068. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $permf$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_permutation.permut$ appliqué à $f$ et $n$. Soient $i$ et $j$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $lein$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $i$ et $n$. Soit $lejn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $j$ et $n$. Soit $a$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $matita_arithmetics_nat.le$ appliqué à $a$ et $n$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $a$ et $i$. Soit $lean$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $a$ et $n$. Soit $fa$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $a$ et $i$. Soit $b$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme0$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $matita_arithmetics_nat.le$ appliqué à $b$ et $n$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type", "label": "axiom let_clause_1068 (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (permf : cic.Term cic.prop (matita_arithmetics_permutation.permut f n)) (i j : cic.Term univs.Type0 matita_arithmetics_nat.nat) (lein : cic.Term cic.prop (matita_arithmetics_nat.le i n)) (lejn : cic.Term cic.prop (matita_arithmetics_nat.le j n)) (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le a n) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i))) (lean : cic.Term cic.prop (matita_arithmetics_nat.le a n)) (fa : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i)) (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme0 : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le b n) (matita_basics_logic.eq (cic.lift univs.Type0", "predict": "0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $b$ et $j$. Soit $lb$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $b$ et $n$. Soit $fb$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $b$ et $j$. Soit $x$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $matita_arithmetics_nat.le$ appliqué à $x$ et $n$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $x$ et $i$. Soit $lx$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $x$ et $n$. Soit $fx$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $x$ et $i$. Soit $y$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $clearme0$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $matita_arithmetics_nat.le$ appliqué à $y$ et $"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nMin_spec_inv_ind. Låt $x1$ och $x2$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla funktioner $x3$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, för alla element $x4$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_Hterm$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_minimization.min_spec$ applicerat på $x1$ och $x2$ och $x3$ och $x4$, för alla funktioner $P$ från element $_z1890$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $_x_1080$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $x2$ och $m$ och element $_x_1079$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $matita_arithmetics_nat.plus$ applicerat på $x1$ och $x2$ och element $_x_1078$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $x3$ applicerat på $m$ och $matita_basics_bool.true$ och funktioner $_x_1077$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $x2$ och $i$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $m$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs", "label": "axiom min_spec_inv_ind (x1 x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) (x3 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (x4 : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_Hterm : cic.Term cic.prop (matita_arithmetics_minimization.min_spec x1 x2 x3 x4)) (P : (_z1890 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop) (_H1 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_1080 : cic.Term cic.prop (matita_arithmetics_nat.le x2 m)) -> (_x_1079 : cic.Term cic.prop (matita_arithmetics_nat.lt m (matita_arithmetics_nat.plus x1 x2))) -> (_x_1078 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (x3 m) matita_basics_bool.true)) -> (_x_1077 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le x2 i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic", "predict": ".Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $x3$ applicerat på $i$ och $matita_basics_bool.true$ , är det giltig att $x4$ är $\\top$.\n\naxiom min_spec_inv_ind (x1 x2 : univs.Type0) (x3 : ∀ x : univs.Type0, matita_arithmetics_nat.nat → x : cic.Term (univs.Type0 × matita_basics_bool.bool)) (x4 : ∀ x : univs.Type0, matita_arithmetics_nat.nat) (xHterm : min_spec x1 x2 x3 x4) (P : ∀ z : univs.Type0, matita_arithmetics_nat.nat → P : cic.Univ (cic.prop × matita_arithmetics_nat.nat)) (H1 : ∀ m : univs.Type0, matita_arithmetics_nat.nat → x2 ≤ m ∧ m < matita_arithmetics_nat.plus x1 x2) (x : ∀ m : univs.Type0, matita_arithmetics_nat.nat → matita_basics_logic.eq (cic.lift (univs.Type0 × univs.Type2) (matita_basics_bool.bool)) (x3 m) matita_basics_bool.true) (x : ∀ i : univs.Type0, matita_arithmetics_nat.nat → x2 ≤ i ∧ i < m) (x : ∀ i : univs.Type0, matita_arithmetics_nat.nat → matita_basics_logic.eq (cic.lift (univs.Type0 × univs.Type2) (matita_basics_bool.bool)) (x3 i) matita_basics_bool.true) : ∀ x : univs.Type0, matita_arithmetics_nat.nat, x4 = top"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nRange_inv_rect_Type2. För alla element $x1$ av $cic.Univ$ av $univs.Type0$, för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $x1$, för alla funktioner $P$ från element $_z1650$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $x1$ till element av $cic.Univ$ av $univs.Type2$, för alla funktioner $_H1$ från funktioner $_enum$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och element $_upto$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $_filter$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ och element $_z1651$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_bigops.range$ applicerat på $x1$ och $Hterm$ och $matita_arithmetics_bigops.mk_range$ applicerat på $x1$ och $_enum$ och $_upto$ och $_filter$ till element av $cic.Term$ av $univs.Type2$ och $P$ applicerat på $matita_arithmetics_bigops.mk_range$ applicerat på $x1$ och $_enum$ och $_upto$ och $_filter$, håller $cic.Term$ för $univs.Type2$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "axiom range_inv_rect_Type2 (x1 : cic.Univ univs.Type0) (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1)) (P : (_z1650 : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1)) -> cic.Univ univs.Type2) (_H1 : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 x1) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (_z1651 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.range x1)) Hterm (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter))) -> cic.Term univs.Type2 (P (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter))) : cic.Term univs.Type2 (P Hterm)", "predict": "axiom range_inv_rect_Type2 (x1 : Univ) (Hterm : Term Type0) (range : range x1) (P : ∀ z1650 : Term Type0, range x1 → Univ Type2) (H1 : ∀ ⋀ (enum : ∀ ⋂ (z : Term Type0) (nat : Nat), Term Type0) (x : Univ) (upto : Nat), filter (enum z nat) (upto x)) (z1651 : ∀ (z : Term Type0), Eq (lift Type0 Type2) (range x1) (Hterm)) (x : ∀ (z : Term Type0), Eq (mk_range x1 (enum z (nat)) (upto x)) (filter (enum z (nat)) (upto x))) (z1651 : ∀ (z : Term Type0), Eq (lift Type0 Type2) (range x1) (Hterm)) (P (Hterm) (range x1)) : ∀ (z : Term Type2), P (mk_range x1 (enum z (nat)) (upto x)) (filter (enum z (nat)) (upto x))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nBool_rect_Type2_body. Soit $Q_$ une fonction des éléments $_x_338$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Univ$ de $univs.Type2$. Soit $_H_true$ un élément de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_basics_bool.true$. Soit $_H_false$ un élément de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_basics_bool.false$. Alors pour tous les éléments $x_338$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, $cic.Term$ tient pour $univs.Type2$ et $Q_$ appliqué à $x_338$.\nassistant\n", "label": "postulate bool_rect_Type2_body : (Q_ : (_x_338 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ univs.Type2) -> (_H_true : cic.Term univs.Type2 (Q_ matita_basics_bool.true)) -> (_H_false : cic.Term univs.Type2 (Q_ matita_basics_bool.false)) -> (x_338 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type2 (Q_ x_338)", "predict": "postulate bool_rect_Type2_body : (Q : (x_338 : Term Type0) -> Bool -> Univ) -> (H_true : Term Type2 (Q x_338 true)) -> (H_false : Term Type2 (Q x_338 false)) -> (x_338 : Term Type0) -> Bool -> Univ"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nLet_clause_1617. For all elements $p$ and $m$ and $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $posn$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $p$, for all elements $gcd1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$, for all elements $c$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $nm$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$ and $matita_arithmetics_nat.times$ applied to $p$ and $c$, for all elements $a$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $b$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_basics_logic.eq$ applied to $cic.lift$", "label": "Axiom let_clause_1617 : forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p), forall gcd1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)), forall _clearme : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times m n)), forall c : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall nm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times m n) (matita_arithmetics_nat.times p c)), forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme0 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (fun b => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m)) (", "predict": " applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_logic.And$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nTrue_rect_Type3. Soit $Q_$ une fonction des éléments $_x_46$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$ à des éléments de $cic.Univ$ de $univs.Type3$. Soit $_H_I$ un élément de $cic.Term$ de $univs.Type3$ et de $Q_$ appliqué à $matita_basics_logic.I$. Soit $x_46$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$. Alors $cic.Term$ tient pour $univs.Type3$ et $Q_$ appliqué à $x_46$.\nassistant\n", "label": "axiom True_rect_Type3 (Q_ : (_x_46 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ univs.Type3) (_H_I : cic.Term univs.Type3 (Q_ matita_basics_logic.I)) (x_46 : cic.Term cic.prop matita_basics_logic.True) : cic.Term univs.Type3 (Q_ x_46)", "predict": "axiom true_rect_Type3 (Q : ∀ x : cic.Term (cic.prop) → matita_basics_logic.True → univs.Type3) (H_I : ∀ x : univs.Type3, Q x (matita_basics_logic.I)) (x_46 : ∀ x : cic.Term (cic.prop) → matita_basics_logic.True) : ∀ x : univs.Type3, Q x x_46"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nUnit_rect_CProp3_body. För alla funktioner $Q_$ från element $_x_513$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$ till element av $cic.Univ$ av $cic.prop$, för alla element $_H_it$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.it$, för alla element $x_513$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_513$.\nassistant\n", "label": "Axiom unit_rect_CProp3_body : forall Q_ : ((_x_513 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ cic.prop), forall _H_it : cic.Term cic.prop (Q_ matita_basics_types.it), forall x_513 : cic.Term univs.Type0 matita_basics_types.unit, cic.Term cic.prop (Q_ x_513) .", "predict": "Axiom unit_rect_CProp3_body : forall Q : (x : Type0 -> unit) -> Prop -> forall H : Prop, (Q it) -> forall x : Type0, (x : unit) -> Prop ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nSig_rect_CProp5_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $Q_$ from elements $_x_680$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Sig$ from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $_f$ applied to $pi1$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_Sig$ applied to $A$ and $_f$ and $pi1$ and $_pi2$, for all elements $x_680$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_680$.\nassistant\n", "label": "postulate Sig_rect_CProp5_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_680 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ cic.prop) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_680 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term cic.prop (Q_ x_680)", "predict": "postulate sig_rect_CProp5_body : (A : Univ Type0) -> (f : Term Type0 -> A -> Univ prop) -> all (Q : (x : Sig A f) -> prop) -> all (H : (pi1 : Term Type0) -> (pi2 : prop) -> (f pi1) -> Q (mk_Sig A f pi1 pi2)) -> all (x : Sig A f) -> prop (Q x)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nMatch_lstar_r. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $_R$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $B$. Let $return_sort$ be an element of $cic.Sort$. Let $return_type$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__2$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $z$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar_r$ applied to $B$ and $_R$ and $__$ and $__1$ and $__2$ to elements of $cic.Univ$ of $return_sort$. Let $case_lstar_r_O$ be a function from elements $b$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_arithmetics_nat.O$ and $b$ and $b$ and $matita_arithmetics_lstar.lstar_r_O$ applied to $B$ and $_R$ and $b$. Let $case_lstar_r_S$ be a function from elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $b1$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar_r$ applied to $B$ and $_R$ and $l$ and $b1$ and $b$ and elements $b2$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $_R$ applied to $b$ and $b2$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_arithmetics_nat.plus$ applied to $l$ and $matita_arith", "label": "postulate match_lstar_r : (B : cic.Univ univs.Type0) -> (_R : cic.Term univs.Type0 (matita_basics_relations.relation B)) -> (return_sort : cic.Sort) -> (return_type : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 B) -> (__2 : cic.Term univs.Type0 B) -> (z : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R __ __1 __2)) -> cic.Univ return_sort) -> (case_lstar_r_O : (b : cic.Term univs.Type0 B) -> cic.Term return_sort (return_type matita_arithmetics_nat.O b b (matita_arithmetics_lstar.lstar_r_O B _R b))) -> (case_lstar_r_S : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R l b1 b)) -> (b2 : cic.Term univs.Type0 B) -> (__1 : cic.Term cic.prop (_R b b2)) -> cic.Term return_sort (return_type (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2 (matita_arithmetics_lstar.lstar_r_S B _R l b1 b __ b2 __1))) -> (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 B) -> (__2 : cic.Term univs.Type0 B) -> (z : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R __ __1 __2)) -> cic.Term return_sort (return_type __ __1 __2 z)", "predict": "metics_nat.S$ and $b1$ and $b$ and $matita_arithmetics_lstar.lstar_r_S$ applied to $B$ and $_R$ and $l$ and $b1$ and $b$ and $b2$ and $__$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nDpi2_body. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$, pour tous les éléments $xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $f$, $cic.Term$ tient pour $univs.Type0$ et $f$ appliqué à $matita_basics_types.dpi1$ appliqué à $A$ et $f$ et $xxx$.\nassistant\n", "label": "Axiom dpi2_body : forall A : cic.Univ univs.Type0, forall f : ((__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0), forall xxx : cic.Term univs.Type0 (matita_basics_types.DPair A f), cic.Term univs.Type0 (f (matita_basics_types.dpi1 A f xxx)) .", "predict": "Axiom dpi2_body : forall A : univs.Type0, forall f : __ : cic.Term Type0 -> A -> cic.Univ Type0, forall xxx : cic.Term Type0 * matita_basics_types.DPair A f, cic.Term Type0 (f (dpi1 A f) xxx) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nDividesb_div_true. Let $d$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $matita_arithmetics_primes.dividesb$ applied to $d$ and $n$ and $matita_basics_bool.true$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $matita_arithmetics_primes.dividesb$ applied to $matita_arithmetics_div_and_mod.div$ applied to $n$ and $d$ and $n$ and $matita_basics_bool.true$.\nassistant\n", "label": "postulate dividesb_div_true : (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_primes.dividesb d n) matita_basics_bool.true)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_primes.dividesb (matita_arithmetics_div_and_mod.div n d) n) matita_basics_bool.true)", "predict": "postulate dividesb_div_true : (d : Term Type0) -> (n : Nat) -> all (p : Lt (nd 0) n) -> all (q : Eq (lift Type0 Type2) (bool (dividesb d n))) (true) -> all (r : Eq (div (n d) n) (true))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nLet_clause_1569. Låt $m$ och $n$ och $a$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $posm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Låt $pnm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $c$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $", "label": "Axiom let_clause_1569 : forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), forall pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)), forall c : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (fun d => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita", "predict": "matita_arithmetics_nat.O$ ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nLe_exp_prim4l. För alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $matita_arithmetics_exp.exp$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_chebyshev_chebyshev_psi.prim$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$.\nassistant\n", "label": "le_exp_prim4l : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) n))) (matita_arithmetics_exp.exp (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) n) (matita_arithmetics_nat.S (matita_arithmetics_chebyshev_chebyshev_psi.prim (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) n))))) .", "predict": "le_exp_prim4l : (n : Elem (Term (univs Type0)) (nat matita_arithmetics_nat)) -> Proof (forall (x : Elem (Term (prop (matita_arithmetics_nat lt))) (matita_arithmetics_nat O n)) (le (exp (matita_arithmetics_exp) (plus (plus (plus (plus (matita_arithmetics_nat S) (matita_arithmetics_nat S)) (matita_arithmetics_nat S)) (matita_arithmetics_nat S)) (matita_arithmetics_nat O)) n) (times (times (times (times (matita_arithmetics_nat S) (matita_arithmetics_nat S)) (matita_arithmetics_nat S)) (matita_arithmetics_nat S)) (matita_arithmetics_nat O)) n) (le (exp (matita_arithmetics_exp) (times (times (times (times (matita_arithmetics_nat S) (matita_arithmetics_nat S)) (matita_arithmetics_nat S)) (matita_arithmetics_nat S)) (matita_arithmetics_nat O)) n) (times (times (times (times (matita_arithmetics_nat S) (matita_arithmetics_nat S)) (matita_arithmetics_nat S)) (matita_arithmetics_nat S)) (matita_arithmetics_nat O)) n) (le (psi (prim (chebyshev_chebyshev_psi)) (times (times (times (times (matita_arithmetics_nat S) (matita_arithmetics_nat S)) (matita_arithmetics_nat S)) (matita_arithmetics_nat S)) (matita_arithmetics_nat O))) n))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nAop_rect_Type1_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_871$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type1$. Let $_H_mk_Aop$ be a function from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_arithmetics_bigops.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_", "label": "Aop_rect_Type1_body : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_871 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> cic.Univ univs.Type1) -> _H_mk_Aop : (op : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _nill : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> _nilr : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> _assoc : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> x_871 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> cic.Term univs.Type1 (Q_ x_871) .", "predict": "assoc$ as a proof of $matita_arithmetics_bigops.Aop_rect_Type1_body$ of $A$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nDop_inv_rect_Type4. Pour tous les éléments $x1$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $x2$ de $cic.Term$ de $univs.Type0$ et de $x1$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1704$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type4$, pour toutes les fonctions $_H1$ des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $x1$ et $x2$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $prod$ appliqué à $a$ et $x2$ et $x2$ et des fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $", "label": "Dop_inv_rect_Type4 : x1 : cic.Univ univs.Type0 -> x2 : cic.Term univs.Type0 x1 -> Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2) -> P : (_z1704 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2) -> cic.Univ univs.Type4) -> _H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2) -> prod : (__ : cic.Term univs.Type0 x1 -> __1 : cic.Term univs.Type0 x1 -> cic.Term univs.Type0 x1) -> _null : (a : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> _distr : (a : cic.Term univs.Type0 x1 -> b : cic.Term univs.Type0 x1 -> c : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> _z1705 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr)) -> cic.Term univs.Type4 (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term univs.Type4 (P Hterm) .", "predict": "cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $sum$ appliqué à $a$ et $b$ et $c$ et $x2$ et $x2$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $prod$ appliqué à $a$ et $b$ et $c$ et $x2$ et $x2$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $sum$ appliqué à $a$ et $b$ et $c$ et $x2$ et $x2$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nEq_ind_r. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Let $a$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $P$ be a function from elements $x$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $x$ and $a$ to elements of $cic.Univ$ of $cic.prop$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $P$ applied to $a$ and $matita_basics_logic.refl$ applied to $A$ and $a$. Let $x$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Then for all elements $p$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $x$ and $a$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $x$ and $p$.\nassistant\n", "label": "eq_ind_r : A : cic.Univ univs.Type2 -> a : cic.Term univs.Type2 A -> P : (x : cic.Term univs.Type2 A -> __ : cic.Term cic.prop (matita_basics_logic.eq A x a) -> cic.Univ cic.prop) -> __ : cic.Term cic.prop (P a (matita_basics_logic.refl A a)) -> x : cic.Term univs.Type2 A -> p : cic.Term cic.prop (matita_basics_logic.eq A x a) -> cic.Term cic.prop (P x p) .", "predict": "eq_ind_r : (A : Elem (univs Type2)) -> (a : Elem (Term A)) -> (P : (x : Elem (Term A)) -> (a : Elem (Term (Eq A x))) -> Elem (univs prop)) -> (p : Elem (prop (Eq A a))) -> Proof (refl (prop (Eq A a))) -> (x : Elem (Term (and (Type2) A))) -> Proof (forall (p : Elem (prop (and (Eq A x) a))) (Term (prop (P x p)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nACop_rect_Type2_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all functions $Q_$ from elements $_x_897$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type2$, for all functions $_H_mk_ACop$ from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_897$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$, $cic.Term$ holds for $univs.Type2$ and $Q_$ applied to $x_897$.\nassistant\n", "label": "axiom ACop_rect_Type2_body (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_897 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ univs.Type2) (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type2 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) (x_897 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) : cic.Term univs.Type2 (Q_ x_897)", "predict": "axiom acop_rect_Type2_body (A : Univ Type0) : _nil : Term Type0 → A → ∀ Q_ : (x : Term Type0) → ACop A _nil → ∀ aop : Term Type0 → Aop A _nil → ∀ a : Term Type0 → A → ∀ b : Term Type0 → A → Prop → eq (lift Type0 Type2 A) (op A _nil aop a) (op A _nil aop b) (eq (op A _nil aop a) (op A _nil aop b)) → ∀ x_897 : Term Type0 → ACop A _nil → Term Type2 → Q_ (x_897)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nFold. Let $A$ and $B$ be elements of $cic.Univ$ of $univs.Type0$. Let $_op$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Let $_b$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $_p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Then for all elements $_l$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, $cic.Term$ holds for $univs.Type0$ and $B$.\nassistant\n", "label": "postulate fold : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (_op : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) -> (_b : cic.Term univs.Type0 B) -> (_p : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) -> (_l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> cic.Term univs.Type0 B", "predict": "postulate fold : (A : Univ) -> (B : Univ) -> (op : Term A B -> Term A B -> Term A B) -> (b : Term A B) -> (p : Term A -> Bool) -> (f : Term A -> Term A B) -> Term (List A) -> Universe 0"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nLe_S. For all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $m$.\nassistant\n", "label": "le_S : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.le n m) -> cic.Term cic.prop (matita_arithmetics_nat.le n (matita_arithmetics_nat.S m)) .", "predict": "Le_S : (n : Elem (Term (univs Type0))) -> (m : Elem (nat (matita_arithmetics_nat))) -> (p : Elem (prop (cic))) -> Proof (Le (n) (m)) -> Proof (Le (n) (plus (m) (nd 1))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nSig_inv_ind. For all elements $x1$ of $cic.Univ$ of $univs.Type0$, for all functions $x2$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Univ$ of $cic.prop$, for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1170$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $x2$ applied to $pi1$ and elements $_z1171$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Sig$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.mk_Sig$ applied to $x1$ and $x2$ and $pi1$ and $_pi2$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.mk_Sig$ applied to $x1$ and $x2$ and $pi1$ and $_pi2$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "Axiom Sig_inv_ind : forall x1 : cic.Univ univs.Type0, forall x2 : ((__ : cic.Term univs.Type0 x1) -> cic.Univ cic.prop), forall Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2), forall P : ((_z1170 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> cic.Univ cic.prop), forall _H1 : ((pi1 : cic.Term univs.Type0 x1) -> (_pi2 : cic.Term cic.prop (x2 pi1)) -> (_z1171 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2)) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))), cic.Term cic.prop (P Hterm) .", "predict": "Axiom sig_inv_ind : forall x1 : Univ, forall x2 : Term Type0 -> Univ, forall Hterm : Term Type0, forall P : Term Type0 -> Sig x1 x2 -> Prop, forall pi1 : Term Type0, forall pi2 : Prop, forall H1 : pi1 -> x1 -> pi2 -> Prop, forall z1170 : Term Type0, forall z1171 : Prop, forall sig : Sig x1 x2, (Term (prop (P (mk_Sig x1 x2) (pi1) (pi2))) (Hterm)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nEq_f2. Let $A$ and $B$ and $C$ be elements of $cic.Univ$ of $univs.Type2$. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type2$ and $B$ to elements of $cic.Term$ of $univs.Type2$ and $C$. Then for all elements $x1$ and $x2$ of $cic.Term$ of $univs.Type2$ and $A$, for all elements $y1$ and $y2$ of $cic.Term$ of $univs.Type2$ and $B$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $x1$ and $x2$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $B$ and $y1$ and $y2$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $C$ and $f$ applied to $x1$ and $y1$ and $f$ applied to $x2$ and $y2$.\nassistant\n", "label": "Axiom eq_f2 : forall A : cic.Univ univs.Type2, forall B : cic.Univ univs.Type2, forall C : cic.Univ univs.Type2, forall f : ((__ : cic.Term univs.Type2 A) -> (__1 : cic.Term univs.Type2 B) -> cic.Term univs.Type2 C), forall x1 : cic.Term univs.Type2 A, forall x2 : cic.Term univs.Type2 A, forall y1 : cic.Term univs.Type2 B, forall y2 : cic.Term univs.Type2 B, forall __ : cic.Term cic.prop (matita_basics_logic.eq A x1 x2), forall __1 : cic.Term cic.prop (matita_basics_logic.eq B y1 y2), cic.Term cic.prop (matita_basics_logic.eq C (f x1 y1) (f x2 y2)) .", "predict": "Axiom eq_f2 : forall A : univs.Type2, forall B : univs.Type2, forall C : univs.Type2, forall f : forall x : Term univs.Type2, forall x1 : Term univs.Type2, forall B : Term univs.Type2, forall y1 : Term univs.Type2, forall y2 : Term univs.Type2, (eq A x1 x2 /\\ eq B y1 y2 -> eq C (f x1 y1) (f x2 y2)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nList_rect_CProp1. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_771$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_nil$ be an element of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_lists_list.nil$ applied to $_A$. Let $_H_cons$ be a function from elements $x_773$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $x_772$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ and elements $_x_775$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $x_772$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_lists_list.cons$ applied to $_A$ and $x_773$ and $x_772$. Let $x_771$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_771$.\nassistant\n", "label": "Axiom list_rect_CProp1 : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_771 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ cic.prop), forall _H_nil : cic.Term cic.prop (Q_ (matita_basics_lists_list.nil _A)), forall _H_cons : ((x_773 : cic.Term univs.Type0 _A) -> (x_772 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_775 : cic.Term cic.prop (Q_ x_772)) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.cons _A x_773 x_772))), forall x_771 : cic.Term univs.Type0 (matita_basics_lists_list.list _A), cic.Term cic.prop (Q_ x_771) .", "predict": "Axiom list_rect_CProp1 : forall A : univs.Type0, forall Q_ : x_771 : cic.Term univs.Type0 -> matita_basics_lists_list.list A -> cic.Univ -> prop, forall H_nil : prop -> Q_ x_771 matita_basics_lists_list.nil A -> forall x_773 : cic.Term univs.Type0 -> A -> x_772 : cic.Term univs.Type0 -> A -> matita_basics_lists_list.list A -> prop -> prop -> Q_ x_772 (matita_basics_lists_list.cons A x_773 x_772), forall x_771 : cic.Term univs.Type0 -> matita_basics_lists_list.list A, prop (Q_ x_771) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nDistr_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $xxx$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $nil$. Then for all elements $a$ and $b$ and $c$ of $cic.Term$ of $univs.Type0$ and $A$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.prod$ applied to $A$ and $nil$ and $xxx$ and $a$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $nil$ and $matita_arithmetics_bigops.sum$ applied to $A$ and $nil$ and $xxx$ and $b$ and $c$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $nil$ and $matita_arithmetics_bigops.sum$ applied to $A$ and $nil$ and $xxx$ and $matita_arithmetics_bigops.prod$ applied to $A$ and $nil$ and $xxx$ and $a$ and $b$ and $matita_arithmetics_bigops.prod$ applied to $A$ and $nil$ and $xxx$ and $a$ and $c$.\nassistant\n", "label": "postulate distr_body : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A nil)) -> (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.prod A nil xxx a (matita_arithmetics_bigops.aop__o__op A nil (matita_arithmetics_bigops.sum A nil xxx) b c)) (matita_arithmetics_bigops.aop__o__op A nil (matita_arithmetics_bigops.sum A nil xxx) (matita_arithmetics_bigops.prod A nil xxx a b) (matita_arithmetics_bigops.prod A nil xxx a c)))", "predict": "postulate distr_body : (A : Univ Type0) -> (nil : Term Type0) -> (xxx : Term (Dop A nil)) -> all (A : Term Type0) -> all (a : Term Type0) -> all (b : Term Type0) -> all (c : Term Type0) -> prop (eq (lift Type0 Type2 A) (prod A nil xxx) (aop__o__op (prod A nil) (aop__o__op (sum A nil) xxx) b) (c))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nSmallest_factor_to_min. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_primes.smallest_factor$ applied to $n$ and $matita_arithmetics_minimization.min$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and the function that maps $m$ to $matita_arithmetics_nat.eqb$ applied to $matita_arithmetics_div_and_mod.mod$ applied to $n$ and $m$ and $matita_arithmetics_nat.O$.\nassistant\n", "label": "postulate smallest_factor_to_min : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_primes.smallest_factor n) (matita_arithmetics_minimization.min n (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (\\ m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_nat.eqb (matita_arithmetics_div_and_mod.mod n m) matita_arithmetics_nat.O)))", "predict": "postulate smallest_factor_to_min : (n : cic.Term univs.Type0) -> (x : matita_arithmetics_nat.nat) -> forall __ : cic.Term (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.O)) n) -> (cic.Term (cic.prop) && matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_primes.smallest_factor n) (matita_arithmetics_minimization.min n) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) (forall m : matita_arithmetics_nat.nat) -> matita_arithmetics_nat.eqb (matita_arithmetics_div_and_mod.mod n m) (matita_arithmetics_nat.O))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nTrue_inv_rect_CProp3. För alla element $Hterm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$, för alla funktioner $P$ från element $_z167$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $_z168$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_basics_logic.True$ och $Hterm$ och $matita_basics_logic.I$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_logic.I$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "axiom True_inv_rect_CProp3 (Hterm : cic.Term cic.prop matita_basics_logic.True) (P : (_z167 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ cic.prop) (_H1 : (_z168 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 matita_basics_logic.True) Hterm matita_basics_logic.I)) -> cic.Term cic.prop (P matita_basics_logic.I)) : cic.Term cic.prop (P Hterm)", "predict": "axiom true_inv_rect_CProp3 (Hterm : cic.Term (cic.prop ∧ matita_basics_logic.True)) (P : ∀ _z167 : (cic.prop ∧ matita_basics_logic.True), univ (cic.prop)) (H1 : ∀ _z168 : (cic.prop ∧ matita_basics_logic.eq (cic.lift (cic.prop) (univs.Type2) (matita_basics_logic.True) Hterm) (matita_basics_logic.I)), P (cic.prop (matita_basics_logic.I))) : ∀ H : (cic.prop ∧ matita_basics_logic.I), P (cic.prop H)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nAop_rect_Type1. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_791$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type1$. Then for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_basics_lists_list.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and", "label": "axiom Aop_rect_Type1 (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_791 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ univs.Type1) (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type1 (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) (x_791 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) : cic.Term univs.Type1 (Q_ x_791)", "predict": " $op$ and $_assoc$, the statement holds.\naxiom aop_rect_Type1 (A : univs.Type0) (nil : Term univs.Type0 A) (Q_ : (x : Term univs.Type0 A) → matita_basics_lists_list.Aop A nil → univs.Type1) : ∀ op : (x : Term univs.Type0 A) → (x : Term univs.Type0 A) → Term univs.Type0 A (forall H_mk_Aop : op x x) (nill : (a : Term univs.Type0 A) → prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op nil a) a)) (nilr : (a : Term univs.Type0 A) → prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a nil) a)) (assoc : (a : Term univs.Type0 A) → (b : Term univs.Type0 A) → (c : Term univs.Type0 A) → prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op (op a b) c) (op (op a b) c))) (Q_ (matita_basics_lists_list.mk_Aop A nil) op nill op assoc)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nFilter_Sum. Pour tous les éléments $_A$ et $_B$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $return_sort$ de $cic.Sort$, pour toutes les fonctions $return_type$ des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $return_sort$, pour toutes les fonctions $return$ des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $_A$ et $_B$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $z$, pour tous les éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.\nassistant\n", "label": "postulate filter_Sum : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ return_sort) -> (return : (z : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Term return_sort (return_type z)) -> (z : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Term return_sort (return_type z)", "predict": "postulate filter_sum : (A : Univ) -> (B : Univ) -> Sort -> (z : Term Type0) -> Sum A B -> Univ -> (return : Sort) -> (return_type : Term Type0 -> Sum A B -> Term return_sort) -> (return : Term Type0 -> Sum A B -> Term (return_sort, return_type z)) -> (z : Term Type0) -> (A : Sum A B) -> Term (return_sort, return_type z)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nOption_rect_Type0. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_610$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type0$. Låt $_H_None$ vara ett element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$. Då för alla funktioner $_H_Some$ från element $x_611$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_611$, för alla element $x_610$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_610$.\nassistant\n", "label": "axiom option_rect_Type0 (_A : cic.Univ univs.Type0) (Q_ : (_x_610 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ univs.Type0) (_H_None : cic.Term univs.Type0 (Q_ (matita_basics_types.None _A))) (_H_Some : (x_611 : cic.Term univs.Type0 _A) -> cic.Term univs.Type0 (Q_ (matita_basics_types.Some _A x_611))) (x_610 : cic.Term univs.Type0 (matita_basics_types.option _A)) : cic.Term univs.Type0 (Q_ x_610)", "predict": "axiom option_rect_Type0 (A : Univ Type0) (Q : ∀ x : Term Type0, Option A → Univ Type0) (H_None : Q (None A) : Term Type0) (H_Some : ∀ x : Term Type0, A → Term Type0) (x : Option A) : Q x : Term Type0"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nDpi1__o__aop__o__op. Let $x0$ be an element of $cic.Univ$ of $univs.Type0$. Let $x1$ be an element of $cic.Term$ of $univs.Type0$ and $x0$. Then for all functions $x2$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x0$ and $x1$ to elements of $cic.Univ$ of $univs.Type0$, for all elements $x3$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $matita_arithmetics_bigops.ACop$ applied to $x0$ and $x1$ and $x2$, for all elements $_x_887$ and $_x_888$ of $cic.Term$ of $univs.Type0$ and $x0$, $cic.Term$ holds for $univs.Type0$ and $x0$.\nassistant\n", "label": "postulate dpi1__o__aop__o__op : (x0 : cic.Univ univs.Type0) -> (x1 : cic.Term univs.Type0 x0) -> (x2 : (__ : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x0 x1)) -> cic.Univ univs.Type0) -> (x3 : cic.Term univs.Type0 (matita_basics_types.DPair (matita_arithmetics_bigops.ACop x0 x1) x2)) -> (_x_887 : cic.Term univs.Type0 x0) -> (_x_888 : cic.Term univs.Type0 x0) -> cic.Term univs.Type0 x0", "predict": "postulate dpi1__o__aop__o__op : (x0 : Univ Type0) -> (x1 : Term Type0) -> and (forall (x2 : Term Type0 -> ACop) (x0 x1) (Univ Type0)) (forall (x3 : DPair (ACop x0 x1) (Term Type0)) (forall (_x_887 : Term Type0) (forall (_x_888 : Term Type0) (x0) (Term Type0)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nAop_rect_CProp4_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Då för alla funktioner $Q_$ från element $_x_795$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_Aop$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$ av $cic.prop$ och $Q", "label": "postulate Aop_rect_CProp4_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_795 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_795 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term cic.prop (Q_ x_795)", "predict": "_$ applicerat på $a$ och $b$ och $c$ och $Q_$ applicerat på $b$ och $c$ och $Q_$ applicerat på $a$ och $c$ ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nSig. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all functions $_f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$, $cic.Univ$ holds for $univs.Type0$.\nassistant\n", "label": "axiom Sig (A : cic.Univ univs.Type0) (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) : cic.Univ univs.Type0", "predict": "axiom forall A : univs.Type0, forall f : Term univs.Type0 → A → univs.Univ, cic.Univ univs.Type0"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nAop_rect_CProp5_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Alors pour toutes les fonctions $Q_$ des éléments $_x_797$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_Aop$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $c", "label": "postulate Aop_rect_CProp5_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_797 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_797 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term cic.prop (Q_ x_797)", "predict": "ic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_r$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $b$ et $a$ et des fonctions $_r$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $b$ et $a$ et des fonctions $_r$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $b$ et $a$ et des fonctions $_r$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nProd_rect_Type0_body. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_702$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $_H_mk_Prod$ une fonction des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $_A$ et $_B$ et $_fst$ et $_snd$. Alors pour tous les éléments $x_702$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_702$.\nassistant\n", "label": "axiom Prod_rect_Type0_body (_A _B : cic.Univ univs.Type0) (Q_ : (_x_702 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ univs.Type0) (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term univs.Type0 (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) (x_702 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) : cic.Term univs.Type0 (Q_ x_702)", "predict": "axiom prod_rect_Type0_body (A B : Univ Type0) (Q : ∀ x : Term Type0, Prod A B) : ∀ x : Term Type0, Prod A B → Q x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nDop_ind_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_943$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_Dop$ vara en funktion från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $_nil$ och $_nil$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $prod$ applicerat på $a$ och $b$ och $prod$ applicerat på $a$ och $c$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat", "label": "axiom Dop_ind_body (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_943 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ cic.prop) (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) (x_943 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) : cic.Term cic.prop (Q_ x_943)", "predict": " på $a$ och $b$ och $c$.\naxiom dop_ind_body (A : univs.Type0) (nil : Term univs.Type0 A) (Q_ : (x : Term univs.Type0) → Dop A nil → Prop) (H_mk_Dop : sum (ACop A nil) (prod (λ x : Term univs.Type0) (A) (λ x : Term univs.Type0) (A)) (λ a : Term univs.Type0) (A) → Prop) (null : (a : Term univs.Type0) → A → Prop) (eq : lift univs.Type0 univs.Type2 A) (prod : (a : Term univs.Type0) → (b : Term univs.Type0) → (c : Term univs.Type0) → Prop) (distr : (a : Term univs.Type0) → (b : Term univs.Type0) → (c : Term univs.Type0) → Prop) (aop__o__op : (A : Term univs.Type0) → (nil : Term univs.Type0) → (x : Term univs.Type0) → Prop) (x : Term univs.Type0) (y : Term univs.Type0) (z : Term univs.Type0) : Q_ x (dop A nil) ∧ Q_ y (dop A nil) ∧ Q_ z (dop A nil) ∧ H_mk_Dop (sum (ACop A nil) (prod (x) (A)) (y)) (null a) (eq (lift univs.Type0 univs.Type2 A) (prod a (b))) (distr a b c) (aop__o__op A nil x) (aop__o__op A nil y) (aop__o__op A nil z) (prod x y) (prod x z) (prod y z) (H_mk_Dop (sum (ACop A nil) (prod (x) (A)) (y)) (null a) (eq (lift univs.Type0 univs.Type2 A) (prod a (b))) (distr a b c) (aop__o__op A nil x) (aop__o__"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nBool_rect_CProp4_body. Let $Q_$ be a function from elements $_x_347$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $cic.prop$. Then for all elements $_H_true$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_bool.true$, for all elements $_H_false$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_bool.false$, for all elements $x_347$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_347$.\nassistant\n", "label": "Axiom bool_rect_CProp4_body : forall Q_ : ((_x_347 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop), forall _H_true : cic.Term cic.prop (Q_ matita_basics_bool.true), forall _H_false : cic.Term cic.prop (Q_ matita_basics_bool.false), forall x_347 : cic.Term univs.Type0 matita_basics_bool.bool, cic.Term cic.prop (Q_ x_347) .", "predict": "Axiom bool_rect_CProp4_body : forall Q : x_347 : univs.Type0 -> matita_basics_bool.bool -> cic.prop, forall H_true : cic.Term cic.prop, Q matita_basics_bool.true H_true, forall H_false : cic.Term cic.prop, Q matita_basics_bool.false H_false, forall x_347 : cic.Term univs.Type0, Q x_347 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nSig_inv_rect_CProp4. For all elements $x1$ of $cic.Univ$ of $univs.Type0$, for all functions $x2$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Univ$ of $cic.prop$, for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1206$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $x2$ applied to $pi1$ and elements $_z1207$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Sig$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.mk_Sig$ applied to $x1$ and $x2$ and $pi1$ and $_pi2$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.mk_Sig$ applied to $x1$ and $x2$ and $pi1$ and $_pi2$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "Sig_inv_rect_CProp4 : x1 : cic.Univ univs.Type0 -> x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) -> Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) -> P : (_z1206 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) -> cic.Univ cic.prop) -> _H1 : (pi1 : cic.Term univs.Type0 x1 -> _pi2 : cic.Term cic.prop (x2 pi1) -> _z1207 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2)) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) -> cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term cic.prop (P Hterm) .", "predict": "sig_inv_rect_CProp4 : (x1 : Elem (cic.Univ) (univs.Type0)) -> (x2 : (x1 -> Elem (cic.Univ) (cic.prop))) -> (Hterm : Elem (cic.Term) (univs.Type0)) -> (P : (x1 : Elem (cic.Univ) (cic.prop)) -> (x2 : Elem (cic.Term) (univs.Type0)) -> Elem (cic.Univ) (cic.prop)) -> (pi1 : Elem (cic.Term) (univs.Type0)) -> (pi2 : Elem (cic.Term) (cic.prop)) -> (z1206 : Elem (cic.Term) (univs.Type0)) -> (z1207 : Elem (cic.Term) (cic.prop)) -> Proof (Eq (lift (univs.Type0) (univs.Type2)) (Sig (x1) (x2))) -> Proof (Eq (mk_Sig (x1) (x2) (pi1) (pi2)) (P (mk_Sig (x1) (x2) (pi1) (pi2)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nLeq_sqrt_n. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_sqrt.sqrt$ applied to $n$ and $matita_arithmetics_sqrt.sqrt$ applied to $n$ and $n$.\nassistant\n", "label": "axiom leq_sqrt_n (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times (matita_arithmetics_sqrt.sqrt n) (matita_arithmetics_sqrt.sqrt n)) n)", "predict": "axiom leq_sqrt_n (n : cic.Term univs.Type0) : matita_arithmetics_nat.le (matita_arithmetics_nat.times (matita_arithmetics_sqrt.sqrt n) (matita_arithmetics_sqrt.sqrt n)) n"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nSplit_rev_body. Let $H$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $__$ and $__1$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $H$, for all elements $__2$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $univs.Type0$ and $matita_basics_types.Prod$ applied to $matita_basics_lists_list.list$ applied to $H$ and $matita_basics_lists_list.list$ applied to $H$.\nassistant\n", "label": "postulate split_rev_body : (H : cic.Univ univs.Type0) -> (__ : cic.Term univs.Type0 (matita_basics_lists_list.list H)) -> (__1 : cic.Term univs.Type0 (matita_basics_lists_list.list H)) -> (__2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 (matita_basics_types.Prod (matita_basics_lists_list.list H) (matita_basics_lists_list.list H))", "predict": "postulate split_rev_body : (H : Univ Type0) -> (x : Term Type0) -> (xs : list (Term Type0)) -> (y : Term Type0) -> (ys : list (Term Type0)) -> all (prod (list (Term Type0)) (list (Term Type0))) (H)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nSum_rect_Type4_body. Låt $_A$ och $_B$ vara element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $Q_$ från element $_x_526$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $univs.Type4$, för alla funktioner $_H_inl$ från element $x_527$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $univs.Type4$ och $Q_$ applicerat på $matita_basics_types.inl$ applicerat på $_A$ och $_B$ och $x_527$, för alla funktioner $_H_inr$ från element $x_528$ av $cic.Term$ av $univs.Type0$ och $_B$ till element av $cic.Term$ av $univs.Type4$ och $Q_$ applicerat på $matita_basics_types.inr$ applicerat på $_A$ och $_B$ och $x_528$, för alla element $x_526$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $univs.Type4$ och $Q_$ applicerat på $x_526$.\nassistant\n", "label": "postulate Sum_rect_Type4_body : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_526 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ univs.Type4) -> (_H_inl : (x_527 : cic.Term univs.Type0 _A) -> cic.Term univs.Type4 (Q_ (matita_basics_types.inl _A _B x_527))) -> (_H_inr : (x_528 : cic.Term univs.Type0 _B) -> cic.Term univs.Type4 (Q_ (matita_basics_types.inr _A _B x_528))) -> (x_526 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Term univs.Type4 (Q_ x_526)", "predict": "postulate sum_rect_Type4_body : (A : Univ Type0) -> (B : Univ Type0) -> all (x : Term Type0) -> all (Q : Sum A B -> Univ Type4) -> all (H_inl : x -> A -> Term Type4) -> all (H_inr : x -> B -> Term Type4) -> all (x : Sum A B) -> Term Type4 (Q x)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nNot_le_S_S_to_not_le. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.S$ applicerat på $n$ och $matita_arithmetics_nat.S$ applicerat på $m$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_nat.le$ applicerat på $n$ och $m$.\nassistant\n", "label": "not_le_S_S_to_not_le : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m))) -> cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) .", "predict": "not_le_S_S_to_not_le : (n : Elem (univs Type0)) -> (m : Elem (matita_arithmetics_nat nat)) -> Proof (not (le (S n) (S m))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nDiv_mod_spec_rect_Type0_body. Let $_n$ and $_m$ and $_q$ and $_r$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all functions $Q_$ from elements $_x_833$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$ to elements of $cic.Univ$ of $univs.Type0$, for all functions $_H_div_mod_spec_intro$ from elements $x_835$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $_r$ and $_m$ and elements $x_834$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $_n$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $_q$ and $_m$ and $_r$ to elements of $cic.Term$ of $univs.Type0$ and $Q_$ applied to $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_835$ and $x_834$, for all elements $x_833$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$, $cic.Term$ holds for $univs.Type0$ and $Q_$ applied to $x_833$.\nassistant\n", "label": "axiom div_mod_spec_rect_Type0_body (_n _m _q _r : cic.Term univs.Type0 matita_arithmetics_nat.nat) (Q_ : (_x_833 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ univs.Type0) (_H_div_mod_spec_intro : (x_835 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_834 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_835 x_834))) (x_833 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) : cic.Term univs.Type0 (Q_ x_833)", "predict": "axiom div_mod_spec_rect_Type0_body (n m q r : Term univs.Type0) (Q : prop (div_mod_spec n m q r)) (H_div_mod_spec_intro : lt r m ∧ eq (lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (plus (times q m) r)) : ∀ x_833 : prop (div_mod_spec n m q r), Term (univs.Type0) (Q x_833)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nLeb_false_to_not_le. Pour tous les éléments $n$ et $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_nat.leb$ appliqué à $n$ et $m$ et $matita_basics_bool.false$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.Not$ appliqué à $matita_arithmetics_nat.le$ appliqué à $n$ et $m$.\nassistant\n", "label": "axiom leb_false_to_not_le (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_nat.leb n m) matita_basics_bool.false)) : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_nat.le n m))", "predict": "axiom leb_false_to_not_le (n m : cic.Term univs.Type0) (x : cic.Term (cic.lift univs.Type0 univs.Type2) (matita_basics_bool.bool)) (y : matita_arithmetics_nat.leb n m) (z : matita_basics_bool.false) : cic.prop (matita_basics_logic.Not (matita_arithmetics_nat.le n m))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nFmin_false. For all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all elements $n$ and $b$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $cic.prod$ applied to $cic.prop$ and $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $matita_arithmetics_minimization.let_m$ applied to $f$ and $n$ and $b$ and $matita_basics_bool.false$ and the function that maps $__$ to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_minimization.let_m$ applied to $f$ and $n$ and $b$ and $matita_arithmetics_nat.plus$ applied to $n$ and $b$.\nassistant\n", "label": "axiom fmin_false (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (n b : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (cic.prod cic.prop cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f (matita_arithmetics_minimization.let_m f n b)) matita_basics_bool.false) (λ __ => matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.let_m f n b) (matita_arithmetics_nat.plus n b)))", "predict": "axiom fmin_false (f : univs.Type0 → matita_arithmetics_nat.nat → univs.Type0) (n b : matita_arithmetics_nat.nat) : cic.prop (cic.prod (cic.prop) (cic.prop)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f (matita_arithmetics_minimization.let_m f n b)) (matita_basics_bool.false)) (λ x : univs.Type0, matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f (matita_arithmetics_minimization.let_m f n b)) (matita_arithmetics_nat.plus n b))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nFound_max_spec. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $m$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $m$ och $matita_basics_bool.true$, för alla funktioner $__2$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $i$ och element $__3$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $i$ och $matita_basics_bool.false$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_minimization.max_spec$ applicerat på $n$ och $f$ och $m$.\nassistant\n", "label": "postulate found_max_spec : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt m n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.true)) -> (__2 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt m i)) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.lt i n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)) -> cic.Term cic.prop (matita_arithmetics_minimization.max_spec n f m)", "predict": "postulate found_max_spec : (n : Term Type0 Nat) -> (f : (x : Term Type0 Nat) -> Term Type0 Bool) -> (m : Term Type0 Nat) -> (x : Prop (Lt m n)) -> (y : Prop (Eq (lift Type0 Type2) (true))) -> (i : Nat) -> (x : Prop (Lt m i)) -> (y : Prop (Lt i n)) -> (z : Prop (Eq (lift Type0 Type2) (false))) -> (f i) -> (max_spec n f m)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nLet_clause_1617. Soient $p$ et $m$ et $n$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $p$. Soit $gcd1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Soit $_clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.divides$ appliqué à $p$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $n$. Soit $c$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $nm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $p$ et $c$. Soit $a$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme0$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $b$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $p$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $m$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$", "label": "axiom let_clause_1617 (p m n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) (gcd1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (_clearme : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times m n))) (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) (nm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times m n) (matita_arithmetics_nat.times p c))) (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme0 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (λ b => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m)) (matita_basics_logic.eq (cic.lift univs.Type", "predict": " et $matita_arithmetics_primes.prime$ appliqué à $a$ et $matita_arithmetics_primes.prime$ appliqué à $b$. Let_clause_1617 : posn ∧ gcd1 ∧ _clearme ∧ nm ∧ a ∧ _clearme0."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nInjn_Sn_n. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_permutation.injn$ applied to $f$ and $matita_arithmetics_nat.S$ applied to $n$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_permutation.injn$ applied to $f$ and $n$.\nassistant\n", "label": "postulate injn_Sn_n : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_permutation.injn f (matita_arithmetics_nat.S n))) -> cic.Term cic.prop (matita_arithmetics_permutation.injn f n)", "predict": "postulate injn_Sn_n : (f : Term (Type0 Nat)) -> (n : Term (Type0 Nat)) -> prop (injn f (S n))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nCongruent_ab. För alla element $m$ och $n$ och $a$ och $b$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $x$ som $matita_basics_logic.And$ applicerat på $matita_arithmetics_congruence.congruent$ applicerat på $x$ och $a$ och $m$ och $matita_arithmetics_congruence.congruent$ applicerat på $x$ och $b$ och $n$.\nassistant\n", "label": "Axiom congruent_ab : forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), forall __2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)), cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (fun x => matita_basics_logic.And (matita_arithmetics_congruence.congruent x a m) (matita_arithmetics_congruence.congruent x b n))) .", "predict": "Axiom congruent_ab : forall m : univs.Type0, forall n : matita_arithmetics_nat.nat, forall __ : cic.prop, forall __1 : cic.prop, forall __2 : cic.prop, (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_basics_logic.eq (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) (x : cic.Term)) (matita_basics_logic.ex (matita_arithmetics_nat.nat) (matita_basics_logic.And (matita_arithmetics_congruence.congruent x a m) (matita_arithmetics_congruence.congruent x b n))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nNot_rect_CProp1. Soit $_A$ un élément de $cic.Univ$ de $cic.prop$. Soit $Q_$ une fonction des éléments $_x_112$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_nmk$ une fonction des fonctions $x_113$ des éléments $__$ de $cic.Term$ de $cic.prop$ et de $_A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_logic.nmk$ appliqué à $_A$ et $x_113$. Soit $x_112$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $_A$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_112$.\nassistant\n", "label": "Not_rect_CProp1 : _A : cic.Univ cic.prop -> Q_ : (_x_112 : cic.Term cic.prop (matita_basics_logic.Not _A) -> cic.Univ cic.prop) -> _H_nmk : (x_113 : (__ : cic.Term cic.prop _A -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ (matita_basics_logic.nmk _A x_113))) -> x_112 : cic.Term cic.prop (matita_basics_logic.Not _A) -> cic.Term cic.prop (Q_ x_112) .", "predict": "not_rect_CProp1 : (A : Elem (univ (prop))) -> (Q_ : (x_112 : Elem (term (prop))) -> not A) -> (H_nmk : (x_113 : (x : Elem (term (prop))) -> A -> Elem (term (prop))) -> (x_113 : (x : Elem (term (prop))) -> A -> False) -> (Q_ (nmk A x_113))) -> Proof (prop (term (Q_ x_112))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nMin_spec. Let $_n$ and $_b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $__$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Univ$ holds for $cic.prop$.\nassistant\n", "label": "Axiom min_spec : forall _n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall __ : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Univ cic.prop .", "predict": "Axiom min_spec : forall n : univs.Type0, forall b : matita_arithmetics_nat.nat, forall f : (n, b) -> (univs.Type0, matita_basics_bool.bool), forall x : n, prop (cic.Univ) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nSmallest_factor_to_min. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_primes.smallest_factor$ applied to $n$ and $matita_arithmetics_minimization.min$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and the function that maps $m$ to $matita_arithmetics_nat.eqb$ applied to $matita_arithmetics_div_and_mod.mod$ applied to $n$ and $m$ and $matita_arithmetics_nat.O$.\nassistant\n", "label": "postulate smallest_factor_to_min : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_primes.smallest_factor n) (matita_arithmetics_minimization.min n (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (\\ m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_nat.eqb (matita_arithmetics_div_and_mod.mod n m) matita_arithmetics_nat.O)))", "predict": "postulate smallest_factor_to_min : (n : matita_arithmetics_nat.nat) -> cic.prop -> all (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.O)) n) (cic.prop) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_primes.smallest_factor n) (matita_arithmetics_minimization.min n) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) (forall matita_arithmetics_nat.nat (\\ m -> matita_arithmetics_nat.eqb (matita_arithmetics_div_and_mod.mod n m) (matita_arithmetics_nat.O)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nFilter_True. Soit $return_sort$ un élément de $cic.Sort$. Soit $return_type$ une fonction des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$ à des éléments de $cic.Univ$ de $return_sort$. Soit $return$ une fonction des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $z$. Alors pour tous les éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.\nassistant\n", "label": "axiom filter_True (return_sort : cic.Sort) (return_type : (z : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ return_sort) (return : (z : cic.Term cic.prop matita_basics_logic.True) -> cic.Term return_sort (return_type z)) (z : cic.Term cic.prop matita_basics_logic.True) : cic.Term return_sort (return_type z)", "predict": "axiom filter_true (return_sort : cic.Sort) (return_type : (z : cic.Term) → cic.prop → matita_basics_logic.True → cic.Univ) (return : (z : cic.Term) → cic.prop → matita_basics_logic.True → cic.Term) : ∀ z : cic.Term, cic.prop → matita_basics_logic.True, return_sort = return z (cic.prop) (matita_basics_logic.True)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nBigop_op. Let $k$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $op$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $B$ and $nil$. Let $f$ and $g$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $matita_arithmetics_bigops.aop__o__op$ applied to $B$ and $nil$ and $op$ and $matita_arithmetics_bigops.bigop$ applied to $k$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $matita_arithmetics_bigops.aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ and $matita_arithmetics_bigops.bigop$ applied to $k$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $matita_arithmetics_bigops.aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $g$ applied to $i$ and $matita_arithmetics_bigops.bigop$ applied to $k$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $matita_arithmetics_bigops.aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $matita_arithmetics_bigops.aop__o__op$ applied to $B$ and $nil$ and $op$ and $f$ applied to $i$ and $g$ applied to $i$.\nassistant\n", "label": "axiom bigop_op (k : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (B : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 B) (op : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil)) (f g : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.aop__o__op B nil op (matita_arithmetics_bigops.bigop k (λ i => p i) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (λ i => f i)) (matita_arithmetics_bigops.bigop k (λ i => p i) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (λ i => g i))) (matita_arithmetics_bigops.bigop k (λ i => p i) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (λ i => matita_arithmetics_bigops.aop__o__op B nil op (f i) (g i))))", "predict": "axiom bigop_op (k : Term Type0 Nat) (p : (i : Term Type0 Nat) → Term Type0 Bool) (B : Univ Type0) (nil : Term Type0 B) (op : Term Type0 (bigops.ACop B nil)) (f g : (i : Term Type0 Nat) → Term Type0 B) : prop (eq (lift Type0 Type2 B) (aop__o__op (aop__o__op B nil op) (bigop k (p i) B nil) (aop__o__op B nil op) (f i) (aop__o__op B nil op) (g i))) (bigop k (p i) B nil) (aop__o__op B nil op) (f i) (aop__o__op B nil op) (g i))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nLet_clause_1560. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $divnm$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $n$ and $m$. Let $H$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $n$. Let $d$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $auto$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $m$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.O$ and $d$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $matita_arithmetics_nat.O$.\nassistant\n", "label": "axiom let_clause_1560 (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (divnm : cic.Term cic.prop (matita_arithmetics_primes.divides n m)) (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O n)) (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) (auto : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times matita_arithmetics_nat.O d))) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n matita_arithmetics_nat.O)", "predict": "axiom let_clause_1560 (n m : univs.Type0) (divnm : divides n m) (H : eq (lift univs.Type0 univs.Type2) (nat) (O) n) (d : univs.Type0) (auto : eq (lift univs.Type0 univs.Type2) (nat) m (times (O) d)) : eq (lift univs.Type0 univs.Type2) (nat) n (O)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nBool_inv_ind. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $P$ vara en funktion från element $_z587$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H1$ från element $_z588$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $Hterm$ och $matita_basics_bool.true$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_bool.true$, för alla funktioner $_H2$ från element $_z588$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $Hterm$ och $matita_basics_bool.false$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_bool.false$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "Axiom bool_inv_ind : forall Hterm : cic.Term univs.Type0 matita_basics_bool.bool, forall P : ((_z587 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop), forall _H1 : ((_z588 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.true)) -> cic.Term cic.prop (P matita_basics_bool.true)), forall _H2 : ((_z588 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.false)) -> cic.Term cic.prop (P matita_basics_bool.false)), cic.Term cic.prop (P Hterm) .", "predict": "Axiom bool_inv_ind : forall Hterm : univs.Type0 -> matita_basics_bool.bool, forall P : (cic.Term univs.Type0 -> matita_basics_bool.bool) -> forall H1 : (cic.Term (cic.prop) -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_bool.bool) Hterm matita_basics_bool.true) -> forall H2 : (cic.Term (cic.prop) -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_bool.bool) Hterm matita_basics_bool.false), P Hterm matita_basics_bool.true /\\ P Hterm matita_basics_bool.false ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nSig_rect_Type4. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_666$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $univs.Type4$. Let $_H_mk_Sig$ be a function from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $_f$ applied to $pi1$ to elements of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $matita_basics_types.mk_Sig$ applied to $A$ and $_f$ and $pi1$ and $_pi2$. Let $x_666$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$. Then $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_666$.\nassistant\n", "label": "Sig_rect_Type4 : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> Q_ : (_x_666 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) -> cic.Univ univs.Type4) -> _H_mk_Sig : (pi1 : cic.Term univs.Type0 A -> _pi2 : cic.Term cic.prop (_f pi1) -> cic.Term univs.Type4 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> x_666 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) -> cic.Term univs.Type4 (Q_ x_666) .", "predict": "sig_rect_Type4 : (A : Elem (univs Type0) (cic Univ)) -> (f : Term (univs Type0) (A -> Univ (cic prop))) -> (Q_ : (x_666 : Term (univs Type0)) -> Sig (A (f x_666)) -> Univ (univs Type4)) -> (H_mk_Sig : (pi1 : Term (univs Type0)) -> A -> (pi2 : Term (cic prop)) -> (f pi1) -> Term (univs Type4) -> Q_ (matita_basics_types mk_Sig A f pi1 pi2)) -> (x_666 : Elem (cic Term) (univs Type0) (Sig (A (f x_666)))) -> Proof (univs Type4 (Q_ x_666)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nLift. Let $s1$ and $s2$ be elements of $Sort$. Then for all elements $a$ of $Univ$ of $s1$, $Univ$ holds for $max$ applied to $s1$ and $s2$.\nassistant\n", "label": "axiom lift (s1 s2 : Sort) (a : Univ s1) : Univ (max s1 s2)", "predict": "axiom lift (s1 s2 : Sort) : ∀ a : Univ, (s1 a → Univ (max s1 s2))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nAppend_body. För alla element $H$ av $cic.Univ$ av $univs.Type0$, för alla element $__$ och $__1$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $H$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $H$.\nassistant\n", "label": "postulate append_body : (H : cic.Univ univs.Type0) -> (__ : cic.Term univs.Type0 (matita_basics_lists_list.list H)) -> (__1 : cic.Term univs.Type0 (matita_basics_lists_list.list H)) -> cic.Term univs.Type0 (matita_basics_lists_list.list H)", "predict": "postulate append_body : (H : univs.Type0) -> (x : Term univs.Type0) -> (y : list (matita_basics_lists_list)) -> Term univs.Type0 (list (matita_basics_lists_list))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nOption_inv_rect_CProp0. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $x1$. Then for all functions $P$ from elements $_z1098$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $x1$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $_z1099$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $x1$ and $Hterm$ and $matita_basics_types.None$ applied to $x1$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.None$ applied to $x1$, for all functions $_H2$ from elements $x_635$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_z1099$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $x1$ and $Hterm$ and $matita_basics_types.Some$ applied to $x1$ and $x_635$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.Some$ applied to $x1$ and $x_635$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "axiom option_inv_rect_CProp0 (x1 : cic.Univ univs.Type0) (Hterm : cic.Term univs.Type0 (matita_basics_types.option x1)) (P : (_z1098 : cic.Term univs.Type0 (matita_basics_types.option x1)) -> cic.Univ cic.prop) (_H1 : (_z1099 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.None x1))) -> cic.Term cic.prop (P (matita_basics_types.None x1))) (_H2 : (x_635 : cic.Term univs.Type0 x1) -> (_z1099 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.Some x1 x_635))) -> cic.Term cic.prop (P (matita_basics_types.Some x1 x_635))) : cic.Term cic.prop (P Hterm)", "predict": "axiom option_inv_rect_CProp0 (x1 : Univ Type0) (Hterm : option (x1)) : ∀ z1098 : Term Type0 → option (x1), ∀ H1 : prop (z1099 : Term Type0 → option (x1)) → ∀ x_635 : Term Type0 → prop (x1), ∀ z1099 : prop (x_635 : Term Type0 → prop (x1)) → prop (P (None (x1))) → prop (P (Some (x1) x_635))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nList_rect_CProp3. Pour tous les éléments $_A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $Q_$ des éléments $_x_761$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $_H_nil$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_lists_list.nil$ appliqué à $_A$, pour toutes les fonctions $_H_cons$ des éléments $x_763$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $x_762$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ et des éléments $_x_765$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $x_762$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_lists_list.cons$ appliqué à $_A$ et $x_763$ et $x_762$, pour tous les éléments $x_761$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_761$.\nassistant\n", "label": "postulate list_rect_CProp3 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_761 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ cic.prop) -> (_H_nil : cic.Term cic.prop (Q_ (matita_basics_lists_list.nil _A))) -> (_H_cons : (x_763 : cic.Term univs.Type0 _A) -> (x_762 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_765 : cic.Term cic.prop (Q_ x_762)) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.cons _A x_763 x_762))) -> (x_761 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term cic.prop (Q_ x_761)", "predict": "postulate list_rect_CProp3 : (A : Univ) -> (Q : Term A -> Prop) -> (H_nil : Q (nil A)) -> (H_cons : (x : Term (Type0 A)) -> (y : Term (Type0 A)) -> (z : Prop) -> Q (cons A x y) -> Q (cons A (x , y))) -> (x : Term (Type0 A)) -> Prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nList_rect_Type3_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $Q_$ from elements $_x_731$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type3$, for all elements $_H_nil$ of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_lists_list.nil$ applied to $_A$, for all functions $_H_cons$ from elements $x_733$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $x_732$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ and elements $_x_735$ of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $x_732$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_lists_list.cons$ applied to $_A$ and $x_733$ and $x_732$, for all elements $x_731$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$, $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_731$.\nassistant\n", "label": "postulate list_rect_Type3_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_731 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ univs.Type3) -> (_H_nil : cic.Term univs.Type3 (Q_ (matita_basics_lists_list.nil _A))) -> (_H_cons : (x_733 : cic.Term univs.Type0 _A) -> (x_732 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_735 : cic.Term univs.Type3 (Q_ x_732)) -> cic.Term univs.Type3 (Q_ (matita_basics_lists_list.cons _A x_733 x_732))) -> (x_731 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term univs.Type3 (Q_ x_731)", "predict": "postulate list_rect_Type3_body : (A : Univ Type0) -> (Q : (x : Term Type0) -> List A -> Univ Type3) -> (H_nil : Term Type3) -> (Q (list nil A)) -> (H_cons : (x : Term Type0) -> A -> (x' : Term Type0) -> List A -> Term Type3) -> (Q (list (cons x A) x' (list x' A))) -> (x : Term Type0) -> List A -> Type3) (Q x)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nLstar_ind_l. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $R$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $b2$ av $cic.Term$ av $univs.Type0$ och $B$, för alla element $P$ av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation2$ applicerat på $matita_arithmetics_nat.nat$ och $B$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_arithmetics_nat.O$ och $b2$, för alla funktioner $__1$ från element $l$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $b1$ av $cic.Term$ av $univs.Type0$ och $B$ och element $b$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__1$ av $cic.Term$ av $cic.prop$ och $R$ applicerat på $b1$ och $b$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $R$ och $l$ och $b$ och $b2$ och element $__3$ av $cic.Term$ av $cic.prop$ och $P$ applicerat på $l$ och $b$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_arithmetics_nat.plus$ applicerat på $l$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $b1$, för alla element $l$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $b1$ av $cic.Term$ av $univs.Type0$ och $B$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $R$ och $l$ och $b1$ och $b2$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $l$ och $b1$.\nassistant\n", "label": "lstar_ind_l : B : cic.Univ univs.Type0 -> R : (__ : cic.Term univs.Type0 B -> __1 : cic.Term univs.Type0 B -> cic.Univ cic.prop) -> b2 : cic.Term univs.Type0 B -> P : cic.Term univs.Type0 (matita_basics_relations.relation2 matita_arithmetics_nat.nat B) -> __ : cic.Term cic.prop (P matita_arithmetics_nat.O b2) -> __1 : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b1 : cic.Term univs.Type0 B -> b : cic.Term univs.Type0 B -> __1 : cic.Term cic.prop (R b1 b) -> __2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b b2) -> __3 : cic.Term cic.prop (P l b) -> cic.Term cic.prop (P (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1)) -> l : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b1 : cic.Term univs.Type0 B -> __2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b2) -> cic.Term cic.prop (P l b1) .", "predict": "lstar_ind_l : (B : Elem (univs Type0)) -> (R : Term (univs Type0) -> B -> Prop) -> Proof (forall (b2 : Term (univs Type0)) (P : Relation2 (matita_basics_nats) (B)) (x : Prop (P (matita_basics_nats O) b2)) (l : Term (univs Type0)) (b1 : Term (univs Type0)) (b : Term (univs Type0)) (x1 : Prop (R b1 b)) (x2 : Prop (lstar B R l b b2)) (x3 : Prop (P l b)) (x4 : Prop (P (plus l (S (matita_basics_nats O))) b1)) -> Proof (forall (l : Term (univs Type0)) (b1 : Term (univs Type0)) (x2 : Prop (lstar B R l b1)) (x3 : Prop (P l b1))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nLt_smallest_factor_to_not_divides. Låt $n$ och $i$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $i$. Låt $__2$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $matita_arithmetics_primes.smallest_factor$ applicerat på $n$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_primes.divides$ applicerat på $i$ och $n$.\nassistant\n", "label": "Axiom lt_smallest_factor_to_not_divides : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) i), forall __2 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_primes.smallest_factor n)), cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides i n)) .", "predict": "Axiom lt_smallest_factor_to_not_divides : forall n : univs.Type0, forall i : matita_arithmetics_nat.nat, (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.O)) n -> matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.O)) i -> matita_arithmetics_nat.lt i (matita_arithmetics_primes.smallest_factor n) -> matita_basics_logic.Not (matita_arithmetics_primes.divides i n)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nLt_smallest_factor_to_not_divides. Soient $n$ et $i$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $i$. Soit $__2$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $matita_arithmetics_primes.smallest_factor$ appliqué à $n$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.Not$ appliqué à $matita_arithmetics_primes.divides$ appliqué à $i$ et $n$.\nassistant\n", "label": "Axiom lt_smallest_factor_to_not_divides : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) i), forall __2 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_primes.smallest_factor n)), cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides i n)) .", "predict": "Axiom lt_smallest_factor_to_not_divides : forall n : univs.Type0, forall i : matita_arithmetics_nat.nat, forall __ : cic.Term (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.O)) n), forall __1 : cic.Term (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.O)) i), forall __2 : cic.Term (matita_arithmetics_primes.lt (matita_arithmetics_primes.smallest_factor n) i), matita_basics_logic.not (matita_arithmetics_primes.divides i n) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nACop_rect_CProp4. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_903$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_ACop$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$, för alla element $x_903$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_903$.\nassistant\n", "label": "postulate ACop_rect_CProp4 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_903 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (x_903 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term cic.prop (Q_ x_903)", "predict": "postulate acop_rect_CProp4 : (A : univs.Type0) -> (nil : Term univs.Type0) -> A -> (Q : (x : Term univs.Type0) -> matita_arithmetics_bigops.ACop A nil -> Prop) -> (H_mk_ACop : (aop : Term univs.Type0) -> matita_arithmetics_bigops.Aop A nil -> (a : Term univs.Type0) -> (b : Term univs.Type0) -> A -> matita_basics_logic.eq (univs.Type0) (univs.Type2) A (matita_arithmetics_bigops.op A nil aop a) (matita_arithmetics_bigops.op A nil aop b) (matita_arithmetics_bigops.op A nil aop a) -> Prop) -> (x : Term univs.Type0) -> matita_arithmetics_bigops.ACop A nil -> (aop : Term univs.Type0) -> (comm : (a : Term univs.Type0) -> (b : Term univs.Type0) -> A -> matita_basics_logic.eq (Term univs.Type0) (cic.prop) (Q (matita_arithmetics_bigops.mk_ACop A nil aop)) (matita_arithmetics_bigops.op A nil aop a) (matita_arithmetics_bigops.op A nil aop b) (matita_arithmetics_bigops.op A nil aop a)) -> Prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nAnd_ind. För alla element $_A$ och $_B$ av $cic.Univ$ av $cic.prop$, för alla funktioner $Q_$ från element $_x_118$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_conj$ från element $x_120$ av $cic.Term$ av $cic.prop$ och $_A$ och element $x_119$ av $cic.Term$ av $cic.prop$ och $_B$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_logic.conj$ applicerat på $_A$ och $_B$ och $x_120$ och $x_119$, för alla element $x_118$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_118$.\nassistant\n", "label": "Axiom And_ind : forall _A : cic.Univ cic.prop, forall _B : cic.Univ cic.prop, forall Q_ : ((_x_118 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ cic.prop), forall _H_conj : ((x_120 : cic.Term cic.prop _A) -> (x_119 : cic.Term cic.prop _B) -> cic.Term cic.prop (Q_ (matita_basics_logic.conj _A _B x_120 x_119))), forall x_118 : cic.Term cic.prop (matita_basics_logic.And _A _B), cic.Term cic.prop (Q_ x_118) .", "predict": "Axiom and_ind : forall A : prop, forall B : prop, forall Q : x118 : Term -> and A B -> prop, forall H_conj : x120 : Term -> A -> B -> Term, forall x119 : Term, forall x118 : Term, (and A B -> conj A B x120 x119 -> Q x118) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nLstar_ind_l_aux. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $R$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Univ$ av $cic.prop$. Låt $b2$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Låt $P$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation2$ applicerat på $matita_arithmetics_nat.nat$ och $B$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_arithmetics_nat.O$ och $b2$. Låt $__1$ vara en funktion från element $l$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $b1$ av $cic.Term$ av $univs.Type0$ och $B$ och element $b$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__1$ av $cic.Term$ av $cic.prop$ och $R$ applicerat på $b1$ och $b$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $R$ och $l$ och $b$ och $b2$ och element $__3$ av $cic.Term$ av $cic.prop$ och $P$ applicerat på $l$ och $b$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_arithmetics_nat.plus$ applicerat på $l$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $b1$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $b1$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $B$. Då för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $R$ och $l$ och $b1$ och $b$, för alla element $__3$ av $cic.Term$ av $c", "label": "postulate lstar_ind_l_aux : (B : cic.Univ univs.Type0) -> (R : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Univ cic.prop) -> (b2 : cic.Term univs.Type0 B) -> (P : cic.Term univs.Type0 (matita_basics_relations.relation2 matita_arithmetics_nat.nat B)) -> (__ : cic.Term cic.prop (P matita_arithmetics_nat.O b2)) -> (__1 : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (__1 : cic.Term cic.prop (R b1 b)) -> (__2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b b2)) -> (__3 : cic.Term cic.prop (P l b)) -> cic.Term cic.prop (P (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (__2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b)) -> (__3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) b b2)) -> cic.Term cic.prop (P l b1)", "predict": "ic.prop$ och $P$ applicerat på $l$ och $b$, har vi att $__$ är ekvivalent med $__1$ och $__2$ och $__3$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nSplit_exists. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $matita_basics_lists_list.length$ appliqué à $A$ et $l$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.ex$ appliqué à $matita_basics_lists_list.list$ appliqué à $A$ et la fonction qui envoie $l1$ à $matita_basics_logic.ex$ appliqué à $matita_basics_lists_list.list$ appliqué à $A$ et la fonction qui envoie $l2$ à $matita_basics_logic.And$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $A$ et $l$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l1$ et $l2$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_lists_list.length$ appliqué à $A$ et $l1$ et $n$.\nassistant\n", "label": "Axiom split_exists : forall A : cic.Univ univs.Type0, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall l : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall __ : cic.Term cic.prop (matita_arithmetics_nat.le n (matita_basics_lists_list.length A l)), cic.Term cic.prop (matita_basics_logic.ex (matita_basics_lists_list.list A) (fun l1 => matita_basics_logic.ex (matita_basics_lists_list.list A) (fun l2 => matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l (matita_basics_lists_list.append A l1 l2)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l1) n)))) .", "predict": "Axiom split_exists : forall A : univs.Type0, forall n : matita_arithmetics_nat.nat, forall l : matita_basics_lists_list.list A, forall __ : cic.prop, forall l1 : matita_basics_lists_list.list A, forall l2 : matita_basics_lists_list.list A, forall : cic.prop, forall : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_lists_list.append A l1 l2) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_lists_list.length A) n) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nDivides_times. Låt $n$ och $m$ och $p$ och $q$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $p$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $m$ och $q$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $matita_arithmetics_nat.times$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $p$ och $q$.\nassistant\n", "label": "postulate divides_times : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_primes.divides n p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_primes.divides m q)) -> cic.Term cic.prop (matita_arithmetics_primes.divides (matita_arithmetics_nat.times n m) (matita_arithmetics_nat.times p q))", "predict": "postulate divides_times : (n : Term Type0) -> (m : Term Type0) -> (p : Nat) -> (q : Nat) -> Prop -> (divides n p) -> (divides m q) -> divides (times n m) (times p q)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nLet_clause_10131. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $n$ och $m$ och $n0$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $eqm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_minimization.max$ applicerat på $matita_arithmetics_nat.S$ applicerat på $n0$ och $f$ och $m$. Låt $fm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $m$ och $matita_basics_bool.false$. Låt $i$ och $j$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $ltj$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $j$ och $matita_arithmetics_nat.S$ applicerat på $n0$, för alla element $x7$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $x7$ och $matita_arithmetics_nat.plus$ applicerat på $m$ och $x7$.\nassistant\n", "label": "let_clause_10131 : f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> eqm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.max (matita_arithmetics_nat.S n0) f) m) -> fm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.false) -> i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> j : cic.Term univs.Type0 matita_arithmetics_nat.nat -> ltj : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S j) (matita_arithmetics_nat.S n0)) -> x7 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x7 (matita_arithmetics_nat.plus m x7)) .", "predict": "let_clause_10131 : (f : Elem (Term (univs Type0)) (nat matita_arithmetics_nat)) -> (n : Elem (Term (univs Type0)) (nat matita_arithmetics_nat)) -> (m : Elem (Term (univs Type0)) (nat matita_arithmetics_nat)) -> (n0 : Elem (Term (univs Type0)) (nat matita_arithmetics_nat)) -> (eqm : Elem (prop (univs Type0)) (eq (nat matita_arithmetics_nat) (max (S (n0)) (f m)))) -> (fm : Elem (prop (univs Type0)) (eq (bool matita_basics_bool) (f m) false)) -> (i : Elem (Term (univs Type0)) (nat matita_arithmetics_nat)) -> (j : Elem (Term (univs Type0)) (nat matita_arithmetics_nat)) -> Proof (forall (ltj : Elem (prop (univs Type0)) (lt (S j) (S n0))) (forall (x7 : Elem (Term (univs Type0)) (nat matita_arithmetics_nat)) (eq (prop (univs Type0)) (eq (lift (univs Type0) (univs Type2)) (nat matita_arithmetics_nat) x7) (plus m x7)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nMin_exists. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $t$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $t$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $m$ och $matita_basics_bool.true$, för alla element $k$ och $b$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $b$ och $m$, för alla funktioner $__3$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__3$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $b$ och $i$ och element $__4$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $m$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $i$ och $matita_basics_bool.false$, för alla element $__4$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $t$ och $matita_arithmetics_nat.plus$ applicerat på $k$ och $b$, håller $cic.Term$ för $cic.prop$ och $mat", "label": "min_exists : f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> t : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt m t) -> __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.true) -> k : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __2 : cic.Term cic.prop (matita_arithmetics_nat.le b m) -> __3 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __3 : cic.Term cic.prop (matita_arithmetics_nat.le b i) -> __4 : cic.Term cic.prop (matita_arithmetics_nat.lt i m) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)) -> __4 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) t (matita_arithmetics_nat.plus k b)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.min k b f) m) .", "predict": "ita_arithmetics_nat.lt$ applicerat på $t$ och $b$ och $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.eq$ applicerat på $f$ applicerat på $t$ och $t$ och $cic.Term$ för $cic.prop$ och $matita_basics_logic.and$ applicerat på $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $t$ och $matita_basics_bool.true$ och $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $t$ och $matita_arithmetics_nat.plus$ applicerat på $k$ och $b$, det innebär att det finns ett element $x$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ sådan att $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $x$ och $matita_basics_bool.true$ och $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $t$ och $matita_arithmetics_nat.plus$ applicerat på $k$ och $b$ och $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $x$ och $b$ och $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicer"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nDivides_to_dividesb_true. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $m$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $matita_arithmetics_primes.dividesb$ applicerat på $n$ och $m$ och $matita_basics_bool.true$.\nassistant\n", "label": "divides_to_dividesb_true : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> __1 : cic.Term cic.prop (matita_arithmetics_primes.divides n m) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_primes.dividesb n m) matita_basics_bool.true) .", "predict": "divides_to_dividesb_true : (n : Elem (cic Term) (univs Type0)) -> (m : Elem (cic Term) (matita_arithmetics_nat nat)) -> Proof (and (Lt (matita_arithmetics_nat O) n) (divides n m)) -> Proof (Eq (lift (univs Type0) (univs Type2)) (bool (dividesb n m))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nProd_inv_ind. För alla element $x1$ och $x2$ av $cic.Univ$ av $univs.Type0$, för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1236$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $_fst$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_snd$ av $cic.Term$ av $univs.Type0$ och $x2$ och element $_z1237$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_Prod$ applicerat på $x1$ och $x2$ och $_fst$ och $_snd$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $x1$ och $x2$ och $_fst$ och $_snd$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "postulate Prod_inv_ind : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2)) -> (P : (_z1236 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (_fst : cic.Term univs.Type0 x1) -> (_snd : cic.Term univs.Type0 x2) -> (_z1237 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod x1 x2)) Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term cic.prop (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term cic.prop (P Hterm)", "predict": "postulate prod_inv_ind : (x1 : univs.Type0) -> (x2 : univs.Type0) -> (Hterm : Term univs.Type0) -> (P : (z1236 : Term univs.Type0) -> Prod x1 x2 -> Univ (prop)) -> (H1 : (fst : Term univs.Type0) -> x1 -> (snd : Term univs.Type0) -> x2 -> prop) -> (z1237 : Term (prop (lift univs.Type0 univs.Type2) (Prod x1 x2) Hterm)) -> (eq : Eq (cic.lift univs.Type0 univs.Type2) (Prod x1 x2)) -> (P (mk_Prod x1 x2) (fst) (snd)) -> prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nEq_rect_Type2_r. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $a$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $P$ une fonction des éléments $x$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $x$ et $a$ à des éléments de $cic.Univ$ de $univs.Type2$. Soit $__$ un élément de $cic.Term$ de $univs.Type2$ et de $P$ appliqué à $a$ et $matita_basics_logic.refl$ appliqué à $A$ et $a$. Soit $x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $p$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $x$ et $a$. Alors $cic.Term$ tient pour $univs.Type2$ et $P$ appliqué à $x$ et $p$.\nassistant\n", "label": "eq_rect_Type2_r : A : cic.Univ univs.Type2 -> a : cic.Term univs.Type2 A -> P : (x : cic.Term univs.Type2 A -> __ : cic.Term cic.prop (matita_basics_logic.eq A x a) -> cic.Univ univs.Type2) -> __ : cic.Term univs.Type2 (P a (matita_basics_logic.refl A a)) -> x : cic.Term univs.Type2 A -> p : cic.Term cic.prop (matita_basics_logic.eq A x a) -> cic.Term univs.Type2 (P x p) .", "predict": "eq_rect_Type2_r : (A : Elem (univs Type2)) -> (a : Elem (cic Term) (A : Elem (univs Type2))) -> (P : (x : Elem (cic Term) (A : Elem (univs Type2))) -> Elem (cic prop) (matita_basics_logic.eq A x a)) -> (x : Elem (cic Term) (A : Elem (univs Type2))) -> (p : Elem (cic prop) (matita_basics_logic.eq A x a)) -> Elem (cic Term) (univs Type2) (P x p) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nNot_rect_CProp5_body. For all elements $_A$ of $cic.Univ$ of $cic.prop$, for all functions $Q_$ from elements $_x_103$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_nmk$ from functions $x_104$ from elements $__$ of $cic.Term$ of $cic.prop$ and $_A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.False$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_logic.nmk$ applied to $_A$ and $x_104$, for all elements $x_103$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $_A$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_103$.\nassistant\n", "label": "postulate Not_rect_CProp5_body : (_A : cic.Univ cic.prop) -> (Q_ : (_x_103 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ cic.prop) -> (_H_nmk : (x_104 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ (matita_basics_logic.nmk _A x_104))) -> (x_103 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Term cic.prop (Q_ x_103)", "predict": "postulate not_rect_CProp5_body : (A : Univ prop) -> (Q : x103 : Term prop -> not A : Univ prop) -> (H_nmk : (x : Term prop) -> A -> Term prop) -> (x103 : Term prop) -> not A -> Term prop -> Q (x103)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nBool_rect_CProp4_body. Soit $Q_$ une fonction des éléments $_x_347$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_true$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_bool.true$. Alors pour tous les éléments $_H_false$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_bool.false$, pour tous les éléments $x_347$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_347$.\nassistant\n", "label": "postulate bool_rect_CProp4_body : (Q_ : (_x_347 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) -> (_H_true : cic.Term cic.prop (Q_ matita_basics_bool.true)) -> (_H_false : cic.Term cic.prop (Q_ matita_basics_bool.false)) -> (x_347 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ x_347)", "predict": "postulate bool_rect_CProp4_body : (Q : (x_347 : Term Type0) -> Bool) -> (H_true : prop (Q true)) -> (H_false : prop (Q false)) -> all (forall (x_347 : Term Type0) (Q x_347))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nF3_ind_aux. Soient $A1$ et $A2$ et $A3$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A2$ et des éléments $__2$ de $cic.Term$ de $univs.Type0$ et de $A3$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $P$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation3$ appliqué à $A1$ et $A2$ et $A3$. Alors pour toutes les fonctions $__$ des éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $__$ des éléments $a1$ de $cic.Term$ de $univs.Type0$ et de $A1$ et des éléments $a2$ de $cic.Term$ de $univs.Type0$ et de $A2$ et des éléments $a3$ de $cic.Term$ de $univs.Type0$ et de $A3$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $f$ appliqué à $a1$ et $a2$ et $a3$ et $n$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $a1$ et $a2$ et $a3$ et des éléments $a1$ de $cic.Term$ de $univs.Type0$ et de $A1$ et des éléments $a2$ de $cic.Term$ de $univs.Type0$ et de $A2$ et des éléments $a3$ de $cic.Term$ de $univs.Type0$ et de $A3$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et", "label": "postulate f3_ind_aux : (A1 : cic.Univ univs.Type0) -> (A2 : cic.Univ univs.Type0) -> (A3 : cic.Univ univs.Type0) -> (f : (__ : cic.Term univs.Type0 A1) -> (__1 : cic.Term univs.Type0 A2) -> (__2 : cic.Term univs.Type0 A3) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (P : cic.Term univs.Type0 (matita_basics_relations.relation3 A1 A2 A3)) -> (__ : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : (a1 : cic.Term univs.Type0 A1) -> (a2 : cic.Term univs.Type0 A2) -> (a3 : cic.Term univs.Type0 A3) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (f a1 a2 a3) n)) -> cic.Term cic.prop (P a1 a2 a3)) -> (a1 : cic.Term univs.Type0 A1) -> (a2 : cic.Term univs.Type0 A2) -> (a3 : cic.Term univs.Type0 A3) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a1 a2 a3) n)) -> cic.Term cic.prop (P a1 a2 a3)) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a1 : cic.Term univs.Type0 A1) -> (a2 : cic.Term univs.Type0 A2) -> (a3 : cic.Term univs.Type0 A3) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a1 a2 a3) n)) -> cic.Term cic.prop (P a1 a2 a3)", "predict": " de $matita_arithmetics_nat.lt$ appliqué à $f$ appliqué à $a1$ et $a2$ et $a3$ et $n$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $a1$ et $a2$ et $a3$ et des éléments $a1$ de $cic.Term$ de $univs.Type0$ et de $A1$ et des éléments $a2$ de $cic.Term$ de $univs.Type0$ et de $A2$ et des éléments $a3$ de $cic.Term$ de $univs.Type0$ et de $A3$ et des éléments $x$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $y$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, nous avons que $\\forall n : \\matita_arithmetics_nat.nat, \\forall a1 : A1, \\forall a2 : A2, \\forall a3 : A3, \\forall x : \\matita_arithmetics_nat.nat, \\forall y : \\matita_arithmetics_nat.nat, \\forall z : \\matita_arithmetics_nat.nat, \\text{if } (P \\, a1 \\, a2 \\, a3) \\land (f \\, a1 \\, a2 \\, a3 \\, n) \\land (x < n) \\land (y < n) \\land (z < n) \\land (P \\, a1 \\, a2 \\, a3) \\land (f \\, a1 \\, a2 \\, a3 \\, n) \\land (x < n) \\land (y < n) \\land (z < n) \\land (P \\, a1 \\, a2 \\, a3) \\land (f \\, a1 \\, a2 \\, a3 \\, n) \\land (x < n) \\land (y < n) \\land (z < n) \\"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nDiv_mod_spec_rect_Type3_body. Låt $_n$ och $_m$ och $_q$ och $_r$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Q_$ vara en funktion från element $_x_821$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ till element av $cic.Univ$ av $univs.Type3$. Låt $_H_div_mod_spec_intro$ vara en funktion från element $x_823$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $_r$ och $_m$ och element $x_822$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $_n$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $_q$ och $_m$ och $_r$ till element av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ och $x_823$ och $x_822$. Låt $x_821$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$. Då håller $cic.Term$ för $univs.Type3$ och $Q_$ applicerat på $x_821$.\nassistant\n", "label": "axiom div_mod_spec_rect_Type3_body (_n _m _q _r : cic.Term univs.Type0 matita_arithmetics_nat.nat) (Q_ : (_x_821 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ univs.Type3) (_H_div_mod_spec_intro : (x_823 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_822 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term univs.Type3 (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_823 x_822))) (x_821 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) : cic.Term univs.Type3 (Q_ x_821)", "predict": "axiom div_mod_spec_rect_Type3_body (n m q r : Term univ Type0) (Q : x821 : Prop) (H_div_mod_spec_intro : r < m ∧ n = q * m + r) : Term univ Type3 (Q (div_mod_spec n m q r))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nEq_rect_Type4. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Let $_x$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $Q_$ be a function from elements $x_4$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $_x_5$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_4$ to elements of $cic.Univ$ of $univs.Type4$. Then for all elements $_H_refl$ of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $_x$ and $matita_basics_logic.refl$ applied to $A$ and $_x$, for all elements $x_4$ of $cic.Term$ of $univs.Type2$ and $A$, for all elements $x_5$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_4$, $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_4$ and $x_5$.\nassistant\n", "label": "eq_rect_Type4 : A : cic.Univ univs.Type2 -> _x : cic.Term univs.Type2 A -> Q_ : (x_4 : cic.Term univs.Type2 A -> _x_5 : cic.Term cic.prop (matita_basics_logic.eq A _x x_4) -> cic.Univ univs.Type4) -> _H_refl : cic.Term univs.Type4 (Q_ _x (matita_basics_logic.refl A _x)) -> x_4 : cic.Term univs.Type2 A -> x_5 : cic.Term cic.prop (matita_basics_logic.eq A _x x_4) -> cic.Term univs.Type4 (Q_ x_4 x_5) .", "predict": "eq_rect_Type4 : (A : univs.Type2) -> (x : cic.Term A) -> (Q_ : (x_4 : cic.Term A) -> (x_5 : cic.Term (cic.prop A)) -> matita_basics_logic.eq A x x_4) -> (H_refl : cic.Term (univs.Type4)) -> (Q_ x (matita_basics_logic.refl A x)) -> (x_4 : cic.Term A) -> (x_5 : cic.Term (cic.prop A)) -> matita_basics_logic.eq A x x_4) -> cic.Term (univs.Type4) (Q_ x_4 x_5) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nVoid_rect_CProp2. Soit $Q_$ une fonction des éléments $_x_492$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.void$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $x_492$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.void$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_492$.\nassistant\n", "label": "Axiom void_rect_CProp2 : forall Q_ : ((_x_492 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ cic.prop), forall x_492 : cic.Term univs.Type0 matita_basics_types.void, cic.Term cic.prop (Q_ x_492) .", "predict": "Axiom void_rect_CProp2 : forall Q : void -> Type0 -> Prop, forall x_492 : void, Term Type0 -> Prop, Q x_492 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nAnd_inv_rect_CProp0. Let $x1$ and $x2$ be elements of $cic.Univ$ of $cic.prop$. Let $Hterm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z383$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $_H1$ from elements $x_168$ of $cic.Term$ of $cic.prop$ and $x1$ and elements $x_167$ of $cic.Term$ of $cic.prop$ and $x2$ and elements $_z384$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_basics_logic.And$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_logic.conj$ applied to $x1$ and $x2$ and $x_168$ and $x_167$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_logic.conj$ applied to $x1$ and $x2$ and $x_168$ and $x_167$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "And_inv_rect_CProp0 : x1 : cic.Univ cic.prop -> x2 : cic.Univ cic.prop -> Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2) -> P : (_z383 : cic.Term cic.prop (matita_basics_logic.And x1 x2) -> cic.Univ cic.prop) -> _H1 : (x_168 : cic.Term cic.prop x1 -> x_167 : cic.Term cic.prop x2 -> _z384 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_168 x_167)) -> cic.Term cic.prop (P (matita_basics_logic.conj x1 x2 x_168 x_167))) -> cic.Term cic.prop (P Hterm) .", "predict": "and_inv_rect_CProp0 : (x1 : Elem (Univ (prop))) -> (x2 : Elem (Univ (prop))) -> (Hterm : Elem (Term (prop))) -> (and : Matita_Basics_Logic (and) x1 x2) -> (P : (z383 : Elem (Term (prop))) -> (and : Matita_Basics_Logic (and) x1 x2) -> Elem (Univ (prop))) -> Proof (forall (H1 : (x168 : Elem (Term (prop))) -> (x1 : Elem (Term (prop))) -> (x167 : Elem (Term (prop))) -> (x2 : Elem (Term (prop))) -> (z384 : Elem (Term (prop))) -> (eq : Matita_Basics_Logic (eq) (lift (prop) (Type2)) (and x1 x2) Hterm (conj x1 x2) x168 x167) -> Elem (Term (prop))) (P (conj x1 x2) x168 x167)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nLet_clause_15623. Let $m$ and $n$ and $a$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Let $posm$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$. Then for all elements $pnm$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $c$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $d$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $d$ of $cic.Term$ of $univs.Type0$ and $mat", "label": "Axiom let_clause_15623 : forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), forall pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)), forall c : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (fun d => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O", "predict": "ita_arithmetics_nat.nat$, for all elements $pospnm$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$, the following holds: if $pnm$ and $pospnm$ are true, then $posn$ and $posm$ are true."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nMatch_Aop. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $return_sort$ vara ett element av $cic.Sort$. Låt $return_type$ vara en funktion från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $return_sort$. Då för alla funktioner $case_mk_Aop$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$ av $return_sort$ och", "label": "Axiom match_Aop : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall return_sort : cic.Sort, forall return_type : ((z : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ return_sort), forall case_mk_Aop : ((op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term return_sort (return_type (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))), forall z : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil), cic.Term return_sort (return_type z) .", "predict": " $case_mk_Aop$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nList_rect_Type1_body. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_741$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type1$. Alors pour tous les éléments $_H_nil$ de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_basics_lists_list.nil$ appliqué à $_A$, pour toutes les fonctions $_H_cons$ des éléments $x_743$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $x_742$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ et des éléments $_x_745$ de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $x_742$ à des éléments de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_basics_lists_list.cons$ appliqué à $_A$ et $x_743$ et $x_742$, pour tous les éléments $x_741$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$, $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_741$.\nassistant\n", "label": "Axiom list_rect_Type1_body : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_741 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ univs.Type1), forall _H_nil : cic.Term univs.Type1 (Q_ (matita_basics_lists_list.nil _A)), forall _H_cons : ((x_743 : cic.Term univs.Type0 _A) -> (x_742 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_745 : cic.Term univs.Type1 (Q_ x_742)) -> cic.Term univs.Type1 (Q_ (matita_basics_lists_list.cons _A x_743 x_742))), forall x_741 : cic.Term univs.Type0 (matita_basics_lists_list.list _A), cic.Term univs.Type1 (Q_ x_741) .", "predict": "Axiom list_rect_Type1_body : forall A : Univ, (Q_ : x : Term Type0 -> list A -> Prop -> Prop) -> forall H_nil : Term Type1, (Q_ A (nil A) H_nil) -> forall H_cons : x : Term Type0 -> A -> Term Type0 -> list A -> Prop -> Prop, forall x_745 : Term Type1, (Q_ (cons A x_743 x_742) (Q_ x_742 (H_cons x_743 x_742))) -> forall x_741 : Term Type0, (Q_ x_741 (list A)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nTheta_pred. Pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_chebyshev_chebyshev_theta.theta$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_chebyshev_chebyshev_theta.theta$ appliqué à $matita_arithmetics_nat.pred$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$.\nassistant\n", "label": "postulate theta_pred : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_chebyshev_chebyshev_theta.theta (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_chebyshev_chebyshev_theta.theta (matita_arithmetics_nat.pred (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))))", "predict": "postulate theta_pred : (n : cic.Term univs.Type0) -> (n : nat) -> (p : cic.Term) -> (q : lt (S (S (O n))) (theta (times (S (S (O n))) (times (S (S (O n))) (O n))) (theta (pred (times (S (S (O n))) (times (S (S (O n))) (O n))) (times (S (S (O n))) (times (S (S (O n))) (O n)))) (p (lift univs.Type0 univs.Type2) (nat) (theta (times (S (S (O n))) (times (S (S (O n))) (O n))) (times (S (S (O n))) (times (S (S (O n))) (O n)))) (p (eq (lift univs.Type0 univs.Type2) (nat)) (theta (times (S (S (O n))) (times (S (S (O n))) (O n))) (times (S (S (O n))) (times (S (S (O n))) (O n))))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nDiv_aux_body. For all elements $_p$ and $_m$ and $_n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_nat.nat$.\nassistant\n", "label": "postulate div_aux_body : (_p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat", "predict": "postulate div_aux_body : (p : univs.Type0) -> (m : matita_arithmetics_nat.nat) -> (n : matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nTheta_pred. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_chebyshev_chebyshev_theta.theta$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_chebyshev_chebyshev_theta.theta$ appliqué à $matita_arithmetics_nat.pred$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$.\nassistant\n", "label": "Axiom theta_pred : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_chebyshev_chebyshev_theta.theta (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_chebyshev_chebyshev_theta.theta (matita_arithmetics_nat.pred (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)))) .", "predict": "Axiom theta_pred : forall n : matita_arithmetics_nat.nat, forall __ : cic.Term (cic.prop * matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.O)) n), cic.Term (cic.prop * matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_arithmetics_chebyshev_chebyshev_theta.theta (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) n)) (matita_arithmetics_chebyshev_chebyshev_theta.theta (matita_arithmetics_nat.pred (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) n))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nS_pred. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.pred$ appliqué à $n$ et $n$.\nassistant\n", "label": "S_pred : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.S (matita_arithmetics_nat.pred n)) n) .", "predict": "s_pred : (n : Elem (Term (Type0 (univs))) (Nat (matita_arithmetics_nat))) -> Proof (forall (p : Elem (Term (prop)) (Lt (matita_arithmetics_nat (O)) n)) (and (Eq (lift (univs) (Type2)) (nat (matita_arithmetics_nat))) (Eq (pred (n)) n))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nDop_ind. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_943$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_Dop$ från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $_nil$ och $_nil$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $prod$ applicerat på $a$ och $b$ och $prod$ applicerat på $a$ och $c$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arith", "label": "postulate Dop_ind : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_943 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_943 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term cic.prop (Q_ x_943)", "predict": "metics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ applicerat på $b$ och $c$ ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nLet_clause_1562. Soient $m$ et $n$ et $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $posn$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $posm$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$, pour tous les éléments $pnm$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $c$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $_clearme$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $d$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $d", "label": "Axiom let_clause_1562 : forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), forall pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)), forall c : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (fun d => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (mat", "predict": "$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $posn$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $posm$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$, pour tous les éléments $pnm$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $c$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $_clearme$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $d$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nNot_ind_body. Soit $_A$ un élément de $cic.Univ$ de $cic.prop$. Soit $Q_$ une fonction des éléments $_x_79$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $_H_nmk$ des fonctions $x_80$ des éléments $__$ de $cic.Term$ de $cic.prop$ et de $_A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_logic.nmk$ appliqué à $_A$ et $x_80$, pour tous les éléments $x_79$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_79$.\nassistant\n", "label": "Axiom Not_ind_body : forall _A : cic.Univ cic.prop, forall Q_ : ((_x_79 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ cic.prop), forall _H_nmk : ((x_80 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ (matita_basics_logic.nmk _A x_80))), forall x_79 : cic.Term cic.prop (matita_basics_logic.Not _A), cic.Term cic.prop (Q_ x_79) .", "predict": "Axiom not_ind_body : forall A : cic.Univ -> cic.prop, forall Q : x_79 : cic.Term -> cic.prop -> matita_basics_logic.Not A -> forall H : x_80 : cic.Term -> A -> cic.prop -> matita_basics_logic.False -> Q (matita_basics_logic.nmk A x_80) -> forall x_79 : cic.Term -> cic.prop -> Q x_79 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nBigop_commute. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all functions $p11$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all functions $p12$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all functions $p21$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all functions $p22$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all elements $B$ of $cic.Univ$ of $univs.Type0$, for all elements $nil$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $op$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $B$ and $nil$, for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $B$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_ar", "label": "bigop_commute : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p11 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> p12 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> p21 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> p22 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> B : cic.Univ univs.Type0 -> nil : cic.Term univs.Type0 B -> op : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil) -> f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 B) -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> __2 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> j : cic.Term univs.Type0 matita_ar", "predict": "ithmetics_nat.O$ and $m$, we have that $p11 (op) (f (n) (m))$ is equal to $p12 (op) (f (m) (n))$ and $p21 (op) (f (n) (m))$ is equal to $p22 (op) (f (m) (n))$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nDiv_mod_spec_div_mod. Soient $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $n$ et $m$ et $matita_arithmetics_div_and_mod.div$ appliqué à $n$ et $m$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $n$ et $m$.\nassistant\n", "label": "axiom div_mod_spec_div_mod (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec n m (matita_arithmetics_div_and_mod.div n m) (matita_arithmetics_div_and_mod.mod n m))", "predict": "axiom div_mod_spec_div_mod (n m : univs.Type0) (x : matita_arithmetics_nat.lt matita_arithmetics_nat.O m) : cic.prop (matita_arithmetics_div_and_mod.div_mod_spec n m) (matita_arithmetics_div_and_mod.div n m) (matita_arithmetics_div_and_mod.mod n m)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nDiv_mod_spec_inv_rect_Type1. Låt $x1$ och $x2$ och $x3$ och $x4$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Hterm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $x1$ och $x2$ och $x3$ och $x4$. Då för alla funktioner $P$ från element $_z1458$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ till element av $cic.Univ$ av $univs.Type1$, för alla funktioner $_H1$ från element $x_831$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $x4$ och $x2$ och element $x_830$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $x1$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $x3$ och $x2$ och $x4$ och element $_z1459$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ och $Hterm$ och $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ och $x_831$ och $x_830$ till element av $cic.Term$ av $univs.Type1$ och $P$ applicerat på $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ och $x_831$ och $x_830$, håller", "label": "Axiom div_mod_spec_inv_rect_Type1 : forall x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall x3 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall x4 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall Hterm : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4), forall P : ((_z1458 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) -> cic.Univ univs.Type1), forall _H1 : ((x_831 : cic.Term cic.prop (matita_arithmetics_nat.lt x4 x2)) -> (x_830 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x3 x2) x4))) -> (_z1459 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) Hterm (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_831 x_830))) -> cic.Term univs.Type1 (P (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_831 x_830))), cic.Term univs.Type1 (P Hterm) .", "predict": " det fast att $P$ och $Hterm$ är ekvivalenta."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nDPair_inv_rect_CProp4. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$. Då för alla funktioner $P$ från element $_z1140$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $dpi1$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_dpi2$ av $cic.Term$ av $univs.Type0$ och $x2$ applicerat på $dpi1$ och element $_z1141$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_DPair$ applicerat på $x1$ och $x2$ och $dpi1$ och $_dpi2$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.mk_DPair$ applicerat på $x1$ och $x2$ och $dpi1$ och $_dpi2$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "DPair_inv_rect_CProp4 : x1 : cic.Univ univs.Type0 -> x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) -> Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) -> P : (_z1140 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) -> cic.Univ cic.prop) -> _H1 : (dpi1 : cic.Term univs.Type0 x1 -> _dpi2 : cic.Term univs.Type0 (x2 dpi1) -> _z1141 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) -> cic.Term cic.prop (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P Hterm) .", "predict": "dpair_inv_rect_CProp4 : (x1 : Elem (univs Type0)) -> (x2 : (x : Elem (univs Type0)) -> Elem (univs Type0)) -> (Hterm : Elem (Term (univs Type0)) (dpair x1 x2)) -> Proof (forall (P : (z1140 : Elem (Term (univs Type0))) -> (dpair x1 x2) -> Elem (Univ (cic prop))) (forall (H1 : (dpi1 : Elem (Term (univs Type0))) -> (x1)) (dpi2 : Elem (Term (univs Type0))) -> (x2)) (forall (z1141 : Elem (Term (cic prop))) (eq (lift (univs Type0) (univs Type2)) (dpair x1 x2))) (Hterm) (mk_DPair x1 x2) (dpi1) (dpi2)) (Term (cic prop)) (P (mk_DPair x1 x2) (dpi1) (dpi2))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nSum_inv_rect_Type3. Let $x1$ and $x2$ be elements of $cic.Univ$ of $univs.Type0$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z984$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type3$. Then for all functions $_H1$ from elements $x_537$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_z985$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Sum$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.inl$ applied to $x1$ and $x2$ and $x_537$ to elements of $cic.Term$ of $univs.Type3$ and $P$ applied to $matita_basics_types.inl$ applied to $x1$ and $x2$ and $x_537$, for all functions $_H2$ from elements $x_538$ of $cic.Term$ of $univs.Type0$ and $x2$ and elements $_z985$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Sum$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.inr$ applied to $x1$ and $x2$ and $x_538$ to elements of $cic.Term$ of $univs.Type3$ and $P$ applied to $matita_basics_types.inr$ applied to $x1$ and $x2$ and $x_538$, $cic.Term$ holds for $univs.Type3$ and $P$ applied to $Hterm$.\nassistant\n", "label": "axiom Sum_inv_rect_Type3 (x1 x2 : cic.Univ univs.Type0) (Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) (P : (_z984 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> cic.Univ univs.Type3) (_H1 : (x_537 : cic.Term univs.Type0 x1) -> (_z985 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inl x1 x2 x_537))) -> cic.Term univs.Type3 (P (matita_basics_types.inl x1 x2 x_537))) (_H2 : (x_538 : cic.Term univs.Type0 x2) -> (_z985 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inr x1 x2 x_538))) -> cic.Term univs.Type3 (P (matita_basics_types.inr x1 x2 x_538))) : cic.Term univs.Type3 (P Hterm)", "predict": "axiom sum_inv_rect_Type3 (x1 x2 : Univ Type0) (Hterm : Term (Sum x1 x2) Type0) (P : (z : Sum x1 x2) → Univ Type3) : ∀ x_537 : Term x1 Type0, ∀ z985 : Prop, ∀ (H : Eq (lift Type0 Type2) (Sum x1 x2) Hterm (inl x1 x2) x_537) : ∀ x_538 : Term x2 Type0, ∀ z985 : Prop, ∀ (H : Eq (lift Type0 Type2) (Sum x1 x2) Hterm (inr x1 x2) x_538) : Term Type3 (P Hterm)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nBool_inv_ind. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $P$ be a function from elements $_z587$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $cic.prop$. Let $_H1$ be a function from elements $_z588$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Hterm$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_bool.true$. Let $_H2$ be a function from elements $_z588$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Hterm$ and $matita_basics_bool.false$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_bool.false$. Then $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "axiom bool_inv_ind (Hterm : cic.Term univs.Type0 matita_basics_bool.bool) (P : (_z587 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) (_H1 : (_z588 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.true)) -> cic.Term cic.prop (P matita_basics_bool.true)) (_H2 : (_z588 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.false)) -> cic.Term cic.prop (P matita_basics_bool.false)) : cic.Term cic.prop (P Hterm)", "predict": "axiom bool_inv_ind (Hterm : Term Type0) (b : bool) (P : ∀ z : Term Type0, bool → Prop) (H1 : ∀ z : prop, (Eq (lift Type0 Type2) (b = true)) → Term prop) (H2 : ∀ z : prop, (Eq (lift Type0 Type2) (b = false)) → Term prop) : Prop (P Hterm b)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nAop_rect_Type2. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_869$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type2$. Soit $_H_mk_Aop$ une fonction des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c", "label": "postulate Aop_rect_Type2 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_869 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ univs.Type2) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type2 (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_869 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Term univs.Type2 (Q_ x_869)", "predict": "$ et des fonctions $_comm$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $b$ et $op$ appliqué à $b$ et $a$ et des fonctions $_id$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $a$.\n\npostulate aop_rect_Type2 : (A : Univ Type0) -> _nil : Term Type0 A -> Q_ : (x : Term Type0) -> Aop (A _nil) -> Univ Type2 -> (op : (x : Term Type0) -> A) -> (x1 : Term Type0) -> A) -> (a : Term Type0) -> Prop -> Eq (lift Type0 Type2 A) (op _nil a) a) -> (a : Term Type0) -> (x : Term Type0) -> (A : Univ Type0) -> Prop -> Eq (lift Type0 Type2 A) (op x a) (op x1 a) -> (a : Term Type0) -> (x : Term Type0) -> (b : Term Type0) -> (A : Univ Type0) -> Prop -> Eq (lift Type0 Type2 A) (op (op a x) b) (op a (op x b)) -> (a : Term Type0) -> (x : Term Type0) -> (A : Univ Type0) -> Prop -> Eq (lift Type0 Type2 A) (op a x) (op x a) -> (a : Term Type0) -> (A : Univ Type0) ->"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nLog_exp2. Låt $p$ och $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.times$ applicerat på $m$ och $matita_arithmetics_log.log$ applicerat på $p$ och $n$ och $matita_arithmetics_log.log$ applicerat på $p$ och $matita_arithmetics_exp.exp$ applicerat på $n$ och $m$.\nassistant\n", "label": "axiom log_exp2 (p n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times m (matita_arithmetics_log.log p n)) (matita_arithmetics_log.log p (matita_arithmetics_exp.exp n m)))", "predict": "axiom log_exp2 (p n m : Term Type0) (x : Lt (S 0) p) (y : Lt (S 0) n) : Le (times m (log p n)) (log p (exp n m))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nBool_rect_Type2_body. Låt $Q_$ vara en funktion från element $_x_338$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Univ$ av $univs.Type2$. Då för alla element $_H_true$ av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_basics_bool.true$, för alla element $_H_false$ av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_basics_bool.false$, för alla element $x_338$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, håller $cic.Term$ för $univs.Type2$ och $Q_$ applicerat på $x_338$.\nassistant\n", "label": "Axiom bool_rect_Type2_body : forall Q_ : ((_x_338 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ univs.Type2), forall _H_true : cic.Term univs.Type2 (Q_ matita_basics_bool.true), forall _H_false : cic.Term univs.Type2 (Q_ matita_basics_bool.false), forall x_338 : cic.Term univs.Type0 matita_basics_bool.bool, cic.Term univs.Type2 (Q_ x_338) .", "predict": "Axiom bool_rect_Type2_body : forall Q : x_338 : Term Type0 -> bool -> Univ Type2, forall H_true : Term Type2, Q true = ... forall H_false : Term Type2, Q false = ... forall x_338 : Term Type0, Q x_338 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nOption_rect_Type0. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_610$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $_H_None$ un élément de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_types.None$ appliqué à $_A$. Soit $_H_Some$ une fonction des éléments $x_611$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_types.Some$ appliqué à $_A$ et $x_611$. Alors pour tous les éléments $x_610$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$, $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_610$.\nassistant\n", "label": "Axiom option_rect_Type0 : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_610 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ univs.Type0), forall _H_None : cic.Term univs.Type0 (Q_ (matita_basics_types.None _A)), forall _H_Some : ((x_611 : cic.Term univs.Type0 _A) -> cic.Term univs.Type0 (Q_ (matita_basics_types.Some _A x_611))), forall x_610 : cic.Term univs.Type0 (matita_basics_types.option _A), cic.Term univs.Type0 (Q_ x_610) .", "predict": "Axiom option_rect_Type0 : forall A : Univ Type0, forall Q : Term Type0 -> option A -> Prop, forall H_None : Q (None A) : forall x_610 : Term Type0 -> option A, Q x_610 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nUnit_discr. Let $x$ and $y$ be elements of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$. Let $_e$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.unit$ and $x$ and $y$. Then $cic.Term$ holds for $univs.Type2$ and $matita_basics_types.match_unit$ applied to $cic.succ$ applied to $univs.Type2$ and the function that maps $__$ to $cic.univ$ applied to $univs.Type2$ and $matita_basics_types.match_unit$ applied to $cic.succ$ applied to $univs.Type2$ and the function that maps $__$ to $cic.univ$ applied to $univs.Type2$ and $cic.prod$ applied to $cic.succ$ applied to $univs.Type1$ and $univs.Type1$ and $cic.univ$ applied to $univs.Type1$ and the function that maps $P$ to $cic.prod$ applied to $univs.Type1$ and $univs.Type1$ and $P$ and the function that maps $_z31$ to $P$ and $y$ and $x$.\nassistant\n", "label": "Axiom unit_discr : forall x : cic.Term univs.Type0 matita_basics_types.unit, forall y : cic.Term univs.Type0 matita_basics_types.unit, forall _e : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) x y), cic.Term univs.Type2 (matita_basics_types.match_unit (cic.succ univs.Type2) (fun __ => cic.univ univs.Type2) (matita_basics_types.match_unit (cic.succ univs.Type2) (fun __ => cic.univ univs.Type2) (cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (fun P => cic.prod univs.Type1 univs.Type1 P (fun _z31 => P))) y) x) .", "predict": "Axiom unit_discr : forall x : matita_basics_types.unit, forall y : matita_basics_types.unit, forall _e : cic.prop, (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit x y) -> cic.Term univs.Type2 (matita_basics_types.match_unit (cic.succ univs.Type2) (fun __ => cic.univ) (cic.succ univs.Type2) (fun __ => cic.univ)) (cic.prod (cic.succ univs.Type1) univs.Type1) (cic.univ univs.Type1) (fun P => cic.prod univs.Type1 univs.Type1 P (fun _z31 => P y x))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nFalse_ind. Soit $Q_$ une fonction des éléments $_x_66$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $x_66$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_66$.\nassistant\n", "label": "Axiom False_ind : forall Q_ : ((_x_66 : cic.Term cic.prop matita_basics_logic.False) -> cic.Univ cic.prop), forall x_66 : cic.Term cic.prop matita_basics_logic.False, cic.Term cic.prop (Q_ x_66) .", "predict": "Axiom false_ind : forall Q : Prop -> False -> Univ, forall x_66 : Term Prop, Q x_66 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nSum_rect_Type2. For all elements $_A$ and $_B$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_541$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $univs.Type2$, for all functions $_H_inl$ from elements $x_542$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_basics_types.inl$ applied to $_A$ and $_B$ and $x_542$, for all functions $_H_inr$ from elements $x_543$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_basics_types.inr$ applied to $_A$ and $_B$ and $x_543$, for all elements $x_541$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$, $cic.Term$ holds for $univs.Type2$ and $Q_$ applied to $x_541$.\nassistant\n", "label": "Axiom Sum_rect_Type2 : forall _A : cic.Univ univs.Type0, forall _B : cic.Univ univs.Type0, forall Q_ : ((_x_541 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ univs.Type2), forall _H_inl : ((x_542 : cic.Term univs.Type0 _A) -> cic.Term univs.Type2 (Q_ (matita_basics_types.inl _A _B x_542))), forall _H_inr : ((x_543 : cic.Term univs.Type0 _B) -> cic.Term univs.Type2 (Q_ (matita_basics_types.inr _A _B x_543))), forall x_541 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B), cic.Term univs.Type2 (Q_ x_541) .", "predict": "Axiom sum_rect_Type2 : forall A : Univ, forall B : Univ, forall x_541 : Term Type0, forall (Q : Sum A B -> Univ), forall x_542 : Term Type0, forall A : Type0, (H_inl : x_542 : A -> Term Type2) -> (Q (inl A B) x_542) -> forall x_543 : Term Type0, forall B : Type0, (H_inr : x_543 : B -> Term Type2) -> (Q (inr A B) x_543) -> forall x_541 : Term Type0, (Q (Sum A B) x_541) : Term Type2 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nRange_rect_Type3_body. For all elements $_A$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_921$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type3$, for all functions $_H_mk_range$ from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_921$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_921$.\nassistant\n", "label": "postulate range_rect_Type3_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_921 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type3) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type3 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_921 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term univs.Type3 (Q_ x_921)", "predict": "postulate range_rect_Type3_body : (A : Univ) -> (x_921 : Term Type0) -> (Q : range A -> Univ) -> (H_mk_range : Enum (x : Term Type0) -> Nat) -> (A : Enum (x : Term Type0) -> Nat) -> (upto : Term Type0) -> (Nat) -> (filter : (x : Term Type0) -> Nat -> Bool) -> (Q (mk_range A (enum x) (upto) (filter x)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nDPair_rect_CProp0. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_662$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_DPair$ une fonction des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $_f$ appliqué à $dpi1$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $A$ et $_f$ et $dpi1$ et $_dpi2$. Alors pour tous les éléments $x_662$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_662$.\nassistant\n", "label": "axiom DPair_rect_CProp0 (A : cic.Univ univs.Type0) (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) (Q_ : (_x_662 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop) (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) (x_662 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) : cic.Term cic.prop (Q_ x_662)", "predict": "axiom dpair_rect_CProp0 (A : Univ Type0) (f : Term Type0 → A → Univ Type0) (Q : Term Type0 → DPair A (f _) → Prop) : ∀ x_662 : Term Type0, DPair A (f x_662) → Term (CProp (Q x_662 (dpair.mk DPair A f x_662)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nF3_ind_aux. Låt $A1$ och $A2$ och $A3$ vara element av $cic.Univ$ av $univs.Type0$. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A2$ och element $__2$ av $cic.Term$ av $univs.Type0$ och $A3$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $P$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation3$ applicerat på $A1$ och $A2$ och $A3$. Låt $__$ vara en funktion från element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $__$ från element $a1$ av $cic.Term$ av $univs.Type0$ och $A1$ och element $a2$ av $cic.Term$ av $univs.Type0$ och $A2$ och element $a3$ av $cic.Term$ av $univs.Type0$ och $A3$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $f$ applicerat på $a1$ och $a2$ och $a3$ och $n$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $a1$ och $a2$ och $a3$ och element $a1$ av $cic.Term$ av $univs.Type0$ och $A1$ och element $a2$ av $cic.Term$ av $univs.Type0$ och $A2$ och element $a3$ av $cic.Term$ av $univs.Type0$ och $A3$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type", "label": "Axiom f3_ind_aux : forall A1 : cic.Univ univs.Type0, forall A2 : cic.Univ univs.Type0, forall A3 : cic.Univ univs.Type0, forall f : ((__ : cic.Term univs.Type0 A1) -> (__1 : cic.Term univs.Type0 A2) -> (__2 : cic.Term univs.Type0 A3) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall P : cic.Term univs.Type0 (matita_basics_relations.relation3 A1 A2 A3), forall __ : ((n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : (a1 : cic.Term univs.Type0 A1) -> (a2 : cic.Term univs.Type0 A2) -> (a3 : cic.Term univs.Type0 A3) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (f a1 a2 a3) n)) -> cic.Term cic.prop (P a1 a2 a3)) -> (a1 : cic.Term univs.Type0 A1) -> (a2 : cic.Term univs.Type0 A2) -> (a3 : cic.Term univs.Type0 A3) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a1 a2 a3) n)) -> cic.Term cic.prop (P a1 a2 a3)), forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall a1 : cic.Term univs.Type0 A1, forall a2 : cic.Term univs.Type0 A2, forall a3 : cic.Term univs.Type0 A3, forall __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a1 a2 a3) n), cic.Term cic.prop (P a1 a2 a3) .", "predict": "0$ applicerat på $a1$ och $a2$ och element $a1$ av $cic.Term$ av $univs.Type0$ och $A1$ och element $a2$ av $cic.Term$ av $univs.Type0$ och $A2$ och element $a3$ av $cic.Term$ av $univs.Type0$ och $A3$ et element $x$ de $cic.Term$ de $univs.Type0$ de $x$ de $matita_basics_relations.relation3$ applicé sur $A1$ et $A2$ et $A3$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nLt_to_not_eq. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $n$ and $m$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $m$.\nassistant\n", "label": "postulate lt_to_not_eq : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt n m)) -> cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n m))", "predict": "postulate lt_to_not_eq : (n : matita_arithmetics_nat.nat) -> (m : matita_arithmetics_nat.nat) -> __ : cic.prop -> matita_arithmetics_nat.lt n m -> cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_nat.nat) n m))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nAnd_rect_Type1_body. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $cic.prop$. Soit $Q_$ une fonction des éléments $_x_138$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type1$. Soit $_H_conj$ une fonction des éléments $x_140$ de $cic.Term$ de $cic.prop$ et de $_A$ et des éléments $x_139$ de $cic.Term$ de $cic.prop$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_basics_logic.conj$ appliqué à $_A$ et $_B$ et $x_140$ et $x_139$. Alors pour tous les éléments $x_138$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_138$.\nassistant\n", "label": "Axiom And_rect_Type1_body : forall _A : cic.Univ cic.prop, forall _B : cic.Univ cic.prop, forall Q_ : ((_x_138 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ univs.Type1), forall _H_conj : ((x_140 : cic.Term cic.prop _A) -> (x_139 : cic.Term cic.prop _B) -> cic.Term univs.Type1 (Q_ (matita_basics_logic.conj _A _B x_140 x_139))), forall x_138 : cic.Term cic.prop (matita_basics_logic.And _A _B), cic.Term univs.Type1 (Q_ x_138) .", "predict": "Axiom and_rect_Type1_body : forall A : Univ, forall B : Univ, forall Q : x138 : Term -> prop -> and A B -> Type1 -> prop, forall x140 : x138 -> prop, forall x139 : x138 -> prop, forall x140 : x139 -> Term -> prop, forall x138 : Term -> prop, forall x138 : and A B -> Type1, forall Q : x138 -> prop, forall x138 : Q (x138) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nAop_inv_rect_CProp1. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $x2$ de $cic.Term$ de $univs.Type0$ et de $x1$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1422$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $x2$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $a$ et $x2$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x", "label": "Axiom Aop_inv_rect_CProp1 : forall x1 : cic.Univ univs.Type0, forall x2 : cic.Term univs.Type0 x1, forall Hterm : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2), forall P : ((_z1422 : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> cic.Univ cic.prop), forall _H1 : ((op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1423 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.Aop x1 x2)) Hterm (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))), cic.Term cic.prop (P Hterm) .", "predict": "1$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $a$ et des fonctions $_assocr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $a$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $a$ et des"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nEq_rect_CProp1. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $_x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $Q_$ une fonction des éléments $x_34$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $_x_35$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_34$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_refl$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$. Alors pour tous les éléments $x_34$ de $cic.Term$ de $univs.Type2$ et de $A$, pour tous les éléments $x_35$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_34$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_34$ et $x_35$.\nassistant\n", "label": "axiom eq_rect_CProp1 (A : cic.Univ univs.Type2) (_x : cic.Term univs.Type2 A) (Q_ : (x_34 : cic.Term univs.Type2 A) -> (_x_35 : cic.Term cic.prop (matita_basics_logic.eq A _x x_34)) -> cic.Univ cic.prop) (_H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x))) (x_34 : cic.Term univs.Type2 A) (x_35 : cic.Term cic.prop (matita_basics_logic.eq A _x x_34)) : cic.Term cic.prop (Q_ x_34 x_35)", "predict": "axiom eq_rect_CProp1 (A : Univ) (x : Term Type2 A) (Q : (x34 : Term Type2 A) -> Prop) (x35 : Eq (A x) x34) : ∀ x34 : Term Type2 A, ∀ x35 : Prop (Eq (A x) x34) → Prop (Q x34 x35)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nSig_inv_rect_CProp4. Pour tous les éléments $x1$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $x2$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1206$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $x2$ appliqué à $pi1$ et des éléments $_z1207$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sig$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_Sig$ appliqué à $x1$ et $x2$ et $pi1$ et $_pi2$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $x1$ et $x2$ et $pi1$ et $_pi2$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "postulate Sig_inv_rect_CProp4 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ cic.prop) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> (P : (_z1206 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (pi1 : cic.Term univs.Type0 x1) -> (_pi2 : cic.Term cic.prop (x2 pi1)) -> (_z1207 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2)) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term cic.prop (P Hterm)", "predict": "postulate sig_inv_rect_CProp4 : (x1 : Univ Type0) -> (x2 : Term Type0 -> Univ) -> (Hterm : Sig x1 x2) -> (P : (z1206 : Term Type0) -> (Sig x1 x2) -> Univ) -> (pi1 : Term Type0) -> (pi2 : prop) -> (z1207 : prop) -> (eq : lift Type0 Type2) -> (Sig x1 x2) -> (Hterm) -> (mk_Sig x1 x2) -> (pi1) -> (pi2) -> (P (mk_Sig x1 x2) (pi1) (pi2))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nEq_prim_prim_pred. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_chebyshev_chebyshev_psi.prim$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_chebyshev_chebyshev_psi.prim$ appliqué à $matita_arithmetics_nat.pred$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$.\nassistant\n", "label": "Axiom eq_prim_prim_pred : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_chebyshev_chebyshev_psi.prim (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_chebyshev_chebyshev_psi.prim (matita_arithmetics_nat.pred (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)))) .", "predict": "Axiom eq_prim_prim_pred : forall n : matita_arithmetics_nat.nat, forall __ : cic.Term (cic.prop * matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.O)) n), cic.Term (cic.prop * (cic.lift (univs.Type0) (univs.Type2)) * matita_arithmetics_nat.nat) (matita_arithmetics_chebyshev_chebyshev_psi.prim (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) n) (matita_arithmetics_chebyshev_chebyshev_psi.prim (matita_arithmetics_nat.pred (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) n))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nAop. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, håller $cic.Univ$ för $univs.Type0$.\nassistant\n", "label": "postulate Aop : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> cic.Univ univs.Type0", "predict": "postulate aop : (A : univs.Type0) -> _nil : univs.Type0 -> A -> cic.Univ"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nDop_rect_CProp3. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Alors pour toutes les fonctions $Q_$ des éléments $_x_961$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_Dop$ des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $_nil$ et $_nil$ et des fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $b$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ à des éléments", "label": "postulate Dop_rect_CProp3 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_961 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_961 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term cic.prop (Q_ x_961)", "predict": " de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ à des éléments de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ à des éléments de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ à des"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nFalse_rect_CProp0. Låt $Q_$ vara en funktion från element $_x_78$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $x_78$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_78$.\nassistant\n", "label": "postulate False_rect_CProp0 : (Q_ : (_x_78 : cic.Term cic.prop matita_basics_logic.False) -> cic.Univ cic.prop) -> (x_78 : cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ x_78)", "predict": "postulate false_rect_CProp0 : (Q : (x : Term prop) -> False) -> all (Term prop) (\\ x -> CProp (Q x))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nLet_clause_15591. För alla element $n$ och $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $posn$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla element $eqn0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.O$ och $n$, för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla element $q$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $eqm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.O$ och $q$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $m$ och $n$.\nassistant\n", "label": "axiom let_clause_15591 (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) (eqn0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O n)) (_clearme : cic.Term cic.prop (matita_arithmetics_primes.divides matita_arithmetics_nat.O m)) (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) (eqm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times matita_arithmetics_nat.O q))) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m n)", "predict": "axiom let_clause_15591 (n m : cic.Term univs.Type0) (posn : cic.Term (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) (eqn0 : cic.Term (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O n)) (posn0 : cic.Term (matita_arithmetics_primes.divides matita_arithmetics_nat.O m)) (q : cic.Term univs.Type0) (eqm : cic.Term (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m) (matita_arithmetics_nat.times matita_arithmetics_nat.O q)) : cic.Term (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m) n)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nProd_rect_CProp0. Låt $_A$ och $_B$ vara element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_714$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H_mk_Prod$ från element $_fst$ av $cic.Term$ av $univs.Type0$ och $_A$ och element $_snd$ av $cic.Term$ av $univs.Type0$ och $_B$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $_A$ och $_B$ och $_fst$ och $_snd$, för alla element $x_714$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_714$.\nassistant\n", "label": "axiom Prod_rect_CProp0 (_A _B : cic.Univ univs.Type0) (Q_ : (_x_714 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ cic.prop) (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) (x_714 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) : cic.Term cic.prop (Q_ x_714)", "predict": "axiom prod_rect_CProp0 (A B : Univ Type0) (Q : ∀ x : Term Type0, Prod A B → Prop) : ∀ H : ∀ fst : Term Type0, A → ∀ snd : Term Type0, B → Prop, ∀ x : Prod A B, Q x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nOption_rect_Type0_body. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_610$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $_H_None$ un élément de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_types.None$ appliqué à $_A$. Soit $_H_Some$ une fonction des éléments $x_611$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_types.Some$ appliqué à $_A$ et $x_611$. Alors pour tous les éléments $x_610$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$, $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_610$.\nassistant\n", "label": "option_rect_Type0_body : _A : cic.Univ univs.Type0 -> Q_ : (_x_610 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Univ univs.Type0) -> _H_None : cic.Term univs.Type0 (Q_ (matita_basics_types.None _A)) -> _H_Some : (x_611 : cic.Term univs.Type0 _A -> cic.Term univs.Type0 (Q_ (matita_basics_types.Some _A x_611))) -> x_610 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Term univs.Type0 (Q_ x_610) .", "predict": "option_rect_Type0_body : (A : Elem (univs Type0)) -> (Q_ : (x_610 : Elem (cic Term)) -> (univs Type0) -> (matita_basics_types option) A -> (x_611 : Elem (cic Term)) -> (univs Type0) -> (Q_ (matita_basics_types Some) A x_611) -> Proof (forall (x_610 : Elem (cic Term)) (matita_basics_types option) A (Q_ x_610)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nLog_div. Låt $p$ och $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Då för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $m$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_log.log$ applicerat på $p$ och $matita_arithmetics_div_and_mod.div$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_log.log$ applicerat på $p$ och $n$ och $matita_arithmetics_log.log$ applicerat på $p$ och $m$.\nassistant\n", "label": "postulate log_div : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.le m n)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_log.log p (matita_arithmetics_div_and_mod.div n m)) (matita_arithmetics_nat.minus (matita_arithmetics_log.log p n) (matita_arithmetics_log.log p m)))", "predict": "postulate log_div : (p : Nat) -> (n : Nat) -> (m : Nat) -> Prop -> (__) : Lt (S 0) p -> (__)1 : Lt 0 m -> all (Le m n) (Le (log p (div n m)) (minus (log p n) (log p m)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nLtl_nil. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.ltl$ applied to $A$ and $matita_basics_lists_list.nil$ applied to $A$ and $n$ and $matita_basics_lists_list.nil$ applied to $A$.\nassistant\n", "label": "ltl_nil : A : cic.Univ univs.Type0 -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.ltl A (matita_basics_lists_list.nil A) n) (matita_basics_lists_list.nil A)) .", "predict": "ltl_nil : (A : Elem (univ (Type0))) -> (n : Elem (Term (Type0)) (nat)) -> Proof (and (Term (prop)) (eq (lift (Type0) (Type2)) (list (A) (ltl (A) (nil (A))))) (n)) (nil (A))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nLet_clause_1068. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $permf$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_permutation.permut$ appliqué à $f$ et $n$. Soient $i$ et $j$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $lein$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $i$ et $n$. Soit $lejn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $j$ et $n$. Soit $a$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $_clearme$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $matita_arithmetics_nat.le$ appliqué à $a$ et $n$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $a$ et $i$, pour tous les éléments $lean$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $a$ et $n$, pour tous les éléments $fa$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $a$ et $i$, pour tous les éléments $b$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $_clearme0$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $matita_arithmetics_nat.le$ appliqué à $b$ et $n$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à", "label": "let_clause_1068 : f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> permf : cic.Term cic.prop (matita_arithmetics_permutation.permut f n) -> i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> j : cic.Term univs.Type0 matita_arithmetics_nat.nat -> lein : cic.Term cic.prop (matita_arithmetics_nat.le i n) -> lejn : cic.Term cic.prop (matita_arithmetics_nat.le j n) -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _clearme : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le a n) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i)) -> lean : cic.Term cic.prop (matita_arithmetics_nat.le a n) -> fa : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i) -> b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _clearme0 : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le b n) (matita_basics_logic.eq (c", "predict": " $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $b$ et $j$, pour tous les éléments $x$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $x$ et $i$, pour tous les éléments $y$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $y$ et $j$, $_clearme$ et $_clearme0$ sont égaux.\n\nlet_clause_1068 : (f : Elem (Term (Type0)) (nat)) -> (n : Elem (Term (Type0)) (nat)) -> (permf : Elem (Term (prop)) (permut (f) (n))) -> (i : Elem (Term (Type0)) (nat)) -> (j : Elem (Term (Type0)) (nat)) -> (lein : Elem (Term (prop)) (le (i) (n))) -> (lejn : Elem (Term (prop)) (le (j) (n))) -> (a : Elem (Term (Type0)) (nat)) -> Proof (and (le (a) (n)) (eq (lift (Type0) (Type2)) (nat)) (f (a) (i))) -> Proof (and (le (a) (n)) (forall (b : Elem (Term (Type0)) (nat)) (and (le (b) (n)) (eq (lift (Type0) (Type2)) (nat)) (f (b) (j))) (forall (x : Elem (Term (prop)) (eq (lift (Type0) (Type2)) (nat))) (forall (y : Elem (Term (prop)) (eq (lift (Type0) (Type2)) (nat))) (eq (x) (y)))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nPi_1. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_bigops.bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$.\nassistant\n", "label": "pi_1 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (i : cic.Term univs.Type0 matita_arithmetics_nat.nat => p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (i : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) .", "predict": "pi_1 : (n : Elem (Term (univs Type0)) (matita_arithmetics_nat nat)) -> (p : (n : Elem (Term (univs Type0)) (matita_arithmetics_nat nat)) -> Elem (Term (univs Type0)) (matita_basics_bool bool)) -> Proof (prop (cic (lift (univs Type0) (univs Type2)) (matita_arithmetics_nat nat) (bigop (n) (p (i)) (matita_arithmetics_nat nat) (matita_arithmetics_nat S (matita_arithmetics_nat O)) (matita_arithmetics_nat (times (matita_arithmetics_nat S (matita_arithmetics_nat O)) (matita_arithmetics_nat S (matita_arithmetics_nat O)))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nComm. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all elements $xxx$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $nil$, for all elements $a$ and $b$ of $cic.Term$ of $univs.Type0$ and $A$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $nil$ and $matita_arithmetics_bigops.aop$ applied to $A$ and $nil$ and $xxx$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $nil$ and $matita_arithmetics_bigops.aop$ applied to $A$ and $nil$ and $xxx$ and $b$ and $a$.\nassistant\n", "label": "Axiom comm : forall A : cic.Univ univs.Type0, forall nil : cic.Term univs.Type0 A, forall xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A nil), forall a : cic.Term univs.Type0 A, forall b : cic.Term univs.Type0 A, cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A nil (matita_arithmetics_bigops.aop A nil xxx) a b) (matita_arithmetics_bigops.op A nil (matita_arithmetics_bigops.aop A nil xxx) b a)) .", "predict": "Axiom : forall A : univs.Type0, forall nil : cic.Term, forall xxx : cic.Term, forall op : matita_arithmetics_bigops.ACop, forall a : cic.Term, forall b : cic.Term, forall aop : matita_arithmetics_bigops.aop, (cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A nil (matita_arithmetics_bigops.aop A nil)) xxx) (matita_arithmetics_bigops.op A nil (matita_arithmetics_bigops.aop A nil)) (xxx a b) (matita_arithmetics_bigops.op A nil (matita_arithmetics_bigops.aop A nil)) (xxx b a)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nLet_clause_16004. Låt $m$ och $n$ och $a$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Då för alla element $posm$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla element $pnm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $c$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $d$ av $cic.Term$ av $univs", "label": "axiom let_clause_16004 (m n a b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (λ d => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) (d : cic.Term univs.Type0 matita_arithmetics_nat", "predict": ".Type0$ och $matita_arithmetics_nat.nat$, för alla element $b$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $a$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $x$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $y$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $z$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $u$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applic"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nPlus_to_minus. Låt $n$ och $m$ och $p$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $n$ och $matita_arithmetics_nat.plus$ applicerat på $m$ och $p$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $n$ och $m$ och $p$.\nassistant\n", "label": "postulate plus_to_minus : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.plus m p))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus n m) p)", "predict": "postulate plus_to_minus : (n : univ.Type0) -> (m : matita_arithmetics_nat.nat) -> (p : univ.Type2) -> all (prop (eq (lift univ.Type0 (matita_arithmetics_nat.nat)) (plus m p)) (eq (minus n m) p))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nProd_inv_rect_CProp1. Pour tous les éléments $x1$ et $x2$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1290$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $x2$ et des éléments $_z1291$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Prod$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_Prod$ appliqué à $x1$ et $x2$ et $_fst$ et $_snd$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $x1$ et $x2$ et $_fst$ et $_snd$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "Prod_inv_rect_CProp1 : x1 : cic.Univ univs.Type0 -> x2 : cic.Univ univs.Type0 -> Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) -> P : (_z1290 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) -> cic.Univ cic.prop) -> _H1 : (_fst : cic.Term univs.Type0 x1 -> _snd : cic.Term univs.Type0 x2 -> _z1291 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod x1 x2)) Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) -> cic.Term cic.prop (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term cic.prop (P Hterm) .", "predict": "prod_inv_rect_CProp1 : (x1 : Elem (cic.Univ) (univs.Type0)) -> (x2 : Elem (cic.Univ) (univs.Type0)) -> (Hterm : Elem (cic.Term) (univs.Type0) * matita_basics_types.Prod x1 x2) -> (P : (z1290 : Elem (cic.Term) (univs.Type0)) -> (z1291 : Elem (cic.Term) (cic.prop))) -> (H1 : (fst : Elem (cic.Term) (univs.Type0)) -> (snd : Elem (cic.Term) (univs.Type0)) -> (z1291 : Elem (cic.Term) (cic.prop))) -> (Eq (cic.lift (univs.Type0) (univs.Type2)) (matita_basics_types.Prod x1 x2) (Hterm) (matita_basics_types.mk_Prod x1 x2) (fst) (snd)) -> (P (matita_basics_types.mk_Prod x1 x2) (fst) (snd)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nMax_spec_ind_body. Låt $_n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $Q_$ vara en funktion från element $x_971$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $_x_972$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_minimization.max_spec$ applicerat på $_n$ och $_f$ och $x_971$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H_found_max_spec$ från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $x_975$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $_n$ och element $x_974$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $_f$ applicerat på $m$ och $matita_basics_bool.true$ och funktioner $x_973$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $i$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $_n$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $_f$ applicerat på $i$ och $matita_basics_bool.false$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $m$ och $matita_arithmetics_minimization.found_max_spec$ applicerat på $_n$ och $_f$ och $", "label": "Axiom max_spec_ind_body : forall _n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall Q_ : ((x_971 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_972 : cic.Term cic.prop (matita_arithmetics_minimization.max_spec _n _f x_971)) -> cic.Univ cic.prop), forall _H_found_max_spec : ((m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_975 : cic.Term cic.prop (matita_arithmetics_nat.lt m _n)) -> (x_974 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f m) matita_basics_bool.true)) -> (x_973 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt m i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i _n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f i) matita_basics_bool.false)) -> cic.Term cic.prop (Q_ m (matita_arithmetics_minimization.found_max_spec _n _f m x_97", "predict": "x_971$ och $x_972$ och $x_975$ och $x_974$ och $x_973$ och $__1$, har vi att $_H_found_max_spec$ är lika med $x_976$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $_f$ applicerat på $_n$ och $matita_basics_bool.true$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nBi_RC. För alla element $A$ och $B$ av $cic.Univ$ av $univs.Type0$, för alla element $__$ av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.bi_relation$ applicerat på $A$ och $B$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_relations.bi_relation$ applicerat på $A$ och $B$.\nassistant\n", "label": "bi_RC : A : cic.Univ univs.Type0 -> B : cic.Univ univs.Type0 -> __ : cic.Term univs.Type0 (matita_basics_relations.bi_relation A B) -> cic.Term univs.Type0 (matita_basics_relations.bi_relation A B) .", "predict": "bi_RC : (A : Elem (univs Type0)) -> (B : Elem (univs Type0)) -> Proof (forall (x : Elem (cic Term) (univs Type0)) (r : bi_relation A B), Proof (cic Term (univs Type0) (bi_relation A B))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nIff_not. Soient $A$ et $B$ des éléments de $cic.Univ$ de $cic.prop$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.iff$ appliqué à $A$ et $B$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.iff$ appliqué à $matita_basics_logic.Not$ appliqué à $A$ et $matita_basics_logic.Not$ appliqué à $B$.\nassistant\n", "label": "axiom iff_not (A B : cic.Univ cic.prop) (__ : cic.Term cic.prop (matita_basics_logic.iff A B)) : cic.Term cic.prop (matita_basics_logic.iff (matita_basics_logic.Not A) (matita_basics_logic.Not B))", "predict": "axiom iff_not (A B : cic.Univ) (x : cic.Term (cic.prop × matita_basics_logic.iff A B)) : cic.Term (cic.prop × matita_basics_logic.iff (matita_basics_logic.Not A) (matita_basics_logic.Not B))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nDpi1__o__op. Soit $x0$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x1$ un élément de $cic.Term$ de $univs.Type0$ et de $x0$. Soit $x2$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $x0$ et $x1$ à des éléments de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $x3$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $matita_basics_lists_list.Aop$ appliqué à $x0$ et $x1$ et $x2$, pour tous les éléments $_x_807$ et $_x_808$ de $cic.Term$ de $univs.Type0$ et de $x0$, $cic.Term$ tient pour $univs.Type0$ et $x0$.\nassistant\n", "label": "Axiom dpi1__o__op : forall x0 : cic.Univ univs.Type0, forall x1 : cic.Term univs.Type0 x0, forall x2 : ((__ : cic.Term univs.Type0 (matita_basics_lists_list.Aop x0 x1)) -> cic.Univ univs.Type0), forall x3 : cic.Term univs.Type0 (matita_basics_types.DPair (matita_basics_lists_list.Aop x0 x1) x2), forall _x_807 : cic.Term univs.Type0 x0, forall _x_808 : cic.Term univs.Type0 x0, cic.Term univs.Type0 x0 .", "predict": "Axiom dpi1__o__op : forall x0 : Univ, forall x1 : Term Type0 / x0, forall x2 : forall __ : Term Type0, Aop (x0, x1), forall x3 : DPair (Aop (x0, x1)) (x2), forall _x_807 : Term Type0 / x0, forall _x_808 : Term Type0 / x0, Term Type0 / x0 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nAop_rect_CProp0. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_885$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_Aop$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $mat", "label": "Axiom Aop_rect_CProp0 : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_885 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop), forall _H_mk_Aop : ((op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))), forall x_885 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil), cic.Term cic.prop (Q_ x_885) .", "predict": "ita_basics_logic.and$ applicerat sur $Q_$ applicerat sur $A$ et $_nil$ et $Q_$ applicerat sur $A$ et $op$ applicerat sur $a$ et $b$ et $c$ et $Q_$ applicerat sur $A$ et $op$ applicerat sur $op$ applicerat sur $a$ et $b$ et $c$ et $Q_$ applicerat sur $A$ et $op$ applicerat sur $a$ et $op$ applicerat sur $b$ et $c$ et $Q_$ applicerat sur $A$ et $op$ applicerat sur $a$ et $b$ et $op$ applicerat sur $c$ et $Q_$ applicerat sur $A$ et $op$ applicerat sur $a$ et $op$ applicerat sur $b$ et $op$ applicerat sur $c$ et $Q_$ applicerat sur $A$ et $op$ applicerat sur $a$ et $op$ applicerat sur $op$ applicerat sur $b$ et $c$ et $Q_$ applicerat sur $A$ et $op$ applicerat sur $a$ et $op$ applicerat sur $a$ et $op$ applicerat sur $b$ et $c$ et $Q_$ applicerat sur $A$ et $op$ applicerat sur $a$ et $op$ applicerat sur $b$ et $op$ applicerat sur $b$ et $c$ et $Q_$ applicerat sur $A$ et $op$ applicerat sur $a$ et $op$ applicerat sur $a$ et $op$ applicerat sur $b$ et $op$ applicerat sur $b$ et $c$ et $Q_$ applicerat sur $A$ et $op$ applicerat sur $a$ et $op$ applicerat sur $b$ et $op$ applicerat sur $b$ et $op$ applicerat sur $c$ et $Q_$ applicerat sur $A$ et $op$ applicerat sur $a$ et $op$ applicerat sur $a$ et $op$ applicerat sur $b$ et $op$ applic"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nEq_f. Låt $A$ och $B$ vara element av $cic.Univ$ av $univs.Type2$. Då för alla funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type2$ och $A$ till element av $cic.Term$ av $univs.Type2$ och $B$, för alla element $x$ och $y$ av $cic.Term$ av $univs.Type2$ och $A$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $x$ och $y$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $B$ och $f$ applicerat på $x$ och $f$ applicerat på $y$.\nassistant\n", "label": "postulate eq_f : (A : cic.Univ univs.Type2) -> (B : cic.Univ univs.Type2) -> (f : (__ : cic.Term univs.Type2 A) -> cic.Term univs.Type2 B) -> (x : cic.Term univs.Type2 A) -> (y : cic.Term univs.Type2 A) -> (__ : cic.Term cic.prop (matita_basics_logic.eq A x y)) -> cic.Term cic.prop (matita_basics_logic.eq B (f x) (f y))", "predict": "postulate eq_f : (A : univs.Type2) -> (B : univs.Type2) -> (f : (x : Term univs.Type2) -> (y : Term univs.Type2) -> Eq A x y) -> Eq B (f x) (f y)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nLength. För alla element $H$ av $cic.Univ$ av $univs.Type0$, för alla element $__$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $H$, håller $cic.Term$ för $univs.Type0$ och $matita_arithmetics_nat.nat$.\nassistant\n", "label": "postulate length : (H : cic.Univ univs.Type0) -> (__ : cic.Term univs.Type0 (matita_basics_lists_list.list H)) -> cic.Term univs.Type0 matita_arithmetics_nat.nat", "predict": "postulate length : (H : univs.Type0) -> (x : cic.Term (univs.Type0) (matita_basics_lists_list.list H)) -> cic.Term (univs.Type0) (matita_arithmetics_nat.nat)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nLt_O_n_elim. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $P$ une fonction des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $__1$ une fonction des éléments $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_nat.S$ appliqué à $m$. Alors $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $n$.\nassistant\n", "label": "lt_O_n_elim : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> P : (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Univ cic.prop) -> __1 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (P (matita_arithmetics_nat.S m))) -> cic.Term cic.prop (P n) .", "predict": "lt_O_n_elim : (n : Elem (Term (Type0)) (nat (matita_arithmetics_nat))) -> (__) : Elem (Term (prop)) (lt (O (matita_arithmetics_nat)) n)) -> (P : (m : Elem (Term (Type0)) (nat (matita_arithmetics_nat))) -> Elem (Univ (prop)) (P m)) -> (__) : Elem (Term (prop)) (P (S (m (matita_arithmetics_nat)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nExp_pi. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_bigops.bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $matita_arithmetics_exp.exp$ applied to $f$ applied to $i$ and $m$ and $matita_arithmetics_exp.exp$ applied to $matita_arithmetics_bigops.bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $f$ applied to $i$ and $m$.\nassistant\n", "label": "axiom exp_pi (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (λ i => p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (λ i => matita_arithmetics_exp.exp (f i) m)) (matita_arithmetics_exp.exp (matita_arithmetics_bigops.bigop n (λ i => p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (λ i => f i)) m))", "predict": "axiom exp_pi (n m : univs.Type0) (p : ∀ i : univs.Type0, matita_arithmetics_nat.nat → matita_basics_bool.bool) (f : ∀ i : univs.Type0, matita_arithmetics_nat.nat → matita_arithmetics_nat.nat) : cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (λ i : univs.Type0, p i matita_arithmetics_nat.nat) matita_arithmetics_nat.nat) (matita_arithmetics_exp.exp (matita_arithmetics_bigops.bigop n (λ i : univs.Type0, p i matita_arithmetics_nat.nat) matita_arithmetics_nat.nat) (matita_arithmetics_exp.exp (matita_arithmetics_bigops.bigop n (λ i : univs.Type0, p i matita_arithmetics_nat.nat) matita_arithmetics_nat.nat) (matita_arithmetics_exp.exp (f i) m) (matita_arithmetics_exp.exp (f i) m)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nNotb_notb. Pour tous les éléments $b$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_basics_bool.notb$ appliqué à $matita_basics_bool.notb$ appliqué à $b$ et $b$.\nassistant\n", "label": "postulate notb_notb : (b : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_basics_bool.notb (matita_basics_bool.notb b)) b)", "predict": "postulate notb_notb : (b : Univs.Type0) -> Matita_basics_bool.bool -> Prop\npostulate notb_notb : (b : Univs.Type0) -> Matita_basics_bool.bool -> Eq (lift Univs.Type0 Univs.Type2) (and (Matita_basics_bool.bool) (notb (notb b))) b)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nLet_clause_1585. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $m$ och $n$. Då för alla element $d$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $auto$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.O$ och $m$, för alla element $auto'$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $d$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.O$ och $n$.\nassistant\n", "label": "Axiom let_clause_1585 : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall _clearme : cic.Term cic.prop (matita_arithmetics_primes.divides m n), forall d : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall auto : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O m), forall auto' : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.times m d)), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O n) .", "predict": "Axiom let_clause_1585 : forall n : univs.Type0, forall m : matita_arithmetics_nat.nat, (posn : matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> _clearme : matita_arithmetics_primes.divides m n -> forall d : univs.Type0, forall auto : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O m -> forall auto' : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.times m d) -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O n ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nLtl_nil. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $A$ et $matita_basics_lists_list.ltl$ appliqué à $A$ et $matita_basics_lists_list.nil$ appliqué à $A$ et $n$ et $matita_basics_lists_list.nil$ appliqué à $A$.\nassistant\n", "label": "postulate ltl_nil : (A : cic.Univ univs.Type0) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.ltl A (matita_basics_lists_list.nil A) n) (matita_basics_lists_list.nil A))", "predict": "postulate ltl_nil : (A : univs.Type0) -> (n : matita_arithmetics_nat.nat) -> cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_lists_list.list A)) (matita_basics_lists_list.ltl A) (matita_basics_lists_list.nil A) n (matita_basics_lists_list.nil A)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nRange_inv_rect_Type4. Pour tous les éléments $x1$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $x1$, pour toutes les fonctions $P$ des éléments $_z1638$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $x1$ à des éléments de $cic.Univ$ de $univs.Type4$, pour toutes les fonctions $_H1$ des fonctions $_enum$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_upto$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_filter$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ et des éléments $_z1639$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.range$ appliqué à $x1$ et $Hterm$ et $matita_arithmetics_bigops.mk_range$ appliqué à $x1$ et $_enum$ et $_upto$ et $_filter$ à des éléments de $cic.Term$ de $univs.Type4$ et de $P$ appliqué à $matita_arithmetics_bigops.mk_range$ appliqué à $x1$ et $_enum$ et $_upto$ et $_filter$, $cic.Term$ tient pour $univs.Type4$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "axiom range_inv_rect_Type4 (x1 : cic.Univ univs.Type0) (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1)) (P : (_z1638 : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1)) -> cic.Univ univs.Type4) (_H1 : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 x1) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (_z1639 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.range x1)) Hterm (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter))) -> cic.Term univs.Type4 (P (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter))) : cic.Term univs.Type4 (P Hterm)", "predict": "axiom range_inv_rect_Type4 (x1 : cic.Univ) (Hterm : cic.Term) (x : matita_arithmetics_bigops.range x1) (P : ∀ _z1638 : cic.Term, ∀ x : matita_arithmetics_bigops.range x1, ∀ z : cic.Univ, ∀ _H1 : enum (cic.Term) (matita_arithmetics_nat.nat) (x1) → ∀ upto : cic.Term, ∀ x : matita_arithmetics_nat.nat, ∀ filter : enum (cic.Term) (matita_basics_bool.bool) (x1) → ∀ z1639 : cic.Term, ∀ eq : matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_arithmetics_bigops.range x1) (Hterm) (matita_arithmetics_bigops.mk_range x1) (enum (cic.Term) (matita_arithmetics_nat.nat) (x1)) (upto) (filter) (cic.Term) (univs.Type4) → P (matita_arithmetics_bigops.mk_range x1) (enum (cic.Term) (matita_arithmetics_nat.nat) (x1)) (upto) (filter) : cic.Term) (univs.Type4) (P (Hterm)) : cic.Term)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nAnd_rect_Type0_body. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $cic.prop$. Soit $Q_$ une fonction des éléments $_x_142$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $_H_conj$ une fonction des éléments $x_144$ de $cic.Term$ de $cic.prop$ et de $_A$ et des éléments $x_143$ de $cic.Term$ de $cic.prop$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_logic.conj$ appliqué à $_A$ et $_B$ et $x_144$ et $x_143$. Soit $x_142$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$. Alors $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_142$.\nassistant\n", "label": "And_rect_Type0_body : _A : cic.Univ cic.prop -> _B : cic.Univ cic.prop -> Q_ : (_x_142 : cic.Term cic.prop (matita_basics_logic.And _A _B) -> cic.Univ univs.Type0) -> _H_conj : (x_144 : cic.Term cic.prop _A -> x_143 : cic.Term cic.prop _B -> cic.Term univs.Type0 (Q_ (matita_basics_logic.conj _A _B x_144 x_143))) -> x_142 : cic.Term cic.prop (matita_basics_logic.And _A _B) -> cic.Term univs.Type0 (Q_ x_142) .", "predict": "and_rect_Type0_body : (A : Elem (cic.Univ (cic.prop))) -> (B : Elem (cic.Univ (cic.prop))) -> Proof (and A B) -> Proof (forall (x : Elem (cic.Term (cic.prop))) (Q : and (A B)) -> Proof (and (Q (conj x A) (Q (conj x B))) (Elem (cic.Term (univs.Type0))) (Q x)) -> Proof (and (A B)) -> Proof (Elem (cic.Term (cic.prop))) (and A B) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nEq_rect_Type2. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Let $_x$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $Q_$ be a function from elements $x_13$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $_x_14$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_13$ to elements of $cic.Univ$ of $univs.Type2$. Let $_H_refl$ be an element of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $_x$ and $matita_basics_logic.refl$ applied to $A$ and $_x$. Let $x_13$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $x_14$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_13$. Then $cic.Term$ holds for $univs.Type2$ and $Q_$ applied to $x_13$ and $x_14$.\nassistant\n", "label": "Axiom eq_rect_Type2 : forall A : cic.Univ univs.Type2, forall _x : cic.Term univs.Type2 A, forall Q_ : ((x_13 : cic.Term univs.Type2 A) -> (_x_14 : cic.Term cic.prop (matita_basics_logic.eq A _x x_13)) -> cic.Univ univs.Type2), forall _H_refl : cic.Term univs.Type2 (Q_ _x (matita_basics_logic.refl A _x)), forall x_13 : cic.Term univs.Type2 A, forall x_14 : cic.Term cic.prop (matita_basics_logic.eq A _x x_13), cic.Term univs.Type2 (Q_ x_13 x_14) .", "predict": "Axiom eq_rect_Type2 : forall A : univs.Type2, forall x : Term A, forall Q_ : (x13 : Term A) -> (x14 : prop) -> eq A x -> Univ (univs.Type2) -> Proof (Q_ x13 x14) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nDPair_inv_rect_Type2. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$. Då för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1122$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type2$, för alla funktioner $_H1$ från element $dpi1$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_dpi2$ av $cic.Term$ av $univs.Type0$ och $x2$ applicerat på $dpi1$ och element $_z1123$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_DPair$ applicerat på $x1$ och $x2$ och $dpi1$ och $_dpi2$ till element av $cic.Term$ av $univs.Type2$ och $P$ applicerat på $matita_basics_types.mk_DPair$ applicerat på $x1$ och $x2$ och $dpi1$ och $_dpi2$, håller $cic.Term$ för $univs.Type2$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "Axiom DPair_inv_rect_Type2 : forall x1 : cic.Univ univs.Type0, forall x2 : ((__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0), forall Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2), forall P : ((_z1122 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ univs.Type2), forall _H1 : ((dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1123 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type2 (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))), cic.Term univs.Type2 (P Hterm) .", "predict": "Axiom dpair_inv_rect_Type2 : forall x1 : univs.Type0, forall x2 : (cic.Term univs.Type0 -> cic.Univ univs.Type0), forall Hterm : cic.Term univs.Type0, forall P : (dpair x1 x2 -> cic.Univ univs.Type2), forall dpi1 : cic.Term univs.Type0, forall dpi2 : cic.Term univs.Type0, forall z1122 : cic.Term univs.Type0, forall z1123 : cic.Term (cic.prop univs.Type0), forall eq : matita_basics_logic.eq (univs.Type0 : cic.Type) (univs.Type2 : cic.Type), forall dpair : dpair x1 x2, forall H : dpair = (matita_basics_types.DPair x1 x2), forall P : (dpair x1 x2 -> cic.Univ univs.Type2), forall dpi : dpair dpi1 dpi2, forall z : cic.Term univs.Type2, P (dpair x1 x2) (dpi1, dpi2) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nACop_inv_rect_Type0. For all elements $x1$ of $cic.Univ$ of $univs.Type0$, for all elements $x2$ of $cic.Term$ of $univs.Type0$ and $x1$, for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1596$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type0$, for all functions $_H1$ from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $matita_arithmetics_bigops.op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1597$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ and $Hterm$ and $matita_arithmetics_bigops.mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $cic.Term$ of $univs.Type0$ and $P$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$, $cic.Term$ holds for $univs.Type0$ and $P$ applied to $Hterm$.\nassistant\n", "label": "postulate ACop_inv_rect_Type0 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> (P : (_z1596 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> cic.Univ univs.Type0) -> (_H1 : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (_comm : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (matita_arithmetics_bigops.op x1 x2 aop a b) (matita_arithmetics_bigops.op x1 x2 aop b a))) -> (_z1597 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop x1 x2)) Hterm (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) -> cic.Term univs.Type0 (P (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) -> cic.Term univs.Type0 (P Hterm)", "predict": "postulate acop_inv_rect_Type0 : (x1 : Univ Type0) -> (x2 : Term Type0 x1) -> (Hterm : Term Type0 (acop x1 x2)) -> (P : (z1596 : Term Type0 (acop x1 x2)) -> Univ Type0) -> (H1 : (aop : Term Type0) -> (comm : (a : Term Type0 x1) -> (b : Term Type0 x1) -> Prop) -> (z1597 : Term Prop (lift Type0 Type2 x1) (op x1 x2 aop a b) (op x1 x2 aop b a)) -> P (mk_ACop x1 x2 aop comm) (op x1 x2 aop)) -> Term Type0 (P (acop x1 x2))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nACop_rect_Type0_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_901$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type0$, för alla funktioner $_H_mk_ACop$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$, för alla element $x_901$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_901$.\nassistant\n", "label": "axiom ACop_rect_Type0_body (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_901 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ univs.Type0) (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) (x_901 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) : cic.Term univs.Type0 (Q_ x_901)", "predict": "axiom acop_rect_Type0_body (A : univs.Type0) : ∀ _nil : cic.Term univs.Type0, ∀ Q_ : x_901 : cic.Term univs.Type0 → matita_arithmetics_bigops.ACop A _nil → ∀ aop : cic.Term univs.Type0 → matita_arithmetics_bigops.Aop A _nil, ∀ a : cic.Term univs.Type0, ∀ b : cic.Term univs.Type0, ∀ H_mk_ACop : aop A _nil = matita_arithmetics_bigops.mk_ACop A _nil aop, ∀ a : cic.Term univs.Type0, ∀ b : cic.Term univs.Type0, ∀ H : a = b → univs.Type0 = univs.Type2 → A = matita_arithmetics_bigops.op A _nil aop a b = matita_arithmetics_bigops.op A _nil aop b a → ∀ x_901 : cic.Term univs.Type0, Q_ x_901."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nNth_prime_body. Soit $__$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $univs.Type0$ et $matita_arithmetics_nat.nat$.\nassistant\n", "label": "nth_prime_body : __ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_arithmetics_nat.nat .", "predict": "nth_prime_body : Elem (cic Term) (univs Type0) (matita_arithmetics_nat nat) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nOption_rect_CProp3. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $Q_$ från element $_x_622$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$, för alla element $_H_None$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$, för alla funktioner $_H_Some$ från element $x_623$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_623$, för alla element $x_622$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_622$.\nassistant\n", "label": "postulate option_rect_CProp3 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_622 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop) -> (_H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_623 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_623))) -> (x_622 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term cic.prop (Q_ x_622)", "predict": "postulate option_rect_CProp3 : (A : univs.Type0) -> (Q : Term (univ cic) (option A)) -> (H_None : prop (Q (none A))) -> (H_Some : (x : Term (univs.Type0)) -> (a : A) -> prop (Q (some A x a))) -> (x : Term (univs.Type0)) -> (y : option A) -> prop (Q y)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nLe_prim_n3. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_chebyshev_chebyshev_psi.prim$ applicerat på $n$ och $matita_arithmetics_nat.pred$ applicerat på $matita_arithmetics_div_and_mod.div$ applicerat på $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$.\nassistant\n", "label": "Axiom le_prim_n3 : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))))))))))))) n), cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_chebyshev_psi.prim n) (matita_arithmetics_nat.pred (matita_arithmetics_div_and_mod.div n (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) .", "predict": "Axiom le_prim_n3 : forall n : univs.Type0, forall __ : cic.prop, forall le : matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O)) n))) (matita_arithmetics_chebyshev_chebyshev_psi.prim n)) (matita_arithmetics_nat.pred (matita_arithmetics_div_and_mod.div n (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O))))))) (matita_arithmetics_nat.S (matita_arithmetics_nat.O)))))) (matita_arithmetics_nat.S (matita_arithmetics_nat.O)))) (matita_arithmetics_nat.S (matita_arithmetics_nat.O)))) (matita_arithmetics_nat.S (matita_arithmetics_nat.O)))) (matita_arithmetics_nat.S (matita_arithmetics_nat.O)))) (matita_arithmetics_nat.S (matita_arithmetics_nat.O)))) (matita_arithmetics_nat.S (matita_arithmetics_nat.O)))) (matita_arithmetics_nat.S (matita_arithmetics_nat.O)))) (matita_arithmetics_nat.S (matita_arithmetics_nat.O)))) (matita_arithmetics_nat.S (matita_arithmetics_nat.O)))) (matita_arithmetics_nat.S (matita_arithmetics_nat.O)))) (matita_arithmetics_nat.S (matita_arithmetics_nat.O)))) (matita_arithmetics_nat.S (matita_arithmetics_nat.O)))) (matita_arithmetics_nat.S (matita_arithmetics_nat.O)))) (matita_arithmetics_nat.S (matita_arithmetics_nat.O)))) (matita_arithmetics_nat.S (matita_arithmetics_nat.O)))) (matita_arithmetics_nat.S (matita_arithmetics_nat.O)))) ("}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nUnit_inv_rect_Type4. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$. Let $P$ be a function from elements $_z912$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$ to elements of $cic.Univ$ of $univs.Type4$. Let $_H1$ be a function from elements $_z913$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.unit$ and $Hterm$ and $matita_basics_types.it$ to elements of $cic.Term$ of $univs.Type4$ and $P$ applied to $matita_basics_types.it$. Then $cic.Term$ holds for $univs.Type4$ and $P$ applied to $Hterm$.\nassistant\n", "label": "unit_inv_rect_Type4 : Hterm : cic.Term univs.Type0 matita_basics_types.unit -> P : (_z912 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Univ univs.Type4) -> _H1 : (_z913 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm matita_basics_types.it) -> cic.Term univs.Type4 (P matita_basics_types.it)) -> cic.Term univs.Type4 (P Hterm) .", "predict": "unit_inv_rect_Type4 : (Hterm : Elem (Term (Type0)) (unit)) -> (P : (z912 : Elem (Term (Type0))) -> (unit) -> (Univ (Type4)) -> (H1 : (z913 : Elem (prop (Type0))) -> (Eq (lift (Type0) (Type2)) (it (unit)) (Hterm)) -> (Term (Type4))) -> Proof (and (Term (Type4)) (P (Hterm))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nLe_exp_to_le. Soient $b$ et $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $b$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $b$ et $n$ et $matita_arithmetics_exp.exp$ appliqué à $b$ et $m$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $n$ et $m$.\nassistant\n", "label": "le_exp_to_le : b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) b) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp b n) (matita_arithmetics_exp.exp b m)) -> cic.Term cic.prop (matita_arithmetics_nat.le n m) .", "predict": "le_exp_to_le : (b : Elem (cic Term) (univs Type0)) -> (n : Elem (cic Term) (matita_arithmetics_nat nat)) -> (m : Elem (cic Term) (matita_arithmetics_nat nat)) -> (__) : Elem (cic Prop) (matita_arithmetics_nat lt (matita_arithmetics_nat S (matita_arithmetics_nat O) b)) -> (___1) : Elem (cic Prop) (matita_arithmetics_nat le (matita_arithmetics_exp exp b n) (matita_arithmetics_exp exp b m)) -> Proof (matita_arithmetics_nat le n m) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nNat_rect_Type1_body. Soit $Q_$ une fonction des éléments $_x_385$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Univ$ de $univs.Type1$. Soit $_H_O$ un élément de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_arithmetics_nat.O$. Alors pour toutes les fonctions $_H_S$ des éléments $x_386$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $_x_388$ de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $x_386$ à des éléments de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_arithmetics_nat.S$ appliqué à $x_386$, pour tous les éléments $x_385$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_385$.\nassistant\n", "label": "postulate nat_rect_Type1_body : (Q_ : (_x_385 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ univs.Type1) -> (_H_O : cic.Term univs.Type1 (Q_ matita_arithmetics_nat.O)) -> (_H_S : (x_386 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_388 : cic.Term univs.Type1 (Q_ x_386)) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_nat.S x_386))) -> (x_385 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type1 (Q_ x_385)", "predict": "postulate nat_rect_Type1_body : (Q : (x : Term Type0) -> Nat -> Univ) -> (H_O : Term Type1 (Q O)) -> (H_S : (x : Term Type0) -> Nat -> Term Type1 (Q x)) -> (x : Term Type0) -> Nat -> Univ"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nMatch_Aop. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $return_sort$ be an element of $cic.Sort$. Then for all functions $return_type$ from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $return_sort$, for all functions $case_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_basics_lists_list.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for", "label": "Axiom match_Aop : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall return_sort : cic.Sort, forall return_type : ((z : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ return_sort), forall case_mk_Aop : ((op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term return_sort (return_type (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))), forall z : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil), cic.Term return_sort (return_type z) .", "predict": " all functions $case_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_basics_lists_list.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ and functions $case_mk_Aop$ from functions $op$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nMatch_void. Let $return_sort$ be an element of $cic.Sort$. Then for all functions $return_type$ from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.void$ to elements of $cic.Univ$ of $return_sort$, for all elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.void$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.\nassistant\n", "label": "match_void : return_sort : cic.Sort -> return_type : (z : cic.Term univs.Type0 matita_basics_types.void -> cic.Univ return_sort) -> z : cic.Term univs.Type0 matita_basics_types.void -> cic.Term return_sort (return_type z) .", "predict": "match_void : return_sort : Elem (cic.Sort) -> Proof (forall (return_type : (z : Elem (cic.Term) (univs.Type0)) -> (matita_basics_types.void)) (return_sort) (return_type z)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nLe_1_fact. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_factorial.fact$ appliqué à $n$.\nassistant\n", "label": "le_1_fact : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_factorial.fact n)) .", "predict": "le_1_fact : (n : Elem (cic Term) (univs Type0) (matita_arithmetics_nat nat)) -> Proof (cic prop) (matita_arithmetics_nat le (matita_arithmetics_nat S (matita_arithmetics_nat O)) (matita_arithmetics_factorial fact n)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nSum_rect_Type1. Låt $_A$ och $_B$ vara element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_546$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $univs.Type1$. Då för alla funktioner $_H_inl$ från element $x_547$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_basics_types.inl$ applicerat på $_A$ och $_B$ och $x_547$, för alla funktioner $_H_inr$ från element $x_548$ av $cic.Term$ av $univs.Type0$ och $_B$ till element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_basics_types.inr$ applicerat på $_A$ och $_B$ och $x_548$, för alla element $x_546$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_546$.\nassistant\n", "label": "postulate Sum_rect_Type1 : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_546 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ univs.Type1) -> (_H_inl : (x_547 : cic.Term univs.Type0 _A) -> cic.Term univs.Type1 (Q_ (matita_basics_types.inl _A _B x_547))) -> (_H_inr : (x_548 : cic.Term univs.Type0 _B) -> cic.Term univs.Type1 (Q_ (matita_basics_types.inr _A _B x_548))) -> (x_546 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Term univs.Type1 (Q_ x_546)", "predict": "postulate sum_rect_Type1 : (A : Univ Type0) -> (B : Univ Type0) -> (Q : (x : Term Type0) -> Sum A B -> Univ Type1) -> (H_inl : (x : Term Type0) -> A -> Term Type1) -> (H_inr : (x : Term Type0) -> B -> Term Type1) -> (x : Sum A B) -> Term Type1 (Q x)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nFilter_DPair. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $univs.Type0$. Låt $return_sort$ vara ett element av $cic.Sort$. Låt $return_type$ vara en funktion från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $return_sort$. Låt $return$ vara en funktion från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $z$. Då för alla element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$, håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.\nassistant\n", "label": "Axiom filter_DPair : forall A : cic.Univ univs.Type0, forall _f : ((__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0), forall return_sort : cic.Sort, forall return_type : ((z : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ return_sort), forall return : ((z : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term return_sort (return_type z)), forall z : cic.Term univs.Type0 (matita_basics_types.DPair A _f), cic.Term return_sort (return_type z) .", "predict": "Axiom filter_DPair : forall A : univs.Type0, forall f : cic.Term univs.Type0 -> A -> cic.Univ univs.Type0, forall return_sort : cic.Sort, forall z : cic.Term univs.Type0, forall d : DPair A f, return_sort = cic.Term (return_type z (d : DPair A f)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nLe_n. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $n$ et $n$.\nassistant\n", "label": "axiom le_n (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_arithmetics_nat.le n n)", "predict": "axiom le_n (n : cic.Term univs.Type0) : cic.Term (matita_arithmetics_nat.le n n)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nACop_rect_Type1_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_899$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type1$, för alla funktioner $_H_mk_ACop$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$, för alla element $x_899$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_899$.\nassistant\n", "label": "axiom ACop_rect_Type1_body (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_899 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ univs.Type1) (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) (x_899 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) : cic.Term univs.Type1 (Q_ x_899)", "predict": "axiom acop_rect_Type1_body (A : univs.Type0) : ∀ _nil : cic.Term univs.Type0, ∀ Q_ : x_899 : cic.Term univs.Type0 → matita_arithmetics_bigops.ACop A _nil → ∀ aop : cic.Term univs.Type0 → matita_arithmetics_bigops.Aop A _nil, ∀ a : cic.Term univs.Type0, ∀ b : cic.Term univs.Type0, ∀ H_mk_ACop : aop A _nil, ∀ comm : a : univs.Type0 → A → ∀ b : univs.Type0 → A → cic.prop, ∀ eq : univs.Type0 → univs.Type2 → A → matita_arithmetics_bigops.op A _nil aop a b (matita_arithmetics_bigops.op A _nil aop b a) : univs.Type1, ∀ x_899 : cic.Term univs.Type0, ∀ ACop : matita_arithmetics_bigops.ACop A _nil, ∀ aop : cic.Term univs.Type0 → matita_arithmetics_bigops.Aop A _nil, ∀ comm : a : cic.Term univs.Type0 → A → ∀ b : cic.Term univs.Type0 → A → cic.prop, ∀ eq : univs.Type0 → univs.Type2 → A → matita_arithmetics_bigops.op A _nil aop a b (matita_arithmetics_bigops.op A _nil aop b a) : univs.Type1, Q_ x_899)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nList_rect_Type1. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_741$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type1$, pour tous les éléments $_H_nil$ de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_basics_lists_list.nil$ appliqué à $_A$, pour toutes les fonctions $_H_cons$ des éléments $x_743$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $x_742$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ et des éléments $_x_745$ de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $x_742$ à des éléments de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_basics_lists_list.cons$ appliqué à $_A$ et $x_743$ et $x_742$, pour tous les éléments $x_741$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$, $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_741$.\nassistant\n", "label": "list_rect_Type1 : _A : cic.Univ univs.Type0 -> Q_ : (_x_741 : cic.Term univs.Type0 (matita_basics_lists_list.list _A) -> cic.Univ univs.Type1) -> _H_nil : cic.Term univs.Type1 (Q_ (matita_basics_lists_list.nil _A)) -> _H_cons : (x_743 : cic.Term univs.Type0 _A -> x_742 : cic.Term univs.Type0 (matita_basics_lists_list.list _A) -> _x_745 : cic.Term univs.Type1 (Q_ x_742) -> cic.Term univs.Type1 (Q_ (matita_basics_lists_list.cons _A x_743 x_742))) -> x_741 : cic.Term univs.Type0 (matita_basics_lists_list.list _A) -> cic.Term univs.Type1 (Q_ x_741) .", "predict": "list_rect_Type1 : (A : Elem (univ Univ)) -> (Q : (x : Elem (Term Type0)) -> (L : List (Elem (univ Type1))) -> Proof (forall (x : Elem (Term Type0)) (A : Elem (univ Type1)) (L : List (Elem (univ Type1))) (Q x (list nil A)) (forall (x : Elem (Term Type0)) (A : Elem (univ Type1)) (x : Elem (Term Type0)) (L : List (Elem (univ Type1))) (forall (x : Elem (Term Type1)) (Q (x : Elem (Term Type1)) (L (x : Elem (Term Type1)))) (forall (x : Elem (Term Type0)) (A : Elem (univ Type1)) (x : Elem (Term Type0)) (L : List (Elem (univ Type1))) (Q (x : Elem (Term Type0)) (list (cons x A) (L x)))))) (forall (x : Elem (Term Type0)) (A : Elem (univ Type1)) (L : List (Elem (univ Type1))) (Q x)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nOrd_rem_eq. Let $n$ and $p$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.ord_rem$ applied to $n$ and $p$ and $matita_basics_types.snd$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.p_ord$ applied to $n$ and $p$.\nassistant\n", "label": "axiom ord_rem_eq (n p : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_ord.ord_rem n p) (matita_basics_types.snd matita_arithmetics_nat.nat matita_arithmetics_nat.nat (matita_arithmetics_ord.p_ord n p)))", "predict": "axiom ord_rem_eq (n p : matita_arithmetics_nat.nat) : cic.prop (cic.Term (univs.Type0) (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_arithmetics_ord.ord_rem n p))) (matita_basics_types.snd (matita_arithmetics_nat.nat) (matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord n p)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nSig_inv_rect_CProp3. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Univ$ av $cic.prop$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z1212$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H1$ från element $pi1$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_pi2$ av $cic.Term$ av $cic.prop$ och $x2$ applicerat på $pi1$ och element $_z1213$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Sig$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_Sig$ applicerat på $x1$ och $x2$ och $pi1$ och $_pi2$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.mk_Sig$ applicerat på $x1$ och $x2$ och $pi1$ och $_pi2$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "axiom Sig_inv_rect_CProp3 (x1 : cic.Univ univs.Type0) (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ cic.prop) (Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) (P : (_z1212 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> cic.Univ cic.prop) (_H1 : (pi1 : cic.Term univs.Type0 x1) -> (_pi2 : cic.Term cic.prop (x2 pi1)) -> (_z1213 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2)) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) : cic.Term cic.prop (P Hterm)", "predict": "axiom sig_inv_rect_CProp3 (x1 : Univ univs.Type0) (x2 : (x : univs.Type0) → Univ (cic.prop)) (Hterm : Sig x1 x2) (P : (x : univs.Type0) → Sig x1 x2 → Univ (cic.prop)) : ∀ H1 : (pi1 : univs.Type0) → x1 → (pi2 : prop) → x2 pi1 → (z1212 : prop) → matita_basics_logic.eq (univs.Type0) (univs.Type2) (Sig x1 x2) Hterm (matita_basics_types.mk_Sig x1 x2) (pi1, pi2) → Univ (cic.prop) (P (matita_basics_types.mk_Sig x1 x2) (pi1, pi2))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nAop_inv_rect_CProp0. Pour tous les éléments $x1$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $x2$ de $cic.Term$ de $univs.Type0$ et de $x1$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1428$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $x2$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $a$ et $x2$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $c", "label": "axiom Aop_inv_rect_CProp0 (x1 : cic.Univ univs.Type0) (x2 : cic.Term univs.Type0 x1) (Hterm : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) (P : (_z1428 : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> cic.Univ cic.prop) (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1429 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.Aop x1 x2)) Hterm (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) : cic.Term cic.prop (P Hterm)", "predict": "$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_assocr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $a$ et des fonctions $_assocl$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $b$ et $op$ appliqué à $a$ et $c$ et $a$, il est vrai que $P$ appliqué à $x2$ et $Hterm$ est équivalent à $P$ appliqué à $x2$ et $_H1$ appliqué à $P$ appliqué à $x2$ et $Hterm$ et $_nill$ appliqué à $P$ appliqué à $x2$ et $Hterm$ et $_nilr$ appliqué à $P$ appliqué à $x2$ et $Hterm$ et $_assoc$ appliqué à $P$ appliqué à $x2$ et $Hterm$ et $a$ et"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nPlus_minus_m_m. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $m$ and $n$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.minus$ applied to $n$ and $m$ and $m$.\nassistant\n", "label": "plus_minus_m_m : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.le m n) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus n m) m)) .", "predict": "plus_minus_m_m : (n : cic.Term univs.Type0) -> (m : matita_arithmetics_nat.nat) -> __ : cic.prop -> matita_arithmetics_nat.le m n -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_nat.nat) n (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus n m) m)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nUnique_body. För alla element $H$ av $cic.Univ$ av $univs.Type0$, för alla element $__$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $H$, håller $cic.Univ$ för $cic.prop$.\nassistant\n", "label": "postulate unique_body : (H : cic.Univ univs.Type0) -> (__ : cic.Term univs.Type0 (matita_basics_lists_list.list H)) -> cic.Univ cic.prop", "predict": "postulate unique_body : (H : univs.Type0) -> (x : cic.Term univs.Type0) -> matita_basics_lists_list.list H -> cic.prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nPrime_to_not_divides_fact. Let $p$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.prime$ applied to $p$. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $n$ and $p$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_arithmetics_primes.divides$ applied to $p$ and $matita_arithmetics_factorial.fact$ applied to $n$.\nassistant\n", "label": "prime_to_not_divides_fact : p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_primes.prime p) -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt n p) -> cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides p (matita_arithmetics_factorial.fact n))) .", "predict": "prime_to_not_divides_fact : (p : Elem (Term (univs Type0)) (matita_arithmetics_nat nat)) -> (x : Elem (Term (cic prop)) (prime p)) -> (n : Elem (Term (univs Type0)) (matita_arithmetics_nat nat)) -> Proof (forall (x : Elem (Term (cic prop)) (lt n p)) (divides p (fact n))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nR2. Låt $T0$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $a0$ vara ett element av $cic.Term$ av $univs.Type0$ och $T0$. Låt $T1$ vara en funktion från element $x0$ av $cic.Term$ av $univs.Type0$ och $T0$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $x0$ till element av $cic.Univ$ av $univs.Type0$. Låt $a1$ vara ett element av $cic.Term$ av $univs.Type0$ och $T1$ applicerat på $a0$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$. Låt $T2$ vara en funktion från element $x0$ av $cic.Term$ av $univs.Type0$ och $T0$ och element $p0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $x0$ och element $x1$ av $cic.Term$ av $univs.Type0$ och $T1$ applicerat på $x0$ och $p0$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T1$ applicerat på $x0$ och $p0$ och $matita_basics_logic.R1$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $T1$ och $a1$ och $x0$ och $p0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$. Låt $_a2$ vara ett element av $cic.Term$ av $univs.Type0$ och $T2$ applicerat på $a0$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $a1$ och $mat", "label": "R2 : T0 : cic.Univ univs.Type0 -> a0 : cic.Term univs.Type0 T0 -> T1 : (x0 : cic.Term univs.Type0 T0 -> __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0) -> cic.Univ univs.Type0) -> a1 : cic.Term univs.Type0 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0)) -> T2 : (x0 : cic.Term univs.Type0 T0 -> p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0) -> x1 : cic.Term univs.Type0 (T1 x0 p0) -> __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T1 x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 T0) a0 T1 a1 x0 p0) x1) -> cic.Univ univs.Type0) -> _a2 : cic.Term univs.Type0 (T2 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0) a1 (mat", "predict": "ita_basics_logic.R1$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $T1$ och $a1$ och $x0$ och $p0$ och $x1$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nMatch_Aop. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $return_sort$ vara ett element av $cic.Sort$. Då för alla funktioner $return_type$ från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $return_sort$, för alla funktioner $case_mk_Aop$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $matita_arithmetics_bigops", "label": "match_Aop : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> return_sort : cic.Sort -> return_type : (z : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> cic.Univ return_sort) -> case_mk_Aop : (op : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _nill : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> _nilr : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> _assoc : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term return_sort (return_type (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> z : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> cic.Term return_sort (return_type z) .", "predict": ".Aop$ applicerat på $A$ och $_nil$ ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nRange_rect_Type4_body. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_917$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type4$. Alors pour toutes les fonctions $_H_mk_range$ des fonctions $_enum$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_upto$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_filter$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_range$ appliqué à $_A$ et $_enum$ et $_upto$ et $_filter$, pour tous les éléments $x_917$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$, $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_917$.\nassistant\n", "label": "axiom range_rect_Type4_body (_A : cic.Univ univs.Type0) (Q_ : (_x_917 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type4) (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) (x_917 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) : cic.Term univs.Type4 (Q_ x_917)", "predict": "axiom range_rect_Type4_body (A : Univ Type0) (Q : ∀ x : Term Type0, range A) : ∀ H : ∀ x : Term Type0, nat → Term Type0 → ∀ upto : nat, ∀ filter : Term Type0 → nat → bool → Term Type4, Q (mk_range A H x upto) (enum x) (filter x) → ∀ x : Term Type0, range A → Term Type4 → Q x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nExists_add. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $P$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $l1$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$. Then for all elements $x$ of $cic.Term$ of $univs.Type0$ and $A$, for all elements $l2$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.Exists$ applied to $A$ and $P$ and $matita_basics_lists_list.append$ applied to $A$ and $l1$ and $l2$, $cic.Term$ holds for $cic.prop$ and $matita_basics_lists_list.Exists$ applied to $A$ and $P$ and $matita_basics_lists_list.append$ applied to $A$ and $l1$ and $matita_basics_lists_list.cons$ applied to $A$ and $x$ and $l2$.\nassistant\n", "label": "postulate Exists_add : (A : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (x : cic.Term univs.Type0 A) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 l2))) -> cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 (matita_basics_lists_list.cons A x l2)))", "predict": "postulate exists_add : (A : Univ Type0) -> (P : Term A -> Univ prop) -> (l1 : Term A) -> (l2 : List (Term A)) -> all (x : Term A) (l2 : List (Term A)) (c : Prop (exists A (P _) (append A l1 l2))) (all (x : Term A) (l2 : List (Term A)) (c : Prop (exists A (P _) (append A l1 (cons A x l2))))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nNil_to_nil. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all elements $l1$ and $l2$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.append$ applied to $A$ and $l1$ and $l2$ and $matita_basics_lists_list.nil$ applied to $A$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.And$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $l1$ and $matita_basics_lists_list.nil$ applied to $A$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $l2$ and $matita_basics_lists_list.nil$ applied to $A$.\nassistant\n", "label": "axiom nil_to_nil (A : cic.Univ univs.Type0) (l1 l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.append A l1 l2) (matita_basics_lists_list.nil A))) : cic.Term cic.prop (matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l1 (matita_basics_lists_list.nil A)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l2 (matita_basics_lists_list.nil A)))", "predict": "axiom nil_to_nil (A : Univ) (l1 l2 : list (Term A)) : prop (and (eq (lift Univ Type0) (lift Univ Type2)) (and (eq (list A) l1) (eq (list A) l2))) (and (eq (lift Univ Type0) (list A)) (eq (append (list A) l1) (append (list A) l2))) (eq (nil (list A)) (append (list A) l1)) (eq (nil (list A)) (append (list A) l2)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nNat_rect_Type2_body. Let $Q_$ be a function from elements $_x_381$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Univ$ of $univs.Type2$. Let $_H_O$ be an element of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_arithmetics_nat.O$. Then for all functions $_H_S$ from elements $x_382$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $_x_384$ of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $x_382$ to elements of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_arithmetics_nat.S$ applied to $x_382$, for all elements $x_381$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $univs.Type2$ and $Q_$ applied to $x_381$.\nassistant\n", "label": "axiom nat_rect_Type2_body (Q_ : (_x_381 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ univs.Type2) (_H_O : cic.Term univs.Type2 (Q_ matita_arithmetics_nat.O)) (_H_S : (x_382 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_384 : cic.Term univs.Type2 (Q_ x_382)) -> cic.Term univs.Type2 (Q_ (matita_arithmetics_nat.S x_382))) (x_381 : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term univs.Type2 (Q_ x_381)", "predict": "axiom nat_rect_Type2_body (Q_ : ∀ x_381 : univs.Type0 → matita_arithmetics_nat.nat, univs.Type2) (H_O : univs.Type2) (H_S : ∀ x_382 : univs.Type0 → matita_arithmetics_nat.nat, ∀ x_384 : univs.Type2, Q_ x_382 x_384) (x_381 : univs.Type0) : matita_arithmetics_nat.nat → univs.Type2) (Q_ x_381)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nEq_rect_CProp2_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type2$. Låt $_x$ vara ett element av $cic.Term$ av $univs.Type2$ och $A$. Låt $Q_$ vara en funktion från element $x_31$ av $cic.Term$ av $univs.Type2$ och $A$ och element $_x_32$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_31$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_refl$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $_x$ och $matita_basics_logic.refl$ applicerat på $A$ och $_x$. Då för alla element $x_31$ av $cic.Term$ av $univs.Type2$ och $A$, för alla element $x_32$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_31$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_31$ och $x_32$.\nassistant\n", "label": "postulate eq_rect_CProp2_body : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_31 : cic.Term univs.Type2 A) -> (_x_32 : cic.Term cic.prop (matita_basics_logic.eq A _x x_31)) -> cic.Univ cic.prop) -> (_H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x))) -> (x_31 : cic.Term univs.Type2 A) -> (x_32 : cic.Term cic.prop (matita_basics_logic.eq A _x x_31)) -> cic.Term cic.prop (Q_ x_31 x_32)", "predict": "postulate eq_rect_CProp2_body : (A : univs.Type2) -> (x : cic.Term univs.Type2 A) -> (Q : (x_31 : cic.Term univs.Type2 A) -> (x_32 : cic.prop (matita_basics_logic.eq A x)) -> univs.Type2) -> (H_refl : cic.Term (cic.prop (Q x (matita_basics_logic.refl A x))) -> all (all (cic.Term (cic.prop (Q x_31 x_32))))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nDivides_pi_p_M1. Soient $m$ et $i$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $i$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $m$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_primes.divides$ appliqué à $matita_arithmetics_bigops.bigop$ appliqué à $i$ et la fonction qui envoie $p$ à $matita_basics_bool.andb$ appliqué à $matita_arithmetics_nat.leb$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $m$ et $p$ et $matita_arithmetics_primes.primeb$ appliqué à $p$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ et la fonction qui envoie $p$ à $p$ et $matita_arithmetics_binomial.M$ appliqué à $m$.\nassistant\n", "label": "divides_pi_p_M1 : m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.le i (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) m)))) -> cic.Term cic.prop (matita_arithmetics_primes.divides (matita_arithmetics_bigops.bigop i (p : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_basics_bool.andb (matita_arithmetics_nat.leb (matita_arithmetics_nat.S (matita_arithmetics_nat.S m)) p) (matita_arithmetics_primes.primeb p)) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (p : cic.Term univs.Type0 matita_arithmetics_nat.nat => p)) (matita_arithmetics_binomial.M m)) .", "predict": "divides_pi_p_M1 : (m : Elem (Term (Univ (Type0))) -> (i : Elem (nat (matita_arithmetics_nat))) -> Prop -> Proof (le (i) (S (S (times (S (S (O (matita_arithmetics_nat))))) m))) -> Proof (and (forall (p : Elem (prop (cic))) (and (le (S (S (O (matita_arithmetics_nat))) (bigop (i) (fun (p) (and (leb (S (S (O (matita_arithmetics_nat))) (m)) p) (primeb p) (nat (matita_arithmetics_nat))))) (M (matita_arithmetics_binomial)) (m)))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nLstar_ind_l. For all elements $B$ of $cic.Univ$ of $univs.Type0$, for all functions $R$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Univ$ of $cic.prop$, for all elements $b2$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $P$ of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation2$ applied to $matita_arithmetics_nat.nat$ and $B$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.O$ and $b2$, for all functions $__1$ from elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $b1$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $R$ applied to $b1$ and $b$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $l$ and $b$ and $b2$ and elements $__3$ of $cic.Term$ of $cic.prop$ and $P$ applied to $l$ and $b$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.plus$ applied to $l$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $b1$, for all elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $b1$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $l$ and $b1$ and $b2$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $l$ and $b1$.\nassistant\n", "label": "postulate lstar_ind_l : (B : cic.Univ univs.Type0) -> (R : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Univ cic.prop) -> (b2 : cic.Term univs.Type0 B) -> (P : cic.Term univs.Type0 (matita_basics_relations.relation2 matita_arithmetics_nat.nat B)) -> (__ : cic.Term cic.prop (P matita_arithmetics_nat.O b2)) -> (__1 : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (__1 : cic.Term cic.prop (R b1 b)) -> (__2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b b2)) -> (__3 : cic.Term cic.prop (P l b)) -> cic.Term cic.prop (P (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (__2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b2)) -> cic.Term cic.prop (P l b1)", "predict": "postulate lstar_ind_l : (B : Univ Type0) -> (R : Term Type0 B -> Term Type0 B -> Univ prop) -> (b2 : Term Type0 B) -> (P : Term Type0 (relation2 matita_basics_relations nat B)) -> (b : Term Type0 B) -> (b2 : Term Type0 B) -> (P : Term (P (matita_arithmetics_nat O) b2)) -> (l : Term Type0 (matita_arithmetics_nat nat)) -> (b1 : Term Type0 B) -> (b : Term Type0 B) -> (b2 : Term Type0 B) -> (P : Term (P l b)) -> (l : Term Type0 (matita_arithmetics_nat nat)) -> (b1 : Term Type0 B) -> (P : Term (P (plus l (S O)) b1)) -> (l : Term Type0 (matita_arithmetics_nat nat)) -> (b1 : Term Type0 B) -> (P : Term (P l b1))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nDiv_mod_spec_rect_CProp3. Soient $_n$ et $_m$ et $_q$ et $_r$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $Q_$ une fonction des éléments $_x_845$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $_n$ et $_m$ et $_q$ et $_r$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_div_mod_spec_intro$ une fonction des éléments $x_847$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $_r$ et $_m$ et des éléments $x_846$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $_n$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $_q$ et $_m$ et $_r$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_div_and_mod.div_mod_spec_intro$ appliqué à $_n$ et $_m$ et $_q$ et $_r$ et $x_847$ et $x_846$. Alors pour tous les éléments $x_845$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $_n$ et $_m$ et $_q$ et $_r$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_845$.\nassistant\n", "label": "axiom div_mod_spec_rect_CProp3 (_n _m _q _r : cic.Term univs.Type0 matita_arithmetics_nat.nat) (Q_ : (_x_845 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ cic.prop) (_H_div_mod_spec_intro : (x_847 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_846 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term cic.prop (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_847 x_846))) (x_845 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) : cic.Term cic.prop (Q_ x_845)", "predict": "axiom div_mod_spec_rect_CProp3 (n m q r : Term Prop) (Q : n m q r → Prop) (H_div_mod_spec_intro : ∀ x : Term, (r < m → (Eq (lift (Type0 : Type) (Type2 : Type)) (nat : Type)) → (n = (plus (times q m) r))) : ∀ x : Term, (div_mod_spec n m q r → Q x)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nEq_rect_Type1_body. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Let $_x$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $Q_$ be a function from elements $x_16$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $_x_17$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_16$ to elements of $cic.Univ$ of $univs.Type1$. Let $_H_refl$ be an element of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $_x$ and $matita_basics_logic.refl$ applied to $A$ and $_x$. Let $x_16$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Then for all elements $x_17$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_16$, $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_16$ and $x_17$.\nassistant\n", "label": "postulate eq_rect_Type1_body : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_16 : cic.Term univs.Type2 A) -> (_x_17 : cic.Term cic.prop (matita_basics_logic.eq A _x x_16)) -> cic.Univ univs.Type1) -> (_H_refl : cic.Term univs.Type1 (Q_ _x (matita_basics_logic.refl A _x))) -> (x_16 : cic.Term univs.Type2 A) -> (x_17 : cic.Term cic.prop (matita_basics_logic.eq A _x x_16)) -> cic.Term univs.Type1 (Q_ x_16 x_17)", "predict": "postulate eq_rect_Type1_body : (A : Univ) -> (x : Term Type2 A) -> (Q : (x16 : Term Type2 A) -> (x : Prop) -> Eq A x x16 -> Univ Type1) -> (H_refl : Term Type1 (Q x (refl A x))) -> (x16 : Term Type2 A) -> all (Prop (Eq A x x16)) (Q x16)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nLt_to_not_eq. För alla element $n$ och $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $n$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $n$ och $m$.\nassistant\n", "label": "postulate lt_to_not_eq : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt n m)) -> cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n m))", "predict": "postulate lt_to_not_eq : (n : univs.Type0) -> (m : matita_arithmetics_nat.nat) -> cic.prop -> matita_basics_logic.lt n m -> cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n m))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nAop_rect_CProp3. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_799$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H_mk_Aop$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_lists_list.mk_A", "label": "Aop_rect_CProp3 : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_799 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil) -> cic.Univ cic.prop) -> _H_mk_Aop : (op : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _nill : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> _nilr : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> _assoc : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> x_799 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil) -> cic.Term cic.prop (Q_ x_799) .", "predict": "op$ applicerat surjection $op$ $a$ $b$ $c$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $b$ $c$ $Q_$ $A$ $op$ $a$ $"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nDiv_mod_spec_ind_body. Let $_n$ and $_m$ and $_q$ and $_r$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $Q_$ be a function from elements $_x_809$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_div_mod_spec_intro$ be a function from elements $x_811$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $_r$ and $_m$ and elements $x_810$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $_n$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $_q$ and $_m$ and $_r$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_811$ and $x_810$. Then for all elements $x_809$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_809$.\nassistant\n", "label": "Axiom div_mod_spec_ind_body : forall _n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _q : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _r : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall Q_ : ((_x_809 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ cic.prop), forall _H_div_mod_spec_intro : ((x_811 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_810 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term cic.prop (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_811 x_810))), forall x_809 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r), cic.Term cic.prop (Q_ x_809) .", "predict": "Axiom div_mod_spec_ind_body : forall n : univs.Type0, forall m : matita_arithmetics_nat.nat, forall q : cic.Term, forall r : cic.Term, forall H_div_mod_spec_intro : x_811 : cic.Term -> matita_arithmetics_nat.lt r m /\\ x_810 : cic.Term -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n) (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q m) r) (Q_ (div_mod_spec n m q r) (x_811, x_810)), forall x_809 : cic.Term -> matita_arithmetics_div_and_mod.div_mod_spec n m q r -> cic.Term (cic.prop) (Q_ (div_mod_spec n m q r) x_809) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nBigop_iso. Let $n1$ and $n2$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p1$ and $p2$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $op$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $B$ and $nil$. Let $f1$ and $f2$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_bigops.iso$ applied to $B$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $matita_arithmetics_bigops.bigop$ applied to $n1$ and the function that maps $i$ to $p1$ applied to $i$ and $B$ and $nil$ and $matita_arithmetics_bigops.aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f1$ applied to $i$ and $matita_arithmetics_bigops.bigop$ applied to $n2$ and the function that maps $i$ to $p2$ applied to $i$ and $B$ and $nil$ and", "label": "bigop_iso : n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n2 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> p2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> B : cic.Univ univs.Type0 -> nil : cic.Term univs.Type0 B -> op : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil) -> f1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 B) -> f2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 B) -> __ : cic.Term cic.prop (matita_arithmetics_bigops.iso B (matita_arithmetics_bigops.mk_range B f1 n1 p1) (matita_arithmetics_bigops.mk_range B f2 n2 p2)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop n1 (i : cic.Term univs.Type0 matita_arithmetics_nat.nat => p1 i) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (i : cic.Term univs.Type0 matita_arithmetics_nat.nat => f1 i)) (matita_arithmetics_bigops.bigop n2 (i : cic.Term univs.Type0 matita_arithmetics_nat.nat => p2 i) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (i : cic.Term univs.Type0 matita_arithmetics_nat.nat => f2 i))) .", "predict": " $f2$ and $n1$ and $p1$ and $f2$ and $n2$ and $p2$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nEq_rect_Type4. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $_x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $Q_$ une fonction des éléments $x_4$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $_x_5$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_4$ à des éléments de $cic.Univ$ de $univs.Type4$. Alors pour tous les éléments $_H_refl$ de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$, pour tous les éléments $x_4$ de $cic.Term$ de $univs.Type2$ et de $A$, pour tous les éléments $x_5$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_4$, $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_4$ et $x_5$.\nassistant\n", "label": "axiom eq_rect_Type4 (A : cic.Univ univs.Type2) (_x : cic.Term univs.Type2 A) (Q_ : (x_4 : cic.Term univs.Type2 A) -> (_x_5 : cic.Term cic.prop (matita_basics_logic.eq A _x x_4)) -> cic.Univ univs.Type4) (_H_refl : cic.Term univs.Type4 (Q_ _x (matita_basics_logic.refl A _x))) (x_4 : cic.Term univs.Type2 A) (x_5 : cic.Term cic.prop (matita_basics_logic.eq A _x x_4)) : cic.Term univs.Type4 (Q_ x_4 x_5)", "predict": "axiom eq_rect_Type4 (A : Univ) (x : Term Type2 A) (Q : ∀ x4 : Term Type2 A, ∀ x5 : prop (Eq A x) → Type4) : ∀ H_refl : Term Type4 (Q x (refl A x)) → ∀ x4 : Term Type2 A, ∀ x5 : prop (Eq A x) → Type4 (Q x4 x5)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nDivides_d_times_gcd. Let $m$ and $n$ and $d$ and $c$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $c$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $d$ and $matita_arithmetics_nat.times$ applied to $c$ and $m$. Then for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $d$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $d$ and $matita_arithmetics_nat.times$ applied to $c$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$.\nassistant\n", "label": "postulate divides_d_times_gcd : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O c)) -> (__1 : cic.Term cic.prop (matita_arithmetics_primes.divides d (matita_arithmetics_nat.times c m))) -> (__2 : cic.Term cic.prop (matita_arithmetics_primes.divides d (matita_arithmetics_nat.times c n))) -> cic.Term cic.prop (matita_arithmetics_primes.divides d (matita_arithmetics_nat.times c (matita_arithmetics_gcd.gcd n m)))", "predict": "postulate divides_d_times_gcd : (m : Term Type0) -> (n : Term Type0) -> (d : Nat) -> (c : Nat) -> Prop -> (x : Prop (Lt (nd 0) c)) -> (y : Prop (divides d (times c m))) -> (z : Prop (divides d (times c n))) -> Prop (divides d (gcd n m))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nLstar_r_ind. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_R$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $B$. Låt $Q_$ vara en funktion från element $x_1337$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $x_1336$ av $cic.Term$ av $univs.Type0$ och $B$ och element $x_1335$ av $cic.Term$ av $univs.Type0$ och $B$ och element $_x_1338$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar_r$ applicerat på $B$ och $_R$ och $x_1337$ och $x_1336$ och $x_1335$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_lstar_r_O$ vara en funktion från element $b$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_nat.O$ och $b$ och $b$ och $matita_arithmetics_lstar.lstar_r_O$ applicerat på $B$ och $_R$ och $b$. Låt $_H_lstar_r_S$ vara en funktion från element $l$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $b1$ av $cic.Term$ av $univs.Type0$ och $B$ och element $b$ av $cic.Term$ av $univs.Type0$ och $B$ och element $x_1340$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar_r$ applicerat på $B$ och $_R$ och $l$ och $b1$ och $b$ och element $b2$ av $cic.Term$ av $univs.Type0$ och $B$ och element $x_1339$ av $cic.Term$ av $cic.prop$ och $_R$ applicerat på $b$ och $b2$ och element $_x_1342$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $l$ och $b1$ och $b$ och $x_1340$ till element av $cic.Term$ av $cic.prop$", "label": "axiom lstar_r_ind (B : cic.Univ univs.Type0) (_R : cic.Term univs.Type0 (matita_basics_relations.relation B)) (Q_ : (x_1337 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_1336 : cic.Term univs.Type0 B) -> (x_1335 : cic.Term univs.Type0 B) -> (_x_1338 : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R x_1337 x_1336 x_1335)) -> cic.Univ cic.prop) (_H_lstar_r_O : (b : cic.Term univs.Type0 B) -> cic.Term cic.prop (Q_ matita_arithmetics_nat.O b b (matita_arithmetics_lstar.lstar_r_O B _R b))) (_H_lstar_r_S : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (x_1340 : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R l b1 b)) -> (b2 : cic.Term univs.Type0 B) -> (x_1339 : cic.Term cic.prop (_R b b2)) -> (_x_1342 : cic.Term cic.prop (Q_ l b1 b x_1340)) -> cic.Term cic.prop (Q_ (matita_ar", "predict": ".\naxiom lstar_r_ind (B : univs.Type0) (R : relation B) (Q : x_1337 : Term univs.Type0 → Nat → Prop) (x_1336 : Term univs.Type0 → B → Prop) (x_1335 : Term univs.Type0 → B → Prop) (x_1338 : x_1335 B) (H_lstar_r_O : b : Term univs.Type0 → B → Prop) (H_lstar_r_S : l : Term univs.Type0 → Nat → B → B → Prop) (x_1340 : x_1335 B) (x_1342 : x_1335 B) (x_1341 : x_1336 B) (x_1343 : x_1337 B) (x_1344 : x_1338 B) (x_1345 : x_1339 B) (x_1346 : x_1336 B) (x_1347 : x_1337 B) (x_1348 : x_1335 B) (x_1349 : x_1338 B) (x_1350 : x_1339 B) (x_1351 : x_1340 B) (x_1352 : x_1342 B) (x_1353 : x_1341 B) (x_1354 : x_1343 B) (x_1355 : x_1344 B) (x_1356 : x_1345 B) (x_1357 : x_1346 B) (x_1358 : x_1347 B) (x_1359 : x_1348 B) (x_1360 : x_1349 B) (x_1361 : x_1350 B) (x_1362 : x_1351 B) (x_"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nDop_rect_CProp1_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_965$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_Dop$ vara en funktion från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $_nil$ och $_nil$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $prod$ applicerat på $a$ och $b$ och $prod$ applicerat på $a$ och $c$ till element av $cic.Term$ av $", "label": "Axiom Dop_rect_CProp1_body : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_965 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ cic.prop), forall _H_mk_Dop : ((sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))), forall x_965 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil), cic.Term cic.prop (Q_ x_965) .", "predict": "cic.prop$.\n\nAxiom dop_rect_CProp1_body : forall A : univs.Type0, (cic.Term -> Dop A _nil -> cic.prop) -> (sum (cic.Term -> matita_arithmetics_bigops.ACop A _nil) (prod (cic.Term -> A) (cic.Term -> A)) -> (cic.Term -> A) -> cic.prop) -> (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod (cic.Term -> A) _nil) _nil) -> (forall a : cic.Term -> A, matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil) -> forall a : cic.Term -> A, forall b : cic.Term -> A, forall c : cic.Term -> A, matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod (a (matita_arithmetics_bigops.aop__o__op A _nil)) (b (matita_arithmetics_bigops.aop__o__op A _nil))) (c (matita_arithmetics_bigops.aop__o__op A _nil))) -> forall a : cic.Term -> A, forall b : cic.Term -> A, forall c : cic.Term -> A, matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod (a (matita_arithmetics_bigops.aop__o__op A (prod (a (matita_arithmetics_bigops.aop__o__op A b)) c))) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod (a (matita_arithmetics_bigops.aop__o__op A (prod (a (matita_arithmetics_bigops.aop__o__op A b)) c))) (matita_arithmetics_bigops.aop__o__op A (prod (a (matita_arithmetics_bigops.aop__o__op A b)) c)))) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod (a (matita_arithmetics_bigops.aop__o__op A (prod ("}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nEx2_intro. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $P$ and $Q$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $x$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $P$ applied to $x$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $Q$ applied to $x$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.ex2$ applied to $A$ and $P$ and $Q$.\nassistant\n", "label": "postulate ex2_intro : (A : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (x : cic.Term univs.Type0 A) -> (__ : cic.Term cic.prop (P x)) -> (__1 : cic.Term cic.prop (Q x)) -> cic.Term cic.prop (matita_basics_logic.ex2 A P Q)", "predict": "postulate ex2_intro : (A : univs.Type0) -> (P : (x : Term univs.Type0 A) -> Univ (cic.prop)) -> (Q : (x : Term univs.Type0 A) -> Univ (cic.prop)) -> (x : Term univs.Type0 A) -> all (cic.prop) (forall (x : cic.prop) (P x)) -> all (cic.prop) (forall (x : cic.prop) (Q x)) -> Term (cic.prop) (matita_basics_logic.ex2 A P Q)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nRange_rect_CProp0. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $Q_$ från element $_x_939$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_range$ från funktioner $_enum$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $_A$ och element $_upto$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $_filter$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_range$ applicerat på $_A$ och $_enum$ och $_upto$ och $_filter$, för alla element $x_939$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_939$.\nassistant\n", "label": "postulate range_rect_CProp0 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_939 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ cic.prop) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_939 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term cic.prop (Q_ x_939)", "predict": "postulate range_rect_CProp0 : (A : univs.Type0) -> all (Q : Term univs.Type0 -> matita_arithmetics_bigops.range A) -> all (H : Enum (nat) (Term univs.Type0) -> A) -> all (upto : nat) -> all (filter : (x : Term univs.Type0) -> nat -> bool) -> (x : Term univs.Type0) -> matita_arithmetics_bigops.range A) -> prop (Q x)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nLet_clause_1078. Soient $a$ et $b$ et $q$ et $r$ et $q1$ et $r1$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $a$ et $b$ et $q$ et $r$. Soit $ltrb$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $r$ et $b$. Soit $spec$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $a$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $q$ et $b$ et $r$. Soit $_clearme0$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $a$ et $b$ et $q1$ et $r1$. Alors pour tous les éléments $ltr1b$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $r1$ et $b$, pour tous les éléments $spec1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $a$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $q1$ et $b$ et $r1$, pour tous les éléments $leqq1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $q$ et $q1$, pour tous les éléments $ltqq1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $q", "label": "Axiom let_clause_1078 : forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall q : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall r : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall q1 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall r1 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q r), forall ltrb : cic.Term cic.prop (matita_arithmetics_nat.lt r b), forall spec : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q b) r)), forall _clearme0 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q1 r1), forall ltr1b : cic.Term cic.prop (matita_arithmetics_nat.lt r1 b), forall spec1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q1 b) r1)), forall leqq1 : cic.Term cic.prop (matita_arithmetics_nat.le q q1), forall ltqq1 : cic.Term cic.prop (matita_arithmetics_nat.lt q q1), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a (matita_arithmetics_nat.plus r (matita_arithmetics_nat.times b q))) .", "predict": "$ et $q1$, pour tous les éléments $spec11$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $a$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $q1$ et $b$ et $r1$, pour tous les éléments $leqq11$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $q1$ et $q$, pour tous les éléments $ltqq11$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $q1$ et $q$, pour tous les éléments $spec111$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $a$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $q1$ et $b$ et $r1$, pour tous les éléments $leqq111$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $q1$ et $q$, pour tous les éléments $ltqq111$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $q1$ et $q$, pour tous les éléments $spec1111$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $a$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $q1$ et $b$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nBool_rect_CProp4_body. Låt $Q_$ vara en funktion från element $_x_347$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $_H_true$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_bool.true$, för alla element $_H_false$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_bool.false$, för alla element $x_347$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_347$.\nassistant\n", "label": "axiom bool_rect_CProp4_body (Q_ : (_x_347 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) (_H_true : cic.Term cic.prop (Q_ matita_basics_bool.true)) (_H_false : cic.Term cic.prop (Q_ matita_basics_bool.false)) (x_347 : cic.Term univs.Type0 matita_basics_bool.bool) : cic.Term cic.prop (Q_ x_347)", "predict": "axiom bool_rect_CProp4_body (Q : x : univs.Type0 → matita_basics_bool.bool → cic.prop) : ∀ H_true : cic.Term (cic.prop), Q (matita_basics_bool.true) H_true → ∀ H_false : cic.Term (cic.prop), Q (matita_basics_bool.false) H_false → ∀ x_347 : cic.Term (univs.Type0), Q x_347"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nList_inv_rect_CProp1. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $x1$. Soit $P$ une fonction des éléments $_z1356$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $x1$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H1$ une fonction des éléments $_z1357$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $x1$ et $Hterm$ et $matita_basics_lists_list.nil$ appliqué à $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_lists_list.nil$ appliqué à $x1$. Soit $_H2$ une fonction des éléments $x_773$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $x_772$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $x1$ et des fonctions $_x_775$ des éléments $_z1357$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $x1$ et $Hterm$ et $x_772$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $x_772$ et des éléments $_z1357$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $x1$ et $Hterm$ et $matita_basics_lists_list.cons$ appliqué à $x1$ et $x_773$ et $x_772$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué", "label": "axiom list_inv_rect_CProp1 (x1 : cic.Univ univs.Type0) (Hterm : cic.Term univs.Type0 (matita_basics_lists_list.list x1)) (P : (_z1356 : cic.Term univs.Type0 (matita_basics_lists_list.list x1)) -> cic.Univ cic.prop) (_H1 : (_z1357 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list x1)) Hterm (matita_basics_lists_list.nil x1))) -> cic.Term cic.prop (P (matita_basics_lists_list.nil x1))) (_H2 : (x_773 : cic.Term univs.Type0 x1) -> (x_772 : cic.Term univs.Type0 (matita_basics_lists_list.list x1)) -> (_x_775 : (_z1357 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list x1)) Hterm x_772)) -> cic.Term cic.prop (P x_772)) -> (_z1357 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list x1)) Hterm (matita_basics_lists_list.cons x1 x_773 x_772))) -> cic.Term cic.prop (P (matita_basics_lists_list.cons x1 x_773 x_772))) : cic.Term cic.prop (P Hterm)", "predict": " à $matita_basics_lists_list.cons$ appliqué à $x1$ et $x_773$ et $x_772$. Principe d'induction sur la liste : Soit $x_773$ un élément de $cic.Term$ de $univs.Type0$. Soit $x_772$ un élément de $cic.Term$ de $univs.Type0$. Soit $x_771$ un élément de $cic.Term$ de $univs.Type0$. Soit $x_770$ un élément de $cic.Term$ de $univs.Type0$. Soit $x_769$ un élément de $cic.Term$ de $univs.Type0$. Soit $x_768$ un élément de $cic.Term$ de $univs.Type0$. Soit $x_767$ un élément de $cic.Term$ de $univs.Type0$. Soit $x_766$ un élément de $cic.Term$ de $univs.Type0$. Soit $x_765$ un élément de $cic.Term$ de $univs.Type0$. Soit $x_764$ un élément de $cic.Term$ de $univs.Type0$. Soit $x_763$ un élément de $cic.Term$ de $univs.Type0$. Soit $x_762$ un élément de $cic.Term$ de $univs.Type0$. Soit $x_761$ un élément de $cic.Term$ de $univs.Type0$. Soit $x_760$ un élément de $cic.Term$ de $univs.Type0$. Soit $x_759$ un élément de $cic.Term$ de $univs.Type0$. Soit $x_758$ un élément de $cic.Term$ de $univs.Type0$. Soit $x_757$ un élément de $cic.Term$ de $univs.Type0$. Soit $x_756$ un élément de $cic.Term$ de $univs.Type0$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nAop_inv_rect_Type4. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be an element of $cic.Term$ of $univs.Type0$ and $x1$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z1374$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type4$. Let $_H1$ be a function from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $", "label": "Aop_inv_rect_Type4 : x1 : cic.Univ univs.Type0 -> x2 : cic.Term univs.Type0 x1 -> Hterm : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2) -> P : (_z1374 : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2) -> cic.Univ univs.Type4) -> _H1 : (op : (__ : cic.Term univs.Type0 x1 -> __1 : cic.Term univs.Type0 x1 -> cic.Term univs.Type0 x1) -> _nill : (a : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> _nilr : (a : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> _assoc : (a : cic.Term univs.Type0 x1 -> b : cic.Term univs.Type0 x1 -> c : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> _z1375 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.Aop x1 x2)) Hterm (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc)) -> cic.Term univs.Type4 (P (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type4 (P Hterm) .", "predict": "matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and $a$ and functions $_assocr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $a$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $b$ and $a$ and $a$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $b$ and $c$ and $a$ and functions $_distrr$ from elements $a$ of $cic.Term$ of $un"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nProd_rect_CProp3. For all elements $_A$ and $_B$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_708$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Prod$ from elements $_fst$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_snd$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_Prod$ applied to $_A$ and $_B$ and $_fst$ and $_snd$, for all elements $x_708$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_708$.\nassistant\n", "label": "Prod_rect_CProp3 : _A : cic.Univ univs.Type0 -> _B : cic.Univ univs.Type0 -> Q_ : (_x_708 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) -> cic.Univ cic.prop) -> _H_mk_Prod : (_fst : cic.Term univs.Type0 _A -> _snd : cic.Term univs.Type0 _B -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) -> x_708 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) -> cic.Term cic.prop (Q_ x_708) .", "predict": "prod_rect_CProp3 : (A : univs.Type0) -> (B : univs.Type0) -> (Q_ : (x_708 : cic.Term univs.Type0) -> matita_basics_types.Prod A B -> cic.Univ (cic.prop)) -> (H_mk_Prod : (fst : cic.Term univs.Type0) -> A -> (snd : cic.Term univs.Type0) -> B -> cic.Term (cic.prop)) -> (x_708 : cic.Term univs.Type0) -> matita_basics_types.Prod A B -> Proof (Q_ x_708 (matita_basics_types.mk_Prod A B fst snd)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nDPair_discr. Let $a1$ be an element of $cic.Univ$ of $univs.Type0$. Let $a2$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $a1$ to elements of $cic.Univ$ of $univs.Type0$. Let $x$ and $y$ be elements of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $a1$ and $a2$. Then for all elements $_e$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.DPair$ applied to $a1$ and $a2$ and $x$ and $y$, $cic.Term$ holds for $univs.Type2$ and $matita_basics_types.match_DPair$ applied to $a1$ and $a2$ and $cic.succ$ applied to $univs.Type2$ and the function that maps $__$ to $cic.univ$ applied to $univs.Type2$ and the function that maps $t0$ and $t1$ to $matita_basics_types.match_DPair$ applied to $a1$ and $a2$ and $cic.succ$ applied to $univs.Type2$ and the function that maps $__$ to $cic.univ$ applied to $univs.Type2$ and the function that maps $u0$ and $u1$ to $cic.prod$ applied to $cic.succ$ applied to $univs.Type1$ and $univs.Type1$ and $cic.univ$ applied to $univs.Type1$ and the function that maps $P$ to $cic.prod$ applied to $univs.Type1$ and $univs.Type1$ and $cic.prod$ applied to $cic.prop$ and $univs.Type1$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $a1$ and $matita_basics_logic.R0$ applied to $a1$ and $t0$ and $u0$ and the function that maps $e0$ to $c", "label": "Axiom DPair_discr : forall a1 : cic.Univ univs.Type0, forall a2 : ((__ : cic.Term univs.Type0 a1) -> cic.Univ univs.Type0), forall x : cic.Term univs.Type0 (matita_basics_types.DPair a1 a2), forall y : cic.Term univs.Type0 (matita_basics_types.DPair a1 a2), forall _e : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair a1 a2)) x y), cic.Term univs.Type2 (matita_basics_types.match_DPair a1 a2 (cic.succ univs.Type2) (fun __ => cic.univ univs.Type2) (fun t0 => fun t1 => matita_basics_types.match_DPair a1 a2 (cic.succ univs.Type2) (fun __ => cic.univ univs.Type2) (fun u0 => fun u1 => cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (fun P => cic.prod univs.Type1 univs.Type1 (cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) u0) (fun e0 => cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((fun x0 => fun p0 => a2 x0) u0 e0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 a1) t0 (fun x0 => fun p0 => a2 x0) t1 u0 e0) u1) (fun _e1 => P))) (fun _z41 => P))) y) x) .", "predict": "ic.prop$ applied to $univs.Type1$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $a1$ and $t0$ and $u0$ and the function that maps $e1$ to $cic.prop$ applied to $univs.Type1$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $a1$ and $t0$ and $u0$ and the function that maps $e2$ to $cic.prop$ applied to $univs.Type1$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $a1$ and $t0$ and $u0$ and the function that maps $e3$ to $cic.prop$ applied to $univs.Type1$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $a1$ and $t0$ and $u0$ and the function that maps $e4$ to $cic.prop$ applied to $univs.Type1$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $a1$ and $t0$ and $u0$ and the function that maps $e5$ to $cic.prop$ applied to $univs.Type1$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $a1$ and $t0$ and $u0$ and the function that maps $e6$ to $cic.prop$ applied to $univs.Type1$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $a1$ and $t0$ and $u0$ and the function that maps $e7$ to $cic.prop$ applied to $univ"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nCongruent_n_mod_n. Let $n$ and $p$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $p$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_congruence.congruent$ applied to $n$ and $matita_arithmetics_div_and_mod.mod$ applied to $n$ and $p$ and $p$.\nassistant\n", "label": "Axiom congruent_n_mod_n : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p), cic.Term cic.prop (matita_arithmetics_congruence.congruent n (matita_arithmetics_div_and_mod.mod n p) p) .", "predict": "Axiom congruent_n_mod_n : forall n : univs.Type0, forall p : matita_arithmetics_nat.nat, forall __ : cic.prop, forall q : matita_arithmetics_nat.lt (matita_arithmetics_nat.O) p, cic.Term (cic.prop) (matita_arithmetics_congruence.congruent n (matita_arithmetics_div_and_mod.mod n p) p) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nACop_inv_rect_CProp2. Pour tous les éléments $x1$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $x2$ de $cic.Term$ de $univs.Type0$ et de $x1$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1614$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $aop$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $x1$ et $x2$ et des fonctions $_comm$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $matita_arithmetics_bigops.op$ appliqué à $x1$ et $x2$ et $aop$ et $a$ et $b$ et $matita_arithmetics_bigops.op$ appliqué à $x1$ et $x2$ et $aop$ et $b$ et $a$ et des éléments $_z1615$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.ACop$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_arithmetics_bigops.mk_ACop$ appliqué à $x1$ et $x2$ et $aop$ et $_comm$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_bigops.mk_ACop$ appliqué à $x1$ et $x2$ et $aop$ et $_comm$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "ACop_inv_rect_CProp2 : x1 : cic.Univ univs.Type0 -> x2 : cic.Term univs.Type0 x1 -> Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2) -> P : (_z1614 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2) -> cic.Univ cic.prop) -> _H1 : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2) -> _comm : (a : cic.Term univs.Type0 x1 -> b : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (matita_arithmetics_bigops.op x1 x2 aop a b) (matita_arithmetics_bigops.op x1 x2 aop b a))) -> _z1615 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop x1 x2)) Hterm (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm)) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) -> cic.Term cic.prop (P Hterm) .", "predict": "acop_inv_rect_CProp2 : (x1 : Elem (univs Type0) (cic Univ)) -> (x2 : Elem (cic Term) (univs Type0)) -> Proof (forall (Hterm : Elem (cic Term) (univs Type0)) (matita_arithmetics_bigops ACop (x1 x2) (forall (P : (z1614 : Elem (cic Term) (univs Type0)) (matita_arithmetics_bigops ACop (x1 x2)) (Elem (cic Univ) (cic prop))) (forall (aop : Elem (cic Term) (univs Type0)) (matita_arithmetics_bigops Aop (x1 x2)) (forall (a : Elem (cic Term) (univs Type0)) (x1) (forall (b : Elem (cic Term) (univs Type0)) (x1) (Eq (cic lift (univs Type0 univs Type2) x1) (matita_arithmetics_bigops op (x1 x2) aop a b))))) (Eq (matita_arithmetics_bigops op (x1 x2) aop b a) (cic prop)) (P (matita_arithmetics_bigops mk_ACop (x1 x2) aop) (Eq (cic lift (univs Type0 univs Type2)) (matita_arithmetics_bigops op (x1 x2) aop b a)) (P (matita_arithmetics_bigops mk_ACop (x1 x2) aop) (Eq (cic lift (univs Type0 univs Type2)) (matita_arithmetics_bigops op (x1 x2) aop b a)) (forall (comm : Elem (cic Term) (univs Type0)) (x1) (forall (a : Elem (cic Term) (univs Type0)) (x1) (forall (b : Elem (cic Term) (univs Type0)) (x1) (Eq (matita_arithmetics_bigops op (x1 x2) aop b a) (cic prop)) (P (matita_arithmetics_bigops mk_ACop (x1 x2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nUnit_inv_ind. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$. Let $P$ be a function from elements $_z906$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $_H1$ from elements $_z907$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.unit$ and $Hterm$ and $matita_basics_types.it$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.it$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "axiom unit_inv_ind (Hterm : cic.Term univs.Type0 matita_basics_types.unit) (P : (_z906 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ cic.prop) (_H1 : (_z907 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm matita_basics_types.it)) -> cic.Term cic.prop (P matita_basics_types.it)) : cic.Term cic.prop (P Hterm)", "predict": "axiom unit_inv_ind (Hterm : cic.Term univs.Type0) (unit : matita_basics_types.unit) (P : ∀ _z906 : cic.Term univs.Type0) → ∀ _z907 : cic.Term (cic.prop) → matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_types.unit) (Hterm) → matita_basics_types.it) → ∀ _z908 : cic.Term (cic.prop) → P (matita_basics_types.it) (cic.Term) (cic.prop) (P Hterm)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nDivides_n_O. För alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $matita_arithmetics_nat.O$.\nassistant\n", "label": "axiom divides_n_O (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_arithmetics_primes.divides n matita_arithmetics_nat.O)", "predict": "axiom divides_n_O (n : cic.Term univs.Type0) (x : matita_arithmetics_nat.nat) : cic.prop (matita_arithmetics_primes.divides n 0)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nNat_rect_Type1. Let $Q_$ be a function from elements $_x_385$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Univ$ of $univs.Type1$. Let $_H_O$ be an element of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_arithmetics_nat.O$. Then for all functions $_H_S$ from elements $x_386$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $_x_388$ of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $x_386$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_arithmetics_nat.S$ applied to $x_386$, for all elements $x_385$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_385$.\nassistant\n", "label": "Axiom nat_rect_Type1 : forall Q_ : ((_x_385 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ univs.Type1), forall _H_O : cic.Term univs.Type1 (Q_ matita_arithmetics_nat.O), forall _H_S : ((x_386 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_388 : cic.Term univs.Type1 (Q_ x_386)) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_nat.S x_386))), forall x_385 : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term univs.Type1 (Q_ x_385) .", "predict": "Axiom nat_rect_Type1 : forall Q : univs.Type0 -> matita_arithmetics_nat.nat -> univs.Type1, forall H_O : univs.Type1, Q matita_arithmetics_nat.O -> forall x_386 : univs.Type0 -> matita_arithmetics_nat.nat, forall x_388 : univs.Type1, Q x_386 -> Q (matita_arithmetics_nat.S x_386) -> forall x_385 : univs.Type0, matita_arithmetics_nat.nat, Proof (cic.Term univs.Type1 (Q x_385)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nFalse_rect_CProp3_body. Soit $Q_$ une fonction des éléments $_x_75$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour tous les éléments $x_75$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_75$.\nassistant\n", "label": "axiom False_rect_CProp3_body (Q_ : (_x_75 : cic.Term cic.prop matita_basics_logic.False) -> cic.Univ cic.prop) (x_75 : cic.Term cic.prop matita_basics_logic.False) : cic.Term cic.prop (Q_ x_75)", "predict": "axiom false_rect_CProp3_body (Q : ∀ x : cic.Term (cic.prop) × matita_basics_logic.False, cic.prop) : ∀ x : cic.Term (cic.prop), Q (x, matita_basics_logic.False)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nRange_rect_CProp0. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_939$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_range$ des fonctions $_enum$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_upto$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_filter$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_range$ appliqué à $_A$ et $_enum$ et $_upto$ et $_filter$, pour tous les éléments $x_939$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_939$.\nassistant\n", "label": "axiom range_rect_CProp0 (_A : cic.Univ univs.Type0) (Q_ : (_x_939 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ cic.prop) (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) (x_939 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) : cic.Term cic.prop (Q_ x_939)", "predict": "axiom range_rect_CProp0 (A : Univ Type0) : ∀ Q : (x : Term Type0) → range A (Univ) → Prop → ∀ H : (x : Term Type0) → nat → Term Type0 → (upto : Term Type0) → bool → (x : Term Type0) → nat → Prop → Q (mk_range A (enum x (nat)) upto (filter x (nat) bool)) → ∀ x : Term Type0, range A (Univ) → Prop → Q x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nNat_ind_plus. Soit $R$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.predicate$ appliqué à $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $R$ appliqué à $matita_arithmetics_nat.O$. Alors pour toutes les fonctions $__1$ des éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $R$ appliqué à $n$ à des éléments de $cic.Term$ de $cic.prop$ et de $R$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $R$ appliqué à $n$.\nassistant\n", "label": "postulate nat_ind_plus : (R : cic.Term univs.Type0 (matita_basics_relations.predicate matita_arithmetics_nat.nat)) -> (__ : cic.Term cic.prop (R matita_arithmetics_nat.O)) -> (__1 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term cic.prop (R n)) -> cic.Term cic.prop (R (matita_arithmetics_nat.plus n (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (R n)", "predict": "postulate nat_ind_plus : (R : predicate Nat) -> (x : prop (R Nat)) -> (f : (n : Nat) -> prop (R n)) -> (n : Nat) -> prop (R (plus n (S 0)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nACop_rect_Type3_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all functions $Q_$ from elements $_x_895$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type3$, for all functions $_H_mk_ACop$ from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_895$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$, $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_895$.\nassistant\n", "label": "ACop_rect_Type3_body : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_895 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Univ univs.Type3) -> _H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> _comm : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type3 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> x_895 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Term univs.Type3 (Q_ x_895) .", "predict": "acop_rect_Type3_body : (A : Elem (cic.Univ) (univs.Type0)) -> Proof (forall (nil : Elem (cic.Term) (univs.Type0)) (A : Elem (cic.Univ) (univs.Type0)), forall (Q_ : (x_895 : Elem (cic.Term) (univs.Type0)) -> (matita_arithmetics_bigops.ACop (A) (nil)) -> Elem (cic.Univ) (univs.Type3)), forall (H_mk_ACop : (aop : Elem (cic.Term) (univs.Type0)) -> (matita_arithmetics_bigops.Aop (A) (nil)) -> (a : Elem (cic.Term) (univs.Type0)) -> (A) -> (b : Elem (cic.Term) (univs.Type0)) -> (A) -> Proof (eq (cic.lift (univs.Type0) (univs.Type2)) (A) (matita_arithmetics_bigops.op (A) (nil) aop a) (matita_arithmetics_bigops.op (A) (nil) aop b) (a)) -> (matita_arithmetics_bigops.op (A) (nil) aop (comm a b))) -> Proof (forall (x_895 : Elem (cic.Term) (univs.Type0)) (matita_arithmetics_bigops.ACop (A) (nil)), Elem (cic.Term) (univs.Type3) (Q_ (x_895))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nLe_inv_plus_l. Soient $x$ et $y$ et $z$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $x$ et $y$ et $z$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.And$ appliqué à $matita_arithmetics_nat.le$ appliqué à $x$ et $matita_arithmetics_nat.minus$ appliqué à $z$ et $y$ et $matita_arithmetics_nat.le$ appliqué à $y$ et $z$.\nassistant\n", "label": "axiom le_inv_plus_l (x y z : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.plus x y) z)) : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le x (matita_arithmetics_nat.minus z y)) (matita_arithmetics_nat.le y z))", "predict": "axiom le_inv_plus_l (x y z : Term Type0) (p : le (plus x y) z) : prop ∧ (le x (minus z y) ∧ le y z)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nLe_Psi_BPsi1. För alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_chebyshev_factorization.B$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ applicerat på $n$.\nassistant\n", "label": "axiom le_Psi_BPsi1 (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_chebyshev_psi.Psi (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_nat.times (matita_arithmetics_chebyshev_factorization.B (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_chebyshev_chebyshev_psi.Psi n)))", "predict": "axiom le_Psi_BPsi1 (n : cic.Term univs.Type0) (x : matita_arithmetics_nat.nat) : ∀ __ : cic.Term (cic.prop × matita_arithmetics_nat.lt (matita_arithmetics_nat.O) n), le (matita_arithmetics_chebyshev_chebyshev_psi.Psi (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_chebyshev_factorization.B (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_chebyshev_chebyshev_psi.Psi n)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nLet_clause_1569. Let $m$ and $n$ and $a$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Let $posm$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$. Let $pnm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Let $c$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $d$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Let $d$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme0$ be an element of $", "label": "axiom let_clause_1569 (m n a b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (λ d => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (", "predict": "cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $e$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.times$ applied to $e$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $e$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Let $e$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme1$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $f$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $e$ and $n$ and $matita_arithmetics_nat.times$ applied to $f$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nEq_sigma_pi_SO_n. För alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $matita_basics_bool.true$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.plus$ och funktionen som avbildar $i$ som $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$.\nassistant\n", "label": "Axiom eq_sigma_pi_SO_n : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (fun i => matita_basics_bool.true) matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_nat.plus (fun i => matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) .", "predict": "Axiom eq_sigma_pi_n : forall n : univs.Type0, matita_arithmetics_nat.nat -> cic.prop -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (fun i => matita_basics_bool.true (matita_arithmetics_nat.nat i) matita_arithmetics_nat.O (matita_arithmetics_nat.plus (matita_basics_bool.true (matita_arithmetics_nat.nat i) matita_arithmetics_nat.O) (matita_basics_bool.true (matita_arithmetics_nat.nat i) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nDiv_mod_spec_rect_CProp1. Let $_n$ and $_m$ and $_q$ and $_r$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all functions $Q_$ from elements $_x_853$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_div_mod_spec_intro$ from elements $x_855$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $_r$ and $_m$ and elements $x_854$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $_n$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $_q$ and $_m$ and $_r$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_855$ and $x_854$, for all elements $x_853$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_853$.\nassistant\n", "label": "div_mod_spec_rect_CProp1 : _n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _q : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _r : cic.Term univs.Type0 matita_arithmetics_nat.nat -> Q_ : (_x_853 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r) -> cic.Univ cic.prop) -> _H_div_mod_spec_intro : (x_855 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m) -> x_854 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r)) -> cic.Term cic.prop (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_855 x_854))) -> x_853 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r) -> cic.Term cic.prop (Q_ x_853) .", "predict": "div_mod_spec_rect_CProp1 : (n : Elem (Term Univ Type0)) -> (m : Elem (Term Univ Type0)) -> (q : Elem (Term Univ Type0)) -> (r : Elem (Term Univ Type0)) -> Proof (forall (Q : (x : Elem (Term Univ prop)) -> (div_mod_spec n m q r) -> Elem (Term Univ prop)) (forall (H_div_mod_spec_intro : (x : Elem (Term Univ prop)) -> (lt r m) -> (eq (lift Type0 Type2) (nat)) -> (n) -> (plus (times q m) r)) (Q (div_mod_spec_intro n m q r) x)) (forall (x : Elem (Term Univ prop)) (div_mod_spec n m q r) (Proof (Q x))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nLet_upper_bound5. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $ltml$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_primes.nth_prime$ applied to $n$ and $m$, $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_nat.nat$.\nassistant\n", "label": "let_upper_bound5 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> ltml : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_primes.nth_prime n) m) -> cic.Term univs.Type0 matita_arithmetics_nat.nat .", "predict": "let_upper_bound5 : n : Elem (cic Term) (univs Type0) -> m : Elem (cic Term) (matita_arithmetics_nat nat) -> Proof (forall (ltml : Elem (cic Term) (cic prop)) (matita_arithmetics_nat lt (matita_arithmetics_primes nth_prime n m))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nLet_clause_1617. Let $p$ and $m$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $p$. Let $gcd1$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Then for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$, for all elements $c$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $nm$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$ and $matita_arithmetics_nat.times$ applied to $p$ and $c$, for all elements $a$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $b$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $a$ and $p$ and $matita_arithmetics_nat.times$ applied to $b$ and $m$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_basics_logic.eq$ applied to $cic", "label": "Axiom let_clause_1617 : forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p), forall gcd1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)), forall _clearme : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times m n)), forall c : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall nm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times m n) (matita_arithmetics_nat.times p c)), forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme0 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (fun b => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m))", "predict": ".lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_logic.neq$ applied to $b$ and $c$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_logic.neq$ applied to $b$ and $p$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_logic.eq$ applied to $b$ and $n$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_logic.eq$ applied to $b$ and $m$, for all elements $d$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $nm0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$ and $matita_arithmetics_nat.times$ applied to $p$ and $d$ and $matita_arithmetics_nat.times$ applied to $a$ and $m$ and $matita_arithmetics_nat.times$ applied to $b$ and $n$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_basics_logic.eq$ applied to $c$ and $d$, $posn \\land gcd1 \\land \\forall _clearme (p \\times m \\times n \\to \\forall c (univs.Type0 \\times matita_arithmetics_nat.nat \\"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nACop_rect_CProp0. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_913$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_ACop$ vara en funktion från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$. Då för alla element $x_913$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_913$.\nassistant\n", "label": "Axiom ACop_rect_CProp0 : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_913 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop), forall _H_mk_ACop : ((aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))), forall x_913 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil), cic.Term cic.prop (Q_ x_913) .", "predict": "Axiom cop_rect_CProp0 : forall A : univs.Type0, (cic.Term univs.Type0 A -> forall x_913 : cic.Term univs.Type0, (matita_arithmetics_bigops.ACop A _nil -> cic.prop (Q_ x_913 (matita_arithmetics_bigops.mk_ACop A _nil (matita_arithmetics_bigops.Aop aop)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A (matita_arithmetics_bigops.op A _nil aop)) (a : cic.Term univs.Type0) (b : cic.Term univs.Type0)) (matita_arithmetics_bigops.op A _nil aop) (b : cic.Term univs.Type0) (a : cic.Term univs.Type0) (matita_arithmetics_bigops.op A _nil aop) (a : cic.Term univs.Type0) (b : cic.Term univs.Type0))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nAop_rect_Type3_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all functions $Q_$ from elements $_x_787$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type3$, for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_lists_list.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$,", "label": "Aop_rect_Type3_body : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_787 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil) -> cic.Univ univs.Type3) -> _H_mk_Aop : (op : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _nill : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> _nilr : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> _assoc : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type3 (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> x_787 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil) -> cic.Term univs.Type3 (Q_ x_787) .", "predict": " the statement holds that $Q_ = _H_mk_Aop$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nLt_to_le_to_lt. För alla element $n$ och $m$ och $p$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $n$ och $m$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $m$ och $p$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $n$ och $p$.\nassistant\n", "label": "Axiom lt_to_le_to_lt : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt n m), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.le m p), cic.Term cic.prop (matita_arithmetics_nat.lt n p) .", "predict": "Axiom lt_to_le_to_lt : forall n : univs.Type0, forall m : univs.Type0, forall p : univs.Type0, forall __ : matita_arithmetics_nat.lt n m, forall __1 : matita_arithmetics_nat.le m p, matita_arithmetics_nat.lt n p ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nOrd_O_to_not_divides. Let $p$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.prime$ applied to $p$. Then for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.ord$ applied to $m$ and $p$ and $matita_arithmetics_nat.O$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_arithmetics_primes.divides$ applied to $p$ and $m$.\nassistant\n", "label": "Axiom ord_O_to_not_divides : forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), forall __1 : cic.Term cic.prop (matita_arithmetics_primes.prime p), forall __2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_ord.ord m p) matita_arithmetics_nat.O), cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides p m)) .", "predict": "Axiom ord_O_to_not_divides : forall p : univs.Type0, forall m : matita_arithmetics_nat.nat, forall __ : cic.Term (cic.prop && matita_arithmetics_nat.lt (matita_arithmetics_nat.O) m), forall __1 : cic.Term (cic.prop && matita_arithmetics_primes.prime p), forall __2 : cic.Term (cic.prop && matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_nat.nat) (matita_arithmetics_ord.ord m p)), not (matita_arithmetics_primes.divides p m) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nLe_sigma. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p1$ and $p2$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $g1$ and $g2$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all functions $__$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p1$ applied to $i$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p2$ applied to $i$ and $matita_basics_bool.true$, for all functions $__1$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p1$ applied to $i$ and $matita_basics_bool.true$", "label": "axiom le_sigma (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p1 p2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (g1 g2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p2 i) matita_basics_bool.true)) (__1 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i n)) -> (__2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_arithmetics_nat.le (g1 i) (g2 i))) : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_bigops.bigop n (λ i => p1 i) matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_nat.plus (λ i => g1 i)) (matita_arithmetics_bigops.bigop n (λ i => p2 i) matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_nat.plus (λ i => g2 i)))", "predict": " to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p2$ applied to $i$ and $matita_basics_bool.true$, and for all functions $__2$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n$ and elements $__3$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $g1$ applied to $i$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $g2$ applied to $i$ and $matita_basics_bool.true$, there exists a function $f$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $x$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n$ and elements $y$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p1$ applied to $i$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nLstar_S. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $R$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $B$. Låt $b1$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $B$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $R$ applicerat på $b1$ och $b$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $b2$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $R$ och $l$ och $b$ och $b2$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $R$ och $matita_arithmetics_nat.plus$ applicerat på $l$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $b1$ och $b2$.\nassistant\n", "label": "axiom lstar_S (B : cic.Univ univs.Type0) (R : cic.Term univs.Type0 (matita_basics_relations.relation B)) (b1 b : cic.Term univs.Type0 B) (__ : cic.Term cic.prop (R b1 b)) (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) (b2 : cic.Term univs.Type0 B) (__1 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b b2)) : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2)", "predict": "axiom lstar_S (B : univs.Type0) (R : relation B) (b1 b : B) (x : R b1 b) : ∀ l : nat, ∀ b2 : B, (R b x) ∧ (l ≠ 0) ∧ (b1 + S 0) = b2)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nACop_rect_CProp3_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_907$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_ACop$ be a function from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$. Let $x_907$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_907$.\nassistant\n", "label": "ACop_rect_CProp3_body : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_907 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Univ cic.prop) -> _H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> _comm : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> x_907 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Term cic.prop (Q_ x_907) .", "predict": "acop_rect_cprop3_body : (A : univs.Type0) -> (nil : cic.Term univs.Type0) -> (A : cic.Term univs.Type0) -> (Q_ : (x_907 : cic.Term univs.Type0) -> matita_arithmetics_bigops.ACop A nil -> cic.Univ (cic.prop)) -> (H_mk_ACop : (aop : cic.Term univs.Type0) -> matita_arithmetics_bigops.Aop A nil -> (a : cic.Term univs.Type0) -> (A : cic.Term univs.Type0) -> (b : cic.Term univs.Type0) -> A) -> (eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A nil aop a b)) -> (eq (matita_arithmetics_bigops.op A nil aop b a) (cic.prop)) -> (Q_ (matita_arithmetics_bigops.mk_ACop A nil aop)) -> (x_907 : cic.Term univs.Type0) -> (cic.Term (cic.prop) (Q_ x_907)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nLet_clause_15625. Soient $m$ et $n$ et $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $posm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$. Alors pour tous les éléments $pnm$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $c$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $_clearme$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $d$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_ar", "label": "postulate let_clause_15625 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m", "predict": "ithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, la propriété $pnm$ est vraie."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nMatch_Sig. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $return_sort$ be an element of $cic.Sort$. Let $return_type$ be a function from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $return_sort$. Let $case_mk_Sig$ be a function from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $_f$ applied to $pi1$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_basics_types.mk_Sig$ applied to $A$ and $_f$ and $pi1$ and $_pi2$. Then for all elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.\nassistant\n", "label": "postulate match_Sig : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ return_sort) -> (case_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term return_sort (return_type (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (z : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term return_sort (return_type z)", "predict": "postulate match_Sig : (A : univs.Type0) -> (f : Term univs.Type0 -> A -> Univ (cic.prop)) -> (return_sort : Sort) -> (return_type : (z : Term univs.Type0) -> Sig (A) (f z) -> Univ return_sort) -> (case_mk_Sig : (pi1 : Term univs.Type0) -> A -> (pi2 : Term (cic.prop)) -> f pi1 -> Term (return_sort) (return_type z (matita_basics_types.mk_Sig A f pi1 pi2)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nPsi_3. $cic.Term$ håller för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$.\nassistant\n", "label": "Axiom Psi_3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_chebyshev_chebyshev_psi.Psi (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))))) .", "predict": "Axiom psi_3 : term (prop (lift (Type0 : Type) (Type2 : Type) (nat : Axiom) (Psi : nat -> Prop)) (S (S (S (O (S (S (S (O nat)))))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nNot_rect_CProp4. Låt $_A$ vara ett element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_100$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_nmk$ vara en funktion från funktioner $x_101$ från element $__$ av $cic.Term$ av $cic.prop$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_logic.nmk$ applicerat på $_A$ och $x_101$. Då för alla element $x_100$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_100$.\nassistant\n", "label": "postulate Not_rect_CProp4 : (_A : cic.Univ cic.prop) -> (Q_ : (_x_100 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ cic.prop) -> (_H_nmk : (x_101 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ (matita_basics_logic.nmk _A x_101))) -> (x_100 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Term cic.prop (Q_ x_100)", "predict": "postulate not_rect_CProp4 : (A : Univ prop) -> (Q : (x : Term prop) -> not A) -> (H : (x : prop) -> (A -> False) -> Term prop) -> all (not (A)) (Q)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nSig_rect_CProp0. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $Q_$ une fonction des éléments $_x_688$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $_H_mk_Sig$ des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $_f$ appliqué à $pi1$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $A$ et $_f$ et $pi1$ et $_pi2$, pour tous les éléments $x_688$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_688$.\nassistant\n", "label": "Sig_rect_CProp0 : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> Q_ : (_x_688 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) -> cic.Univ cic.prop) -> _H_mk_Sig : (pi1 : cic.Term univs.Type0 A -> _pi2 : cic.Term cic.prop (_f pi1) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> x_688 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) -> cic.Term cic.prop (Q_ x_688) .", "predict": "sig_rect_CProp0 : (A : Elem (univs Type0)) -> (f : Elem (cic Term) (univs Type0) -> Elem (cic Univ) (cic prop)) -> (Q_ : (x_688 : Elem (cic Term) (univs Type0)) -> Sig (A) (f x_688) -> Elem (cic Univ) (cic prop)) -> Proof (forall (H_mk_Sig : (pi1 : Elem (cic Term) (univs Type0)) -> (pi2 : Elem (cic Term) (cic prop)) -> (f pi1) -> (Q_ (mk_Sig A f pi1) pi2)) (forall (x_688 : Elem (cic Term) (univs Type0)) (Q_ (Sig A f) x_688))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nMk_Dop. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $nil$, för alla funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $nil$ och $nil$, för alla funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $nil$ och $sum$ och $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $nil$ och $sum$ och $prod$ applicerat på $a$ och $b$ och $prod$ applicerat på $a$ och $c$, håller $cic.Term$ för $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $nil$.\nassistant\n", "label": "postulate mk_Dop : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a nil) nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A nil sum b c)) (matita_arithmetics_bigops.aop__o__op A nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A nil)", "predict": "postulate mk_dop : (A : univs.Type0) -> (nil : cic.Term) -> (sum : cic.Term) -> (ACop : matita_arithmetics_bigops.ACop) -> (A : cic.Term) -> (prod : (x : cic.Term) -> (y : A) -> cic.Term) -> (a : A) -> (eq : matita_basics_logic.eq) -> (lift : univs.Type0) -> (univs.Type2) -> (A) -> (prod a nil) -> (nil) -> (distr : (a : A) -> (b : A) -> (c : A) -> matita_basics_logic.eq) -> (a) -> (b) -> (c) -> (prod a (matita_arithmetics_bigops.aop__o__op A nil)) -> (sum) -> (prod (a) (matita_arithmetics_bigops.aop__o__op A (sum))) -> (matita_term)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nBool_inv_rect_Type2. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $P$ vara en funktion från element $_z605$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Univ$ av $univs.Type2$. Låt $_H1$ vara en funktion från element $_z606$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $Hterm$ och $matita_basics_bool.true$ till element av $cic.Term$ av $univs.Type2$ och $P$ applicerat på $matita_basics_bool.true$. Låt $_H2$ vara en funktion från element $_z606$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $Hterm$ och $matita_basics_bool.false$ till element av $cic.Term$ av $univs.Type2$ och $P$ applicerat på $matita_basics_bool.false$. Då håller $cic.Term$ för $univs.Type2$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "axiom bool_inv_rect_Type2 (Hterm : cic.Term univs.Type0 matita_basics_bool.bool) (P : (_z605 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ univs.Type2) (_H1 : (_z606 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.true)) -> cic.Term univs.Type2 (P matita_basics_bool.true)) (_H2 : (_z606 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.false)) -> cic.Term univs.Type2 (P matita_basics_bool.false)) : cic.Term univs.Type2 (P Hterm)", "predict": "axiom bool_inv_rect_Type2 (Hterm : univs.Type0 → matita_basics_bool.bool) (P : ∀ _z605 : univs.Type0 → matita_basics_bool.bool, cic.Univ univs.Type2) (H1 : ∀ _z606 : cic.prop × matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_bool.bool) (Hterm) matita_basics_bool.true, cic.Term univs.Type2 (P (matita_basics_bool.true))) (H2 : ∀ _z606 : cic.prop × matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_bool.bool) (Hterm) matita_basics_bool.false, cic.Term univs.Type2 (P (matita_basics_bool.false))) : cic.Term univs.Type2 (P Hterm)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nHint_declaration_CProp1. Let $A$ be an element of $cic.Univ$ of $cic.prop$. Then for all elements $_a$ and $_b$ of $cic.Term$ of $cic.prop$ and $A$, $cic.Univ$ holds for $univs.Type0$.\nassistant\n", "label": "axiom hint_declaration_CProp1 (A : cic.Univ cic.prop) (_a _b : cic.Term cic.prop A) : cic.Univ univs.Type0", "predict": "axiom hint_declaration_CProp1 (A : cic.prop) (a b : cic.Term) : A → univs.Type0 (cic.Univ A)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nProd_rect_CProp3. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_708$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_Prod$ une fonction des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $_A$ et $_B$ et $_fst$ et $_snd$. Soit $x_708$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_708$.\nassistant\n", "label": "Axiom Prod_rect_CProp3 : forall _A : cic.Univ univs.Type0, forall _B : cic.Univ univs.Type0, forall Q_ : ((_x_708 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ cic.prop), forall _H_mk_Prod : ((_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))), forall x_708 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B), cic.Term cic.prop (Q_ x_708) .", "predict": "Axiom prod_rect_CProp3 : forall A : Univ, forall B : Univ, forall Q : x : Term Type0 -> Prod A B : Univ -> Prop, forall H_mk_Prod : fst : Term Type0 -> A -> snd : Term Type0 -> B -> Term prop -> Q (mk_Prod A B fst snd) -> x : Term Type0 -> Prod A B -> Prop ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nAop_rect_CProp3. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_799$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_Aop$ une fonction des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $cic", "label": "Axiom Aop_rect_CProp3 : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_799 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop), forall _H_mk_Aop : ((op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))), forall x_799 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil), cic.Term cic.prop (Q_ x_799) .", "predict": ".prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $b$ et $c$ et $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $b$ et $c$ et $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $b$ et $c$ et $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nPermut_n_to_le. Låt $h$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $k$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $k$ och $n$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_permutation.permut$ applicerat på $h$ och $n$. Låt $__2$ vara en funktion från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $k$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $h$ applicerat på $m$ och $m$. Låt $j$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__3$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $k$ och $j$. Låt $__4$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $j$ och $n$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $k$ och $h$ applicerat på $j$.\nassistant\n", "label": "postulate permut_n_to_le : (h : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (k : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le k n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_permutation.permut h n)) -> (__2 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt m k)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (h m) m)) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.le k j)) -> (__4 : cic.Term cic.prop (matita_arithmetics_nat.le j n)) -> cic.Term cic.prop (matita_arithmetics_nat.le k (h j))", "predict": "postulate permut_n_to_le : (h : Term (Type0 -> Nat)) -> (k : Term Type0) -> (n : Term Type0) -> Prop -> (j : Term Type0) -> (p : Leq k j) -> (q : Leq j n) -> Leq k (h j)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nOp. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla element $_xxx$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $nil$, för alla element $_x_807$ och $_x_808$ av $cic.Term$ av $univs.Type0$ och $A$, håller $cic.Term$ för $univs.Type0$ och $A$.\nassistant\n", "label": "Axiom op : forall A : cic.Univ univs.Type0, forall nil : cic.Term univs.Type0 A, forall _xxx : cic.Term univs.Type0 (matita_basics_lists_list.Aop A nil), forall _x_807 : cic.Term univs.Type0 A, forall _x_808 : cic.Term univs.Type0 A, cic.Term univs.Type0 A .", "predict": "Axiom : forall A : univs.Type0, forall nil : cic.Term, forall _xxx : cic.Term, forall matita_basics_lists_list.Aop A nil, forall _x_807 : cic.Term, forall _x_808 : cic.Term, A ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nDPair_rect_Type3. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_644$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $univs.Type3$. Then for all functions $_H_mk_DPair$ from elements $dpi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_dpi2$ of $cic.Term$ of $univs.Type0$ and $_f$ applied to $dpi1$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_types.mk_DPair$ applied to $A$ and $_f$ and $dpi1$ and $_dpi2$, for all elements $x_644$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$, $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_644$.\nassistant\n", "label": "DPair_rect_Type3 : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) -> Q_ : (_x_644 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Univ univs.Type3) -> _H_mk_DPair : (dpi1 : cic.Term univs.Type0 A -> _dpi2 : cic.Term univs.Type0 (_f dpi1) -> cic.Term univs.Type3 (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> x_644 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Term univs.Type3 (Q_ x_644) .", "predict": "dpair_rect_Type3 : (A : Elem (univs Type0)) -> (f : Term (univs Type0) -> A -> Elem (univs Type0)) -> (Q_ : (x_644 : Term (univs Type0)) -> DPair A (f x_644) -> Elem (univs Type3)) -> Proof (forall (H_mk_DPair : (dpi1 : Term (univs Type0)) -> A -> (dpi2 : Term (univs Type0)) -> f dpi1 -> Term (univs Type3)) -> forall (x_644 : Term (univs Type0)) -> DPair A (f x_644) -> Proof (cic Term (univs Type3) (Q_ x_644))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nLet_clause_1013. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $n$ och $m$ och $i$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Hind$ vara en funktion från element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_minimization.max$ applicerat på $i$ och $f$ och $m$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $m$ och $matita_basics_bool.false$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $m$ och $matita_arithmetics_nat.O$. Låt $fi$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $i$ och $matita_basics_bool.true$. Låt $eqm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $i$ och $m$. Då för alla element $fm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $", "label": "axiom let_clause_1013 (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (n m i : cic.Term univs.Type0 matita_arithmetics_nat.nat) (Hind : (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.max i f) m)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.false)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m matita_arithmetics_nat.O)) (fi : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.true)) (eqm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) i m)) (fm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.false)) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) matita_basics_bool.false matita_basics_bool.true)", "predict": "m$ och $matita_basics_bool.false$, det finns ett element $fim$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $f$ applicerat på $i$ och $m$ så att $eqm$ och $fm$ är ekvivalenta och $fi$ och $fim$ är ekvivalenta."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nOption_rect_CProp3. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_622$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_None$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.None$ appliqué à $_A$. Soit $_H_Some$ une fonction des éléments $x_623$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.Some$ appliqué à $_A$ et $x_623$. Alors pour tous les éléments $x_622$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_622$.\nassistant\n", "label": "option_rect_CProp3 : _A : cic.Univ univs.Type0 -> Q_ : (_x_622 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Univ cic.prop) -> _H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A)) -> _H_Some : (x_623 : cic.Term univs.Type0 _A -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_623))) -> x_622 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Term cic.prop (Q_ x_622) .", "predict": "option_rect_CProp3 : (A : Elem (univs Type0)) -> (Q : (x : Elem (cic Term)) -> (A : Elem (cic Univ)) -> Elem (cic prop)) -> (H_None : Elem (cic Term) (Q (matita_basics_types None) A)) -> (H_Some : (x : Elem (cic Term)) -> (A : Elem (cic Univ)) -> Elem (cic prop) (Q (matita_basics_types Some) A x)) -> (forall (x : Elem (cic Term)) (A : Elem (matita_basics_types option)) (cic Term) (cic prop) (Q x A)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nLhd. Pour tous les éléments $H$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $H$, pour tous les éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $univs.Type0$ et $matita_basics_lists_list.list$ appliqué à $H$.\nassistant\n", "label": "postulate lhd : (H : cic.Univ univs.Type0) -> (__ : cic.Term univs.Type0 (matita_basics_lists_list.list H)) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 (matita_basics_lists_list.list H)", "predict": "postulate lhd : (H : Univ Univ Type0) -> (x : Term Univ Type0) -> List (List (Term Univ Type0)) -> (y : Term Univ Type0) -> Nat (Arithmetics Nat) -> Term Univ Type0)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nProj2. För alla element $A$ och $B$ av $cic.Univ$ av $cic.prop$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $A$ och $B$, håller $cic.Term$ för $cic.prop$ och $B$.\nassistant\n", "label": "postulate proj2 : (A : cic.Univ cic.prop) -> (B : cic.Univ cic.prop) -> (__ : cic.Term cic.prop (matita_basics_logic.And A B)) -> cic.Term cic.prop B", "predict": "postulate proj2 : (A : cic.Univ) -> (B : cic.prop) -> forall (x : cic.Term B) -> cic.Term (and A B)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nFilter_Dop. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all elements $return_sort$ of $cic.Sort$, for all functions $return_type$ from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $return_sort$, for all functions $return$ from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $z$, for all elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.\nassistant\n", "label": "axiom filter_Dop (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (return_sort : cic.Sort) (return_type : (z : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ return_sort) (return : (z : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term return_sort (return_type z)) (z : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) : cic.Term return_sort (return_type z)", "predict": "axiom filter_Dop (A : univs.Type0) : _nil : Term univs.Type0 → A → Sort → (z : Term univs.Type0) → Dop A _nil → Term (return_sort (return_type z : Dop A _nil))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nRange_rect_Type2. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_923$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type2$. Soit $_H_mk_range$ une fonction des fonctions $_enum$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_upto$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_filter$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_range$ appliqué à $_A$ et $_enum$ et $_upto$ et $_filter$. Soit $x_923$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$. Alors $cic.Term$ tient pour $univs.Type2$ et $Q_$ appliqué à $x_923$.\nassistant\n", "label": "Axiom range_rect_Type2 : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_923 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type2), forall _H_mk_range : ((_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type2 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))), forall x_923 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A), cic.Term univs.Type2 (Q_ x_923) .", "predict": "Axiom range_rect_Type2 : forall A : Univ Type0, forall Q_ : x : Term Type0 -> range A -> Term Type0, forall H_mk_range : enum : x : Term Type0 -> nat -> Term Type0 -> upto : x : Term Type0 -> nat -> Term Type0 -> filter : x : Term Type0 -> nat -> bool -> Term Type0 -> Q_ (mk_range A (enum x) (upto x) (filter x)) : Term Type2 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nCompose. Låt $A$ och $B$ och $C$ vara element av $cic.Univ$ av $univs.Type0$. Låt $_f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $C$. Då för alla funktioner $_g$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $B$, för alla element $_x$ av $cic.Term$ av $univs.Type0$ och $A$, håller $cic.Term$ för $univs.Type0$ och $C$.\nassistant\n", "label": "postulate compose : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (C : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 B) -> cic.Term univs.Type0 C) -> (_g : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) -> (_x : cic.Term univs.Type0 A) -> cic.Term univs.Type0 C", "predict": "postulate compose : (A : univs.Type0) -> (B : univs.Type0) -> (C : univs.Type0) -> (f : (x : Term univs.Type0 B) -> Term univs.Type0 C) -> (g : (x : Term univs.Type0 A) -> Term univs.Type0 B) -> (x : Term univs.Type0 A) -> Term univs.Type0 C"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nACop_inv_rect_CProp1. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $x2$ av $cic.Term$ av $univs.Type0$ och $x1$, för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1620$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $matita_arithmetics_bigops.op$ applicerat på $x1$ och $x2$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $x1$ och $x2$ och $aop$ och $b$ och $a$ och element $_z1621$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_arithmetics_bigops.mk_ACop$ applicerat på $x1$ och $x2$ och $aop$ och $_comm$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $x1$ och $x2$ och $aop$ och $_comm$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "axiom ACop_inv_rect_CProp1 (x1 : cic.Univ univs.Type0) (x2 : cic.Term univs.Type0 x1) (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) (P : (_z1620 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> cic.Univ cic.prop) (_H1 : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (_comm : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (matita_arithmetics_bigops.op x1 x2 aop a b) (matita_arithmetics_bigops.op x1 x2 aop b a))) -> (_z1621 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop x1 x2)) Hterm (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) : cic.Term cic.prop (P Hterm)", "predict": "axiom acop_inv_rect_cprop1 (x1 : univs.Type0) : ∀ x2 : cic.Term univs.Type0, ∀ Hterm : cic.Term univs.Type0, ∀ (P : ∀ _z1620 : cic.Term univs.Type0 → matita_arithmetics_bigops.ACop x1 x2 → cic.Univ) → ∀ aop : cic.Term univs.Type0, ∀ (a : cic.Term univs.Type0), ∀ (b : cic.Term univs.Type0), ∀ (x1 : univs.Type0), ∀ (x2 : univs.Type0), ∀ (c : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) x1) (x : matita_arithmetics_bigops.op x1 x2) (aop : matita_arithmetics_bigops.Aop x1 x2) (comm : matita_basics_logic.eq (aop a) (b aop)) (x1 : univs.Type0) (x2 : univs.Type0) (aop : matita_arithmetics_bigops.Aop x1 x2) (comm : matita_basics_logic.eq (aop a) (b aop)) (z1621 : cic.prop) (x : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) x1) (x : matita_arithmetics_bigops.op x1 x2) (aop : matita_arithmetics_bigops.Aop x1 x2) (comm : matita_basics_logic.eq (aop a) (b aop)) (z1621 : cic.prop) → P (matita_arithmetics_bigops.mk_ACop x1 x2) (aop) (comm) : cic.prop)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nBool_rect_Type3. Let $Q_$ be a function from elements $_x_335$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $univs.Type3$. Let $_H_true$ be an element of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_bool.true$. Let $_H_false$ be an element of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_bool.false$. Let $x_335$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Then $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_335$.\nassistant\n", "label": "bool_rect_Type3 : Q_ : (_x_335 : cic.Term univs.Type0 matita_basics_bool.bool -> cic.Univ univs.Type3) -> _H_true : cic.Term univs.Type3 (Q_ matita_basics_bool.true) -> _H_false : cic.Term univs.Type3 (Q_ matita_basics_bool.false) -> x_335 : cic.Term univs.Type0 matita_basics_bool.bool -> cic.Term univs.Type3 (Q_ x_335) .", "predict": "bool_rect_Type3 : (Q : (x_335 : Elem (Term (univ Type0)) -> Elem (bool (matita_basics)) -> Elem (Univ (Type3))) -> (H_true : Elem (Term (univ Type3)) (Q (true (matita_basics_bool))) -> (H_false : Elem (Term (univ Type3)) (Q (false (matita_basics_bool)))) -> (x_335 : Elem (Term (univ Type0)) (matita_basics_bool)) -> Elem (Term (univ Type3)) (Q x_335)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nOption_inv_rect_CProp3. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $x1$, pour toutes les fonctions $P$ des éléments $_z1080$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $x1$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $_z1081$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.option$ appliqué à $x1$ et $Hterm$ et $matita_basics_types.None$ appliqué à $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.None$ appliqué à $x1$, pour toutes les fonctions $_H2$ des éléments $x_623$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_z1081$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.option$ appliqué à $x1$ et $Hterm$ et $matita_basics_types.Some$ appliqué à $x1$ et $x_623$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.Some$ appliqué à $x1$ et $x_623$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "option_inv_rect_CProp3 : x1 : cic.Univ univs.Type0 -> Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) -> P : (_z1080 : cic.Term univs.Type0 (matita_basics_types.option x1) -> cic.Univ cic.prop) -> _H1 : (_z1081 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.None x1)) -> cic.Term cic.prop (P (matita_basics_types.None x1))) -> _H2 : (x_623 : cic.Term univs.Type0 x1 -> _z1081 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.Some x1 x_623)) -> cic.Term cic.prop (P (matita_basics_types.Some x1 x_623))) -> cic.Term cic.prop (P Hterm) .", "predict": "option_inv_rect_CProp3 : (x1 : Elem (univs Type0)) -> Proof (forall (Hterm : Elem (cic Term) (univs Type0)) (forall (P : Elem (cic prop) (option x1)) (forall (H1 : Elem (cic prop) (option x1)) (forall (H2 : Elem (cic prop) (option x1)) (forall (x_623 : Elem (cic Term) (univs Type0)) (forall (z1081 : Elem (cic prop) (option x1)) (forall (x1 : Elem (cic Term) (univs Type0)) (forall (Hterm : Elem (cic Term) (option x1)) (forall (x_623 : Elem (cic Term) (univs Type0)) (forall (z1081 : Elem (cic prop) (option x1)) (forall (x1 : Elem (cic Term) (univs Type0)) (forall (Hterm : Elem (cic Term) (option x1)) (forall (x_623 : Elem (cic Term) (univs Type0)) (forall (z1081 : Elem (cic prop) (option x1)) (forall (x1 : Elem (cic Term) (univs Type0)) (forall (Hterm : Elem (cic Term) (option x1)) (forall (x_623 : Elem (cic Term) (univs Type0)) (forall (z1081 : Elem (cic prop) (option x1)) (forall (x1 : Elem (cic Term) (univs Type0)) (forall (Hterm : Elem (cic Term) (option x1)) (forall (x_623 : Elem (cic Term) (univs Type0)) (forall (z1081 : Elem (cic prop) (option x1)) (forall (x1 : Elem (cic Term) (univs Type0)) (forall (Hterm : Elem (cic Term) (option x1)) (forall (x_623 : Elem (cic Term) (univs Type0)) (forall (z1081 : Elem"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nTrue_to_le_min. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $n$ and $m$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $b$ and $m$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $m$ and $matita_basics_bool.true$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_minimization.min$ applied to $n$ and $b$ and $f$ and $m$.\nassistant\n", "label": "true_to_le_min : f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.le b m) -> __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.true) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_minimization.min n b f) m) .", "predict": "true_to_le_min : (f : Elem (Term (Type0)) (Nat (matita_arithmetics))) -> (n : Elem (Term (Type0)) (Nat (matita_arithmetics))) -> (m : Elem (Term (Type0)) (Nat (matita_arithmetics))) -> (b : Elem (Term (Type0)) (Nat (matita_arithmetics))) -> (p : Prop (Le (b) m)) -> (p1 : Prop (Eq (lift (Type0) (Type2)) (bool)) (f m (true))) -> Proof (Le (min (n) b) (f m)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nDPair_inv_rect_Type0. Pour tous les éléments $x1$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $x2$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $univs.Type0$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1134$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $_H1$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $x2$ appliqué à $dpi1$ et des éléments $_z1135$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$ à des éléments de $cic.Term$ de $univs.Type0$ et de $P$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$, $cic.Term$ tient pour $univs.Type0$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "postulate DPair_inv_rect_Type0 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> (P : (_z1134 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ univs.Type0) -> (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1135 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type0 (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type0 (P Hterm)", "predict": "postulate dpair_inv_rect_Type0 : (x1 : Univ) -> (x2 : Term Type0) -> (Hterm : Term Type0) -> (P : (z1134 : Term Type0) -> (dpair x1 x2) -> Univ) -> (dpi1 : Term Type0) -> (dpi2 : Term Type0) -> (z1135 : Prop (lift Type0 Type2) (dpair x1 x2) (Hterm) (mk_DPair x1 x2) (dpi1) (dpi2)) -> (P (mk_DPair x1 x2) (dpi1) (dpi2))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nAop_inv_rect_CProp2. For all elements $x1$ of $cic.Univ$ of $univs.Type0$, for all elements $x2$ of $cic.Term$ of $univs.Type0$ and $x1$, for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1416$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and", "label": "postulate Aop_inv_rect_CProp2 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> (P : (_z1416 : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1417 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.Aop x1 x2)) Hterm (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P Hterm)", "predict": " $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $b$ and $c$ and $a$ and functions $_idr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $a$ and $a$ and functions $_lrr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $a$ and $a$, we have $P$ $Hterm$ $x1$ $x2$ $H1$ $nill$ $a$ $op$ $x2$ $a$ $_H1$ $nilr$ $a$ $op$ $a$ $x2$ $a$ $_H1$ $assoc$ $a$ $b$ $c$ $a$ $_H1$ $idr$ $a$ $a$ $a$ $_H1$ $lrr$ $a$ $a$ $a$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nVoid_rect_CProp2. Låt $Q_$ vara en funktion från element $_x_492$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.void$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $x_492$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.void$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_492$.\nassistant\n", "label": "Axiom void_rect_CProp2 : forall Q_ : ((_x_492 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ cic.prop), forall x_492 : cic.Term univs.Type0 matita_basics_types.void, cic.Term cic.prop (Q_ x_492) .", "predict": "Axiom void_rect_CProp2 : forall x_492 : Term Type0 * void, prop (Q_ x_492) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nDop_rect_Type1_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_953$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type1$. Soit $_H_mk_Dop$ une fonction des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $_nil$ et $_nil$ et des fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $b$ et $c$ et $matita_arithmetics_bigops.aop__o__op$ appliqué à $A$ et $_nil$ et $sum$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ à des éléments de $cic.Term$", "label": "Dop_rect_Type1_body : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_953 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil) -> cic.Univ univs.Type1) -> _H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> prod : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _null : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> _distr : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> x_953 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil) -> cic.Term univs.Type1 (Q_ x_953) .", "predict": " de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et $prod$ appliqué à $a$ et $c$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nSplit_eq. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $matita_basics_lists_list.length$ applied to $A$ and $l$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $l$ and $matita_basics_lists_list.append$ applied to $A$ and $matita_basics_types.fst$ applied to $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.split$ applied to $A$ and $l$ and $n$ and $matita_basics_types.snd$ applied to $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.split$ applied to $A$ and $l$ and $n$.\nassistant\n", "label": "postulate split_eq : (A : cic.Univ univs.Type0) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le n (matita_basics_lists_list.length A l))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l (matita_basics_lists_list.append A (matita_basics_types.fst (matita_basics_lists_list.list A) (matita_basics_lists_list.list A) (matita_basics_lists_list.split A l n)) (matita_basics_types.snd (matita_basics_lists_list.list A) (matita_basics_lists_list.list A) (matita_basics_lists_list.split A l n))))", "predict": "postulate split_eq : (A : Univ) -> (n : Nat) -> (l : List A) -> (x : Prop) -> Leq n (length A l) -> Term (prop (eq (lift Type0 Type2) (list A l)) (append A (fst (list A A)) (split A l n) (snd (list A A)) (split A l n)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nFilter. Let $T$ be an element of $cic.Univ$ of $univs.Type0$. Let $_p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $T$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $_l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $T$. Then $cic.Term$ holds for $univs.Type0$ and $matita_basics_lists_list.list$ applied to $T$.\nassistant\n", "label": "axiom filter (T : cic.Univ univs.Type0) (_p : (__ : cic.Term univs.Type0 T) -> cic.Term univs.Type0 matita_basics_bool.bool) (_l : cic.Term univs.Type0 (matita_basics_lists_list.list T)) : cic.Term univs.Type0 (matita_basics_lists_list.list T)", "predict": "axiom filter (T : cic.Univ) : univs.Type0 → _p : __ → univs.Type0 → matita_basics_bool.bool → _l : T : univs.Type0 → matita_basics_lists_list.list → cic.Term univs.Type0 (matita_basics_lists_list.list T)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nOption_inv_rect_CProp1. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $x1$. Let $P$ be a function from elements $_z1092$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $x1$ to elements of $cic.Univ$ of $cic.prop$. Let $_H1$ be a function from elements $_z1093$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $x1$ and $Hterm$ and $matita_basics_types.None$ applied to $x1$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.None$ applied to $x1$. Let $_H2$ be a function from elements $x_631$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_z1093$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $x1$ and $Hterm$ and $matita_basics_types.Some$ applied to $x1$ and $x_631$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.Some$ applied to $x1$ and $x_631$. Then $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "postulate option_inv_rect_CProp1 : (x1 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.option x1)) -> (P : (_z1092 : cic.Term univs.Type0 (matita_basics_types.option x1)) -> cic.Univ cic.prop) -> (_H1 : (_z1093 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.None x1))) -> cic.Term cic.prop (P (matita_basics_types.None x1))) -> (_H2 : (x_631 : cic.Term univs.Type0 x1) -> (_z1093 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.Some x1 x_631))) -> cic.Term cic.prop (P (matita_basics_types.Some x1 x_631))) -> cic.Term cic.prop (P Hterm)", "predict": "postulate option_inv_rect_CProp1 : (x1 : Univ Type0) -> (Hterm : Term Type0 (option x1)) -> (P : (z1092 : Term Type0 (option x1)) -> Univ (prop (P z1092))) -> (H1 : (z1093 : prop) -> Eq (lift Type0 Type2) (option x1) Hterm (None x1)) -> (x_631 : Term Type0) -> (x1 : Univ Type0) -> (z1093 : prop) -> Eq (lift Type0 Type2) (option x1) Hterm (Some x1 x_631) -> (P (Some x1 x_631))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nDivides_ind_body. Pour tous les éléments $_n$ et $_m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour toutes les fonctions $Q_$ des éléments $_x_1192$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.divides$ appliqué à $_n$ et $_m$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_quotient$ des éléments $q$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $x_1193$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $_m$ et $matita_arithmetics_nat.times$ appliqué à $_n$ et $q$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_primes.quotient$ appliqué à $_n$ et $_m$ et $q$ et $x_1193$, pour tous les éléments $x_1192$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.divides$ appliqué à $_n$ et $_m$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_1192$.\nassistant\n", "label": "axiom divides_ind_body (_n _m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (Q_ : (_x_1192 : cic.Term cic.prop (matita_arithmetics_primes.divides _n _m)) -> cic.Univ cic.prop) (_H_quotient : (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_1193 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _m (matita_arithmetics_nat.times _n q))) -> cic.Term cic.prop (Q_ (matita_arithmetics_primes.quotient _n _m q x_1193))) (x_1192 : cic.Term cic.prop (matita_arithmetics_primes.divides _n _m)) : cic.Term cic.prop (Q_ x_1192)", "predict": "axiom divides_ind_body (n m : univs.Type0) (Q : ∀ x : cic.Term (cic.prop × matita_arithmetics_nat.nat), divides n m) (H_quotient : ∀ q : cic.Term (univs.Type0 × matita_arithmetics_nat.nat), ∀ x : cic.Term (cic.prop × matita_basics_logic.eq (univs.Type0 × univs.Type2) (matita_arithmetics_nat.nat × n × q)) (x_1193 : matita_arithmetics_nat.times n q = m) : ∀ x : cic.Term (cic.prop × matita_arithmetics_primes.divides n m), Q (x_1192 : cic.Term (cic.prop × matita_arithmetics_primes.divides n m)) : ∀ x : cic.Term (cic.prop × matita_arithmetics_primes.divides n m), Q x_1192)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nMatch_list. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $return_sort$ un élément de $cic.Sort$. Soit $return_type$ une fonction des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Univ$ de $return_sort$. Soit $case_nil$ un élément de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_basics_lists_list.nil$ appliqué à $_A$. Soit $case_cons$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_basics_lists_list.cons$ appliqué à $_A$ et $__$ et $__1$. Soit $z$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$. Alors $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.\nassistant\n", "label": "postulate match_list : (_A : cic.Univ univs.Type0) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ return_sort) -> (case_nil : cic.Term return_sort (return_type (matita_basics_lists_list.nil _A))) -> (case_cons : (__ : cic.Term univs.Type0 _A) -> (__1 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term return_sort (return_type (matita_basics_lists_list.cons _A __ __1))) -> (z : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term return_sort (return_type z)", "predict": "postulate match_list : (A : Univ Type0) -> return_sort : Sort -> (z : Term (list A)) -> return_type A z -> postulate case_nil : Term (return_sort) (return_type A (nil A)) postulate case_cons : (x : Term Type0) -> A -> (y : Term Type0) -> (l : list A) -> Term (return_sort) (return_type A (cons x A y l)) postulate z : Term (list A)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nACop_rect_Type3. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_895$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type3$. Let $_H_mk_ACop$ be a function from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$. Then for all elements $x_895$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$, $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_895$.\nassistant\n", "label": "axiom ACop_rect_Type3 (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_895 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ univs.Type3) (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type3 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) (x_895 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) : cic.Term univs.Type3 (Q_ x_895)", "predict": "axiom acop_rect_Type3 (A : Univ Type0) (nil : Term Type0) (Q_ : (x : Term Type0) → ACop A nil → Univ Type3) (H_mk_ACop : (aop : Term Type0) → Aop A nil → (a : Term Type0) → (b : Term Type0) → eq (lift Type0 Type2 A) (op A nil aop a) (op A nil aop b) (eq (op A nil aop a) (op A nil aop b))) : ∀ x : Term Type0, ACop A nil → Term Type3 → Q_ x (mk_ACop A nil aop) (comm a A b)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nChecker_spec. Let $tl$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $matita_arithmetics_nat.nat$. Let $a$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $matita_arithmetics_chebyshev_bertrand256.checker$ applied to $l$ and $matita_basics_bool.true$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $matita_arithmetics_nat.nat$ and $l$ and $matita_basics_lists_list.cons$ applied to $matita_arithmetics_nat.nat$ and $a$ and $tl$, for all elements $p$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.mem$ applied to $matita_arithmetics_nat.nat$ and $p$ and $tl$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $pp$ to $matita_basics_logic.And$ applied to $matita_basics_logic.And$ applied to $matita_basics_lists_list.mem$ applied to $matita_arithmetics_nat.nat$ and $pp$ and $l$ and $matita_arithmetics_nat.lt$ applied to $pp$ and $p$ and $matita_arithmetics_nat.le$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $pp$.\nassistant\n", "label": "axiom checker_spec (tl : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) (l : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_chebyshev_bertrand256.checker l) matita_basics_bool.true)) (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) l (matita_basics_lists_list.cons matita_arithmetics_nat.nat a tl))) (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__2 : cic.Term cic.prop (matita_basics_lists_list.mem matita_arithmetics_nat.nat p tl)) : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (λ pp => matita_basics_logic.And (matita_basics_logic.And (matita_basics_lists_list.mem matita_arithmetics_nat.nat pp l) (matita_arithmetics_nat.lt pp p)) (matita_arithmetics_nat.le p (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) pp))))", "predict": "axiom checker_spec (tl : Term Type0 (list Nat)) (a : Term Type0 Nat) (l : Term Type0 (list Nat)) : ∀ p : Prop (eq (lift Type0 Type2) (bool (check (l) (true))) ∀ p : Prop (eq (lift Type0 Type2) (list Nat) l) (cons (Nat) a) tl) ∀ p : Prop (mem (Nat) p) (tl) (and (and (mem (Nat) p) (l)) (lt p (S (S (O)))))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nMatch_Aop. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $return_sort$ vara ett element av $cic.Sort$. Låt $return_type$ vara en funktion från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $return_sort$. Låt $case_mk_Aop$ vara en funktion från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på", "label": "axiom match_Aop (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (return_sort : cic.Sort) (return_type : (z : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ return_sort) (case_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term return_sort (return_type (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) (z : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) : cic.Term return_sort (return_type z)", "predict": " $z$ applicerat på $op$ applicerat på $a$ applicerat på $b$ applicerat på $c$.\n\naxiom match_Aop (A : univs.Type0) (nil : Term univs.Type0 A) (return_sort : Sort) (return_type : Term (A → A) (nil : Term univs.Type0 A)) : ∀ z : Term univs.Type0, return_type (Aop z nil) = return_sort"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nOption_rect_Type2_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $Q_$ from elements $_x_602$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type2$, for all elements $_H_None$ of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_basics_types.None$ applied to $_A$, for all functions $_H_Some$ from elements $x_603$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_basics_types.Some$ applied to $_A$ and $x_603$, for all elements $x_602$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$, $cic.Term$ holds for $univs.Type2$ and $Q_$ applied to $x_602$.\nassistant\n", "label": "Axiom option_rect_Type2_body : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_602 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ univs.Type2), forall _H_None : cic.Term univs.Type2 (Q_ (matita_basics_types.None _A)), forall _H_Some : ((x_603 : cic.Term univs.Type0 _A) -> cic.Term univs.Type2 (Q_ (matita_basics_types.Some _A x_603))), forall x_602 : cic.Term univs.Type0 (matita_basics_types.option _A), cic.Term univs.Type2 (Q_ x_602) .", "predict": "Axiom option_rect_Type2_body : forall A : Univ, forall Q : Term Type0 -> option A -> Univ Type2, forall H_None : Term Type2, forall x_602 : Term Type0, Q (None A) = H_None -> forall H_Some : (x_603 : Term Type0 -> A -> Term Type2) -> Q (Some A x_603) -> forall x_602 : Term Type0, Term Type2 (Q x_602) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nACop_rect_CProp2. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Alors pour toutes les fonctions $Q_$ des éléments $_x_909$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_ACop$ des éléments $aop$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ et des fonctions $_comm$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $_nil$ et $aop$ et $a$ et $b$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $_nil$ et $aop$ et $b$ et $a$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_ACop$ appliqué à $A$ et $_nil$ et $aop$ et $_comm$, pour tous les éléments $x_909$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_909$.\nassistant\n", "label": "Axiom ACop_rect_CProp2 : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_909 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop), forall _H_mk_ACop : ((aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))), forall x_909 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil), cic.Term cic.prop (Q_ x_909) .", "predict": "Axiom acop_rect_cprop2 : forall A : univs.Type0, (A : cic.Univ) -> _nil : cic.Term) -> forall Q_ : (x : cic.Term) -> (matita_arithmetics_bigops.ACop A _nil) -> forall aop : cic.Term, (a : A) -> forall b : A, (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b)) -> (matita_arithmetics_bigops.op A _nil aop b a) -> forall x_909 : cic.Term, (matita_arithmetics_bigops.ACop A _nil) -> Q_ x_909 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nLe_max_n. Pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_minimization.max$ appliqué à $n$ et $f$ et $n$.\nassistant\n", "label": "axiom le_max_n (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_minimization.max n f) n)", "predict": "axiom le_max_n (f : univs.Type0 → matita_arithmetics_nat.nat → univs.Type0) (n : univs.Type0) : cic.prop (matita_arithmetics_minimization.max n f n)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nRange_rect_Type4_body. For all elements $_A$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_917$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type4$, for all functions $_H_mk_range$ from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_917$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_917$.\nassistant\n", "label": "range_rect_Type4_body : _A : cic.Univ univs.Type0 -> Q_ : (_x_917 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Univ univs.Type4) -> _H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 _A) -> _upto : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> x_917 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Term univs.Type4 (Q_ x_917) .", "predict": "range_rect_Type4_body : (A : Elem (univ (Type0))) -> (Q_ : (x_917 : Elem (Term (Type0))) -> Elem (univ (Type4))) -> (H_mk_range : (Enum : (x : Elem (Term (Type0))) -> Nat) -> (A : Elem (univ (Type0))) -> (upto : Nat) -> (filter : (x : Elem (Term (Type0))) -> Nat -> Elem (Term (Type0)) -> Bool) -> (x_917 : Elem (Term (Type0))) -> (matita_arithmetics_bigops.range A) -> Proof (forall (Term (univ (Type4))) (Q_ x_917)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nCompare_append. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $l1$ och $l2$ och $l3$ och $l4$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $A$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l1$ och $l2$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l3$ och $l4$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_basics_lists_list.list$ applicerat på $A$ och funktionen som avbildar $l$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.And$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $A$ och $l1$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l3$ och $l$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $A$ och $l4$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l$ och $l2$ och $matita_basics_logic.And$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $A$ och $l3$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l1$ och $l$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$", "label": "compare_append : A : cic.Univ univs.Type0 -> l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A) -> l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A) -> l3 : cic.Term univs.Type0 (matita_basics_lists_list.list A) -> l4 : cic.Term univs.Type0 (matita_basics_lists_list.list A) -> __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.append A l1 l2) (matita_basics_lists_list.append A l3 l4)) -> cic.Term cic.prop (matita_basics_logic.ex (matita_basics_lists_list.list A) (l : cic.Term univs.Type0 (matita_basics_lists_list.list A) => matita_basics_logic.Or (matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l1 (matita_basics_lists_list.append A l3 l)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l4 (matita_basics_lists_list.append A l l2))) (matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l3 (matita_basics_lists_list.append A l1 l)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l2 (matita_basics_lists_list.append A l l4))))) .", "predict": " och $matita_basics_lists_list.list$ applicerat på $A$ och $l4$ och $l$ och $l2$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $A$ och $l1$ och $l3$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l$ och $l4$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $A$ och $l1$ och $l2$ och $l3$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l$ och $l4$ ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nACop_rect_Type0. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_901$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type0$. Låt $_H_mk_ACop$ vara en funktion från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$. Då för alla element $x_901$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_901$.\nassistant\n", "label": "axiom ACop_rect_Type0 (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_901 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ univs.Type0) (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) (x_901 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) : cic.Term univs.Type0 (Q_ x_901)", "predict": "axiom acop_rect_Type0 (A : Univ Type0) (nil : Term Type0 A) (Q : (x : Term Type0) → ACop A nil → Univ Type0) : ∀ aop : Term Type0 (a b : Term Type0) (comm : a ≠ b) (x : ACop A nil) : Q x (aop a b) (comm (op A nil aop a b) (op A nil aop b a))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nAll_mp. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $P$ and $Q$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$, for all functions $__$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__$ of $cic.Term$ of $cic.prop$ and $P$ applied to $a$ to elements of $cic.Term$ of $cic.prop$ and $Q$ applied to $a$, for all elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.All$ applied to $A$ and $P$ and $l$, $cic.Term$ holds for $cic.prop$ and $matita_basics_lists_list.All$ applied to $A$ and $Q$ and $l$.\nassistant\n", "label": "postulate All_mp : (A : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (__ : (a : cic.Term univs.Type0 A) -> (__ : cic.Term cic.prop (P a)) -> cic.Term cic.prop (Q a)) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__1 : cic.Term cic.prop (matita_basics_lists_list.All A P l)) -> cic.Term cic.prop (matita_basics_lists_list.All A Q l)", "predict": "postulate all_mp : (A : Univ Type0) -> (P : (a : Term Type0) -> (A : Univ) -> Prop) -> (Q : (a : Term Type0) -> (A : Univ) -> Prop) -> (l : Term Type0) -> (matita_basics_lists_list : List A) -> (x : Prop) -> (y : Prop) -> all (matita_basics_lists_list All A P l) (matita_basics_lists_list All A Q l)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nOption_rect_Type1_body. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_606$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type1$. Alors pour tous les éléments $_H_None$ de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_basics_types.None$ appliqué à $_A$, pour toutes les fonctions $_H_Some$ des éléments $x_607$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_basics_types.Some$ appliqué à $_A$ et $x_607$, pour tous les éléments $x_606$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$, $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_606$.\nassistant\n", "label": "axiom option_rect_Type1_body (_A : cic.Univ univs.Type0) (Q_ : (_x_606 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ univs.Type1) (_H_None : cic.Term univs.Type1 (Q_ (matita_basics_types.None _A))) (_H_Some : (x_607 : cic.Term univs.Type0 _A) -> cic.Term univs.Type1 (Q_ (matita_basics_types.Some _A x_607))) (x_606 : cic.Term univs.Type0 (matita_basics_types.option _A)) : cic.Term univs.Type1 (Q_ x_606)", "predict": "axiom option_rect_Type1_body (A : Univ Type0) (Q : ∀ x : Term Type0, option A → Term Type1) : ∀ H_None : Term Type1, Q (None A) ∧ ∀ H_Some : ∀ x : Term Type0, A → Term Type1, ∀ x : Term Type0, Q (Some A x)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nInvert_permut. Låt $__$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla funktioner $__1$ från element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__2$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $univs.Type0$ och $matita_arithmetics_nat.nat$.\nassistant\n", "label": "axiom invert_permut (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__1 : (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) (__2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term univs.Type0 matita_arithmetics_nat.nat", "predict": "axiom invert_permut (x : univs.Type0) (n : matita_arithmetics_nat.nat) : ∀ f : (univs.Type0 → matita_arithmetics_nat.nat) → ∀ y : (univs.Type0 → matita_arithmetics_nat.nat), cic.Term (univs.Type0) (matita_arithmetics_nat.nat)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nMax. Assume that $Sort$. Then if $Sort$, then $Sort$.\nassistant\n", "label": "Axiom max : Sort -> Sort -> Sort .", "predict": "Axiom max : Sort -> Sort -> Sort ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nLe_to_leb_true. For all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $matita_arithmetics_nat.leb$ applied to $n$ and $m$ and $matita_basics_bool.true$.\nassistant\n", "label": "le_to_leb_true : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.le n m) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_nat.leb n m) matita_basics_bool.true) .", "predict": "le_to_leb_true : (n : cic.Term univs.Type0) -> (m : matita_arithmetics_nat.nat) -> ($$__ : cic.Term (cic.prop) (matita_arithmetics_nat.le n m)) -> cic.Term (cic.prop) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_bool.bool) (matita_arithmetics_nat.leb n m)) (matita_basics_bool.true) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nMatch_Not. Låt $_A$ vara ett element av $cic.Univ$ av $cic.prop$. Låt $return_sort$ vara ett element av $cic.Sort$. Då för alla funktioner $return_type$ från element $z$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$ till element av $cic.Univ$ av $return_sort$, för alla funktioner $case_nmk$ från funktioner $__$ från element $__$ av $cic.Term$ av $cic.prop$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $matita_basics_logic.nmk$ applicerat på $_A$ och $__$, för alla element $z$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$, håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.\nassistant\n", "label": "axiom match_Not (_A : cic.Univ cic.prop) (return_sort : cic.Sort) (return_type : (z : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ return_sort) (case_nmk : (__ : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term return_sort (return_type (matita_basics_logic.nmk _A __))) (z : cic.Term cic.prop (matita_basics_logic.Not _A)) : cic.Term return_sort (return_type z)", "predict": "axiom match_not (A : cic.Univ (cic.prop)) (return_sort : cic.Sort) : ∀ return_type : (z : cic.Term (cic.prop)) → matita_basics_logic.Not A → (cic.Term return_sort) → ∀ case_nmk : (__) : (__) → (A → cic.Term (cic.prop)) → (matita_basics_logic.False) → (cic.Term return_sort) → (return_type z (matita_basics_logic.nmk A __)) → ∀ z : cic.Term (cic.prop), matita_basics_logic.Not A → (cic.Term return_sort) (return_type z)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nMatch_DPair. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $return_sort$ un élément de $cic.Sort$. Alors pour toutes les fonctions $return_type$ des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $return_sort$, pour toutes les fonctions $case_mk_DPair$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $_f$ appliqué à $dpi1$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $A$ et $_f$ et $dpi1$ et $_dpi2$, pour tous les éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.\nassistant\n", "label": "postulate match_DPair : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ return_sort) -> (case_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term return_sort (return_type (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (z : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term return_sort (return_type z)", "predict": "postulate match_DPair : (A : Univ Type0) -> (f : Term Type0 -> A -> Univ Type0) -> return_sort : Sort -> (z : Term Type0) -> (d : DPair A f) -> case_mk_DPair : (dpi1 : Term Type0) -> (A : Type0) -> (f : Term Type0 -> A -> Type0) -> (dpi2 : Term Type0) -> (d : DPair A f) -> (z : Term Type0) -> (return_sort : Sort) -> (return_type : Term Type0 -> DPair A f -> Sort) -> (z : Term Type0) -> (d : DPair A f) -> all (Eq (Term return_sort) (return_type z))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nList_rect_CProp3. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_761$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $_H_nil$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_lists_list.nil$ applicerat på $_A$, för alla funktioner $_H_cons$ från element $x_763$ av $cic.Term$ av $univs.Type0$ och $_A$ och element $x_762$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$ och element $_x_765$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $x_762$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_lists_list.cons$ applicerat på $_A$ och $x_763$ och $x_762$, för alla element $x_761$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_761$.\nassistant\n", "label": "postulate list_rect_CProp3 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_761 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ cic.prop) -> (_H_nil : cic.Term cic.prop (Q_ (matita_basics_lists_list.nil _A))) -> (_H_cons : (x_763 : cic.Term univs.Type0 _A) -> (x_762 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_765 : cic.Term cic.prop (Q_ x_762)) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.cons _A x_763 x_762))) -> (x_761 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term cic.prop (Q_ x_761)", "predict": "postulate list_rect_CProp3 : (A : univs.Type0) -> (Q : (x : Term univs.Type0) -> list A -> Prop) -> (H_nil : Prop) -> (H_cons : (x : Term univs.Type0) -> A -> (y : list A) -> Prop) -> (x : Term univs.Type0) -> list A -> Prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nStreicherK. Låt $T$ vara ett element av $cic.Univ$ av $univs.Type2$. Låt $t$ vara ett element av $cic.Term$ av $univs.Type2$ och $T$. Då för alla funktioner $P$ från element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $T$ och $t$ och $t$ till element av $cic.Univ$ av $univs.Type2$, för alla element $__$ av $cic.Term$ av $univs.Type2$ och $P$ applicerat på $matita_basics_logic.refl$ applicerat på $T$ och $t$, för alla element $p$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $T$ och $t$ och $t$, håller $cic.Term$ för $univs.Type2$ och $P$ applicerat på $p$.\nassistant\n", "label": "postulate streicherK : (T : cic.Univ univs.Type2) -> (t : cic.Term univs.Type2 T) -> (P : (__ : cic.Term cic.prop (matita_basics_logic.eq T t t)) -> cic.Univ univs.Type2) -> (__ : cic.Term univs.Type2 (P (matita_basics_logic.refl T t))) -> (p : cic.Term cic.prop (matita_basics_logic.eq T t t)) -> cic.Term univs.Type2 (P p)", "predict": "postulate streicherK : (T : univs.Type2) -> (t : Term univs.Type2 T) -> all (univs.Type2) (\\ p -> all (Term univs.Type2) (\\ p' -> all (prop) (\\ P -> eq (P (t p)) (refl T t)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nCongruent_n_mod_times. Låt $n$ och $m$ och $p$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $p$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_congruence.congruent$ applicerat på $n$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $n$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $p$ och $p$.\nassistant\n", "label": "postulate congruent_n_mod_times : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> cic.Term cic.prop (matita_arithmetics_congruence.congruent n (matita_arithmetics_div_and_mod.mod n (matita_arithmetics_nat.times m p)) p)", "predict": "postulate congruent_n_mod_times : (n : Type0) -> (m : nat) -> (p : Prop) -> Lt p (times m n)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nUnit_inv_rect_CProp1. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$. Alors pour toutes les fonctions $P$ des éléments $_z960$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $_z961$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.unit$ et $Hterm$ et $matita_basics_types.it$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.it$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "unit_inv_rect_CProp1 : Hterm : cic.Term univs.Type0 matita_basics_types.unit -> P : (_z960 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Univ cic.prop) -> _H1 : (_z961 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm matita_basics_types.it) -> cic.Term cic.prop (P matita_basics_types.it)) -> cic.Term cic.prop (P Hterm) .", "predict": "unit_inv_rect_CProp1 : (Hterm : Elem (Term (Type0) (unit))) -> Proof (forall (P : (z960 : Elem (Term (Type0) (unit))) -> Prop (cic.Univ)) (forall (H1 : (z961 : Elem (Term (prop)) (eq (lift (Type0) (Type2)) (unit))) -> (Hterm) (it (prop) (P (it (prop) (H1)))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nLet_clause_1553. Let $n$ and $n0$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $a$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $a$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $a$. Let $a$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme0$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $a$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $a$. Let $Hn$ be an element of $cic.Term$ of", "label": "postulate let_clause_1553 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n0 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n0 (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n0 (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)))))) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n0 (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n0 (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O", "predict": " $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $n0$. Let $Hn0$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $n$. Let $A$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.and$ applied to $Hn$ and $Hn0$ and $matita_basics_logic.eq$ applied to $a$ and $_clearme$ and $_clearme0$. Let $B$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $a$ and $_clearme$. Let $C$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $a$ and $_clearme0$. Let $D$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.or$ applied to $B$ and $C$. Let $E$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.and$ applied to $D$ and $A$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nACop_rect_Type2. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_897$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type2$, för alla funktioner $_H_mk_ACop$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$, för alla element $x_897$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $univs.Type2$ och $Q_$ applicerat på $x_897$.\nassistant\n", "label": "ACop_rect_Type2 : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_897 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Univ univs.Type2) -> _H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> _comm : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type2 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> x_897 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Term univs.Type2 (Q_ x_897) .", "predict": "acop_rect_Type2 : (A : Elem (univs Type0)) -> Proof (forall (nil : Term (univs Type0)) (A : Elem (cic Univ)) (forall (Q_ : (x_897 : Term (univs Type0)) -> ACop (A (nil)) (cic Univ) (Type2)) (forall (H_mk_ACop : (aop : Term (univs Type0)) (A (nil)) (aop : Aop) (comm : (a : Term (univs Type0)) (A) (b : Term (univs Type0)) (A) (Prop)) (eq (lift (univs Type0) (univs Type2)) (A) (op (A) (nil) (aop)) (a) (b) (op (A) (nil) (aop)) (b) (a))) (forall (x_897 : Term (univs Type0)) (ACop (A) (nil)) (Term (univs Type2))) (Q_ (x_897)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nBc_n_n. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_binomial.bc$ appliqué à $n$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$.\nassistant\n", "label": "postulate bc_n_n : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_binomial.bc n n) (matita_arithmetics_nat.S matita_arithmetics_nat.O))", "predict": "postulate bc_n_n : (n : univs.Type0) -> matita_arithmetics_nat.nat -> cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_nat.nat) (matita_arithmetics_binomial.bc n n (matita_arithmetics_nat.S (matita_arithmetics_nat.O))))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nMk_Sig. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$. Låt $pi1$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $_pi2$ vara ett element av $cic.Term$ av $cic.prop$ och $f$ applicerat på $pi1$. Då håller $cic.Term$ för $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $f$.\nassistant\n", "label": "mk_Sig : A : cic.Univ univs.Type0 -> f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> pi1 : cic.Term univs.Type0 A -> _pi2 : cic.Term cic.prop (f pi1) -> cic.Term univs.Type0 (matita_basics_types.Sig A f) .", "predict": "mk_Sig : univs : Type0 -> (cic : Term (univs : Type0)) -> prop -> (pi1 : Term (univs : Type0) (A)) -> (pi2 : prop (f (pi1))) -> Proof (Term (univs : Type0) (matita_basics_types : Sig) (A) (f)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nLe_smallest_factor_n. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_primes.smallest_factor$ appliqué à $n$ et $n$.\nassistant\n", "label": "postulate le_smallest_factor_n : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_primes.smallest_factor n) n)", "predict": "postulate le_smallest_factor_n : (n : Nat) -> Prop (le (smallest_factor n) n)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nAop_ind_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_861$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_Aop$ vara en funktion från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$ av $cic.prop$ och $Q_$", "label": "Axiom Aop_ind_body : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_861 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop), forall _H_mk_Aop : ((op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))), forall x_861 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil), cic.Term cic.prop (Q_ x_861) .", "predict": " applicerat på $a$ och $b$ och $c$ ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nAop_rect_CProp2_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_881$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_Aop$ une fonction des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ à des éléments de $cic.Term$ de $c", "label": "axiom Aop_rect_CProp2_body (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_881 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop) (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) (x_881 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) : cic.Term cic.prop (Q_ x_881)", "predict": "ic.prop$.\n\naxiom aop_rect_CProp2_body (A : Univ Type0) (nil : Term A) (Q_ : (x : Term) → Aop A nil → Prop) (H_mk_Aop : (op : Term A → Term A) → (x : Term) → A → (a : Term) → A → Term A) (H_nill : (a : Term) → A → Term (prop (lift Type0 Type2 A) (op nil a) a)) (H_nilr : (a : Term) → A → Term (prop (lift Type0 Type2 A) (op a nil) a)) (H_assoc : (a : Term) → A → (b : Term) → A → (c : Term) → A → Term (prop (lift Type0 Type2 A) (op (op a b) c) (op (op a b) c))) : ∀ x : Term, ∀ y : Term, ∀ z : Term, ∀ p : prop (lift Type0 Type2 A) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y) (op (op a x) y"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nMod_n_n. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $n$ och $n$ och $matita_arithmetics_nat.O$.\nassistant\n", "label": "Axiom mod_n_n : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod n n) matita_arithmetics_nat.O) .", "predict": "Axiom mod_n_n : forall n : matita_arithmetics_nat.nat, forall p : matita_basics_logic.prop, forall q : matita_arithmetics_div_and_mod.mod (n : matita_arithmetics_nat.nat) (n : matita_arithmetics_nat.nat) (matita_arithmetics_nat.O : matita_arithmetics_nat.nat), p (cic.lift (univs.Type0) (univs.Type2) (matita_arithmetics_nat.nat)) (cic.eq (matita_arithmetics_div_and_mod.mod n n matita_arithmetics_nat.O)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nLet_previous_prime4. For all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_nat.nat$.\nassistant\n", "label": "let_previous_prime4 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_arithmetics_nat.nat .", "predict": "let_previous_prime4 : (n : Elem (cic Term) (univs Type0)) -> (m : Elem (matita_arithmetics_nat nat) (univs Type0)) -> Proof (cic Term) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nACop_rect_Type3_body. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_895$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type3$, för alla funktioner $_H_mk_ACop$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$, för alla element $x_895$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $univs.Type3$ och $Q_$ applicerat på $x_895$.\nassistant\n", "label": "ACop_rect_Type3_body : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_895 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Univ univs.Type3) -> _H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> _comm : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type3 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> x_895 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Term univs.Type3 (Q_ x_895) .", "predict": "acop_rect_Type3_body : (A : Elem (univs Type0)) -> (nil : Term (univs Type0)) -> A -> Proof (forall (x_895 : Term (univs Type0)) (Q_ : ACop A nil : Elem (univs Type3)) (forall (aop : Term (univs Type0)) (comm : A op nil aop : Elem (univs Type2)) (a : Term (univs Type0)) (b : Term (univs Type0)) (eq : Proof (and (forall (x : Term (univs Type0)) (ACop A nil : Elem (univs Type3))) (forall (x_895 : Term (univs Type0)) (ACop A nil : Elem (univs Type3)))) (forall (x_895 : Term (univs Type0)) (Q_ : ACop A nil : Elem (univs Type3)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nB_SSSO. $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_chebyshev_factorization.B$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$.\nassistant\n", "label": "axiom B_SSSO : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_chebyshev_factorization.B (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))", "predict": "axiom b_SSSO : term (prop (lift (Type0 : Type) (Type2 : Type)) (nat : Type) (B (S (S (S (O : Nat)) : Nat)) (S (S (S (O : Nat)) : Nat)) (S (S (S (O : Nat)) : Nat)) (S (S (S (O : Nat)) : Nat)) (S (S (S (O : Nat)) : Nat)) (S (S (S (O : Nat)) : Nat)) (O : Nat)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nLe_max_f_max_g. Låt $f$ och $g$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla funktioner $__$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $i$ och $matita_basics_bool.true$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $g$ applicerat på $i$ och $matita_basics_bool.true$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_minimization.max$ applicerat på $n$ och $f$ och $matita_arithmetics_minimization.max$ applicerat på $n$ och $g$.\nassistant\n", "label": "le_max_f_max_g : f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> g : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt i n) -> __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.true) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (g i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_minimization.max n f) (matita_arithmetics_minimization.max n g)) .", "predict": "le_max_f_max_g : (f : Elem (Term (Type0)) (Nat)) -> (g : Elem (Term (Type0)) (Bool)) -> Proof (forall (i : Elem (Term (Type0)) (Nat)) (n : Nat) (p : Bool) (q : Eq (lift Type0 Type2) (bool)) (f i true) (Eq (max n f) (max n g))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nUnit_rect_CProp4_body. Pour toutes les fonctions $Q_$ des éléments $_x_509$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $_H_it$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.it$, pour tous les éléments $x_509$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_509$.\nassistant\n", "label": "unit_rect_CProp4_body : Q_ : (_x_509 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Univ cic.prop) -> _H_it : cic.Term cic.prop (Q_ matita_basics_types.it) -> x_509 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Term cic.prop (Q_ x_509) .", "predict": "unit_rect_CProp4_body : (Q : Elem (cic.Term (univs.Type0) (matita_basics_types.unit))) -> (H_it : Elem (cic.Term (cic.prop) (Q (matita_basics_types.it)))) -> (x_509 : Elem (cic.Term (univs.Type0) (matita_basics_types.unit))) -> Proof (cic.prop (Q x_509)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nACop_rect_CProp2_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_909$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_ACop$ vara en funktion från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$. Låt $x_909$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$. Då håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_909$.\nassistant\n", "label": "axiom ACop_rect_CProp2_body (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_909 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop) (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) (x_909 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) : cic.Term cic.prop (Q_ x_909)", "predict": "axiom acop_rect_cprop2_body (A : univs.Type0) (nil : term univs.Type0 A) (Q : ∀ x : term univs.Type0 (acop A nil), prop) (H_mk_ACop : ∀ aop : term univs.Type0, (a : term univs.Type0) → (b : term univs.Type0) → prop) (comm : ∀ a : term univs.Type0, (A : term univs.Type0) → prop) (x_909 : term univs.Type0 (acop A nil)) : prop := Q x_909"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nPermut_S_to_permut. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $m$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_permutation.permut$ appliqué à $f$ et $matita_arithmetics_nat.S$ appliqué à $m$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $matita_arithmetics_nat.S$ appliqué à $m$ et $matita_arithmetics_nat.S$ appliqué à $m$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_permutation.permut$ appliqué à $f$ et $m$.\nassistant\n", "label": "axiom permut_S_to_permut (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_permutation.permut f (matita_arithmetics_nat.S m))) (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f (matita_arithmetics_nat.S m)) (matita_arithmetics_nat.S m))) : cic.Term cic.prop (matita_arithmetics_permutation.permut f m)", "predict": "axiom permut_S_to_permut (f : univs.Type0 → matita_arithmetics_nat.nat → univs.Type0 → matita_arithmetics_nat.nat) (m : univs.Type0 → matita_arithmetics_nat.nat) : ∀ p : cic.prop → ∀ p : matita_arithmetics_permutation.permut (f (matita_arithmetics_nat.S m)) (∀ p : cic.prop → ∀ p : matita_basics_logic.eq (univs.Type0) (univs.Type2) (matita_arithmetics_nat.nat) (f (matita_arithmetics_nat.S m)) (matita_arithmetics_nat.S m)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nTrue_rect_Type2_body. Soit $Q_$ une fonction des éléments $_x_48$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$ à des éléments de $cic.Univ$ de $univs.Type2$. Soit $_H_I$ un élément de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_basics_logic.I$. Soit $x_48$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$. Alors $cic.Term$ tient pour $univs.Type2$ et $Q_$ appliqué à $x_48$.\nassistant\n", "label": "axiom True_rect_Type2_body (Q_ : (_x_48 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ univs.Type2) (_H_I : cic.Term univs.Type2 (Q_ matita_basics_logic.I)) (x_48 : cic.Term cic.prop matita_basics_logic.True) : cic.Term univs.Type2 (Q_ x_48)", "predict": "axiom true_rect_Type2_body (Q : ∀ x : cic.prop, matita_basics_logic.True → univs.Type2) (H_I : univs.Type2) (x_48 : cic.prop) (x_48_is_true : matita_basics_logic.True) : cic.Term univs.Type2 (Q x_48 x_48_is_true)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nLe_inv_ind. Soient $x1$ et $x2$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_Hterm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $x1$ et $x2$. Alors pour toutes les fonctions $P$ des éléments $_z724$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $_z725$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2$ et $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $x1$, pour toutes les fonctions $_H2$ des éléments $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $_x_419$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $x1$ et $m$ et des fonctions $_x_421$ des éléments $_z725$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2$ et $m$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $m$ et des éléments $_z725$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2$ et $matita_arithmetics_nat.S$ appliqué à $m$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_nat.S$ appliqué à $m$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $x2$.\nassistant\n", "label": "axiom le_inv_ind (x1 x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_Hterm : cic.Term cic.prop (matita_arithmetics_nat.le x1 x2)) (P : (_z724 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop) (_H1 : (_z725 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2 x1)) -> cic.Term cic.prop (P x1)) (_H2 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_419 : cic.Term cic.prop (matita_arithmetics_nat.le x1 m)) -> (_x_421 : (_z725 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2 m)) -> cic.Term cic.prop (P m)) -> (_z725 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2 (matita_arithmetics_nat.S m))) -> cic.Term cic.prop (P (matita_arithmetics_nat.S m))) : cic.Term cic.prop (P x2)", "predict": "axiom le_inv_ind (x1 x2 : matita_arithmetics_nat.nat) (Hterm : cic.Term (matita_arithmetics_nat.le x1 x2)) (P : ∀ z724 : cic.Term (univs.Type0) × matita_arithmetics_nat.nat, cic.Univ (cic.prop)) (H1 : ∀ z725 : cic.Term (cic.prop) × matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_arithmetics_nat.nat) x2 x1, P (x1)) (H2 : ∀ m : cic.Term (univs.Type0) × matita_arithmetics_nat.nat, ∀ _x_419 : cic.Term (cic.prop) × matita_arithmetics_nat.le x1 m, ∀ _x_421 : cic.Term (cic.prop) × matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_arithmetics_nat.nat) x2 m, ∀ _z725 : cic.Term (cic.prop) × matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_arithmetics_nat.nat) x2 m, P (matita_arithmetics_nat.S m)) : P x2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nLet_clause_10332. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $le_n$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$. Alors pour tous les éléments $x2515$ et $x2516$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2515$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $x2516$ et $matita_arithmetics_div_and_mod.div$ appliqué à $x2515$ et $x2516$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $x2515$ et $x2516$.\nassistant\n", "label": "Axiom let_clause_10332 : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall le_n : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))))) n), forall x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516))) .", "predict": "Axiom clause_10332 : forall n : cic.Term : univs.Type0 & matita_arithmetics_nat.nat, forall le_n : cic.Term : cic.prop & matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O))))) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O))))))) n) -> forall x2515 : cic.Term : univs.Type0 & matita_arithmetics_nat.nat, forall x2516 : cic.Term : univs.Type0 & matita_arithmetics_nat.nat, cic.Term : cic.prop & matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516) (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nP_ord_to_exp1. Let $p$ and $n$ and $q$ and $r$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $p$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.p_ord$ applied to $n$ and $p$ and $matita_basics_types.mk_Prod$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $q$ and $r$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.And$ applied to $matita_basics_logic.Not$ applied to $matita_arithmetics_primes.divides$ applied to $p$ and $r$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_exp.exp$ applied to $p$ and $q$ and $r$.\nassistant\n", "label": "p_ord_to_exp1 : p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> q : cic.Term univs.Type0 matita_arithmetics_nat.nat -> r : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> __2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord n p) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat q r)) -> cic.Term cic.prop (matita_basics_logic.And (matita_basics_logic.Not (matita_arithmetics_primes.divides p r)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.times (matita_arithmetics_exp.exp p q) r))) .", "predict": "p_ord_to_exp1 : (p : Elem (Term (univs Type0))) -> (n : Elem (nat (matita_arithmetics_nat))) -> (q : Elem (Term (cic prop))) -> (r : Elem (Term (cic prop))) -> Proof (forall (x : Elem (Term (cic prop))) (forall (y : Elem (nat (matita_arithmetics_nat))) (forall (z : Elem (Term (cic prop))) (forall (w : Elem (Term (cic prop))) (and (not (divides (p) (r))) (eq (lift (univs Type0) (univs Type2)) (prod (nat (matita_arithmetics_nat)) (nat (matita_arithmetics_nat)))) (p_ord (n) (p)) (eq (mk_Prod (nat (matita_arithmetics_nat)) (nat (matita_arithmetics_nat))) (q) (r)))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nExists_add. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $P$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $l1$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$. Alors pour tous les éléments $x$ de $cic.Term$ de $univs.Type0$ et de $A$, pour tous les éléments $l2$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.Exists$ appliqué à $A$ et $P$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l1$ et $l2$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_lists_list.Exists$ appliqué à $A$ et $P$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l1$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $x$ et $l2$.\nassistant\n", "label": "Exists_add : A : cic.Univ univs.Type0 -> P : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A) -> x : cic.Term univs.Type0 A -> l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A) -> __ : cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 l2)) -> cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 (matita_basics_lists_list.cons A x l2))) .", "predict": "exists_add : (A : Elem (univ cic.Univ) (Type0 univs)) -> (P : (x : Elem (cic.Term) (Type0 univs)) -> (A : Elem (cic.Univ) (cic.prop))) -> (l1 : Elem (cic.Term) (Type0 univs) * (list (matita_basics_lists_list) A)) -> Proof (forall (x : Elem (cic.Term) (Type0 univs) * A) (forall (l2 : Elem (cic.Term) (Type0 univs) * (list (matita_basics_lists_list) A)) (forall (__) : Elem (cic.Term) (cic.prop) * (Exists (matita_basics_lists_list) A) * P) (forall (__) : Elem (cic.Term) (cic.prop) * (matita_basics_lists_list.append) A (l1) (l2)) (cic.Term) (cic.prop) (Exists (matita_basics_lists_list) A) (P) (matita_basics_lists_list.append) A (l1) (matita_basics_lists_list.cons) A (x) (l2)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nACop_inv_ind. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $x2$ av $cic.Term$ av $univs.Type0$ och $x1$, för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1566$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $matita_arithmetics_bigops.op$ applicerat på $x1$ och $x2$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $x1$ och $x2$ och $aop$ och $b$ och $a$ och element $_z1567$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_arithmetics_bigops.mk_ACop$ applicerat på $x1$ och $x2$ och $aop$ och $_comm$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $x1$ och $x2$ och $aop$ och $_comm$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "axiom ACop_inv_ind (x1 : cic.Univ univs.Type0) (x2 : cic.Term univs.Type0 x1) (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) (P : (_z1566 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> cic.Univ cic.prop) (_H1 : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (_comm : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (matita_arithmetics_bigops.op x1 x2 aop a b) (matita_arithmetics_bigops.op x1 x2 aop b a))) -> (_z1567 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop x1 x2)) Hterm (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) : cic.Term cic.prop (P Hterm)", "predict": "axiom acop_inv_ind (x1 : Univ UnivType0) : ∀ x2 : Term UnivType0, ∀ Hterm : Term UnivType0, ∀ ACop : Aop (x1 x2), ∀ P : Prop (z1566 : Term UnivType0) (ACop x1 x2), ∀ aop : Aop (x1 x2), ∀ a : Prop (a : Term UnivType0) (x1), ∀ b : Prop (b : Term UnivType0) (x1), ∀ eq : Prop (eq : lift (univType0) (univType2)) (x1), ∀ op : Prop (op : Term UnivType0) (x1) (aop : Aop (x1 x2)) (comm : Prop (comm : a) (x1) (b) (x1)), ∀ z1567 : Prop (z1567 : Term UnivType0) (P (mk_ACop x1 x2 aop comm)) (P (ACop x1 x2)) (P (aop x1 x2)) (P (b x1)) (P (a x1)) (P (eq (lift (univType0) (univType2)) x1)) (P (op x1) (aop x1 x2)) (P (b x1)) (P (a x1)) (P (z1567)) (P (eq (lift (univType0) (univType2)) (mk_ACop x1 x2 aop comm))) (P (ACop x1 x2)) (P (aop x1 x2)) (P (comm a x1 b x1)) : Prop (P (Hterm))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nVoid_rect_CProp3_body. För alla funktioner $Q_$ från element $_x_491$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.void$ till element av $cic.Univ$ av $cic.prop$, för alla element $x_491$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.void$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_491$.\nassistant\n", "label": "Axiom void_rect_CProp3_body : forall Q_ : ((_x_491 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ cic.prop), forall x_491 : cic.Term univs.Type0 matita_basics_types.void, cic.Term cic.prop (Q_ x_491) .", "predict": "Axiom void_rect_CProp3_body : forall Q : void -> univ, forall x_491 : Term Type0, Prop (Q x_491) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nLet_clause_73. Soient $n$ et $m$ et $p$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posp$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $p$. Soient $x134$ et $x135$ et $x136$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.plus$ appliqué à $x134$ et $matita_arithmetics_nat.plus$ appliqué à $x135$ et $x136$ et $matita_arithmetics_nat.plus$ appliqué à $x135$ et $matita_arithmetics_nat.plus$ appliqué à $x134$ et $x136$.\nassistant\n", "label": "let_clause_73 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> posp : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p) -> x134 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> x135 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> x136 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.plus x134 (matita_arithmetics_nat.plus x135 x136)) (matita_arithmetics_nat.plus x135 (matita_arithmetics_nat.plus x134 x136))) .", "predict": "let_clause_73 : (n : Elem (Term (Type (univs)) (nat (matita_arithmetics))) -> m : Elem (Term (Type (univs)) (nat (matita_arithmetics))) -> p : Elem (Term (Type (univs)) (nat (matita_arithmetics))) -> posp : Elem (Term (prop (matita_arithmetics))) (Lt (O (matita_arithmetics)) p) -> x134 : Elem (Term (Type (univs)) (nat (matita_arithmetics))) -> x135 : Elem (Term (Type (univs)) (nat (matita_arithmetics))) -> x136 : Elem (Term (Type (univs)) (nat (matita_arithmetics))) -> Proof (Eq (lift (Type (univs)) (Type (univs)) (nat (matita_arithmetics))) (plus (plus x134 (plus x135 x136)) (plus x135 (plus x134 x136)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nAop_inv_rect_Type4. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$. Då för alla funktioner $P$ från element $_z1506$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type4$, för alla funktioner $_H1$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $a$ och $x2$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs", "label": "Axiom Aop_inv_rect_Type4 : forall x1 : cic.Univ univs.Type0, forall x2 : cic.Term univs.Type0 x1, forall Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2), forall P : ((_z1506 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> cic.Univ univs.Type4), forall _H1 : ((op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1507 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type4 (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))), cic.Term univs.Type4 (P Hterm) .", "predict": ".Type0$ och $x1$ och element $c$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat sur $a$ et $b$ et $c$, $P$ är en bijektion."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nLet_upper_bound1. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $univs.Type0$ et $matita_arithmetics_nat.nat$.\nassistant\n", "label": "postulate let_upper_bound1 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat", "predict": "postulate let_upper_bound1 : (n : cic.Term univs.Type0) -> (n : matita_arithmetics_nat.nat)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nRange_rect_Type4_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $Q_$ from elements $_x_917$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type4$, for all functions $_H_mk_range$ from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_917$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_917$.\nassistant\n", "label": "Axiom range_rect_Type4_body : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_917 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type4), forall _H_mk_range : ((_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))), forall x_917 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A), cic.Term univs.Type4 (Q_ x_917) .", "predict": "Axiom range_rect_Type4_body : forall A : Univ, (forall x_917 : Term Type0, forall (r : range A) : Univ, forall H : enum (x : Type0) : nat -> Term Type0, A, upto : nat, filter : (x : Type0) : nat -> bool -> Term Type0, Q : (x_917 : Term Type0) -> range A, (forall x_917 : Term Type0, matita_arithmetics_bigops.range A) -> Term Type4, Q (matita_arithmetics_bigops.mk_range A (enum x : Type0) (upto : nat) (filter : (x : Type0) : nat -> bool)) x_917) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nSum_inv_ind. Soient $x1$ et $x2$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $x1$ et $x2$. Soit $P$ une fonction des éléments $_z972$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H1$ une fonction des éléments $x_522$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_z973$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sum$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.inl$ appliqué à $x1$ et $x2$ et $x_522$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.inl$ appliqué à $x1$ et $x2$ et $x_522$. Soit $_H2$ une fonction des éléments $x_523$ de $cic.Term$ de $univs.Type0$ et de $x2$ et des éléments $_z973$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sum$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.inr$ appliqué à $x1$ et $x2$ et $x_523$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.inr$ appliqué à $x1$ et $x2$ et $x_523$. Alors $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "postulate Sum_inv_ind : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> (P : (_z972 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (x_522 : cic.Term univs.Type0 x1) -> (_z973 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inl x1 x2 x_522))) -> cic.Term cic.prop (P (matita_basics_types.inl x1 x2 x_522))) -> (_H2 : (x_523 : cic.Term univs.Type0 x2) -> (_z973 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inr x1 x2 x_523))) -> cic.Term cic.prop (P (matita_basics_types.inr x1 x2 x_523))) -> cic.Term cic.prop (P Hterm)", "predict": "postulate sum_inv_ind : (x1 : Univ Type0) -> (x2 : Univ Type0) -> Hterm : Term (Sum x1 x2) -> (P : (z972 : Term (Sum x1 x2)) -> Univ (prop)) -> (H1 : (x522 : Term Type0) -> (z973 : Term (prop)) -> Eq (lift Type0 Type2) (Sum x1 x2) Hterm (inl x1 x2) x522) -> (P (inl x1 x2) x522) -> (H2 : (x523 : Term Type0) -> (z973 : Term (prop)) -> Eq (lift Type0 Type2) (Sum x1 x2) Hterm (inr x1 x2) x523) -> (P (inr x1 x2) x523)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nMk_Prod. För alla element $A$ och $B$ av $cic.Univ$ av $univs.Type0$, för alla element $_fst$ av $cic.Term$ av $univs.Type0$ och $A$, för alla element $_snd$ av $cic.Term$ av $univs.Type0$ och $B$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$.\nassistant\n", "label": "axiom mk_Prod (A B : cic.Univ univs.Type0) (_fst : cic.Term univs.Type0 A) (_snd : cic.Term univs.Type0 B) : cic.Term univs.Type0 (matita_basics_types.Prod A B)", "predict": "axiom mk_Prod (A B : univs.Type0) (fst : cic.Term A) (snd : cic.Term B) : cic.Term (matita_basics_types.Prod A B)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nProd_rect_CProp1. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_712$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_Prod$ une fonction des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $_A$ et $_B$ et $_fst$ et $_snd$. Alors pour tous les éléments $x_712$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_712$.\nassistant\n", "label": "axiom Prod_rect_CProp1 (_A _B : cic.Univ univs.Type0) (Q_ : (_x_712 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ cic.prop) (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) (x_712 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) : cic.Term cic.prop (Q_ x_712)", "predict": "axiom prod_rect_CProp1 (A B : Univ Type0) (Q : ∀ x : Term Type0, Prod A B → Prop) : ∀ x : Prod A B, Prop → Q x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nSig_rect_CProp2. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_684$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_Sig$ be a function from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $_f$ applied to $pi1$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_Sig$ applied to $A$ and $_f$ and $pi1$ and $_pi2$. Then for all elements $x_684$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_684$.\nassistant\n", "label": "Sig_rect_CProp2 : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> Q_ : (_x_684 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) -> cic.Univ cic.prop) -> _H_mk_Sig : (pi1 : cic.Term univs.Type0 A -> _pi2 : cic.Term cic.prop (_f pi1) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> x_684 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) -> cic.Term cic.prop (Q_ x_684) .", "predict": "sig_rect_CProp2 : (A : Elem (univs Type0)) -> (f : Term (univs Type0) -> A -> Univ (cic prop)) -> (Q_ : (x_684 : Term (univs Type0)) -> Sig (A) (f x_684) -> Univ (cic prop)) -> (H_mk_Sig : (pi1 : Term (univs Type0)) -> A -> (pi2 : Term (cic prop)) -> (f pi1) -> Term (cic prop) -> Q_ (mk_Sig A f pi1) pi2) -> Proof (forall (x_684 : Term (univs Type0)) (Sig (A) (f x_684)) (cic Term (cic prop) (Q_ x_684))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nDiv_mod_spec_to_eq2. Soient $a$ et $b$ et $q$ et $r$ et $q1$ et $r1$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $a$ et $b$ et $q$ et $r$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $a$ et $b$ et $q1$ et $r1$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $r$ et $r1$.\nassistant\n", "label": "axiom div_mod_spec_to_eq2 (a b q r q1 r1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q r)) (__1 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q1 r1)) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) r r1)", "predict": "axiom div_mod_spec_to_eq2 (a b q r q1 r1 : Term Type0 Nat) (x : div_mod_spec a b q r) (x1 : div_mod_spec a b q1 r1) : lift Type0 Type2 Nat r = r1"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nProd. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour tous les éléments $_xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $nil$, pour tous les éléments $_x_969$ et $_x_970$ de $cic.Term$ de $univs.Type0$ et de $A$, $cic.Term$ tient pour $univs.Type0$ et $A$.\nassistant\n", "label": "prod : A : cic.Univ univs.Type0 -> nil : cic.Term univs.Type0 A -> _xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A nil) -> _x_969 : cic.Term univs.Type0 A -> _x_970 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A .", "predict": "prod (forall (A : univs.Type0) (nil : cic.Term) (A) (forall (_xxx : cic.Term) (matita_arithmetics_bigops.Dop A nil) (forall (_x_969 : cic.Term) (forall (_x_970 : A) (cic.Term univs.Type0 A))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nDPair_inv_rect_CProp4. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x2$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$. Alors pour toutes les fonctions $P$ des éléments $_z1140$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $x2$ appliqué à $dpi1$ et des éléments $_z1141$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "DPair_inv_rect_CProp4 : x1 : cic.Univ univs.Type0 -> x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) -> Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) -> P : (_z1140 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) -> cic.Univ cic.prop) -> _H1 : (dpi1 : cic.Term univs.Type0 x1 -> _dpi2 : cic.Term univs.Type0 (x2 dpi1) -> _z1141 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) -> cic.Term cic.prop (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P Hterm) .", "predict": "dpair_inv_rect_CProp4 : (x1 : Elem (univs : Univ) (Type0 : Type)) -> (x2 : (x : Elem (cic : Term) (Type0 : Type)) -> Elem (univs : Univ) (Type0 : Type)) -> (Hterm : Elem (cic : Term) (Type0 : Type) (matita_basics_types : DPair) (x1 : Elem (univs : Univ) (Type0 : Type)) (x2 : Elem (univs : Univ) (Type0 : Type))) -> (P : (z1140 : Elem (cic : Term) (Type0 : Type)) -> (H : DPair (x1 : Elem (univs : Univ) (Type0 : Type)) (x2 : Elem (univs : Univ) (Type0 : Type))) -> Elem (cic : Univ) (prop : Type)) -> (H1 : (dpi1 : Elem (cic : Term) (Type0 : Type)) -> (x1 : Elem (univs : Univ) (Type0 : Type)) -> (dpi2 : Elem (cic : Term) (Type0 : Type)) -> (x2 : Elem (univs : Univ) (Type0 : Type)) -> (z1141 : Elem (cic : prop) (Type0 : Type)) -> (matita_basics_logic : eq (cic : lift (univs : Type0) (univs : Type2)) (matita_basics_types : DPair) (x1 : Elem (univs : Univ) (Type0 : Type)) (x2 : Elem (univs : Univ) (Type0 : Type))) -> (Hterm : Elem (cic : Term) (Type0 : Type) (matita_basics_types : DPair) (x1 : Elem (univs : Univ) (Type0 : Type)) (x2 : Elem (univs : Univ) (Type0 : Type))) -> (P : (H : DPair (x1 : Elem (univs : Univ) (Type0 : Type)) (x2 : Elem (univs : Univ) (Type0 : Type))) -> (dpi1 : Elem (cic : Term) (Type0 : Type)) -> (x1 :"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nRange_inv_rect_Type4. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $x1$. Soit $P$ une fonction des éléments $_z1638$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $x1$ à des éléments de $cic.Univ$ de $univs.Type4$. Soit $_H1$ une fonction des fonctions $_enum$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_upto$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_filter$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ et des éléments $_z1639$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.range$ appliqué à $x1$ et $Hterm$ et $matita_arithmetics_bigops.mk_range$ appliqué à $x1$ et $_enum$ et $_upto$ et $_filter$ à des éléments de $cic.Term$ de $univs.Type4$ et de $P$ appliqué à $matita_arithmetics_bigops.mk_range$ appliqué à $x1$ et $_enum$ et $_upto$ et $_filter$. Alors $cic.Term$ tient pour $univs.Type4$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "range_inv_rect_Type4 : x1 : cic.Univ univs.Type0 -> Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1) -> P : (_z1638 : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1) -> cic.Univ univs.Type4) -> _H1 : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 x1) -> _upto : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> _z1639 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.range x1)) Hterm (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter)) -> cic.Term univs.Type4 (P (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter))) -> cic.Term univs.Type4 (P Hterm) .", "predict": "range_inv_rect_Type4 : (x1 : Elem (univs Type0) (cic Univ)) -> (Hterm : Elem (cic Term) (matita_arithmetics_bigops range x1)) -> (P : (z1638 : Elem (cic Term) (univs Type0)) -> (matita_arithmetics_bigops range x1) -> Elem (cic Univ) (univs Type4)) -> (H1 : (enum : (x : Elem (cic Term) (univs Type0)) -> (nat : Elem (matita_arithmetics_nat Nat)) -> Elem (cic Term) (univs Type0)) -> (x1 : Elem (cic Term) (univs Type0)) -> (upto : (x : Elem (cic Term) (univs Type0)) -> (nat : Elem (matita_arithmetics_nat Nat)) -> Elem (cic Term) (univs Type0)) -> (filter : (x : Elem (cic Term) (univs Type0)) -> (nat : Elem (matita_arithmetics_nat Nat)) -> Elem (cic Term) (univs Type0)) -> (z1639 : Elem (cic Term) (cic prop)) -> (eq : (cic lift (univs Type0) (univs Type2)) (matita_arithmetics_bigops range x1) (Hterm)) -> (matita_arithmetics_bigops mk_range x1) -> (enum) -> (upto) -> (filter)) -> Elem (cic Term) (univs Type4) -> Proof (P (matita_arithmetics_bigops mk_range x1) (enum) (upto) (filter)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nAop_inv_rect_Type0. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be an element of $cic.Term$ of $univs.Type0$ and $x1$. Then for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1530$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type0$, for all functions $_H1$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $x2$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements", "label": "axiom Aop_inv_rect_Type0 (x1 : cic.Univ univs.Type0) (x2 : cic.Term univs.Type0 x1) (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) (P : (_z1530 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> cic.Univ univs.Type0) (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1531 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type0 (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) : cic.Term univs.Type0 (P Hterm)", "predict": " of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_id$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $a$ and $b$ and $c$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_swap$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_left_distrib$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_right_distrib$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_distrib$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_neg$ from elements $a$ of $cic.Term$ of $univ"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nDivides_times. Let $n$ and $m$ and $p$ and $q$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $n$ and $p$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $m$ and $q$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $matita_arithmetics_nat.times$ applied to $n$ and $m$ and $matita_arithmetics_nat.times$ applied to $p$ and $q$.\nassistant\n", "label": "axiom divides_times (n m p q : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_primes.divides n p)) (__1 : cic.Term cic.prop (matita_arithmetics_primes.divides m q)) : cic.Term cic.prop (matita_arithmetics_primes.divides (matita_arithmetics_nat.times n m) (matita_arithmetics_nat.times p q))", "predict": "axiom divides_times (n m p q : Term Type0 : Nat) (x : divides n p) (y : divides m q) : divides (times n m) (times p q)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nOption_rect_CProp1. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_630$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_None$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$. Låt $_H_Some$ vara en funktion från element $x_631$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_631$. Då för alla element $x_630$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_630$.\nassistant\n", "label": "postulate option_rect_CProp1 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_630 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop) -> (_H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_631 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_631))) -> (x_630 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term cic.prop (Q_ x_630)", "predict": "postulate option_rect_CProp1 : (A : Univ Type0) -> (Q : (x : Term Type0) -> Option A -> Univ prop) -> (H_None : Term prop (Q None A)) -> (H_Some : (x : Term Type0) -> A -> Term prop (Q (Some x) A)) -> all (Term Type0) (Option A) (prop (Q _))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nAop_inv_rect_Type2. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $x2$ av $cic.Term$ av $univs.Type0$ och $x1$, för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1518$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type2$, för alla funktioner $_H1$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $a$ och $x2$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och", "label": "postulate Aop_inv_rect_Type2 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (P : (_z1518 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> cic.Univ univs.Type2) -> (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1519 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type2 (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type2 (P Hterm)", "predict": " $x1$ och element $c$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ och funktioner $_assocr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $c$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nLstar_ind. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $_R$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $B$. Let $Q_$ be a function from elements $x_1233$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $x_1232$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1231$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $_x_1234$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $_R$ and $x_1233$ and $x_1232$ and $x_1231$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_lstar_O$ be a function from elements $b$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_nat.O$ and $b$ and $b$ and $matita_arithmetics_lstar.lstar_O$ applied to $B$ and $_R$ and $b$. Let $_H_lstar_S$ be a function from elements $b1$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1236$ of $cic.Term$ of $cic.prop$ and $_R$ applied to $b1$ and $b$ and elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $b2$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1235$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $_R$ and $l$ and $b$ and $b2$ and elements $_x_1238$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $l$ and $b$ and $b2$ and $x_1235$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_nat.plus$ applied to $l$ and $", "label": "axiom lstar_ind (B : cic.Univ univs.Type0) (_R : cic.Term univs.Type0 (matita_basics_relations.relation B)) (Q_ : (x_1233 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_1232 : cic.Term univs.Type0 B) -> (x_1231 : cic.Term univs.Type0 B) -> (_x_1234 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B _R x_1233 x_1232 x_1231)) -> cic.Univ cic.prop) (_H_lstar_O : (b : cic.Term univs.Type0 B) -> cic.Term cic.prop (Q_ matita_arithmetics_nat.O b b (matita_arithmetics_lstar.lstar_O B _R b))) (_H_lstar_S : (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (x_1236 : cic.Term cic.prop (_R b1 b)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b2 : cic.Term univs.Type0 B) -> (x_1235 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B _R l b b2)) -> (_x_1238 : cic.Term cic.prop (Q_ l b b2 x_1235)) -> cic.Term cic.prop (Q_ (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S mat", "predict": "b$ and $b2$. Then, $lstar_ind : (B : Elem Univ Type0) → (R : Elem Term relation Type0) → (Q : x1233 : Elem Term Type0 → Nat → x1232 : Elem Term Type0 → B → x1231 : Elem Term Type0 → B → x1234 : Elem Term prop → Lstar B R x1233 x1232 x1231 x1234) → (b : Elem Term Type0 → B) → (b1 : Elem Term Type0 → B) → (x1236 : Elem Term prop) → (x1235 : Elem Term prop) → (l : Elem Term Nat) → (b2 : Elem Term Type0 → B) → (x1238 : Elem Term prop) → (x1237 : Elem Term prop) → Proof (lstar_ind B R Q b b1 x1236 x1235 l b2 x1238 x1237) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nLe_n_Sn. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $n$.\nassistant\n", "label": "axiom le_n_Sn (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_arithmetics_nat.le n (matita_arithmetics_nat.S n))", "predict": "axiom le_n_S (n : cic.Term univs.Type0) (x : matita_arithmetics_nat.nat) : cic.prop (n ≤ matita_arithmetics_nat.S n)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nVoid_rect_CProp2. Pour toutes les fonctions $Q_$ des éléments $_x_492$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.void$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $x_492$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.void$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_492$.\nassistant\n", "label": "axiom void_rect_CProp2 (Q_ : (_x_492 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ cic.prop) (x_492 : cic.Term univs.Type0 matita_basics_types.void) : cic.Term cic.prop (Q_ x_492)", "predict": "axiom void_rect_CProp2 (Q : ∀ x : univs.Type0 × matita_basics_types.void, cic.prop) (x : univs.Type0 × matita_basics_types.void) : cic.Term (Q x)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nOption_rect_CProp1_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $Q_$ from elements $_x_630$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$, for all elements $_H_None$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.None$ applied to $_A$, for all functions $_H_Some$ from elements $x_631$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.Some$ applied to $_A$ and $x_631$, for all elements $x_630$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_630$.\nassistant\n", "label": "axiom option_rect_CProp1_body (_A : cic.Univ univs.Type0) (Q_ : (_x_630 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop) (_H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A))) (_H_Some : (x_631 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_631))) (x_630 : cic.Term univs.Type0 (matita_basics_types.option _A)) : cic.Term cic.prop (Q_ x_630)", "predict": "axiom option_rect_CProp1_body (A : Univ Type0) : ∀ Q : Term (option A) → prop, ∀ H_None : prop (Q None A), ∀ H_Some : (x : Term Type0) → A → prop (Q (Some A) x) → ∀ x : Term Type0, prop (Q x)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nTo_max. Let $i$ and $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $i$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $m$ and $i$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.max$ applied to $n$ and $m$ and $i$.\nassistant\n", "label": "Axiom to_max : forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.le n i), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.le m i), cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.max n m) i) .", "predict": "Axiom to_max : forall i : univs.Type0, forall n : matita_arithmetics_nat.nat, forall m : matita_arithmetics_nat.nat, forall __ : cic.Term (cic.prop), forall __1 : cic.Term (cic.prop), (cic.Term (cic.prop) (matita_arithmetics_nat.le (matita_arithmetics_nat.max n m) i)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nPermut_mod. Pour tous les éléments $p$ et $a$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.prime$ appliqué à $p$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $matita_arithmetics_primes.divides$ appliqué à $p$ et $a$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_permutation.permut$ appliqué à la fonction qui envoie $n$ à $matita_arithmetics_div_and_mod.mod$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $n$ et $p$ et $matita_arithmetics_nat.pred$ appliqué à $p$.\nassistant\n", "label": "permut_mod : p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_primes.prime p) -> __1 : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides p a)) -> cic.Term cic.prop (matita_arithmetics_permutation.permut (n : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_arithmetics_div_and_mod.mod (matita_arithmetics_nat.times a n) p) (matita_arithmetics_nat.pred p)) .", "predict": "permut_mod : (p : Elem (Term (Type0 (univs))) -> (a : Elem (nat (matita_arithmetics))) -> (x : Elem (Prop (matita_arithmetics_primes))) -> (p : Elem (Prime (matita_arithmetics_primes))) -> (y : Elem (Prop (matita_basics_logic))) -> (not (divides (p) (a))) -> Proof (forall (n : Elem (Term (Prop (matita_arithmetics)))) (permut (f (n) (mod (times (a) n) p)) (pred p))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nStreicherK. Soit $T$ un élément de $cic.Univ$ de $univs.Type2$. Alors pour tous les éléments $t$ de $cic.Term$ de $univs.Type2$ et de $T$, pour toutes les fonctions $P$ des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $T$ et $t$ et $t$ à des éléments de $cic.Univ$ de $univs.Type2$, pour tous les éléments $__$ de $cic.Term$ de $univs.Type2$ et de $P$ appliqué à $matita_basics_logic.refl$ appliqué à $T$ et $t$, pour tous les éléments $p$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $T$ et $t$ et $t$, $cic.Term$ tient pour $univs.Type2$ et $P$ appliqué à $p$.\nassistant\n", "label": "axiom streicherK (T : cic.Univ univs.Type2) (t : cic.Term univs.Type2 T) (P : (__ : cic.Term cic.prop (matita_basics_logic.eq T t t)) -> cic.Univ univs.Type2) (__ : cic.Term univs.Type2 (P (matita_basics_logic.refl T t))) (p : cic.Term cic.prop (matita_basics_logic.eq T t t)) : cic.Term univs.Type2 (P p)", "predict": "axiom streicherK (T : univs.Type2) : ∀ t : cic.Term univs.Type2, ∀ P : ∀ __ : cic.Term univs.Type2, matita_basics_logic.eq T t → ∀ __ : cic.Term univs.Type2, P (matita_basics_logic.refl T t) → ∀ p : cic.Term univs.Type2, P (matita_basics_logic.eq T t)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nACop_rect_CProp5_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Then for all functions $Q_$ from elements $_x_905$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_ACop$ from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_905$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_905$.\nassistant\n", "label": "ACop_rect_CProp5_body : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_905 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Univ cic.prop) -> _H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> _comm : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> x_905 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Term cic.prop (Q_ x_905) .", "predict": "acop_rect_cprop5_body : (A : univs.Type0) -> cic.Term (univs.Type0) -> Proof (forall (Q_ : (x_905 : cic.Term (univs.Type0)) -> matita_arithmetics_bigops.ACop A _nil) (forall (aop : cic.Term (univs.Type0)) (forall (a : cic.Term (univs.Type0)) (forall (b : cic.Term (univs.Type0)) (forall (x : cic.prop) (eq (lift (univs.Type0) (univs.Type2)) (A (matita_arithmetics_bigops.op A _nil) aop a) (b (matita_arithmetics_bigops.op A _nil) aop)) (Q_ (mk_ACop A _nil aop) (comm a A b)))) (forall (x_905 : cic.Term (univs.Type0)) (matita_arithmetics_bigops.ACop A _nil)) (forall (x : cic.prop) (Q_ x)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nEx2_ind_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_P$ and $_Q$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_274$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex2$ applied to $A$ and $_P$ and $_Q$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_ex2_intro$ be a function from elements $x$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $x_276$ of $cic.Term$ of $cic.prop$ and $_P$ applied to $x$ and elements $x_275$ of $cic.Term$ of $cic.prop$ and $_Q$ applied to $x$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_logic.ex2_intro$ applied to $A$ and $_P$ and $_Q$ and $x$ and $x_276$ and $x_275$. Then for all elements $x_274$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex2$ applied to $A$ and $_P$ and $_Q$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_274$.\nassistant\n", "label": "ex2_ind_body : A : cic.Univ univs.Type0 -> _P : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> _Q : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> Q_ : (_x_274 : cic.Term cic.prop (matita_basics_logic.ex2 A _P _Q) -> cic.Univ cic.prop) -> _H_ex2_intro : (x : cic.Term univs.Type0 A -> x_276 : cic.Term cic.prop (_P x) -> x_275 : cic.Term cic.prop (_Q x) -> cic.Term cic.prop (Q_ (matita_basics_logic.ex2_intro A _P _Q x x_276 x_275))) -> x_274 : cic.Term cic.prop (matita_basics_logic.ex2 A _P _Q) -> cic.Term cic.prop (Q_ x_274) .", "predict": "ex2_ind_body : (A : Elem (univs Type0)) -> (P : (x : Elem (cic Term)) -> (A : Elem (cic Univ)) -> Prop) -> (Q : (x : Elem (cic Term)) -> (A : Elem (cic Univ)) -> (P : (x : Elem (cic Term)) -> (A : Elem (cic Univ)) -> Prop) -> Prop) -> (x_274 : Elem (cic Term)) -> (ex2 : A : Elem (cic Univ)) -> (P : (x : Elem (cic Term)) -> (A : Elem (cic Univ)) -> Prop) -> (Q : (x : Elem (cic Term)) -> (A : Elem (cic Univ)) -> (P : (x : Elem (cic Term)) -> (A : Elem (cic Univ)) -> Prop) -> Prop) -> Proof (forall (x_274 : Elem (cic Term)) (ex2 : A : Elem (cic Univ)) (P : (x : Elem (cic Term)) -> (A : Elem (cic Univ)) -> Prop) (Q : (x : Elem (cic Term)) -> (A : Elem (cic Univ)) -> (P : (x : Elem (cic Term)) -> (A : Elem (cic Univ)) -> Prop) -> Prop) (x : Elem (univs Type0)) (x_276 : Elem (cic Term)) (x_275 : Elem (cic Term)) (H_ex2_intro : (x : Elem (univs Type0)) -> (A : Elem (cic Univ)) -> (x_276 : Elem (cic Term)) -> (P : (x : Elem (cic Term)) -> (A : Elem (cic Univ)) -> Prop) -> (x_275 : Elem (cic Term)) -> (Q : (x : Elem (cic Term)) -> (A : Elem (cic Univ)) -> (P : (x : Elem (cic Term)) -> (A : Elem (cic Univ)) -> Prop) -> Prop) -> Proof (forall (x : Elem (cic Term)) (A : Elem (cic Univ)) (P : (x : Elem (cic Term)) -> (A :"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nExists_All. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $P$ och $Q$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.Exists$ applicerat på $A$ och $P$ och $l$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.All$ applicerat på $A$ och $Q$ och $l$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.ex$ applicerat på $A$ och funktionen som avbildar $x$ som $matita_basics_logic.And$ applicerat på $P$ applicerat på $x$ och $Q$ applicerat på $x$.\nassistant\n", "label": "postulate Exists_All : (A : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.Exists A P l)) -> (__1 : cic.Term cic.prop (matita_basics_lists_list.All A Q l)) -> cic.Term cic.prop (matita_basics_logic.ex A (\\ x : cic.Term univs.Type0 A -> matita_basics_logic.And (P x) (Q x)))", "predict": "postulate exists_all : (A : univs.Type0) -> (P Q : (x : Term univs.Type0) -> A -> Prop) -> (l : list (A : univs.Type0)) -> (x : Prop) -> (l : list (x : Prop)) -> all (A : univs.Type0) (Q : (x : Term univs.Type0) -> A -> Prop) (l : list (x : Prop)) -> ex (A : univs.Type0) (P : (x : Term univs.Type0) -> A -> Prop) (x : Prop) (l : list (x : Prop)) -> and (P x) (Q x)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nAop_rect_Type3_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_867$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type3$. Let $_H_mk_Aop$ be a function from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_arithmetics_bigops.mk_Aop$ applied to $A$ and", "label": "postulate Aop_rect_Type3_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_867 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ univs.Type3) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type3 (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_867 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Term univs.Type3 (Q_ x_867)", "predict": " $a$ and $b$ and $c$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nProd. Soient $s1$ et $s2$ des éléments de $Sort$. Soit $a$ un élément de $Univ$ de $s1$. Soit $b$ une fonction des éléments de $Term$ de $s1$ et de $a$ à des éléments de $Univ$ de $s2$. Alors $Univ$ tient pour $rule$ appliqué à $s1$ et $s2$.\nassistant\n", "label": "axiom prod (s1 s2 : Sort) (a : Univ s1) (b : Term s1 a -> Univ s2) : Univ (rule s1 s2)", "predict": "axiom prod (s1 s2 : Sort) (a : s1 → Univ) (b : ∀ t : Term s1, t → Univ s2) : Univ (rule s1 s2)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nP_ord_aux_Strue. Pour tous les éléments $n$ et $m$ et $p$ et $q$ et $r$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.O$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Prod$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_ord.p_ord_aux$ appliqué à $p$ et $matita_arithmetics_div_and_mod.div$ appliqué à $n$ et $m$ et $m$ et $matita_basics_types.mk_Prod$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.nat$ et $q$ et $r$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Prod$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_ord.p_ord_aux$ appliqué à $matita_arithmetics_nat.S$ appliqué à $p$ et $n$ et $m$ et $matita_basics_types.mk_Prod$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $q$ et $r$.\nassistant\n", "label": "axiom p_ord_aux_Strue (n m p q r : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod n m) matita_arithmetics_nat.O)) (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord_aux p (matita_arithmetics_div_and_mod.div n m) m) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat q r))) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord_aux (matita_arithmetics_nat.S p) n m) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat (matita_arithmetics_nat.S q) r))", "predict": "axiom p_ord_aux_Strue (n m p q r : Term Type0) (x : Prop) (y : Eq (lift Type0 Type2 nat) (mod n m)) (z : Eq (lift Type0 Type2 nat) (div n m)) (w : Eq (lift Type0 Type2 nat) (n)) (x1 : Prop) (y1 : Eq (lift Type0 Type2 Prod nat nat) (mk_Prod (nat) (nat))) (z1 : p_ord_aux p (div n m) m (mk_Prod (nat) (nat))) (w1 : Eq (lift Type0 Type2 Prod nat nat) (mk_Prod (nat) (nat))) (x2 : Prop) (y2 : Eq (lift Type0 Type2 Prod nat nat) (mk_Prod (nat) (nat))) (z2 : p_ord_aux (S p) n m (mk_Prod (nat) (nat))) (w2 : Eq (lift Type0 Type2 Prod nat nat) (mk_Prod (nat) (nat))) : Eq (lift Type0 Type2 Prod nat nat) (mk_Prod (nat) (nat))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nDivides_inv_ind. Let $x1$ and $x2$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $Hterm$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z2006$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $q$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $x_1193$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x2$ and $matita_arithmetics_nat.times$ applied to $x1$ and $q$ and elements $_z2007$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_arithmetics_primes.divides$ applied to $x1$ and $x2$ and $Hterm$ and $matita_arithmetics_primes.quotient$ applied to $x1$ and $x2$ and $q$ and $x_1193$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_primes.quotient$ applied to $x1$ and $x2$ and $q$ and $x_1193$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "axiom divides_inv_ind (x1 x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) (Hterm : cic.Term cic.prop (matita_arithmetics_primes.divides x1 x2)) (P : (_z2006 : cic.Term cic.prop (matita_arithmetics_primes.divides x1 x2)) -> cic.Univ cic.prop) (_H1 : (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_1193 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2 (matita_arithmetics_nat.times x1 q))) -> (_z2007 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_arithmetics_primes.divides x1 x2)) Hterm (matita_arithmetics_primes.quotient x1 x2 q x_1193))) -> cic.Term cic.prop (P (matita_arithmetics_primes.quotient x1 x2 q x_1193))) : cic.Term cic.prop (P Hterm)", "predict": "axiom divides_inv_ind (x1 x2 : Term Type0 nat) (Hterm : divides x1 x2) (P : (q : Type0 nat) → (x_1193 : prop) → Eq (lift Type0 Type2 nat) (times x1 q)) (H1 : q x_1193) : prop) (H2 : Eq (quotient x1 x2) (times x1 q)) (H3 : Eq (quotient x1 x2) (lift prop Type2)) (H4 : Eq (divides x1 x2) (quotient x1 x2)) : prop) (H5 : Eq (divides x1 x2) (quotient x1 x2)) (H6 : Eq (divides x1 x2) (quotient x1 x2)) (H7 : Eq (divides x1 x2) (quotient x1 x2)) : prop) (H8 : Eq (divides x1 x2) (quotient x1 x2)) (H9 : Eq (divides x1 x2) (quotient x1 x2)) (H10 : Eq (divides x1 x2) (quotient x1 x2)) (H11 : Eq (divides x1 x2) (quotient x1 x2)) (H12 : Eq (divides x1 x2) (quotient x1 x2)) (H13 : Eq (divides x1 x2) (quotient x1 x2)) (H14 : Eq (divides x1 x2) (quotient x1 x2)) (H15 : Eq (divides x1 x2) (quotient x1 x2)) (H16 : Eq (divides x1 x2) (quotient x1 x2)) (H17 : Eq (divides x1 x2) (quotient x1 x2)) (H18 : Eq (divides x1 x2) (quotient x1 x2)) (H19 : Eq (divides x1 x2) (quotient x1 x2)) (H20 : Eq (divides x1 x2) (quotient x1 x2)) (H21 : Eq (divides x1 x2) (quotient x1 x2))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nAop_inv_rect_Type2. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z1518$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type2$. Låt $_H1$ vara en funktion från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $a$ och $x2$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $un", "label": "Axiom Aop_inv_rect_Type2 : forall x1 : cic.Univ univs.Type0, forall x2 : cic.Term univs.Type0 x1, forall Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2), forall P : ((_z1518 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> cic.Univ univs.Type2), forall _H1 : ((op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1519 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type2 (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))), cic.Term univs.Type2 (P Hterm) .", "predict": "ivs.Type0$ och $x1$ och element $c$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat sur $a$ sur $b$ sur $c$ et $P$ et $Hterm$ et $x2$ et $x1$ et $x1$ et $x2$ et $x2$ et $x1$ et $x1$ et $x2$ et $x2$ et $x1$ et $x1$ et $x2$ et $x2$ et $x1$ et $x1$ et $x2$ et $x2$ et $x1$ et $x1$ et $x2$ et $x2$ et $x1$ et $x1$ et $x2$ et $x2$ et $x1$ et $x1$ et $x2$ et $x2$ et $x1$ et $x1$ et $x2$ et $x2$ et $x1$ et $x1$ et $x2$ et $x2$ et $x1$ et $x1$ et $x2$ et $x2$ et $x1$ et $x1$ et $x2$ et $x2$ et $x1$ et $x1$ et $x2$ et $x2$ et $x1$ et $x1$ et $x2$ et $x2$ et $x1$ et $x1$ et $x2$ et $x2$ et $x1$ et $x1$ et $x2$ et $x2$ et $x1$ et $x1$ et $x2$ et $x2$ et $x1$ et $x1$ et $x2$ et $x2$ et $x1$ et $x1$ et $x2$ et $x2$ et $x1$ et $x1$ et $x2$ et $x2$ et $x1$ et $x1"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nLog_times1. Låt $p$ och $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Då för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_log.log$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_log.log$ applicerat på $p$ och $n$ och $matita_arithmetics_log.log$ applicerat på $p$ och $m$.\nassistant\n", "label": "Axiom log_times1 : forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall __2 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_log.log p (matita_arithmetics_nat.times n m)) (matita_arithmetics_nat.S (matita_arithmetics_nat.plus (matita_arithmetics_log.log p n) (matita_arithmetics_log.log p m)))) .", "predict": "Axiom log_times1 : forall p : univs.Type0, forall n : matita_arithmetics_nat.nat, forall m : matita_arithmetics_nat.nat, forall __ : matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.O)) p, forall __1 : matita_arithmetics_nat.lt (matita_arithmetics_nat.O) n, forall __2 : matita_arithmetics_nat.lt (matita_arithmetics_nat.O) m, matita_arithmetics_log.le (matita_arithmetics_log.log p (matita_arithmetics_nat.times n m)) (matita_arithmetics_log.log p n + matita_arithmetics_log.log p m) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nSameF_p_le. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $p$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, för alla funktioner $f$ och $g$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $A$, för alla element $n$ och $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $m$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_bigops.sameF_p$ applicerat på $m$ och $p$ och $A$ och $f$ och $g$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_bigops.sameF_p$ applicerat på $n$ och $p$ och $A$ och $f$ och $g$.\nassistant\n", "label": "postulate sameF_p_le : (A : cic.Univ univs.Type0) -> (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 A) -> (g : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 A) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le n m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_bigops.sameF_p m p A f g)) -> cic.Term cic.prop (matita_arithmetics_bigops.sameF_p n p A f g)", "predict": "postulate sameF_p_le : (A : Univ) -> (p : Term Type0 -> Nat -> Term Type0) -> (f : Term Type0 -> Nat -> Term Type0) -> (g : Term Type0 -> Nat -> Term Type0) -> (n : Term Type0) -> (m : Term Type0) -> (le : Nat -> Nat -> Prop) -> (sameF_p : (m : Nat) -> (p : Nat -> Prop) -> A -> f -> g) -> (sameF_p (n) (p) A f g)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nChecker. Let $__$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $univs.Type0$ and $matita_basics_bool.bool$.\nassistant\n", "label": "postulate checker : (__ : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) -> cic.Term univs.Type0 matita_basics_bool.bool", "predict": "postulate checker : (x : Term Type0 (list Nat)) : Term (Type0) (bool)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nTimes_mod. Soient $a$ et $b$ et $c$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $c$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $b$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $c$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $c$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $a$ et $b$.\nassistant\n", "label": "Axiom times_mod : forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall c : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O c), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O b), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod (matita_arithmetics_nat.times a c) (matita_arithmetics_nat.times b c)) (matita_arithmetics_nat.times c (matita_arithmetics_div_and_mod.mod a b))) .", "predict": "Axiom times_mod : forall a : univs.Type0, forall b : matita_arithmetics_nat.nat, forall c : matita_arithmetics_nat.nat, forall __ : cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O c), forall __1 : cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O b), cic.Term (cic.prop (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod (matita_arithmetics_nat.times a c) (matita_arithmetics_nat.times b c)) (matita_arithmetics_nat.times c (matita_arithmetics_div_and_mod.mod a b))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nOption_hd. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $_l$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_types.option$ applicerat på $A$.\nassistant\n", "label": "postulate option_hd : (A : cic.Univ univs.Type0) -> (_l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> cic.Term univs.Type0 (matita_basics_types.option A)", "predict": "postulate option_hd : (A : univs.Type0) -> all (l : cic.Term univs.Type0) (list (matita_basics_lists_list l)) (cic.Term univs.Type0) (option (matita_basics_types.option) A)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nTrue_rect_CProp4. Soit $Q_$ une fonction des éléments $_x_54$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_I$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_logic.I$. Soit $x_54$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_54$.\nassistant\n", "label": "True_rect_CProp4 : Q_ : (_x_54 : cic.Term cic.prop matita_basics_logic.True -> cic.Univ cic.prop) -> _H_I : cic.Term cic.prop (Q_ matita_basics_logic.I) -> x_54 : cic.Term cic.prop matita_basics_logic.True -> cic.Term cic.prop (Q_ x_54) .", "predict": "true_rect_CProp4 : (Q : Elem (cic.Term (cic.prop) (cic.prop))) -> (H_I : Elem (cic.Term (cic.prop) (Q (matita_basics_logic.I)))) -> (x_54 : Elem (cic.Term (cic.prop) (matita_basics_logic.True))) -> Proof (cic.Term (cic.prop) (Q x_54)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nDop_inv_rect_CProp0. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $x1$ och $x2$. Då för alla funktioner $P$ från element $_z1758$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $prod$ applicerat på $a$ och $x2$ och $x2$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $c$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applic", "label": "postulate Dop_inv_rect_CProp0 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> (P : (_z1758 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> (prod : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_null : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> (_distr : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> (_z1759 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term cic.prop (P Hterm)", "predict": "erat på $univs.Type0$ och $univs.Type2$ och $x1$ och $distr$ applicerat på $a$ och $b$ och $c$.\npostulate dop_inv_rect_CProp0 : (x1 : univs.Type0) -> (x2 : Term (univs.Type0) x1) -> (Hterm : Term (univs.Type0) (Dop x1 x2)) -> (P : (x : Term (univs.Type0) (Dop x1 x2)) -> Univ (cic.prop)) -> (H1 : (x : Sum (Term (univs.Type0) (ACop x1 x2)) (cic.prop)) -> (prod : (x : Term (univs.Type0) x1) -> (x : Term (univs.Type0) x1) -> Term (univs.Type0) x1) -> (null : (x : Term (univs.Type0) x1) -> Term (cic.prop)) -> (eq : Lift (univs.Type0) (univs.Type2)) (x1) (prod (a) (x2)) (x2) -> (distr : (x : Term (univs.Type0) x1) -> (y : Term (univs.Type0) x1) -> (z : Term (univs.Type0) x1) -> Term (cic.prop)) -> (eq : Lift (univs.Type0) (univs.Type2)) (x1) (distr (a) (b) (c)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nPad_bigop_nil. Let $k$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all functions $p$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all elements $B$ of $cic.Univ$ of $univs.Type0$, for all elements $nil$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $op$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $B$ and $nil$, for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $B$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $k$, for all functions $__1$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $i$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $k$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p$ applied to $i$ and $matita_basics_bool.false$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $f$ applied to $i$ and $nil$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $matita", "label": "Axiom pad_bigop_nil : forall k : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall p : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall B : cic.Univ univs.Type0, forall nil : cic.Term univs.Type0 B, forall op : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop B nil), forall f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B), forall __ : cic.Term cic.prop (matita_arithmetics_nat.le n k), forall __1 : ((i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le n i)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt i k)) -> cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p i) matita_basics_bool.false) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (f i) nil))), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop n (fun i => p i) B nil (matita_arithmetics_bigops.op B nil op) (fun i => f i)) (matita_arithmetics_bigops.bigop k (fun i => p i) B nil (matita_arithmetics_bigops.op B nil op) (fun i => f i))) .", "predict": "_basics_bool.true$ ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nEq_rect_CProp0_body. För alla element $A$ av $cic.Univ$ av $univs.Type2$, för alla element $_x$ av $cic.Term$ av $univs.Type2$ och $A$, för alla funktioner $Q_$ från element $x_37$ av $cic.Term$ av $univs.Type2$ och $A$ och element $_x_38$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_37$ till element av $cic.Univ$ av $cic.prop$, för alla element $_H_refl$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $_x$ och $matita_basics_logic.refl$ applicerat på $A$ och $_x$, för alla element $x_37$ av $cic.Term$ av $univs.Type2$ och $A$, för alla element $x_38$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_37$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_37$ och $x_38$.\nassistant\n", "label": "postulate eq_rect_CProp0_body : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_37 : cic.Term univs.Type2 A) -> (_x_38 : cic.Term cic.prop (matita_basics_logic.eq A _x x_37)) -> cic.Univ cic.prop) -> (_H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x))) -> (x_37 : cic.Term univs.Type2 A) -> (x_38 : cic.Term cic.prop (matita_basics_logic.eq A _x x_37)) -> cic.Term cic.prop (Q_ x_37 x_38)", "predict": "postulate eq_rect_CProp0_body : (A : univs.Type2) -> (x : cic.Term univs.Type2) -> A -> (Q_ : (x_37 : cic.Term univs.Type2) -> A -> cic.prop) -> (x_38 : cic.Term (cic.prop)) -> matita_basics_logic.eq A x x_37 -> (x_37 : cic.Term univs.Type2) -> (x_38 : cic.Term (cic.prop)) -> matita_basics_logic.eq (A) x x_37 -> (Q_ x_37 A) x_38"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nBc2. For all elements $n$ and $k$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $k$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_factorial.fact$ applied to $k$ and $matita_arithmetics_factorial.fact$ applied to $matita_arithmetics_nat.minus$ applied to $n$ and $k$ and $matita_arithmetics_factorial.fact$ applied to $n$.\nassistant\n", "label": "bc2 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> k : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.le k n) -> cic.Term cic.prop (matita_arithmetics_primes.divides (matita_arithmetics_nat.times (matita_arithmetics_factorial.fact k) (matita_arithmetics_factorial.fact (matita_arithmetics_nat.minus n k))) (matita_arithmetics_factorial.fact n)) .", "predict": "bc2 : (n : Elem (Term (univs Type0))) -> (k : Elem (nat (matita_arithmetics_nat))) -> Proof (forall (x : Elem (Term (prop (cic))) (y : Leq (k) (n))) (Term (prop (cic)) (divides (times (fact (k)) (minus (n) (k))) (fact (n)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nDiv_mod_spec_rect_Type1. For all elements $_n$ and $_m$ and $_q$ and $_r$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all functions $Q_$ from elements $_x_829$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$ to elements of $cic.Univ$ of $univs.Type1$, for all functions $_H_div_mod_spec_intro$ from elements $x_831$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $_r$ and $_m$ and elements $x_830$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $_n$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $_q$ and $_m$ and $_r$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_831$ and $x_830$, for all elements $x_829$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$, $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_829$.\nassistant\n", "label": "div_mod_spec_rect_Type1 : _n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _q : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _r : cic.Term univs.Type0 matita_arithmetics_nat.nat -> Q_ : (_x_829 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r) -> cic.Univ univs.Type1) -> _H_div_mod_spec_intro : (x_831 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m) -> x_830 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r)) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_831 x_830))) -> x_829 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r) -> cic.Term univs.Type1 (Q_ x_829) .", "predict": "div_mod_spec_rect_Type1 : (n : Elem (Term (univs Type0))) -> (m : Elem (Term (univs Type0))) -> (q : Elem (Term (univs Type0))) -> (r : Elem (Term (univs Type0))) -> (x_829 : Elem (Term (prop))) -> (x_831 : Elem (Term (prop))) -> (x_830 : Elem (Term (prop))) -> Proof (forall (x_829 : Elem (Term (prop))) (div_mod_spec n m q r x_829)) -> Proof (forall (x_829 : Elem (Term (prop))) (forall (x_831 : Elem (Term (prop))) (forall (x_830 : Elem (Term (prop))) (div_mod_spec n m q r x_829 x_831 x_830)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nAop_rect_Type3_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_787$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type3$. Alors pour toutes les fonctions $_H_mk_Aop$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ à des éléments de", "label": "axiom Aop_rect_Type3_body (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_787 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ univs.Type3) (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type3 (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) (x_787 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) : cic.Term univs.Type3 (Q_ x_787)", "predict": " $cic.Term$ de $univs.Type0$ et de $A$, il existe une fonction $_H_Aop_rect_Type3_body$ des éléments $x$ de $cic.Univ$ de $univs.Type3$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ telle que pour tous les éléments $x$ de $cic.Univ$ de $univs.Type3$, $Q_$(x) est égal à $_H_Aop_rect_Type3_body$ (x)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nUnit_rect_Type0_body. Låt $Q_$ vara en funktion från element $_x_507$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$ till element av $cic.Univ$ av $univs.Type0$. Då för alla element $_H_it$ av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_basics_types.it$, för alla element $x_507$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$, håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_507$.\nassistant\n", "label": "unit_rect_Type0_body : Q_ : (_x_507 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Univ univs.Type0) -> _H_it : cic.Term univs.Type0 (Q_ matita_basics_types.it) -> x_507 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Term univs.Type0 (Q_ x_507) .", "predict": "unit_rect_Type0_body : (Q_ : Elem (Term (Type0 (univs))) (matita_basics_types.unit)) -> Elem (univ (Type0 (univs))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nB1. Pour tous les éléments $_n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $univs.Type0$ et $matita_arithmetics_nat.nat$.\nassistant\n", "label": "axiom B1 (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term univs.Type0 matita_arithmetics_nat.nat", "predict": "axiom b1 (n : univs.Type0) (x : matita_arithmetics_nat.nat) : cic.Term n x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nAop_inv_rect_Type1. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$. Då för alla funktioner $P$ från element $_z1524$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type1$, för alla funktioner $_H1$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $a$ och $x2$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $c$", "label": "Aop_inv_rect_Type1 : x1 : cic.Univ univs.Type0 -> x2 : cic.Term univs.Type0 x1 -> Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2) -> P : (_z1524 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2) -> cic.Univ univs.Type1) -> _H1 : (op : (__ : cic.Term univs.Type0 x1 -> __1 : cic.Term univs.Type0 x1 -> cic.Term univs.Type0 x1) -> _nill : (a : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> _nilr : (a : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> _assoc : (a : cic.Term univs.Type0 x1 -> b : cic.Term univs.Type0 x1 -> c : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> _z1525 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc)) -> cic.Term univs.Type1 (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type1 (P Hterm) .", "predict": " av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat sur $a$ $b$ $c$ och $nill$ applicerat sur $a$ et $b$ et $c$ et $_H1$ applicerat sur $op$ applicerat sur $x2$ et $a$ et $a$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $x1$ et $"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nLstar_inv_step. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Soit $R$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation$ appliqué à $B$. Alors pour tous les éléments $b1$ et $b2$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $R$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $b1$ et $b2$, $cic.Term$ tient pour $cic.prop$ et $R$ appliqué à $b1$ et $b2$.\nassistant\n", "label": "axiom lstar_inv_step (B : cic.Univ univs.Type0) (R : cic.Term univs.Type0 (matita_basics_relations.relation B)) (b1 b2 : cic.Term univs.Type0 B) (__ : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R (matita_arithmetics_nat.S matita_arithmetics_nat.O) b1 b2)) : cic.Term cic.prop (R b1 b2)", "predict": "axiom lstar_inv_step (B : Univ Type0) (R : Term (relation B)) (b1 b2 : Term Type0) (x : lstar B R) (y : Nat S (0 : Nat) b1 b2) : Term (prop R b1 b2)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nExists_All. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soient $P$ et $Q$ des fonctions des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $l$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.Exists$ appliqué à $A$ et $P$ et $l$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.All$ appliqué à $A$ et $Q$ et $l$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.ex$ appliqué à $A$ et la fonction qui envoie $x$ à $matita_basics_logic.And$ appliqué à $P$ appliqué à $x$ et $Q$ appliqué à $x$.\nassistant\n", "label": "postulate Exists_All : (A : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.Exists A P l)) -> (__1 : cic.Term cic.prop (matita_basics_lists_list.All A Q l)) -> cic.Term cic.prop (matita_basics_logic.ex A (\\ x : cic.Term univs.Type0 A -> matita_basics_logic.And (P x) (Q x)))", "predict": "postulate exists_all : (A : Univ Type0) -> (P Q : Term A -> Univ prop) -> (l : List (A : Type0) (List (A : Type0) (List))) -> (x : Prop (Exists (A : Type0) (P : A -> Univ) (l : List (A : Type0) (List))) -> (y : Prop (All (A : Type0) (Q : A -> Univ) (l : List (A : Type0) (List))) -> Prop (ex (A : Type0) (P : A -> Univ) (Q : A -> Univ) (l : List (A : Type0) (List)) (x : Prop (Exists (A : Type0) (P : A -> Univ) (l : List (A : Type0) (List))) (y : Prop (All (A : Type0) (Q : A -> Univ) (l : List (A : Type0) (List)))) (And (P x) (Q x)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nLet_clause_10331. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $lt4n$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $m$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $le4m$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $m$. Soit $Hind$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $m$. Soit $a$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $lea$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a", "label": "Axiom let_clause_10331 : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall lt4n : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) n), forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall le4m : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))) m), forall Hind : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S m) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) m)), forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall lea : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))) a), forall Hinda : cic.Term cic.prop (matita_arithmetics_nat.le (", "predict": "$. Soit $b$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $leb$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $b$. Soit $Hind' : (n < 4 * m) /\\ (a < 4 * b) /\\ (4 * m < leq (pow (S (S (S (S (S (O))))) m) (pow (S (S (S (S (S (O))))) b)))$ un élément de $cic.Term$ de $cic.prop$ et de $cic.iff$ appliqué à $cic.and$ appliqué à $matita_arithmetics_nat.lt$ appliqué à $lt4n$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué to $matita_arithmetics_nat.S$ appliqué to $matita_arithmetics_nat.times$ appliqué to $matita_arithmetics_nat.S$ appliqué to $matita_arithmetics_nat.times$ appliqué to $matita_arithmetics_nat.S$ appliqué to $matita_arithmetics_nat.times$ appliqué to $matita_arithmetics_nat.O$ and $n$ and $matita_arithmetics_nat.le$ appliqué à $le4m$ et $matita_arithmetics_nat.le$ appliqué à $lea$ et $leb$ and $matita_arithmetics_nat.leq$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $mat"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nNat_inv_rect_Type0. För alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla funktioner $P$ från element $_z683$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Univ$ av $univs.Type0$, för alla funktioner $_H1$ från element $_z684$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $Hterm$ och $matita_arithmetics_nat.O$ till element av $cic.Term$ av $univs.Type0$ och $P$ applicerat på $matita_arithmetics_nat.O$, för alla funktioner $_H2$ från element $x_390$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $_x_392$ från element $_z684$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $Hterm$ och $x_390$ till element av $cic.Term$ av $univs.Type0$ och $P$ applicerat på $x_390$ och element $_z684$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $Hterm$ och $matita_arithmetics_nat.S$ applicerat på $x_390$ till element av $cic.Term$ av $univs.Type0$ och $P$ applicerat på $matita_arithmetics_nat.S$ applicerat på $x_390$, håller $cic.Term$ för $univs.Type0$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "Axiom nat_inv_rect_Type0 : forall Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall P : ((_z683 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ univs.Type0), forall _H1 : ((_z684 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm matita_arithmetics_nat.O)) -> cic.Term univs.Type0 (P matita_arithmetics_nat.O)), forall _H2 : ((x_390 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_392 : (_z684 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm x_390)) -> cic.Term univs.Type0 (P x_390)) -> (_z684 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm (matita_arithmetics_nat.S x_390))) -> cic.Term univs.Type0 (P (matita_arithmetics_nat.S x_390))), cic.Term univs.Type0 (P Hterm) .", "predict": "Axiom nat_inv_rect_Type0 : forall Hterm : cic.Term univs.Type0, forall P : _z683 : cic.Term univs.Type0 -> matita_arithmetics_nat.nat -> cic.Univ univs.Type0, forall H1 : _z684 : cic.Term (cic.prop * matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm matita_arithmetics_nat.O) -> cic.Term univs.Type0, forall x_390 : _z684 : cic.Term (cic.prop * matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm (matita_arithmetics_nat.O)) -> P x_390, forall x_392 : _z684 : cic.Term (cic.prop * matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm x_390) -> P (x_390, _z684 : cic.prop * matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm (matita_arithmetics_nat.S x_390)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nDPair_inv_rect_CProp0. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Univ$ of $univs.Type0$. Then for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1164$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $dpi1$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_dpi2$ of $cic.Term$ of $univs.Type0$ and $x2$ applied to $dpi1$ and elements $_z1165$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.DPair$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.mk_DPair$ applied to $x1$ and $x2$ and $dpi1$ and $_dpi2$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.mk_DPair$ applied to $x1$ and $x2$ and $dpi1$ and $_dpi2$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "axiom DPair_inv_rect_CProp0 (x1 : cic.Univ univs.Type0) (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) (P : (_z1164 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ cic.prop) (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1165 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) : cic.Term cic.prop (P Hterm)", "predict": "axiom dpair_inv_rect_CProp0 (x1 : Univ Type0) (x2 : Term Type0 → Univ Type0) : ∀ Hterm : Term Type0, dpair x1 x2 → ∀ P : (z1164 : Term Type0) → dpair x1 x2 → Prop, ∀ dpi1 : Term Type0, ∀ x1 : Type0, ∀ dpi2 : Term Type0, ∀ x2 : Type0, eq (lift Type0 Type2) (dpair x1 x2) Hterm (mk_DPair x1 x2) (dpi1, dpi2) → Prop, ∀ P : (z1165 : Prop) → (eq (Type0) (Type2)) → (dpair x1 x2) → (Hterm) → (mk_DPair x1 x2) → (dpi1, dpi2) → Prop, P (mk_DPair x1 x2) (dpi1, dpi2)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nOrb_elim. För alla element $b1$ och $b2$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, för alla funktioner $P$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Univ$ av $cic.prop$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_bool.match_bool$ applicerat på $cic.type$ applicerat på $cic.z$ och funktionen som avbildar $__$ som $cic.univ$ applicerat på $cic.prop$ och $P$ applicerat på $matita_basics_bool.true$ och $P$ applicerat på $b2$ och $b1$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $matita_basics_bool.orb$ applicerat på $b1$ och $b2$.\nassistant\n", "label": "postulate orb_elim : (b1 : cic.Term univs.Type0 matita_basics_bool.bool) -> (b2 : cic.Term univs.Type0 matita_basics_bool.bool) -> (P : (__ : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) -> (__ : cic.Term cic.prop (matita_basics_bool.match_bool (cic.type cic.z) (\\ __ : cic.Term univs.Type0 matita_basics_bool.bool -> cic.univ cic.prop) (P matita_basics_bool.true) (P b2) b1)) -> cic.Term cic.prop (P (matita_basics_bool.orb b1 b2))", "predict": "postulate orb_elim : (b1 : univs.Type0) -> (b2 : matita_basics_bool.bool) -> (P : (x : univs.Type0) -> matita_basics_bool.bool) -> (p : univ prop) -> (b : matita_basics_bool.match_bool (type z)) -> (f : (x : prop) -> univ) -> (P true) -> (P b2) -> (P (orb b1 b2))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nVoid_rect_Type4_body. For all functions $Q_$ from elements $_x_483$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.void$ to elements of $cic.Univ$ of $univs.Type4$, for all elements $x_483$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.void$, $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_483$.\nassistant\n", "label": "postulate void_rect_Type4_body : (Q_ : (_x_483 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ univs.Type4) -> (x_483 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Term univs.Type4 (Q_ x_483)", "predict": "postulate void_rect_Type4_body : (Q : void -> cic.Univ) -> (x_483 : void) -> cic.Term (univs.Type4) (Q x_483)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nLet_clause_1704. Let $m$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posm$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$. Then for all elements $a$ and $x1029$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x1029$ and $matita_arithmetics_bigops.aop__o__op$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $matita_arithmetics_sigma_pi.plusAC$ and $x1029$ and $matita_arithmetics_nat.O$.\nassistant\n", "label": "let_clause_1704 : m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> x1029 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1029 (matita_arithmetics_bigops.aop__o__op matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_sigma_pi.plusAC x1029 matita_arithmetics_nat.O)) .", "predict": "let_clause_1704 : (m : Elem (Term (Type0)) (nat (matita_arithmetics))) -> (posm : Elem (Term (prop)) (lt (O (matita_arithmetics)) m)) -> Proof (forall (a : Elem (Term (Type0)) (nat (matita_arithmetics))) (x1029 : Elem (Term (Type0)) (nat (matita_arithmetics))) (Term (prop) (eq (lift (Type0) (Type2)) (nat (matita_arithmetics)) (x1029) (aop__o__op (nat (matita_arithmetics)) (O (matita_arithmetics)) (plusAC (nat (matita_arithmetics)) (x1029) (O (matita_arithmetics))))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nMonotonic_le_minus_r. Låt $p$ och $q$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $q$ och $p$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.minus$ applicerat på $n$ och $p$ och $matita_arithmetics_nat.minus$ applicerat på $n$ och $q$.\nassistant\n", "label": "axiom monotonic_le_minus_r (p q n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.le q p)) : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.minus n p) (matita_arithmetics_nat.minus n q))", "predict": "axiom monotonic_le_minus_r (p q n : Term Type0) (x : le q p) : le (minus n p) (minus n q)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nUnit_inv_rect_Type1. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$. Alors pour toutes les fonctions $P$ des éléments $_z930$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $univs.Type1$, pour toutes les fonctions $_H1$ des éléments $_z931$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.unit$ et $Hterm$ et $matita_basics_types.it$ à des éléments de $cic.Term$ de $univs.Type1$ et de $P$ appliqué à $matita_basics_types.it$, $cic.Term$ tient pour $univs.Type1$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "axiom unit_inv_rect_Type1 (Hterm : cic.Term univs.Type0 matita_basics_types.unit) (P : (_z930 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ univs.Type1) (_H1 : (_z931 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm matita_basics_types.it)) -> cic.Term univs.Type1 (P matita_basics_types.it)) : cic.Term univs.Type1 (P Hterm)", "predict": "axiom unit_inv_rect_Type1 (Hterm : cic.Term univs.Type0 matita_basics_types.unit) : ∀ P : _z930 : cic.Term univs.Type0 matita_basics_types.unit → cic.Univ univs.Type1, ∀ _H1 : _z931 : cic.Term (cic.prop × matita_basics_logic.eq (univs.Type0 × univs.Type2) matita_basics_types.unit) Hterm (matita_basics_types.it : _ : cic.Term univs.Type1) P (matita_basics_types.it : _ : _z930) = P Hterm"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nTimes_Sn_m. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.plus$ applied to $m$ and $matita_arithmetics_nat.times$ applied to $n$ and $m$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $n$ and $m$.\nassistant\n", "label": "axiom times_Sn_m (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.plus m (matita_arithmetics_nat.times n m)) (matita_arithmetics_nat.times (matita_arithmetics_nat.S n) m))", "predict": "axiom times_sn_m (n m : univs.Type0) : cic.prop (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_arithmetics_nat.plus m (matita_arithmetics_nat.times n m)) (matita_arithmetics_nat.times (matita_arithmetics_nat.S n) m))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nUnit_rect_CProp2_body. Let $Q_$ be a function from elements $_x_515$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_it$ be an element of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.it$. Let $x_515$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_515$.\nassistant\n", "label": "unit_rect_CProp2_body : Q_ : (_x_515 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Univ cic.prop) -> _H_it : cic.Term cic.prop (Q_ matita_basics_types.it) -> x_515 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Term cic.prop (Q_ x_515) .", "predict": "unit_rect_CProp2_body : (Q_ : Elem (Term (Type0 (univs))) (matita_basics_types.unit)) -> Elem (Univ (prop)) -> Proof (H_it : Term (prop)) -> Proof (Eq (Q_ (it)) (Term (prop))) -> Proof (Eq (x_515) (Term (Type0 (univs))) (matita_basics_types.unit)) -> Proof (Eq (Term (prop)) (Q_ (x_515))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nBijn_transpose_l. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soient $n$ et $i$ et $j$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $i$ et $n$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $j$ et $n$, pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_permutation.bijn$ appliqué à $f$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_permutation.bijn$ appliqué à la fonction qui envoie $p$ à $matita_arithmetics_permutation.transpose$ appliqué à $i$ et $j$ et $f$ appliqué à $p$ et $n$.\nassistant\n", "label": "postulate bijn_transpose_l : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le i n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le j n)) -> (__2 : cic.Term cic.prop (matita_arithmetics_permutation.bijn f n)) -> cic.Term cic.prop (matita_arithmetics_permutation.bijn (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_permutation.transpose i j (f p)) n)", "predict": "postulate bijn_transpose_l : (f : Term (Type0) Nat) -> (n : Nat) -> (i : Term (Type0)) -> (j : Term (Type0)) -> (p : Prop (Type0)) -> (q : Leq i n) -> (r : Leq j n) -> (s : Bijn f n) -> Prop (Bijn (λ p -> transpose i j (f p)) n)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nTrue. $cic.Term$ holds for $univs.Type0$ and $matita_basics_bool.bool$.\nassistant\n", "label": "Axiom true : cic.Term univs.Type0 matita_basics_bool.bool .", "predict": "Axiom : Term : Type0 /\\ bool ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nLe_inv_ind. Låt $x1$ och $x2$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_Hterm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z724$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Univ$ av $cic.prop$. Låt $_H1$ vara en funktion från element $_z725$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $x2$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $x1$. Då för alla funktioner $_H2$ från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $_x_419$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $x1$ och $m$ och funktioner $_x_421$ från element $_z725$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $x2$ och $m$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $m$ och element $_z725$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $x2$ och $matita_arithmetics_nat.S$ applicerat på $m$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_arithmetics_nat.S$ applicerat på $m$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $x2$.\nassistant\n", "label": "le_inv_ind : x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _Hterm : cic.Term cic.prop (matita_arithmetics_nat.le x1 x2) -> P : (_z724 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Univ cic.prop) -> _H1 : (_z725 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2 x1) -> cic.Term cic.prop (P x1)) -> _H2 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _x_419 : cic.Term cic.prop (matita_arithmetics_nat.le x1 m) -> _x_421 : (_z725 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2 m) -> cic.Term cic.prop (P m)) -> _z725 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2 (matita_arithmetics_nat.S m)) -> cic.Term cic.prop (P (matita_arithmetics_nat.S m))) -> cic.Term cic.prop (P x2) .", "predict": "le_inv_ind : (x1 : Elem (Term (univs Type0))) -> (x2 : Elem (nat (matita_arithmetics_nat))) -> (Hterm : Elem (Term (prop (le (matita_arithmetics_nat))))) -> (P : (z724 : Elem (Term (univs Type0))) -> Elem (univ (prop))) -> (H1 : (z725 : Elem (Term (prop (eq (lift (univs Type0) (univs Type2)) (nat (matita_arithmetics_nat))) x2))) -> (forall (m : Elem (Term (univs Type0))) -> (forall (x_419 : Elem (Term (prop (le x1 m))) -> forall (x_421 : Elem (Term (prop (eq (lift (univs Type0) (univs Type2)) (nat (matita_arithmetics_nat))) x2))) -> (forall (m : Elem (Term (univs Type0))) -> (forall (x_421 : Elem (Term (prop (eq (lift (univs Type0) (univs Type2)) (nat (matita_arithmetics_nat))) m))) -> (forall (x_419 : Elem (Term (prop (le x1 m)))) -> (forall (x_421 : Elem (Term (prop (eq (lift (univs Type0) (univs Type2)) (nat (matita_arithmetics_nat))) m))) -> (forall (x_419 : Elem (Term (prop (le x1 m)))) -> (forall (x_421 : Elem (Term (prop (eq (lift (univs Type0) (univs Type2)) (nat (matita_arithmetics_nat))) m))) -> (forall (x_419 : Elem (Term (prop (le x1 m)))) -> (forall (x_421 : Elem (Term (prop (eq (lift (univs Type0) (univs Type2)) (nat (matita_arithmetics_nat))) m))) -> (forall (x_419 : Elem (Term (prop (le x1 m)))) -> (forall (x_421 : Elem (Term (prop (eq (lift ("}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nMod_cr_pair. Soient $m$ et $n$ et $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $a$ et $m$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $b$ et $n$, pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.And$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $matita_arithmetics_chinese_reminder.cr_pair$ appliqué à $m$ et $n$ et $a$ et $b$ et $m$ et $a$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $matita_arithmetics_chinese_reminder.cr_pair$ appliqué à $m$ et $n$ et $a$ et $b$ et $n$ et $b$.\nassistant\n", "label": "axiom mod_cr_pair (m n a b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt a m)) (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt b n)) (__2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) : cic.Term cic.prop (matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod (matita_arithmetics_chinese_reminder.cr_pair m n a b) m) a) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod (matita_arithmetics_chinese_reminder.cr_pair m n a b) n) b))", "predict": "axiom mod_cr_pair (m n : univs.Type0) (a b : matita_arithmetics_nat.nat) : ∀ e : cic.Term (cic.prop × matita_arithmetics_nat.lt a m) × ∀ e1 : cic.Term (cic.prop × matita_arithmetics_nat.lt b n) × ∀ e2 : cic.Term (cic.prop × matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m)) × ∀ e3 : matita_arithmetics_nat.S (matita_arithmetics_nat.O) → ∀ e4 : cic.Term (cic.prop × matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod (matita_arithmetics_chinese_reminder.cr_pair m n) a b m a)) × ∀ e5 : cic.Term (cic.prop × matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod (matita_arithmetics_chinese_reminder.cr_pair m n) a b n b)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nMatch_Sum. Let $_A$ and $_B$ be elements of $cic.Univ$ of $univs.Type0$. Let $return_sort$ be an element of $cic.Sort$. Then for all functions $return_type$ from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $return_sort$, for all functions $case_inl$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_basics_types.inl$ applied to $_A$ and $_B$ and $__$, for all functions $case_inr$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_basics_types.inr$ applied to $_A$ and $_B$ and $__$, for all elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.\nassistant\n", "label": "match_Sum : _A : cic.Univ univs.Type0 -> _B : cic.Univ univs.Type0 -> return_sort : cic.Sort -> return_type : (z : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) -> cic.Univ return_sort) -> case_inl : (__ : cic.Term univs.Type0 _A -> cic.Term return_sort (return_type (matita_basics_types.inl _A _B __))) -> case_inr : (__ : cic.Term univs.Type0 _B -> cic.Term return_sort (return_type (matita_basics_types.inr _A _B __))) -> z : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) -> cic.Term return_sort (return_type z) .", "predict": "match_sum : _A : Elem (univs Type0) -> _B : Elem (univs Type0) -> return_sort : Elem (cic Sort) -> Proof (forall (return_type : (z : Elem (cic Term) (univs Type0)) -> matita_basics_types Sum _A _B) (return_sort) -> forall (case_inl : (__) : Elem (cic Term) (univs Type0) -> _A) (return_type (matita_basics_types inl __ _B)) -> forall (case_inr : (__) : Elem (cic Term) (univs Type0) -> _B) (return_type (matita_basics_types inr _A __)) -> forall (z : Elem (cic Term) (univs Type0)) (matita_basics_types Sum _A _B) (return_sort) (return_type z)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nLt_smallest_factor_to_not_divides. Let $n$ and $i$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$. Then for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $i$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $matita_arithmetics_primes.smallest_factor$ applied to $n$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_arithmetics_primes.divides$ applied to $i$ and $n$.\nassistant\n", "label": "postulate lt_smallest_factor_to_not_divides : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) i)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_primes.smallest_factor n))) -> cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides i n))", "predict": "postulate lt_smallest_factor_to_not_divides : (n : Term Type0) -> (i : Nat) -> Prop -> (lt (S (S (nd 0))) n) -> all (all (Not (divides i n)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nAnd_rect_Type4. Let $_A$ and $_B$ be elements of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_122$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $univs.Type4$. Then for all functions $_H_conj$ from elements $x_124$ of $cic.Term$ of $cic.prop$ and $_A$ and elements $x_123$ of $cic.Term$ of $cic.prop$ and $_B$ to elements of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $matita_basics_logic.conj$ applied to $_A$ and $_B$ and $x_124$ and $x_123$, for all elements $x_122$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $_A$ and $_B$, $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_122$.\nassistant\n", "label": "postulate And_rect_Type4 : (_A : cic.Univ cic.prop) -> (_B : cic.Univ cic.prop) -> (Q_ : (_x_122 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ univs.Type4) -> (_H_conj : (x_124 : cic.Term cic.prop _A) -> (x_123 : cic.Term cic.prop _B) -> cic.Term univs.Type4 (Q_ (matita_basics_logic.conj _A _B x_124 x_123))) -> (x_122 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Term univs.Type4 (Q_ x_122)", "predict": "postulate and_rect_Type4 : (A : Univ prop) -> (B : Univ prop) -> (Q : (x : Term prop) -> and A B -> Univ Type4) -> (H_conj : (x : Term prop) -> A -> (y : Term prop) -> B -> Term Type4) -> (conj : and A B) -> (x : Term prop) -> (y : Term prop) -> Q (conj x y)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nAop_rect_CProp4_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all functions $Q_$ from elements $_x_875$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_", "label": "axiom Aop_rect_CProp4_body (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_875 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop) (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) (x_875 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) : cic.Term cic.prop (Q_ x_875)", "predict": "assoc$ and $Q_$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$, we have $matita_basics_logic.eq$ applied to $Q_$ applied to $matita_arithmetics_bigops.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$ and $Q_$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $matita_basics_logic.eq$ applied to $Q_$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$.\n\naxiom aop_rect_CProp4_body (A : univs.Type0) : _nil : Term Type0 → A → Prop → (Q_ : (x : Term Type0) → Aop A _nil → Prop) → (H_mk_Aop : (op : Term Type0 → A → Prop) → (a : Term Type0) → A → Prop) → (nill : (a : Term Type0) → A → Prop) → (nilr : (a : Term Type0) → A → Prop) → (assoc : (a : Term Type0) → (b : Term Type0) → (c : Term Type0) → A → Prop) → (Q_a : Q_ a) → (op_b_c : op b c) → (op_a : op a (op b c)) → (op_a_b_c : op (op a b) c) → (Q_a_op_b_c : Q_ (mk_Aop A _nil op nill nilr assoc Q_a op_b_c op_a)) (Q_a_op_b : Q_ (op a b)) (Q_a_op_c : Q_ (op a c)) (Q_a_op_b_op_c : Q_ (op (op a b) c)) (Q_a_op_b_c_op_a : Q_ (op a (op b c))) (Q_a_op_b_op_c_op_a : Q_ (op (op a b) c)) (Q"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nList_divides. För alla element $__$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $matita_arithmetics_nat.nat$, för alla element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_bool.bool$.\nassistant\n", "label": "postulate list_divides : (__ : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool", "predict": "postulate list_divides : (x : univs.Type0) -> matita_basics_lists_list.list Nat -> (y : univs.Type0) -> matita_arithmetics_nat.nat -> Bool"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nDop_rect_CProp4_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_957$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_Dop$ vara en funktion från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $_nil$ och $_nil$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $prod$ applicerat på $a$ och $b$ och $prod$ applicerat på $a$ och $c$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på", "label": "Dop_rect_CProp4_body : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_957 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil) -> cic.Univ cic.prop) -> _H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> prod : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _null : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> _distr : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> x_957 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil) -> cic.Term cic.prop (Q_ x_957) .", "predict": " $a$ och $b$ och $c$ till element av $cic.Univ$ av $cic.prop$ ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nDivides_to_div. Soient $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.divides$ appliqué à $n$ et $m$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_div_and_mod.div$ appliqué à $m$ et $n$ et $n$ et $m$.\nassistant\n", "label": "Axiom divides_to_div : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_primes.divides n m), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div m n) n) m) .", "predict": "Axiom divides_to_div : forall n : univs.Type0, forall m : matita_arithmetics_nat.nat, forall __ : cic.Term (matita_arithmetics_primes.divides n m), cic.Term (cic.prop) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_nat.nat) (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div m n) n) m) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nLet_clause_15601. For all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $posn$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, for all elements $eqn0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $n$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $matita_arithmetics_nat.O$ and $m$, for all elements $q$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $eqm$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $m$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.O$ and $q$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $matita_arithmetics_nat.O$.\nassistant\n", "label": "postulate let_clause_15601 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (eqn0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O n)) -> (_clearme : cic.Term cic.prop (matita_arithmetics_primes.divides matita_arithmetics_nat.O m)) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (eqm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times matita_arithmetics_nat.O q))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n matita_arithmetics_nat.O)", "predict": "postulate let_clause_15601 : (n : cic.Term univs.Type0) -> (m : matita_arithmetics_nat.nat) -> (posn : cic.Term (cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.O) m))) -> (eqn0 : cic.Term (cic.prop (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_arithmetics_nat.nat) (matita_arithmetics_nat.O) n))) -> (posn : cic.Term (cic.prop (matita_arithmetics_primes.divides (matita_arithmetics_nat.O) m))) -> (q : cic.Term univs.Type0) -> (eqm : cic.Term (cic.prop (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_arithmetics_nat.nat) m))) -> (cic.Term (cic.prop (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_arithmetics_nat.nat) n) (matita_arithmetics_nat.O)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nLt_plus_to_minus. Let $n$ and $m$ and $p$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $m$ and $n$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $n$ and $matita_arithmetics_nat.plus$ applied to $p$ and $m$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.minus$ applied to $n$ and $m$ and $p$.\nassistant\n", "label": "axiom lt_plus_to_minus (n m p : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.le m n)) (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt n (matita_arithmetics_nat.plus p m))) : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.minus n m) p)", "predict": "axiom lt_plus_to_minus (n m p : Term Type0) (x : le m n) (y : lt n (plus p m)) : lt (minus n m) p"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nOption_rect_CProp2. För alla element $_A$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $Q_$ från element $_x_626$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$, för alla element $_H_None$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$, för alla funktioner $_H_Some$ från element $x_627$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_627$, för alla element $x_626$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_626$.\nassistant\n", "label": "postulate option_rect_CProp2 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_626 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop) -> (_H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_627 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_627))) -> (x_626 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term cic.prop (Q_ x_626)", "predict": "postulate option_rect_CProp2 : (A : univs.Type0) -> (Q : (x : cic.Term univs.Type0) -> matita_basics_types.option A -> cic.prop) -> (H_None : (x : cic.Term univs.Type0) -> Q x (matita_basics_types.None A)) -> (H_Some : (x : cic.Term univs.Type0) -> (a : A) -> Q x (matita_basics_types.Some A a)) -> (x : cic.Term univs.Type0) -> Q x (option A)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nAnd_inv_rect_Type1. Let $x1$ and $x2$ be elements of $cic.Univ$ of $cic.prop$. Let $Hterm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z347$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type1$. Let $_H1$ be a function from elements $x_140$ of $cic.Term$ of $cic.prop$ and $x1$ and elements $x_139$ of $cic.Term$ of $cic.prop$ and $x2$ and elements $_z348$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_basics_logic.And$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_logic.conj$ applied to $x1$ and $x2$ and $x_140$ and $x_139$ to elements of $cic.Term$ of $univs.Type1$ and $P$ applied to $matita_basics_logic.conj$ applied to $x1$ and $x2$ and $x_140$ and $x_139$. Then $cic.Term$ holds for $univs.Type1$ and $P$ applied to $Hterm$.\nassistant\n", "label": "Axiom And_inv_rect_Type1 : forall x1 : cic.Univ cic.prop, forall x2 : cic.Univ cic.prop, forall Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2), forall P : ((_z347 : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> cic.Univ univs.Type1), forall _H1 : ((x_140 : cic.Term cic.prop x1) -> (x_139 : cic.Term cic.prop x2) -> (_z348 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_140 x_139))) -> cic.Term univs.Type1 (P (matita_basics_logic.conj x1 x2 x_140 x_139))), cic.Term univs.Type1 (P Hterm) .", "predict": "Axiom and_inv_rect_Type1 : forall x1 : Prop, forall x2 : Prop, forall Hterm : and x1 x2 : Term Prop, forall P : (z347 : Term Prop) -> and x1 x2 -> Type1, forall x_140 : Term Prop, forall x_139 : Term Prop, (and x1 x2 = x_140 /\\ x1 = x_139 -> conj x1 x2 = x_140 /\\ x1 = x_139 -> P (conj x1 x2) (x_140, x_139)) -> Term Type1 (P (and x1 x2) (x_140, x_139)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nCongruent_times. Let $n$ and $m$ and $n1$ and $m1$ and $p$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $p$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_congruence.congruent$ applied to $n$ and $n1$ and $p$. Then for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_congruence.congruent$ applied to $m$ and $m1$ and $p$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_congruence.congruent$ applied to $matita_arithmetics_nat.times$ applied to $n$ and $m$ and $matita_arithmetics_nat.times$ applied to $n1$ and $m1$ and $p$.\nassistant\n", "label": "axiom congruent_times (n m n1 m1 p : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) (__1 : cic.Term cic.prop (matita_arithmetics_congruence.congruent n n1 p)) (__2 : cic.Term cic.prop (matita_arithmetics_congruence.congruent m m1 p)) : cic.Term cic.prop (matita_arithmetics_congruence.congruent (matita_arithmetics_nat.times n m) (matita_arithmetics_nat.times n1 m1) p)", "predict": "axiom congruent_times (n m n1 m1 p : Term Type0) (x : Lt (nat 0) p) (x1 : Congruent n n1 p) : ∀ x2 : Congruent m m1 p, Congruent (times (nat n) m) (times (nat n1) m1) p"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nSig_rect_CProp0. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $Q_$ une fonction des éléments $_x_688$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $_H_mk_Sig$ des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $_f$ appliqué à $pi1$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $A$ et $_f$ et $pi1$ et $_pi2$, pour tous les éléments $x_688$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_688$.\nassistant\n", "label": "postulate Sig_rect_CProp0 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_688 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ cic.prop) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_688 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term cic.prop (Q_ x_688)", "predict": "postulate sig_rect_CProp0 : (A : univs.Type0) -> (f : Term univs.Type0 -> A -> prop) -> (Q : (x : Term univs.Type0) -> Sig A f -> prop) -> (H : (pi1 : Term univs.Type0) -> (pi2 : prop) -> f pi1 -> Q (mk_Sig A f pi1 pi2)) -> (x : Term univs.Type0) -> (sig A f) -> prop) -> all (x : Term univs.Type0) (Q (Sig A f x))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nRange_rect_CProp4. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_929$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_range$ vara en funktion från funktioner $_enum$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $_A$ och element $_upto$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $_filter$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_range$ applicerat på $_A$ och $_enum$ och $_upto$ och $_filter$. Låt $x_929$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$. Då håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_929$.\nassistant\n", "label": "range_rect_CProp4 : _A : cic.Univ univs.Type0 -> Q_ : (_x_929 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Univ cic.prop) -> _H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 _A) -> _upto : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> x_929 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Term cic.prop (Q_ x_929) .", "predict": "range_rect_CProp4 : (A : Elem (univ (Type0))) -> (Q_ : (x : Elem (Term (Type0))) -> Elem (univ (prop))) -> (H_mk_range : (x : Elem (Term (Type0))) -> (n : Nat) -> Elem (Term (Type0))) -> (upto : Elem (Term (Type0))) -> (filter : (x : Elem (Term (Type0))) -> (n : Nat) -> Elem (bool)) -> Elem (prop) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nGcd_1_to_divides_times_to_divides. Let $p$ and $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $p$. Then for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $n$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $p$ and $m$.\nassistant\n", "label": "postulate gcd_1_to_divides_times_to_divides : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p n) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (__2 : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times n m))) -> cic.Term cic.prop (matita_arithmetics_primes.divides p m)", "predict": "postulate gcd_1_to_divides_times_to_divides : (p : Nat) -> (n : Nat) -> (m : Nat) -> Prop -> (x : Eq (lift Type0 Type2) (gcd p n)) -> (y : Divides p (times n m)) -> Divides p m"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nFilter_Or. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $cic.prop$. Alors pour tous les éléments $return_sort$ de $cic.Sort$, pour toutes les fonctions $return_type$ des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Or$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $return_sort$, pour toutes les fonctions $return$ des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Or$ appliqué à $_A$ et $_B$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $z$, pour tous les éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Or$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.\nassistant\n", "label": "Axiom filter_Or : forall _A : cic.Univ cic.prop, forall _B : cic.Univ cic.prop, forall return_sort : cic.Sort, forall return_type : ((z : cic.Term cic.prop (matita_basics_logic.Or _A _B)) -> cic.Univ return_sort), forall return : ((z : cic.Term cic.prop (matita_basics_logic.Or _A _B)) -> cic.Term return_sort (return_type z)), forall z : cic.Term cic.prop (matita_basics_logic.Or _A _B), cic.Term return_sort (return_type z) .", "predict": "Axiom filter_or : forall A : Prop, forall B : Prop, forall return_sort : Sort, forall return_type : Term -> Prop, forall z : Term, (Or A B) -> return_sort -> return_type (z) -> forall z : Term, (A \\/ B) -> return_sort -> return_type (z) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nAop_rect_Type4. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_783$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type4$. Låt $_H_mk_Aop$ vara en funktion från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$ av $univs.Type", "label": "axiom Aop_rect_Type4 (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_783 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ univs.Type4) (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type4 (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) (x_783 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) : cic.Term univs.Type4 (Q_ x_783)", "predict": "0$ och $A$ och funktioner $_assocr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $op$ applicerat sur $a$ $b$ $c$ et $op$ applicerat sur $a$ $b$ $c$ ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nSum_rect_Type2_body. Låt $_A$ och $_B$ vara element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_541$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $univs.Type2$. Låt $_H_inl$ vara en funktion från element $x_542$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_basics_types.inl$ applicerat på $_A$ och $_B$ och $x_542$. Låt $_H_inr$ vara en funktion från element $x_543$ av $cic.Term$ av $univs.Type0$ och $_B$ till element av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_basics_types.inr$ applicerat på $_A$ och $_B$ och $x_543$. Då för alla element $x_541$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $univs.Type2$ och $Q_$ applicerat på $x_541$.\nassistant\n", "label": "Axiom Sum_rect_Type2_body : forall _A : cic.Univ univs.Type0, forall _B : cic.Univ univs.Type0, forall Q_ : ((_x_541 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ univs.Type2), forall _H_inl : ((x_542 : cic.Term univs.Type0 _A) -> cic.Term univs.Type2 (Q_ (matita_basics_types.inl _A _B x_542))), forall _H_inr : ((x_543 : cic.Term univs.Type0 _B) -> cic.Term univs.Type2 (Q_ (matita_basics_types.inr _A _B x_543))), forall x_541 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B), cic.Term univs.Type2 (Q_ x_541) .", "predict": "Axiom sum_rect_Type2_body : forall A : univs.Type0, forall B : univs.Type0, forall Q : x541 : Term univs.Type0 -> Sum A B -> Univ univs.Type2 -> Prop, forall x542 : Term univs.Type0 -> A -> Term univs.Type2, forall x543 : Term univs.Type0 -> B -> Term univs.Type2, forall x541 : Term univs.Type0, Q (inl A B) x542 = Q (inr A B) x543 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nFilter_void. Låt $return_sort$ vara ett element av $cic.Sort$. Då för alla funktioner $return_type$ från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.void$ till element av $cic.Univ$ av $return_sort$, för alla funktioner $return$ från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.void$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $z$, för alla element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.void$, håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.\nassistant\n", "label": "postulate filter_void : (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ return_sort) -> (return : (z : cic.Term univs.Type0 matita_basics_types.void) -> cic.Term return_sort (return_type z)) -> (z : cic.Term univs.Type0 matita_basics_types.void) -> cic.Term return_sort (return_type z)", "predict": "postulate filter_void : (return_sort : cic.Sort) -> (return_type : (z : univs.Type0) -> matita_basics_types.void -> cic.Univ) -> (return : (z : univs.Type0) -> matita_basics_types.void -> cic.Term) -> (z : univs.Type0) -> matita_basics_types.void -> cic.Term)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nACop_rect_CProp4. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_903$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_ACop$ be a function from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$. Let $x_903$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_903$.\nassistant\n", "label": "axiom ACop_rect_CProp4 (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_903 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop) (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) (x_903 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) : cic.Term cic.prop (Q_ x_903)", "predict": "axiom acop_rect_cprop4 (A : Univ Type0) (nil : Term Type0) (Q_ : (x : Term Type0) → ACop A nil → Prop) : ∀ aop : Term Type0 → Aop A nil → ∀ a : Term Type0 → ∀ b : Term Type0 → Prop → eq (lift Type0 Type2 A) (op A nil aop a b) (op A nil aop b a) → Q_ (mk_ACop A nil aop) (comm a A b) → Q_ (ACop A nil)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nMatch_max_spec. Låt $_n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $return_sort$ vara ett element av $cic.Sort$. Låt $return_type$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $z$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_minimization.max_spec$ applicerat på $_n$ och $_f$ och $__$ till element av $cic.Univ$ av $return_sort$. Låt $case_found_max_spec$ vara en funktion från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $_n$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $_f$ applicerat på $m$ och $matita_basics_bool.true$ och funktioner $__2$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $i$ och element $__3$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $_n$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $_f$ applicerat på $i$ och $matita_basics_bool.false$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $m$ och $matita_arithmetics_minimization.found_max_spec$ applicerat på $_n$ och $_f$ och $m$ och $__$ och $__1$ och $__2$. Då för alla funktioner $case_not_found_max", "label": "Axiom match_max_spec : forall _n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall return_sort : cic.Sort, forall return_type : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (z : cic.Term cic.prop (matita_arithmetics_minimization.max_spec _n _f __)) -> cic.Univ return_sort), forall case_found_max_spec : ((m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt m _n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f m) matita_basics_bool.true)) -> (__2 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt m i)) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.lt i _n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f i) matita_basics_bool.false)) -> cic.Term return_sort (return_type m (matita_arithmetics_minimization.found_max_spec _n _f m __ __1 __2))), forall case_not_found_max", "predict": "_spec$ från element $z$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_minimization.max_spec$ till element av $cic.Univ$ av $return_sort$ och $return_type$ applicerat på $_n$ och $_f$ och $z$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $_n$ och $_f$ och $z$, har vi att $case_found_max_spec$ är lika med $case_not_found_max_spec$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nEnum_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $_xxx$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $A$, for all elements $_x_942$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $univs.Type0$ and $A$.\nassistant\n", "label": "axiom enum_body (A : cic.Univ univs.Type0) (_xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.range A)) (_x_942 : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term univs.Type0 A", "predict": "axiom enum_body (A : Univ Type0) : ∀ _xxx : Term Type0 (matita_arithmetics_bigops.range A), ∀ _x_942 : Term Type0 (nat), Term Type0 A"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nFalse_rect_Type1. Pour toutes les fonctions $Q_$ des éléments $_x_71$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$ à des éléments de $cic.Univ$ de $univs.Type1$, pour tous les éléments $x_71$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$, $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_71$.\nassistant\n", "label": "Axiom False_rect_Type1 : forall Q_ : ((_x_71 : cic.Term cic.prop matita_basics_logic.False) -> cic.Univ univs.Type1), forall x_71 : cic.Term cic.prop matita_basics_logic.False, cic.Term univs.Type1 (Q_ x_71) .", "predict": "Axiom false_rect_Type1 : forall Q : Prop -> False -> Univ Type1, forall x_71 : Prop, Q x_71 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nLt_sqrt_n. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_sqrt.sqrt$ applied to $n$ and $n$.\nassistant\n", "label": "Axiom lt_sqrt_n : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n), cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_sqrt.sqrt n) n) .", "predict": "Axiom lt_sqrt_n : forall n : Type0, forall __ : prop, (S 0 < n -> sqrt n < n) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nExp_body. Låt $__$ och $__1$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $univs.Type0$ och $matita_arithmetics_nat.nat$.\nassistant\n", "label": "postulate exp_body : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat", "predict": "postulate exp_body : (a : univs.Type0) -> (b : matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nAop_rect_CProp2. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_801$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_lists_list.mk_Aop$ applied to $A$ and $_nil$ and $op$ and $_nill$ and $_nilr$ and $_assoc$, for all elements", "label": "axiom Aop_rect_CProp2 (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_801 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop) (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) (x_801 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) : cic.Term cic.prop (Q_ x_801)", "predict": " $x$ of $cic.Term$ of $univs.Type0$ and $A$, we have $Q_ x$.\naxiom aop_rect_CProp2 (A : Univ) (nil : Term Type0) (Q_ : x : Term Type0 → A → Prop) : ∀ op : (x : Term Type0) → A → Term Type0 → A → Term Type0 → ∀ a : Term Type0 → A → Prop → ∀ x : Term Type0 → A, Q_ x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nMatch_min_spec. Soient $_n$ et $_b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soit $return_sort$ un élément de $cic.Sort$. Soit $return_type$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_minimization.min_spec$ appliqué à $_n$ et $_b$ et $_f$ et $__$ à des éléments de $cic.Univ$ de $return_sort$. Soit $case_found_min_spec$ une fonction des éléments $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $_b$ et $m$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $m$ et $matita_arithmetics_nat.plus$ appliqué à $_n$ et $_b$ et des éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $_f$ appliqué à $m$ et $matita_basics_bool.true$ et des fonctions $__3$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__3$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $_b$ et $i$ et des éléments $__4$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $m$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $_f$ appliqué à $i$ et $matita_basics_bool.false$ à des éléments de $cic.Term$ de $return_sort$ et", "label": "axiom match_min_spec (_n _b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (return_sort : cic.Sort) (return_type : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (z : cic.Term cic.prop (matita_arithmetics_minimization.min_spec _n _b _f __)) -> cic.Univ return_sort) (case_found_min_spec : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le _b m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt m (matita_arithmetics_nat.plus _n _b))) -> (__2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f m) matita_basics_bool.true)) -> (__3 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.le _b i)) -> (__4 : cic.Term cic.prop (matita_arithmetics_nat.lt i m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f i) matita_basics_bool.false)) -> cic.Term return", "predict": " de $return_type$ appliqué à $return_sort$ et des fonctions $case$ des éléments $x$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $y$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_minimization.min_spec$ appliqué à $_n$ et $_b$ et $_f$ et $x$ et $y$ à des éléments de $cic.Univ$ de $return_sort$. Soit $return$ une fonction des éléments $x$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $y$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_minimization.min_spec$ appliqué à $_n$ et $_b$ et $_f$ et $x$ et $y$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $return_sort$ et des fonctions $case$ des éléments $x$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $y$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_minimization.min_spec$ appliqué à $_n$ et $_b$ et $_f$ et $x$ et $y$ à des éléments de $cic.Univ$ de $return_sort$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nLet_clause_10471. Let $n1$ and $n2$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p1$ and $p2$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $op$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $B$ and $nil$. Let $f1$ and $f2$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Let $_clearme$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_bigops.iso$ applied to $B$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$. Let $h$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme0$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $cic.prod$ applied to $univs.Type0$ and $univs.Type0$ and $matita_arithmetics_nat.nat$ and the function that maps $__$ to $matita_arithmetics_nat.nat$ and the function that maps $k$ to $matita_basics_logic.And$ applied to $matita_basics_logic.And$ applied to $cic.prod$ applied to $univs.Type0$ and $cic.prop$ and $matita_arithmetics_nat.nat$ and the function that maps $i$ to $c", "label": "let_clause_10471 : n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n2 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> p2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> B : cic.Univ univs.Type0 -> nil : cic.Term univs.Type0 B -> op : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil) -> f1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 B) -> f2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 B) -> _clearme : cic.Term cic.prop (matita_arithmetics_bigops.iso B (matita_arithmetics_bigops.mk_range B f1 n1 p1) (matita_arithmetics_bigops.mk_range B f2 n2 p2)) -> h : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> _clearme0 : cic.Term cic.prop (matita_basics_logic.ex (cic.prod univs.Type0 univs.Type0 matita_arithmetics_nat.nat (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_arithmetics_nat.nat)) (k : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_arithmetics_nat.nat) =>", "predict": "ic.eq$ applied to $f1$ applied to $n1$ and $f2$ applied to $n2$ and $h$ applied to $k$ and $p1$ applied to $n1$ and $p2$ applied to $n2$ and the function that maps $j$ to $cic.eq$ applied to $B$ applied to $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$ and $h$ applied to $j$ ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nBool_rect_CProp3_body. Låt $Q_$ vara en funktion från element $_x_353$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_true$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_bool.true$. Låt $_H_false$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_bool.false$. Då för alla element $x_353$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_353$.\nassistant\n", "label": "bool_rect_CProp3_body : Q_ : (_x_353 : cic.Term univs.Type0 matita_basics_bool.bool -> cic.Univ cic.prop) -> _H_true : cic.Term cic.prop (Q_ matita_basics_bool.true) -> _H_false : cic.Term cic.prop (Q_ matita_basics_bool.false) -> x_353 : cic.Term univs.Type0 matita_basics_bool.bool -> cic.Term cic.prop (Q_ x_353) .", "predict": "bool_rect_CProp3_body : (x_353 : Elem (Term (univs Type0))) -> (Q_ : (x_353 : Elem (Term (univs Type0))) -> (bool) -> Elem (prop)) -> (H_true : (Q_ (true)) : Elem (prop)) -> (H_false : (Q_ (false)) : Elem (prop)) -> Proof (forall (x_353 : Elem (Term (univs Type0))) (prop (Q_ x_353))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nLet_clause_1686. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Hind$ vara en funktion från element $p$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $p$ och $m$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$ till element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.pred$ applicerat på $p$ och $matita_arithmetics_exp.exp$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $a$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $a$ och $matita_basics_logic.eq$ applicerat på $cic.lift$", "label": "Axiom let_clause_1686 : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall Hind : ((p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt p m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_chebyshev_psi.Psi p) (matita_arithmetics_nat.times (matita_arithmetics_nat.pred p) (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) p) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))), forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a))", "predict": " applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ applicerat på $a$ och $matita_arithmetics_nat.times$ applicerat sur $matita_arithmetics_nat.pred$ applicerat sur $a$ et $matita_arithmetics_exp.exp$ applicerat sur $matita_arithmetics_nat.S$ applicerat sur $matita_arithmetics_nat.S$ applicerat sur $matita_arithmetics_nat.O$ et $a$ et $matita_basics_logic.eq$ applicerat sur $cic.lift$ applicerat sur $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ applicerat sur $a$ et $matita_arithmetics_nat.times$ applicerat sur $matita_arithmetics_nat.S$ applicerat sur $matita_arithmetics_nat.S$ applicerat sur $matita_arithmetics_nat.O$.\n\nAxiom clause_1686 : forall n : univs.Type0, forall m : matita_arithmetics_nat.nat, forall H : p : univs.Type0 -> matita_arithmetics_nat.nat -> prop, forall __ : p -> matita_arithmetics_nat.lt p m -> prop, forall __1 : p -> matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.O)) p -> prop, forall a : univs.Type0 -> matita_arithmetics_nat.nat, forall _clearme : (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_nat.nat)) m) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) a) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_chebyshev_chebyshev_psi.Psi) a) ("}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nRcomp. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_R1$ och $_R2$ vara element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $A$. Låt $_a1$ och $_a2$ vara element av $cic.Term$ av $univs.Type0$ och $A$. Då håller $cic.Univ$ för $cic.prop$.\nassistant\n", "label": "axiom Rcomp (A : cic.Univ univs.Type0) (_R1 _R2 : cic.Term univs.Type0 (matita_basics_relations.relation A)) (_a1 _a2 : cic.Term univs.Type0 A) : cic.Univ cic.prop", "predict": "axiom rcomp (A : univs.Type0) (R1 R2 : cic.Term (univs.Type0) (matita_basics_relations.relation)) (a1 a2 : cic.Term (univs.Type0) A) : cic.Univ (cic.prop)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nFilter_DPair. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $univs.Type0$. Låt $return_sort$ vara ett element av $cic.Sort$. Låt $return_type$ vara en funktion från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $return_sort$. Då för alla funktioner $return$ från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $z$, för alla element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$, håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.\nassistant\n", "label": "filter_DPair : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) -> return_sort : cic.Sort -> return_type : (z : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Univ return_sort) -> return : (z : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Term return_sort (return_type z)) -> z : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Term return_sort (return_type z) .", "predict": "filter_DPair : (A : Elem (univs Type0)) -> (f : (x : Elem (cic Term (univs Type0))) -> Elem (univ (cic Type0))) -> (return_sort : Elem (cic Sort)) -> (return_type : (z : Elem (cic Term (univs Type0))) -> (dpair A f) -> Elem (cic Term (return_sort))) -> Proof (forall (return : (z : Elem (cic Term (univs Type0))) -> (dpair A f) -> Elem (cic Term (return_sort))) (forall (z : Elem (cic Term (univs Type0))) -> (dpair A f) -> Proof (and (Eq (sort (return z)) (return_sort)) (Eq (type (return z)) (return_type z)))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nLt_sigma_p. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p1$ and $p2$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $g1$ and $g2$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be a function from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p1$ applied to $i$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p2$ applied to $i$ and $matita_basics_bool.true$. Let $__1$ be a function from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p1$ applied to $i$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $g1$ applied", "label": "lt_sigma_p : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> p2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> g1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> g2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> __ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt i n) -> __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p2 i) matita_basics_bool.true)) -> __1 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt i n) -> __2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true) -> cic.Term cic.prop (matita_arithmetics_nat.le (g1 i) (g2 i))) -> __2 : cic.Term cic.prop (matita", "predict": " to $i$ and $n$ and $g2$ applied to $i$ and $n$. Let $f$ be a function from elements $x$ of $cic.Term$ of $univs.Type0$ and elements $y$ of $cic.Term$ of $univs.Type0$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ and elements $z$ of $cic.Term$ of $univs.Type0$ and elements $w$ of $cic.Term$ of $univs.Type0$ and elements $v$ of $cic.Term$ of $univs.Type0$ and elements $u$ of $cic.Term$ of $univs.Type0$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ and elements $t$ of $cic.Term$ of $univs.Type0$ and elements $s$ of $cic.Term$ of $univs.Type0$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $x$ be a variable of $cic.Term$ of $univs.Type0$. Let $y$ be a variable of $cic.Term$ of $univs.Type0$. Let $z$ be a variable of $cic.Term$ of $univs.Type0$. Let $w$ be a variable of $cic.Term$ of $univs.Type0$. Let $v$ be a variable of $cic.Term$ of $univs.Type0$. Let $u$ be a variable of $cic.Term$ of $univs.Type0$. Let $t$ be a variable of $cic.Term$ of $univs.Type0$. Let $s$ be a variable of $cic.Term$ of $univs.Type0$. Let $f$ be a function from elements $x$ of $cic.Term$ of $univs.Type0$ and elements $y$ of $cic.Term$ of $univs.Type0$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ and elements $z$ of $cic.Term$ of $univs.Type0"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nNilr_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $xxx$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $nil$. Let $a$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_basics_lists_list.op$ applied to $A$ and $nil$ and $xxx$ and $a$ and $nil$ and $a$.\nassistant\n", "label": "postulate nilr_body : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (xxx : cic.Term univs.Type0 (matita_basics_lists_list.Aop A nil)) -> (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_basics_lists_list.op A nil xxx a nil) a)", "predict": "postulate nilr_body : (A : Univ Type0) -> (nil : Term Type0) -> (xxx : Term (Aop (List Type0) nil)) -> (a : Term Type0) -> prop (eq (lift Type0 Type2 A) (op (List Type0) nil xxx a nil a))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nMatch_list. Pour tous les éléments $_A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $return_sort$ de $cic.Sort$, pour toutes les fonctions $return_type$ des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Univ$ de $return_sort$, pour tous les éléments $case_nil$ de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_basics_lists_list.nil$ appliqué à $_A$, pour toutes les fonctions $case_cons$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_basics_lists_list.cons$ appliqué à $_A$ et $__$ et $__1$, pour tous les éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.\nassistant\n", "label": "axiom match_list (_A : cic.Univ univs.Type0) (return_sort : cic.Sort) (return_type : (z : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ return_sort) (case_nil : cic.Term return_sort (return_type (matita_basics_lists_list.nil _A))) (case_cons : (__ : cic.Term univs.Type0 _A) -> (__1 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term return_sort (return_type (matita_basics_lists_list.cons _A __ __1))) (z : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) : cic.Term return_sort (return_type z)", "predict": "axiom match_list (A : Univ) (return_sort : Sort) (z : Term A) : ∀ return_type : Type0, ∀ case_nil : Term return_sort (return_type z) ∀ __ : Type0 → A → List (Term A) → ∀ case_cons : Term (return_sort (return_type __ z) (return_type __1)) (case_cons (list (Term A) __) (Term A) __1) ∀ z : Term A, Term (return_sort (return_type z))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nNot_inv_rect_Type3. Soit $x1$ un élément de $cic.Univ$ de $cic.prop$. Alors pour tous les éléments $Hterm$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $x1$, pour toutes les fonctions $P$ des éléments $_z269$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $x1$ à des éléments de $cic.Univ$ de $univs.Type3$, pour toutes les fonctions $_H1$ des fonctions $x_89$ des éléments $__$ de $cic.Term$ de $cic.prop$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$ et des éléments $_z270$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $cic.prop$ et $univs.Type2$ et $matita_basics_logic.Not$ appliqué à $x1$ et $Hterm$ et $matita_basics_logic.nmk$ appliqué à $x1$ et $x_89$ à des éléments de $cic.Term$ de $univs.Type3$ et de $P$ appliqué à $matita_basics_logic.nmk$ appliqué à $x1$ et $x_89$, $cic.Term$ tient pour $univs.Type3$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "axiom Not_inv_rect_Type3 (x1 : cic.Univ cic.prop) (Hterm : cic.Term cic.prop (matita_basics_logic.Not x1)) (P : (_z269 : cic.Term cic.prop (matita_basics_logic.Not x1)) -> cic.Univ univs.Type3) (_H1 : (x_89 : (__ : cic.Term cic.prop x1) -> cic.Term cic.prop matita_basics_logic.False) -> (_z270 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.Not x1)) Hterm (matita_basics_logic.nmk x1 x_89))) -> cic.Term univs.Type3 (P (matita_basics_logic.nmk x1 x_89))) : cic.Term univs.Type3 (P Hterm)", "predict": "axiom not_inv_rect_Type3 (x1 : cic.Univ) (Hterm : cic.Term (cic.prop)) : ∀ P : ∀ _z269 : cic.Term (cic.prop) → matita_basics_logic.Not x1 → ∀ _H1 : x_89 (x : cic.Term (cic.prop)) → matita_basics_logic.False → ∀ _z270 : cic.Term (cic.prop) → matita_basics_logic.eq (cic.lift (cic.prop) (univs.Type2)) (matita_basics_logic.Not x1) ∧ Hterm ∧ (matita_basics_logic.nmk x1 x_89) → ∀ (t : univs.Type3) (p : P (matita_basics_logic.nmk x1 x_89)) : cic.Term (univs.Type3) → P (Hterm)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nDpi1__o__aop__o__op. Låt $x0$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x1$ vara ett element av $cic.Term$ av $univs.Type0$ och $x0$. Då för alla funktioner $x2$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$, för alla element $x3$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $matita_arithmetics_bigops.ACop$ applicerat på $x0$ och $x1$ och $x2$, för alla element $_x_887$ och $_x_888$ av $cic.Term$ av $univs.Type0$ och $x0$, håller $cic.Term$ för $univs.Type0$ och $x0$.\nassistant\n", "label": "postulate dpi1__o__aop__o__op : (x0 : cic.Univ univs.Type0) -> (x1 : cic.Term univs.Type0 x0) -> (x2 : (__ : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x0 x1)) -> cic.Univ univs.Type0) -> (x3 : cic.Term univs.Type0 (matita_basics_types.DPair (matita_arithmetics_bigops.ACop x0 x1) x2)) -> (_x_887 : cic.Term univs.Type0 x0) -> (_x_888 : cic.Term univs.Type0 x0) -> cic.Term univs.Type0 x0", "predict": "postulate dpi1__o__aop__o__op : (x0 : univs.Type0) -> (x1 : Term univs.Type0 x0) -> all (x2 : (x : Term univs.Type0) -> ACop x0 x1) (all (x3 : Term univs.Type0) (dpair (ACop x0 x1) x2) (all (x : Term univs.Type0) (x0) . Term univs.Type0 x0))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nFact_pi_p2. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_factorial.fact$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and $matita_arithmetics_bigops.bigop$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and the function that maps $p$ to $matita_arithmetics_primes.primeb$ applied to $p$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $p$ to $matita_arithmetics_bigops.bigop$ applied to $matita_arithmetics_log.log$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and the function that maps $i$ to $matita_basics_bool.true$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_exp.exp$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_div_and_mod.div$ applied to $n$ and $matita_arithmetics_exp.exp$ applied to $p$ and $matita_arithmetics_nat.S$ applied to $i$ and $matita_ar", "label": "postulate fact_pi_p2 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_factorial.fact (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_primes.primeb p) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_bigops.bigop (matita_arithmetics_log.log p (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_bool.true) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_nat.times (matita_arithmetics_exp.exp p (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_div_and_mod.div n (matita_arithmetics_exp.exp p (matita_arith", "predict": "ithmetics_nat.times$ and the function that maps $i$ to $matita_basics_bool.true$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $matita_basics_bool.true$ ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nMatch_Sig. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $return_sort$ un élément de $cic.Sort$. Soit $return_type$ une fonction des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $return_sort$. Alors pour toutes les fonctions $case_mk_Sig$ des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $_f$ appliqué à $pi1$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $A$ et $_f$ et $pi1$ et $_pi2$, pour tous les éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.\nassistant\n", "label": "postulate match_Sig : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ return_sort) -> (case_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term return_sort (return_type (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (z : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term return_sort (return_type z)", "predict": "postulate match_Sig : (A : Univ Type0) -> (f : Term Type0 -> A -> Univ prop) -> return_sort : Sig A f -> (z : Term Type0) -> (case_mk_Sig : pi1 : Term Type0 -> pi2 : Term prop -> f pi1 -> return_sort (mk_Sig A f pi1 pi2)) -> (z : Sig A f) -> all (Term Type0) (return_sort) (return_type z)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nP_ord_to_exp1. For all elements $p$ and $n$ and $q$ and $r$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $p$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.p_ord$ applied to $n$ and $p$ and $matita_basics_types.mk_Prod$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $q$ and $r$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.And$ applied to $matita_basics_logic.Not$ applied to $matita_arithmetics_primes.divides$ applied to $p$ and $r$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_exp.exp$ applied to $p$ and $q$ and $r$.\nassistant\n", "label": "p_ord_to_exp1 : p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> q : cic.Term univs.Type0 matita_arithmetics_nat.nat -> r : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> __2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord n p) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat q r)) -> cic.Term cic.prop (matita_basics_logic.And (matita_basics_logic.Not (matita_arithmetics_primes.divides p r)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.times (matita_arithmetics_exp.exp p q) r))) .", "predict": "p_ord_to_exp1 : (p : cic.Term univs.Type0) -> (n : matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0) -> (r : matita_arithmetics_nat.nat) -> (x : cic.prop) -> (y : matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p) -> (z : cic.prop) -> (a : matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> (b : cic.prop) -> (c : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_types.Prod (matita_arithmetics_nat.nat) (matita_arithmetics_nat.nat))) -> (d : matita_basics_types.mk_Prod (matita_arithmetics_nat.nat) (matita_arithmetics_nat.nat) q r) -> x : cic.prop : matita_basics_logic.And (matita_basics_logic.Not (matita_arithmetics_primes.divides p r)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) n (matita_arithmetics_nat.times (matita_arithmetics_exp.exp p q) r)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nEq_div_div_div_div. Soient $n$ et $m$ et $q$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_div_and_mod.div$ appliqué à $matita_arithmetics_div_and_mod.div$ appliqué à $q$ et $n$ et $m$ et $matita_arithmetics_div_and_mod.div$ appliqué à $matita_arithmetics_div_and_mod.div$ appliqué à $q$ et $m$ et $n$.\nassistant\n", "label": "eq_div_div_div_div : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> q : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.div (matita_arithmetics_div_and_mod.div q n) m) (matita_arithmetics_div_and_mod.div (matita_arithmetics_div_and_mod.div q m) n)) .", "predict": "eq_div_div_div_div : (n : Elem (Term (univs Type0))) -> (m : Elem (Term (matita_arithmetics_nat nat))) -> (q : Elem (Term (cic prop))) -> (x : Elem (Term (matita_arithmetics_nat lt (nd 0) n))) -> (y : Elem (Term (matita_arithmetics_nat lt (nd 0) m))) -> Proof (and (eq (lift (univs Type0) (univs Type2)) (nat)) (and (eq (div (div q n) m) (div (q (nd 0)) (m (nd 0)))) (eq (div (div q m) n) (div (q (nd 0)) (m (nd 0))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nTri_relation. För alla element $__$ och $__1$ och $__2$ av $cic.Univ$ av $univs.Type0$, håller $cic.Univ$ för $univs.Type0$.\nassistant\n", "label": "axiom tri_relation (__ __1 __2 : cic.Univ univs.Type0) : cic.Univ univs.Type0", "predict": "axiom tri_relation (x y z : Type) : Univ Type0"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nR1. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $_x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $Q_$ une fonction des éléments $x_19$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $_x_20$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_19$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $_H_refl$ un élément de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$. Soit $x_19$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $x_20$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_19$. Alors $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_19$ et $x_20$.\nassistant\n", "label": "Axiom R1 : forall A : cic.Univ univs.Type2, forall _x : cic.Term univs.Type2 A, forall Q_ : ((x_19 : cic.Term univs.Type2 A) -> (_x_20 : cic.Term cic.prop (matita_basics_logic.eq A _x x_19)) -> cic.Univ univs.Type0), forall _H_refl : cic.Term univs.Type0 (Q_ _x (matita_basics_logic.refl A _x)), forall x_19 : cic.Term univs.Type2 A, forall x_20 : cic.Term cic.prop (matita_basics_logic.eq A _x x_19), cic.Term univs.Type0 (Q_ x_19 x_20) .", "predict": "Axiom r1 : forall A : univs.Type2, forall _x : cic.Term (A : univs.Type2), forall Q_ : (x_19 : cic.Term (A : univs.Type2)) -> (x_20 : cic.Term (cic.prop (A : univs.Type2))) -> matita_basics_logic.eq (A : univs.Type2) _x, forall _H_refl : (x_19 : cic.Term (A : univs.Type0)) -> (matita_basics_logic.refl (A : univs.Type2) _x), forall x_19 : cic.Term (A : univs.Type2), forall x_20 : cic.Term (cic.prop (A : univs.Type2)) -> matita_basics_logic.eq (A : univs.Type2) _x, (cic.Term : univs.Type0) (Q_ : x_19) (x_20) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nSum_rect_Type1. Let $_A$ and $_B$ be elements of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_546$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $univs.Type1$. Let $_H_inl$ be a function from elements $x_547$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_basics_types.inl$ applied to $_A$ and $_B$ and $x_547$. Let $_H_inr$ be a function from elements $x_548$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_basics_types.inr$ applied to $_A$ and $_B$ and $x_548$. Then for all elements $x_546$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$, $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_546$.\nassistant\n", "label": "Axiom Sum_rect_Type1 : forall _A : cic.Univ univs.Type0, forall _B : cic.Univ univs.Type0, forall Q_ : ((_x_546 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ univs.Type1), forall _H_inl : ((x_547 : cic.Term univs.Type0 _A) -> cic.Term univs.Type1 (Q_ (matita_basics_types.inl _A _B x_547))), forall _H_inr : ((x_548 : cic.Term univs.Type0 _B) -> cic.Term univs.Type1 (Q_ (matita_basics_types.inr _A _B x_548))), forall x_546 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B), cic.Term univs.Type1 (Q_ x_546) .", "predict": "Axiom sum_rect_Type1 : forall A : univs.Type0, forall B : univs.Type0, forall Q_ : x : Term univs.Type0 -> Sum A B -> Univ univs.Type1, forall H_inl : x : Term univs.Type0 -> A -> Term univs.Type1 -> Q_ (inl A B) x, forall H_inr : x : Term univs.Type0 -> B -> Term univs.Type1 -> Q_ (inr A B) x -> forall x : Term univs.Type0, Q_ x (Sum A B) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nP_ord_O_to_not_divides. Let $n$ and $i$ and $r$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.p_ord$ applied to $n$ and $matita_arithmetics_primes.nth_prime$ applied to $i$ and $matita_basics_types.mk_Prod$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $r$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_arithmetics_primes.divides$ applied to $matita_arithmetics_primes.nth_prime$ applied to $i$ and $n$.\nassistant\n", "label": "axiom p_ord_O_to_not_divides (n i r : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord n (matita_arithmetics_primes.nth_prime i)) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat matita_arithmetics_nat.O r))) : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides (matita_arithmetics_primes.nth_prime i) n))", "predict": "axiom p_ord_O_to_not_divides (n i r : Term Type0) (x : Lt O n) (x1 : Eq (lift Type0 Type2) (Prod (nat nat) (nat nat))) (x2 : p_ord n (nth_prime i)) (x3 : mk_Prod (nat nat) (O r)) : Prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nSig_inv_ind. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Univ$ av $cic.prop$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $x1$ och $x2$. Då för alla funktioner $P$ från element $_z1170$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $pi1$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_pi2$ av $cic.Term$ av $cic.prop$ och $x2$ applicerat på $pi1$ och element $_z1171$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Sig$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_Sig$ applicerat på $x1$ och $x2$ och $pi1$ och $_pi2$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.mk_Sig$ applicerat på $x1$ och $x2$ och $pi1$ och $_pi2$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "Sig_inv_ind : x1 : cic.Univ univs.Type0 -> x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) -> Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) -> P : (_z1170 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) -> cic.Univ cic.prop) -> _H1 : (pi1 : cic.Term univs.Type0 x1 -> _pi2 : cic.Term cic.prop (x2 pi1) -> _z1171 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2)) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) -> cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term cic.prop (P Hterm) .", "predict": "sig_inv_ind : (x1 : Elem (univs Type0)) -> (x2 : (x : Elem (Term Type0)) -> Elem (univ Type0) (prop)) -> Proof (forall (P : (z1170 : Elem (Term Type0)) -> (matita_basics_types Sig (x1) (x2)) -> Elem (univ (prop))) (forall (H1 : (pi1 : Elem (Term Type0)) -> (x1) -> (pi2 : Elem (prop)) -> (x2) (pi1) (z1171 : Elem (prop)) (matita_basics_logic eq (cic lift (univ Type0) (univ Type2)) (matita_basics_types Sig (x1) (x2)) (Hterm) (matita_basics_types mk_Sig (x1) (x2)) (pi1) (pi2))) (forall (P : (z1170 : Elem (Term Type0)) -> (matita_basics_types Sig (x1) (x2)) -> Elem (univ (prop))) (P (matita_basics_types mk_Sig (x1) (x2)) (pi1) (pi2)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nLt_O_ord_rem. For all elements $p$ and $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $p$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_ord.ord_rem$ applied to $n$ and $p$.\nassistant\n", "label": "axiom lt_O_ord_rem (p n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O (matita_arithmetics_ord.ord_rem n p))", "predict": "axiom lt_O_ord_rem (p n : Term Type0) (x : Lt (S O) p) (y : Lt O n) : Lt O (ord_rem n p)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nLet_clause_16002. Soient $m$ et $n$ et $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $posm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$. Soit $pnm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Soit $c$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $d$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics", "label": "postulate let_clause_16002 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat", "predict": "_nat.O$. Soit $d$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $t$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.plus$ appliqué à $c$ et $d$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Soit $p$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.and$ appliqué à $posn$ et $posm$ et $pnm$ et $t$. Let_clause_16002 : $c$ et $d$ et $t$ et $p$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nLe_plus. Soient $n1$ et $n2$ et $m1$ et $m2$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n1$ et $n2$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $m1$ et $m2$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $n1$ et $m1$ et $matita_arithmetics_nat.plus$ appliqué à $n2$ et $m2$.\nassistant\n", "label": "axiom le_plus (n1 n2 m1 m2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.le n1 n2)) (__1 : cic.Term cic.prop (matita_arithmetics_nat.le m1 m2)) : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.plus n1 m1) (matita_arithmetics_nat.plus n2 m2))", "predict": "axiom le_plus (n1 n2 : cic.Term univs.Type0) (m1 m2 : matita_arithmetics_nat.nat) (x : matita_arithmetics_nat.le n1 n2) (y : matita_arithmetics_nat.le m1 m2) : matita_arithmetics_nat.le (matita_arithmetics_nat.plus n1 m1) (matita_arithmetics_nat.plus n2 m2)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nLet_clause_16004. Soient $m$ et $n$ et $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $posn$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $posm$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$, pour tous les éléments $pnm$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $c$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $_clearme$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $d$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $d", "label": "Axiom let_clause_16004 : forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), forall pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)), forall c : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (fun d => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n))", "predict": "$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $x$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, il existe un élément $e$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ tel que pour tous les éléments $y$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, il existe un élément $w$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nBool_rect_Type1_body. För alla funktioner $Q_$ från element $_x_341$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Univ$ av $univs.Type1$, för alla element $_H_true$ av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_basics_bool.true$, för alla element $_H_false$ av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_basics_bool.false$, för alla element $x_341$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_341$.\nassistant\n", "label": "postulate bool_rect_Type1_body : (Q_ : (_x_341 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ univs.Type1) -> (_H_true : cic.Term univs.Type1 (Q_ matita_basics_bool.true)) -> (_H_false : cic.Term univs.Type1 (Q_ matita_basics_bool.false)) -> (x_341 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type1 (Q_ x_341)", "predict": "postulate bool_rect_Type1_body : (Q : (x_341 : Term Type0) -> Bool) -> (H_true : Term Type1) -> (H_false : Term Type1) -> (x_341 : Term Type0) -> Term Type1 (Q x_341)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nEq_rect_Type5. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type2$. Låt $_x$ vara ett element av $cic.Term$ av $univs.Type2$ och $A$. Låt $Q_$ vara en funktion från element $x_7$ av $cic.Term$ av $univs.Type2$ och $A$ och element $_x_8$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_7$ till element av $cic.Univ$ av $univs.Type5$. Då för alla element $_H_refl$ av $cic.Term$ av $univs.Type5$ och $Q_$ applicerat på $_x$ och $matita_basics_logic.refl$ applicerat på $A$ och $_x$, för alla element $x_7$ av $cic.Term$ av $univs.Type2$ och $A$, för alla element $x_8$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_7$, håller $cic.Term$ för $univs.Type5$ och $Q_$ applicerat på $x_7$ och $x_8$.\nassistant\n", "label": "Axiom eq_rect_Type5 : forall A : cic.Univ univs.Type2, forall _x : cic.Term univs.Type2 A, forall Q_ : ((x_7 : cic.Term univs.Type2 A) -> (_x_8 : cic.Term cic.prop (matita_basics_logic.eq A _x x_7)) -> cic.Univ univs.Type5), forall _H_refl : cic.Term univs.Type5 (Q_ _x (matita_basics_logic.refl A _x)), forall x_7 : cic.Term univs.Type2 A, forall x_8 : cic.Term cic.prop (matita_basics_logic.eq A _x x_7), cic.Term univs.Type5 (Q_ x_7 x_8) .", "predict": "Axiom eq_rect_Type5 : forall A : univs.Type2, forall x : cic.Term univs.Type2 A, forall Q_ : x -> A -> cic.Term univs.Type5 (A, x) -> cic.Term univs.Type2 A, forall H_refl : x -> matita_basics_logic.refl A x, forall x_7 : cic.Term univs.Type2 A, forall x_8 : cic.Term (cic.prop (A, x)) (matita_basics_logic.eq (A, x) x_7), cic.Term univs.Type5 (Q_ x_7 x_8) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nOr_div_mod. Låt $n$ och $q$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $q$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.Or$ applicerat på $matita_basics_logic.And$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_div_and_mod.mod$ applicerat på $n$ och $q$ och $q$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.S$ applicerat på $n$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_div_and_mod.div$ applicerat på $n$ och $q$ och $q$ och $matita_basics_logic.And$ applicerat på $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_div_and_mod.mod$ applicerat på $n$ och $q$ och $q$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.S$ applicerat på $n$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_div_and_mod.div$ applicerat på $n$ och $q$ och $q$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_div_and_mod.mod$ applicerat på $n$ och $q$.\nassistant\n", "label": "Axiom or_div_mod : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall q : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O q), cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.S (matita_arithmetics_div_and_mod.mod n q)) q) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.S n) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_div_and_mod.div n q)) q))) (matita_basics_logic.And (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_div_and_mod.mod n q)) q) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.S n) (matita_arithmetics_nat.plus (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div n q) q) (matita_arithmetics_nat.S (matita_arithmetics_div_and_mod.mod n q)))))) .", "predict": "Axiom or_div_mod : forall n : univs.Type0, forall q : matita_arithmetics_nat.nat, (matita_basics_logic.lt matita_arithmetics_nat.O q -> matita_basics_logic.or (matita_basics_logic.and (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n) (matita_arithmetics_div_and_mod.mod n q) = q) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.S (matita_arithmetics_div_and_mod.div n q)) = q) (matita_basics_logic.and (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_div_and_mod.mod n q)) q) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n) (matita_basics_logic.eq (matita_arithmetics_nat.S (matita_arithmetics_div_and_mod.div n q)) (matita_arithmetics_nat.plus (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div n q) (matita_arithmetics_nat.S (matita_arithmetics_div_and_mod.mod n q))) q)) = (matita_arithmetics_nat.S (matita_arithmetics_div_and_mod.mod n q)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nList_rect_Type4_body. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_721$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type4$. Soit $_H_nil$ un élément de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_basics_lists_list.nil$ appliqué à $_A$. Soit $_H_cons$ une fonction des éléments $x_723$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $x_722$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ et des éléments $_x_725$ de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $x_722$ à des éléments de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_basics_lists_list.cons$ appliqué à $_A$ et $x_723$ et $x_722$. Soit $x_721$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$. Alors $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_721$.\nassistant\n", "label": "Axiom list_rect_Type4_body : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_721 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ univs.Type4), forall _H_nil : cic.Term univs.Type4 (Q_ (matita_basics_lists_list.nil _A)), forall _H_cons : ((x_723 : cic.Term univs.Type0 _A) -> (x_722 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_725 : cic.Term univs.Type4 (Q_ x_722)) -> cic.Term univs.Type4 (Q_ (matita_basics_lists_list.cons _A x_723 x_722))), forall x_721 : cic.Term univs.Type0 (matita_basics_lists_list.list _A), cic.Term univs.Type4 (Q_ x_721) .", "predict": "Axiom list_rect_Type4_body : forall A : Univ, (Q_ : x : Term Type0 -> list (Term Type0) -> Type4 -> Prop -> Prop -> Prop) -> (H_nil : Term Type4 (Q_ A (nil (Term Type0))) -> (x : x : Term Type0 -> A -> x : Term Type0 -> list (Term Type0) -> x : Term Type4 (Q_ A (cons x A x)) -> Prop) -> (x : Term Type0 -> A -> list (Term Type0) -> Prop) -> (x : Term Type0 -> A -> list (Term Type0) -> Prop) -> (x : Term Type0 -> A -> list (Term Type0) -> Prop) -> (x : Term Type0 -> A -> list (Term Type0) -> Prop) -> (x : Term Type0 -> A -> list (Term Type0) -> Prop) -> (x : Term Type0 -> A -> list (Term Type0) -> Prop) -> (x : Term Type0 -> A -> list (Term Type0) -> Prop) -> (x : Term Type0 -> A -> list (Term Type0) -> Prop) -> (x : Term Type0 -> A -> list (Term Type0) -> Prop) -> (x : Term Type0 -> A -> list (Term Type0) -> Prop) -> (x : Term Type0 -> A -> list (Term Type0) -> Prop) -> (x : Term Type0 -> A -> list (Term Type0) -> Prop) -> (x : Term Type0 -> A -> list (Term Type0) -> Prop) -> (x : Term Type0 -> A -> list (Term Type0) -> Prop) -> (x : Term Type0 -> A -> list (Term Type0) -> Prop) -> (x : Term Type0 -> A -> list (Term Type0) -> Prop) -> (x : Term Type0 -> A -> list (Term Type0) -> Prop) -> (x : Term Type0 -> A -> list (Term Type0) -> Prop) -> (x : Term Type0 -> A -> list (Term Type0) -> Prop) -> (x : Term Type0 -> A -> list (Term Type0) -> Prop) -> (x : Term Type0 -> A -> list (Term Type0) -> Prop) -> (x : Term Type0 -> A -> list"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nDPair_inv_rect_Type3. Pour tous les éléments $x1$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $x2$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $univs.Type0$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1116$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type3$, pour toutes les fonctions $_H1$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $x2$ appliqué à $dpi1$ et des éléments $_z1117$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$ à des éléments de $cic.Term$ de $univs.Type3$ et de $P$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$, $cic.Term$ tient pour $univs.Type3$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "axiom DPair_inv_rect_Type3 (x1 : cic.Univ univs.Type0) (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) (P : (_z1116 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ univs.Type3) (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1117 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type3 (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) : cic.Term univs.Type3 (P Hterm)", "predict": "axiom dpair_inv_rect_Type3 (x1 : Univ) (x2 : ∀ __ : Term Type0, Univ) (Hterm : ∀ H : Term Type0, DPair x1 x2) (P : ∀ z1116 : Term Type0, DPair x1 x2 → Univ) (H1 : ∀ dpi1 : Term Type0, x1 → dpi2 : Term Type0, x2 → Eq (lift Univ Type2) (DPair x1 x2) (Hterm (dpi1, dpi2))) (z1117 : ∀ dpi1 : Term Type0, x1 → ∀ dpi2 : Term Type0, x2 → Eq (lift (Univ, Type2)) (DPair x1 x2) (Hterm (dpi1, dpi2))) (z1117 : ∀ dpi1 : Term Type0, x1 → ∀ dpi2 : Term Type0, x2 → Eq (lift (Univ, Type2)) (DPair x1 x2) (Hterm (dpi1, dpi2))) (P : ∀ z1116 : Term Type0, DPair x1 x2 → Univ) (dpi1 : Term Type0) (dpi2 : Term Type0) : Term Type3 := P (DPair x1 x2) (dpi1, dpi2)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nDop_rect_CProp5_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Då för alla funktioner $Q_$ från element $_x_959$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_Dop$ från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $_nil$ och $_nil$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $_nil$ och $sum$ och $prod$ applicerat på $a$ och $b$ och $prod$ applicerat på $a$ och $c$ till element av $cic.Term$ av $c", "label": "postulate Dop_rect_CProp5_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_959 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_959 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term cic.prop (Q_ x_959)", "predict": "ic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $b$ och $prod$ applicerat på $a$ och $c$ till element av $cic.Term$ av $cic.prop$ ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nAnd_rect_CProp2_body. Låt $_A$ och $_B$ vara element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_158$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H_conj$ från element $x_160$ av $cic.Term$ av $cic.prop$ och $_A$ och element $x_159$ av $cic.Term$ av $cic.prop$ och $_B$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_logic.conj$ applicerat på $_A$ och $_B$ och $x_160$ och $x_159$, för alla element $x_158$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_158$.\nassistant\n", "label": "axiom And_rect_CProp2_body (_A _B : cic.Univ cic.prop) (Q_ : (_x_158 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ cic.prop) (_H_conj : (x_160 : cic.Term cic.prop _A) -> (x_159 : cic.Term cic.prop _B) -> cic.Term cic.prop (Q_ (matita_basics_logic.conj _A _B x_160 x_159))) (x_158 : cic.Term cic.prop (matita_basics_logic.And _A _B)) : cic.Term cic.prop (Q_ x_158)", "predict": "axiom and_rect_CProp2_body (A B : Prop) (Q : A ∧ B → Prop) : ∀ H_conj : (x : Prop) → A → B → Prop → Q (and A B) → ∀ x : Prop, Q x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nLt_to_le_to_lt_times. Låt $n$ och $m$ och $p$ och $q$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $n$ och $m$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $p$ och $q$. Då för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $q$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.times$ applicerat på $n$ och $p$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $q$.\nassistant\n", "label": "axiom lt_to_le_to_lt_times (n m p q : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt n m)) (__1 : cic.Term cic.prop (matita_arithmetics_nat.le p q)) (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O q)) : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.times n p) (matita_arithmetics_nat.times m q))", "predict": "axiom lt_to_le_to_lt_times (n m p q : Nat) (x : n < m) (y : p ≤ q) : ∀ x : Nat, (n < q → p * n < m * q)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nList_rect_CProp1. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_771$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_nil$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_lists_list.nil$ appliqué à $_A$. Alors pour toutes les fonctions $_H_cons$ des éléments $x_773$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $x_772$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ et des éléments $_x_775$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $x_772$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_lists_list.cons$ appliqué à $_A$ et $x_773$ et $x_772$, pour tous les éléments $x_771$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_771$.\nassistant\n", "label": "axiom list_rect_CProp1 (_A : cic.Univ univs.Type0) (Q_ : (_x_771 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ cic.prop) (_H_nil : cic.Term cic.prop (Q_ (matita_basics_lists_list.nil _A))) (_H_cons : (x_773 : cic.Term univs.Type0 _A) -> (x_772 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_775 : cic.Term cic.prop (Q_ x_772)) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.cons _A x_773 x_772))) (x_771 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) : cic.Term cic.prop (Q_ x_771)", "predict": "axiom list_rect_CProp1 (A : Univ Type0) (Q : ∀ x : Term Type0, ∀ l : list (Univ prop), prop) (H_nil : prop) (H_cons : ∀ x : Term Type0, ∀ l : list (Univ prop), ∀ x' : Term Type0, ∀ l' : list (Univ prop), prop) : ∀ x : Term Type0, ∀ l : list (Univ prop), prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nInjective_transpose. Let $i$ and $j$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_relations.injective$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_permutation.transpose$ applied to $i$ and $j$.\nassistant\n", "label": "postulate injective_transpose : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_relations.injective matita_arithmetics_nat.nat matita_arithmetics_nat.nat (matita_arithmetics_permutation.transpose i j))", "predict": "postulate injective_transpose : (i : Term Type0) -> (j : nat) -> Prop\npostulate injective_transpose : (i : Term Type0) -> (j : nat) -> injective nat nat (transpose i j)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nExp_pi. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all functions $p$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_bigops.bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $matita_arithmetics_exp.exp$ applied to $f$ applied to $i$ and $m$ and $matita_arithmetics_exp.exp$ applied to $matita_arithmetics_bigops.bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $f$ applied to $i$ and $m$.\nassistant\n", "label": "Axiom exp_pi : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall p : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (fun i => p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (fun i => matita_arithmetics_exp.exp (f i) m)) (matita_arithmetics_exp.exp (matita_arithmetics_bigops.bigop n (fun i => p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (fun i => f i)) m)) .", "predict": "Axiom exp_pi : forall n : univs.Type0, forall m : matita_arithmetics_nat.nat, forall p : (cic.Term univs.Type0 * matita_arithmetics_nat.nat -> cic.Term univs.Type0 * matita_basics_bool.bool), forall f : (cic.Term univs.Type0 * matita_arithmetics_nat.nat -> cic.Term univs.Type0 * matita_arithmetics_nat.nat), prop (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_bigops.bigop n (p _)) (matita_arithmetics_exp.exp (f _ m)) (matita_arithmetics_bigops.bigop n (p _)) (matita_arithmetics_exp.exp (f _ m))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nProd_rect_Type1_body. For all elements $_A$ and $_B$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_700$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $univs.Type1$, for all functions $_H_mk_Prod$ from elements $_fst$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_snd$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_basics_types.mk_Prod$ applied to $_A$ and $_B$ and $_fst$ and $_snd$, for all elements $x_700$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$, $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_700$.\nassistant\n", "label": "Prod_rect_Type1_body : _A : cic.Univ univs.Type0 -> _B : cic.Univ univs.Type0 -> Q_ : (_x_700 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) -> cic.Univ univs.Type1) -> _H_mk_Prod : (_fst : cic.Term univs.Type0 _A -> _snd : cic.Term univs.Type0 _B -> cic.Term univs.Type1 (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) -> x_700 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) -> cic.Term univs.Type1 (Q_ x_700) .", "predict": "prod_rect_Type1_body : (A : Elem (univ (Type0))) -> (B : Elem (univ (Type0))) -> Proof (forall (x_700 : Term (Type0)) (Q_ : Prod A B : Elem (univ (Type1))) (forall (H_mk_Prod : (fst : Term (Type0)) -> A -> (snd : Term (Type0)) -> B -> Term (Type1)) (Q_ (mk_Prod A B (fst x_700) (snd x_700)))) (forall (x_700 : Term (Type0)) (Prod A B : Term (Type0)) (Q_ x_700))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nLet_clause_16002. Låt $m$ och $n$ och $a$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $posm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Låt $pnm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $c$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Då för alla element $d$ av $", "label": "axiom let_clause_16002 (m n a b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (λ d => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) (d : cic.Term univs.Type0 matita_ar", "predict": "matita_arithmetics_nat.nat$, är $posn$ och $posm$ och $pnm$ och $_clearme$ och $c$ och $d$ en vänlig uppsättning."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nLt_max_to_false. For all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $n$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_minimization.max$ applied to $n$ and $f$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $m$ and $matita_basics_bool.false$.\nassistant\n", "label": "lt_max_to_false : f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt m n) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_minimization.max n f) m) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.false) .", "predict": "lt_max_to_false : (f : Elem (Term (Type0)) (nat)) -> Proof (forall (n : Elem (Term (Type0)) (nat)) -> forall (m : Elem (Term (Type0)) (nat)) -> forall (p : Prop) -> (Lt m n) -> forall (q : Prop) -> (Lt (max n (f m)) m) -> Proof (Eq (lift (Type0) (Type2)) (bool)) (f m) (false)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nDiv_mod_spec_inv_rect_CProp2. For all elements $x1$ and $x2$ and $x3$ and $x4$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $Hterm$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from elements $_z1482$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $x1$ and $x2$ and $x3$ and $x4$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $x_851$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $x4$ and $x2$ and elements $x_850$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x1$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $x3$ and $x2$ and $x4$ and elements $_z1483$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $Hterm$ and $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_851$ and $x_850$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_851$ and $x_850$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "postulate div_mod_spec_inv_rect_CProp2 : (x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x3 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x4 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hterm : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) -> (P : (_z1482 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) -> cic.Univ cic.prop) -> (_H1 : (x_851 : cic.Term cic.prop (matita_arithmetics_nat.lt x4 x2)) -> (x_850 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x3 x2) x4))) -> (_z1483 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) Hterm (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_851 x_850))) -> cic.Term cic.prop (P (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_851 x_850))) -> cic.Term cic.prop (P Hterm)", "predict": "postulate div_mod_spec_inv_rect_CProp2 : (x1 : univs.Type0) -> (x2 : univs.Type0) -> (x3 : univs.Type0) -> (x4 : univs.Type0) -> (Hterm : div_mod_spec x1 x2 x3 x4) -> (P : (z1482 : div_mod_spec x1 x2 x3 x4) -> univ) -> (x_851 : prop) -> (x_850 : prop) -> (z1483 : prop) -> (x : prop) -> (x_851 : lt x4 x2) -> (x_850 : eq (lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1) -> (z1483 : eq (lift prop univs.Type2 matita_arithmetics_div_and_mod.div_mod_spec) x1 x2 x3 x4 Hterm) -> (x : div_mod_spec_intro x1 x2 x3 x4 x_851 x_850) -> (z1483 : eq (lift prop univs.Type2 matita_arithmetics_div_and_mod.div_mod_spec) x1 x2 x3 x4 Hterm) -> (P (div_mod_spec_intro x1 x2 x3 x4 x_851 x_850)) : prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda.\nTransitive. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_R$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation$ appliqué à $A$. Alors $cic.Univ$ tient pour $cic.prop$.\nassistant\n", "label": "postulate transitive : (A : cic.Univ univs.Type0) -> (_R : cic.Term univs.Type0 (matita_basics_relations.relation A)) -> cic.Univ cic.prop", "predict": "postulate transitive : (A : univs.Type0) -> _R : cic.Term (univs.Type0) (matita_basics_relations.relation) -> cic.prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nTransitive_sub. Låt $h1$ och $k1$ och $h2$ och $k2$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $I$ och $J$ och $K$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $A$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_bigops.sub_hk$ applicerat på $h1$ och $k1$ och $A$ och $I$ och $J$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_bigops.sub_hk$ applicerat på $h2$ och $k2$ och $A$ och $J$ och $K$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_bigops.sub_hk$ applicerat på funktionen som avbildar $x$ som $h2$ applicerat på $h1$ applicerat på $x$ och funktionen som avbildar $x$ som $k1$ applicerat på $k2$ applicerat på $x$ och $A$ och $I$ och $K$.\nassistant\n", "label": "Axiom transitive_sub : forall h1 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall k1 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall h2 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall k2 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall A : cic.Univ univs.Type0, forall I : cic.Term univs.Type0 (matita_arithmetics_bigops.range A), forall J : cic.Term univs.Type0 (matita_arithmetics_bigops.range A), forall K : cic.Term univs.Type0 (matita_arithmetics_bigops.range A), forall __ : cic.Term cic.prop (matita_arithmetics_bigops.sub_hk h1 k1 A I J), forall __1 : cic.Term cic.prop (matita_arithmetics_bigops.sub_hk h2 k2 A J K), cic.Term cic.prop (matita_arithmetics_bigops.sub_hk (fun x => h2 (h1 x)) (fun x => k1 (k2 x)) A I K) .", "predict": "Axiom transitive_sub : forall h1 : univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term univs.Type0, forall k1 : univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term univs.Type0, forall A : cic.Univ univs.Type0, forall I : matita_arithmetics_bigops.range, forall J : matita_arithmetics_bigops.range, forall K : matita_arithmetics_bigops.range, forall __ : cic.Term (cic.prop * matita_arithmetics_bigops.sub_hk h1 k1 A I J), forall __1 : cic.Term (cic.prop * matita_arithmetics_bigops.sub_hk h2 k2 A J K), (cic.Term (cic.prop * matita_arithmetics_bigops.sub_hk (h2 (h1 x)) (k1 (k2 x)) A I K)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nAop_rect_Type5_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_865$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type5$. Let $_H_mk_Aop$ be a function from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $univs.Type5$ and $Q_$ applied to $matita_arithmetics_bigops.mk_Aop$ applied to $A$ and", "label": "postulate Aop_rect_Type5_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_865 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ univs.Type5) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type5 (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_865 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Term univs.Type5 (Q_ x_865)", "predict": " $a$ and $b$ and $c$ to elements of $cic.Univ$ of $univs.Type5$.\npostulate aop_rect_Type5_body : (A : cic.Univ) -> _nil : cic.Term univs.Type0 -> A -> Q_ : (x : cic.Term univs.Type0) -> matita_arithmetics_bigops.Aop A _nil -> cic.Univ univs.Type5 -> _H_mk_Aop : (op : (x : cic.Term univs.Type0) -> A) -> (y : cic.Term univs.Type0) -> A -> cic.Term univs.Type0 -> A -> (a : cic.Term univs.Type0) -> A -> cic.prop -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil a) a -> (a : cic.Term univs.Type0) -> A -> cic.prop -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil a) a -> (a : cic.Term univs.Type0) -> (b : cic.Term univs.Type0) -> (c : cic.Term univs.Type0) -> A -> cic.prop -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op (op a b) c) (op (op a b) c) -> (a : cic.Term univs.Type0) -> (b : cic.Term univs.Type0) -> (c : cic.Term univs.Type0) -> A -> Q_ (matita_arithmetics_bigops.mk_Aop A a b c)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nPermut_n_to_le. Låt $h$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $k$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $k$ och $n$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_permutation.permut$ applicerat på $h$ och $n$. Låt $__2$ vara en funktion från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $k$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $h$ applicerat på $m$ och $m$. Låt $j$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__3$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $k$ och $j$. Låt $__4$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $j$ och $n$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $k$ och $h$ applicerat på $j$.\nassistant\n", "label": "axiom permut_n_to_le (h : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) (k n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.le k n)) (__1 : cic.Term cic.prop (matita_arithmetics_permutation.permut h n)) (__2 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt m k)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (h m) m)) (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__3 : cic.Term cic.prop (matita_arithmetics_nat.le k j)) (__4 : cic.Term cic.prop (matita_arithmetics_nat.le j n)) : cic.Term cic.prop (matita_arithmetics_nat.le k (h j))", "predict": "axiom permut_n_to_le (h : univs.Type0 → matita_arithmetics_nat.nat → univs.Type0) (k n : univs.Type0) (x : matita_arithmetics_nat.le k n) (x1 : matita_arithmetics_permutation.permut h n) (x2 : ∀ m : univs.Type0, matita_basics_logic.eq (univs.Type0) (univs.Type2) (matita_arithmetics_nat.nat) (h m) m) (j : univs.Type0) (x3 : matita_arithmetics_nat.le k j) (x4 : matita_arithmetics_nat.le j n) : matita_arithmetics_nat.le k (h j)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nLe_prim_n2. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_chebyshev_chebyshev_psi.prim$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_nat.pred$ appliqué à $n$.\nassistant\n", "label": "axiom le_prim_n2 (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))))) n)) : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_chebyshev_psi.prim (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) (matita_arithmetics_nat.pred n))", "predict": "axiom le_prim_n2 (n : Term Type0 Nat) : ∀ ψ : Prop, (le (pow (pow (pow (pow (pow (pow (pow (S (O : Nat)) (S (O : Nat))) (S (O : Nat))) (S (O : Nat))) (S (O : Nat))) (S (O : Nat))) ψ (times (S (O : Nat)) (times (S (O : Nat)) (times (S (O : Nat)) (O : Nat)))) n) (pred n))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti.\nDPair_rect_Type3. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $_f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $Q_$ des éléments $_x_644$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $univs.Type3$, pour toutes les fonctions $_H_mk_DPair$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $_f$ appliqué à $dpi1$ à des éléments de $cic.Term$ de $univs.Type3$ et de $Q_$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $A$ et $_f$ et $dpi1$ et $_dpi2$, pour tous les éléments $x_644$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $univs.Type3$ et $Q_$ appliqué à $x_644$.\nassistant\n", "label": "DPair_rect_Type3 : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) -> Q_ : (_x_644 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Univ univs.Type3) -> _H_mk_DPair : (dpi1 : cic.Term univs.Type0 A -> _dpi2 : cic.Term univs.Type0 (_f dpi1) -> cic.Term univs.Type3 (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> x_644 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Term univs.Type3 (Q_ x_644) .", "predict": "dpair_rect_Type3 : (A : Elem (univ (Type0))) -> (f : (x : Elem (cic Term (Type0))) -> Elem (univ (Type0))) -> (Q_ : (x_644 : Elem (cic Term (Type0))) -> (dpair A f) -> Elem (univ (Type3))) -> (H_mk_DPair : (dpi1 : Elem (cic Term (Type0))) -> (A : Elem (univ (Type0))) -> (f : (x : Elem (cic Term (Type0))) -> Elem (univ (Type0))) -> (dpi2 : Elem (cic Term (Type0))) -> (Q_ : (x_644 : Elem (cic Term (Type0))) -> (dpair A f) -> Elem (univ (Type3))) -> (x_644 : Elem (cic Term (Type0))) -> (dpair A f) -> Elem (cic Term (univ (Type3))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nNot_eq_S. Pour tous les éléments $n$ et $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.Not$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $n$ et $matita_arithmetics_nat.S$ appliqué à $m$.\nassistant\n", "label": "axiom not_eq_S (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n m))) : cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m)))", "predict": "axiom not_eq_S (n m : univs.Type0) (p : cic.prop) : matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n m)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nLe_to_or_lt_eq. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $m$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_arithmetics_nat.lt$ applied to $n$ and $m$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $m$.\nassistant\n", "label": "Axiom le_to_or_lt_eq : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.le n m), cic.Term cic.prop (matita_basics_logic.Or (matita_arithmetics_nat.lt n m) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n m)) .", "predict": "Axiom le_to_or_lt_eq : forall n : matita_arithmetics_nat.nat, forall m : matita_arithmetics_nat.nat, forall __ : cic.prop, (matita_arithmetics_nat.le n m -> cic.Term (matita_basics_logic.Or (matita_arithmetics_nat.lt n m) (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n m))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda.\nRange_rect_Type2. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_923$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type2$. Då för alla funktioner $_H_mk_range$ från funktioner $_enum$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $_A$ och element $_upto$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $_filter$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_range$ applicerat på $_A$ och $_enum$ och $_upto$ och $_filter$, för alla element $x_923$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$, håller $cic.Term$ för $univs.Type2$ och $Q_$ applicerat på $x_923$.\nassistant\n", "label": "postulate range_rect_Type2 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_923 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type2) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type2 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_923 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term univs.Type2 (Q_ x_923)", "predict": "postulate range_rect_Type2 : (A : Univ Type0) -> (Q : (x : Term Type0) -> range A -> Univ Type2) -> (H : Enum (x : Type0) (n : Nat)) -> (upto : Term Type0) -> (filter : (x : Term Type0) -> Nat -> Term Type0) -> (Q (mk_range A (enum x n)) (upto))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nMod_cr_pair. Let $m$ and $n$ and $a$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $a$ and $m$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $b$ and $n$. Let $__2$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.And$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_div_and_mod.mod$ applied to $matita_arithmetics_chinese_reminder.cr_pair$ applied to $m$ and $n$ and $a$ and $b$ and $m$ and $a$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_div_and_mod.mod$ applied to $matita_arithmetics_chinese_reminder.cr_pair$ applied to $m$ and $n$ and $a$ and $b$ and $n$ and $b$.\nassistant\n", "label": "mod_cr_pair : m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt a m) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt b n) -> __2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) -> cic.Term cic.prop (matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod (matita_arithmetics_chinese_reminder.cr_pair m n a b) m) a) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod (matita_arithmetics_chinese_reminder.cr_pair m n a b) n) b)) .", "predict": "mod_cr_pair : (m : Elem (Term (univs Type0))) -> (n : Elem (Term (matita_arithmetics_nat nat))) -> (a : Elem (Term (matita_arithmetics_nat nat))) -> (b : Elem (Term (matita_arithmetics_nat nat))) -> (__) : Elem (Prop (matita_arithmetics_nat lt a m)) -> (__)1 : Elem (Prop (matita_arithmetics_nat lt b n)) -> (__)2 : Elem (Prop (matita_basics_logic eq (cic lift (univs Type0) (univs Type2)) (matita_arithmetics_nat nat) (matita_arithmetics_gcd gcd n m) (matita_arithmetics_nat S (matita_arithmetics_nat O)))) -> Proof (and (eq (cic lift (univs Type0) (univs Type2)) (matita_arithmetics_nat nat)) (matita_arithmetics_div_and_mod mod (matita_arithmetics_chinese_reminder cr_pair m n a b) m a) (matita_basics_logic eq (cic lift (univs Type0) (univs Type2)) (matita_arithmetics_nat nat)) (matita_arithmetics_div_and_mod mod (matita_arithmetics_chinese_reminder cr_pair m n a b) n b))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nDivides_ind. Soient $_n$ et $_m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour toutes les fonctions $Q_$ des éléments $_x_1192$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.divides$ appliqué à $_n$ et $_m$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_quotient$ des éléments $q$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $x_1193$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $_m$ et $matita_arithmetics_nat.times$ appliqué à $_n$ et $q$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_primes.quotient$ appliqué à $_n$ et $_m$ et $q$ et $x_1193$, pour tous les éléments $x_1192$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.divides$ appliqué à $_n$ et $_m$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_1192$.\nassistant\n", "label": "Axiom divides_ind : forall _n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall Q_ : ((_x_1192 : cic.Term cic.prop (matita_arithmetics_primes.divides _n _m)) -> cic.Univ cic.prop), forall _H_quotient : ((q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_1193 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _m (matita_arithmetics_nat.times _n q))) -> cic.Term cic.prop (Q_ (matita_arithmetics_primes.quotient _n _m q x_1193))), forall x_1192 : cic.Term cic.prop (matita_arithmetics_primes.divides _n _m), cic.Term cic.prop (Q_ x_1192) .", "predict": "Axiom divides_ind : forall n : Type0, forall m : nat, forall Q : x1192 : Term prop -> divides n m -> forall q : Term prop, forall x1193 : Eq (lift Type0 Type2 nat) m -> Eq (times n q) m -> Q (quotient n m q) x1193 -> forall x1192 : Term prop, divides n m -> Q x1192 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq.\nMod_aux_body. Let $_p$ and $_m$ and $_n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_nat.nat$.\nassistant\n", "label": "Axiom mod_aux_body : forall _p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _n : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term univs.Type0 matita_arithmetics_nat.nat .", "predict": "Axiom mod_aux_body : forall p : univs.Type0, forall m : matita_arithmetics_nat.nat, forall n : matita_arithmetics_nat.nat, cic.Term p m n ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq.\nReverse_single. Låt $S$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $a$ av $cic.Term$ av $univs.Type0$ och $S$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $S$ och $matita_basics_lists_list.reverse$ applicerat på $S$ och $matita_basics_lists_list.cons$ applicerat på $S$ och $a$ och $matita_basics_lists_list.nil$ applicerat på $S$ och $matita_basics_lists_list.cons$ applicerat på $S$ och $a$ och $matita_basics_lists_list.nil$ applicerat på $S$.\nassistant\n", "label": "Axiom reverse_single : forall S : cic.Univ univs.Type0, forall a : cic.Term univs.Type0 S, cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list S)) (matita_basics_lists_list.reverse S (matita_basics_lists_list.cons S a (matita_basics_lists_list.nil S))) (matita_basics_lists_list.cons S a (matita_basics_lists_list.nil S))) .", "predict": "Axiom reverse_single : forall S : univs.Type0, forall a : cic.Term univs.Type0, forall prop : cic.prop, forall eq : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_lists_list.reverse S) (matita_basics_lists_list.cons S a) (matita_basics_lists_list.nil S) (matita_basics_lists_list.cons S a) (matita_basics_lists_list.nil S) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda.\nMin_exists. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $t$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $t$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $m$ and $matita_basics_bool.true$. Let $k$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__2$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $b$ and $m$. Let $__3$ be a function from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__3$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $b$ and $i$ and elements $__4$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $m$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $i$ and $matita_basics_bool.false$. Let $__4$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $t$ and $matita_arithmetics_nat.plus$ applied to $k$ and $b$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $un", "label": "postulate min_exists : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (t : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt m t)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.true)) -> (k : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.le b m)) -> (__3 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.le b i)) -> (__4 : cic.Term cic.prop (matita_arithmetics_nat.lt i m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)) -> (__4 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) t (matita_arithmetics_nat.plus k b))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.min k b f) m)", "predict": "ivs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $t$ and $matita_basics_bool.true$ and $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $t$ and $matita_arithmetics_nat.plus$ applied to $k$ and $b$.\npostulate min_exists : (f : Term Type0 Nat -> Term Type0 Bool) -> (t : Term Type0 Nat) -> (Lt m t) -> (x1 : Prop (Eq (lift Type0 Type2) (if (true) (f m))) -> (k : Nat) -> (b : Nat) -> (x2 : Lt b m) -> (x3 : (i : Nat) -> (Le b i) -> (Lt i m) -> (Eq (lift Type0 Type2) (if (false) (f i)))) -> (Eq (lift Type0 Type2) (plus k b)) -> Prop (Eq (lift Type0 Type2) (if (true) (f t))) (Eq (lift Type0 Type2) (plus k (plus b m)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti.\nLt_exp_to_lt. Let $a$ and $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $a$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_exp.exp$ applied to $a$ and $n$ and $matita_arithmetics_exp.exp$ applied to $a$ and $m$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $n$ and $m$.\nassistant\n", "label": "lt_exp_to_lt : a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O a) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_exp.exp a n) (matita_arithmetics_exp.exp a m)) -> cic.Term cic.prop (matita_arithmetics_nat.lt n m) .", "predict": "lt_exp_to_lt : (a : Elem (Term (Univ Type0))) -> (n : Elem (nat (matita_arithmetics_nat))) -> (m : Elem (nat (matita_arithmetics_nat))) -> Proof (and (Lt (nd 0) a) (Lt (exp a n) (exp a m))) -> Proof (Lt n m) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq.\nProd_rect_Type5. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_694$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type5$. Soit $_H_mk_Prod$ une fonction des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type5$ et de $Q_$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $_A$ et $_B$ et $_fst$ et $_snd$. Soit $x_694$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$. Alors $cic.Term$ tient pour $univs.Type5$ et $Q_$ appliqué à $x_694$.\nassistant\n", "label": "Axiom Prod_rect_Type5 : forall _A : cic.Univ univs.Type0, forall _B : cic.Univ univs.Type0, forall Q_ : ((_x_694 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ univs.Type5), forall _H_mk_Prod : ((_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term univs.Type5 (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))), forall x_694 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B), cic.Term univs.Type5 (Q_ x_694) .", "predict": "Axiom prod_rect_Type5 : forall A : Univ, forall B : Univ, forall Q : (x : Term) -> Prod A B -> Univ, forall H_mk_Prod : (fst : Term) -> A -> (snd : Term) -> B -> Term -> Univ, forall x_694 : Term, (Prod A B -> Univ) -> Q (x_694) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean.\nDop_rect_CProp0. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_967$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_Dop$ be a function from elements $sum$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and functions $prod$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $b$ and $c$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_Dop$ applied to $A$ and $_nil$ and $sum$ and $prod$ and $_null", "label": "axiom Dop_rect_CProp0 (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_967 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ cic.prop) (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) (x_967 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) : cic.Term cic.prop (Q_ x_967)", "predict": "$ and $a$ and $b$ and $c$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $_nil$ and $sum$ and $prod$ applied to $a$ and $b$ and $prod$ applied to $a$ and $c$ be a function from elements $x$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$. Let $Dop_rect_CProp0 : forall A : univs.Type0, (Q_ (Dop A _nil) (x : Term Type0) → x = lift Type0 Type2 A) → x = Q_ (mk_Dop A _nil) (x : Term Type0) → x = Q_ (Dop (a : Term Type0) (b : Term Type0) (c : Term Type0)) (x : Term Type0) → x = Q_ (aop__o__op A _nil (sum b c)) (x : Term Type0) → x = Q_ (aop__o__op (a : Term Type0) (A : Type0) (b : Term Type0)) (x : Term Type0) → x = Q_ (aop__o__op (a : Term Type0) (A : Type0) (b : Term Type0)) (x : Term Type0) → x = Q_ (aop__o__op (a : Term Type0) (A : Type0) (b : Term Type0)) (x : Term Type0) → x = Q_ (aop__o__op (a : Term Type0) (A : Type0) (b : Term Type0)) (x : Term Type0) → x = Q_ (aop__o__op (a : Term Type0) (A : Type0) (b : Term Type0)) (x : Term Type0) → x = Q_ (aop__o__op (a : Term Type0) (A : Type0) (b : Term Type0)) (x : Term Type0) → x = Q_ (aop__o__op (a : Term Type0) (A : Type0) (b : Term Type0)) (x : Term Type0) → x ="}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti.\nLength_unique_le. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.unique$ applicerat på $matita_arithmetics_nat.nat$ och $l$. Då för alla funktioner $__1$ från element $x$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.mem$ applicerat på $matita_arithmetics_nat.nat$ och $x$ och $l$ till element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $x$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_basics_lists_list.length$ applicerat på $matita_arithmetics_nat.nat$ och $l$ och $n$.\nassistant\n", "label": "length_unique_le : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> l : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat) -> __ : cic.Term cic.prop (matita_basics_lists_list.unique matita_arithmetics_nat.nat l) -> __1 : (x : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __1 : cic.Term cic.prop (matita_basics_lists_list.mem matita_arithmetics_nat.nat x l) -> cic.Term cic.prop (matita_arithmetics_nat.lt x n)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_basics_lists_list.length matita_arithmetics_nat.nat l) n) .", "predict": "length_unique_le : (n : Elem (univs Type0) (nat matita_arithmetics)) -> (l : Elem (univs Type0) (list nat matita_basics)) -> Proof (forall (x : Elem (univs Type0) (nat matita_arithmetics)) (P : Elem (prop (univs)) (mem (list nat matita_basics) x l)) (Leq (length (list nat matita_basics) n) (Lt x n))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean.\nInjective_times_l. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_relations.injective$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och funktionen som avbildar $m$ som $matita_arithmetics_nat.times$ applicerat på $m$ och $n$.\nassistant\n", "label": "axiom injective_times_l (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) : cic.Term cic.prop (matita_basics_relations.injective matita_arithmetics_nat.nat matita_arithmetics_nat.nat (λ m => matita_arithmetics_nat.times m n))", "predict": "axiom injective_times_l (n : Term univs.Type0) (__ : Lt (nat 0) n) : ∀ m : nat, injective (nat → nat) (λ m, times m n)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean.\nExp_n_1. Pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n$ et $matita_arithmetics_exp.exp$ appliqué à $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$.\nassistant\n", "label": "axiom exp_n_1 (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_exp.exp n (matita_arithmetics_nat.S matita_arithmetics_nat.O)))", "predict": "axiom exp_n_1 (n : matita_arithmetics_nat.nat) : cic.prop (cic.lift univs.Type0 univs.Type2) (matita_arithmetics_exp.exp n (matita_arithmetics_nat.S matita_arithmetics_nat.O))"}