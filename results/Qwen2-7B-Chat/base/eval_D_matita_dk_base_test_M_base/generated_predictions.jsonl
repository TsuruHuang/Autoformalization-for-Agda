{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_False. Låt $return_sort$ vara ett element av $cic.Sort$. Låt $return_type$ vara en funktion från element $z$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Univ$ av $return_sort$. Låt $z$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$. Då håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.\nassistant\n", "label": "postulate match_False : (return_sort : cic.Sort) -> (return_type : (z : cic.Term cic.prop matita_basics_logic.False) -> cic.Univ return_sort) -> (z : cic.Term cic.prop matita_basics_logic.False) -> cic.Term return_sort (return_type z)", "predict": "postulate Match_False : Prop\npostulate return_sort : Sort\npostulate return_type : (z : Term prop False) -> Univ (return_sort)\npostulate z : Term prop False\nthen return_sort holds for (return_type z)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nList_inv_rect_Type0. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $x1$. Soit $P$ une fonction des éléments $_z1332$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $x1$ à des éléments de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $_H1$ des éléments $_z1333$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $x1$ et $Hterm$ et $matita_basics_lists_list.nil$ appliqué à $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $P$ appliqué à $matita_basics_lists_list.nil$ appliqué à $x1$, pour toutes les fonctions $_H2$ des éléments $x_748$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $x_747$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $x1$ et des fonctions $_x_750$ des éléments $_z1333$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $x1$ et $Hterm$ et $x_747$ à des éléments de $cic.Term$ de $univs.Type0$ et de $P$", "label": "list_inv_rect_Type0 : x1 : cic.Univ univs.Type0 -> Hterm : cic.Term univs.Type0 (matita_basics_lists_list.list x1) -> P : (_z1332 : cic.Term univs.Type0 (matita_basics_lists_list.list x1) -> cic.Univ univs.Type0) -> _H1 : (_z1333 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list x1)) Hterm (matita_basics_lists_list.nil x1)) -> cic.Term univs.Type0 (P (matita_basics_lists_list.nil x1))) -> _H2 : (x_748 : cic.Term univs.Type0 x1 -> x_747 : cic.Term univs.Type0 (matita_basics_lists_list.list x1) -> _x_750 : (_z1333 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list x1)) Hterm x_747) -> cic.Term univs.Type0 (P x_747)) -> _z1333 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list x1)) Hterm (matita_basics_lists_list.cons x1 x_748 x_747)) -> cic.Term univs.Type0 (P (matita_basics_lists_list.cons x1 x_748 x_747))) -> cic.Term univs.Type0 (P Hterm) .", "predict": " appliqué à $x_748$ et $x_747$, il existe un élément $x_751$ de $cic.Term$ de $univs.Type0$ et de $x1$ et de $P$ appliqué à $x_748$ et $x_747$ tel que pour toutes les fonctions $_x_752$ des éléments $_z1333$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $x1$ et $Hterm$ et $matita_basics_lists_list.nil$ appliqué à $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $P$ appliqué à $matita_basics_lists_list.nil$ appliqué à $x1$, pour toutes les fonctions $_x_753$ des éléments $_z1333$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $x1$ et $Hterm$ et $matita_basics_lists_list.nil$ appliqué à $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $P$ appliqué à $matita_basics_lists_list.nil$ appliqué à $x1$, il existe un élément $x_754$ de $cic.Term$ de $univs.Type0$ et de $x1$ et de $P$ appliqué à $x_748$ et $x_747$ et de $x_752$ et de $x_753$ tel que pour toutes les fonctions $_x_755$ des éléments $_z1333$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $un"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_rect_Type1_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_606$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type1$. Let $_H_None$ be an element of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_basics_types.None$ applied to $_A$. Let $_H_Some$ be a function from elements $x_607$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_basics_types.Some$ applied to $_A$ and $x_607$. Then for all elements $x_606$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$, $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_606$.\nassistant\n", "label": "option_rect_Type1_body : _A : cic.Univ univs.Type0 -> Q_ : (_x_606 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Univ univs.Type1) -> _H_None : cic.Term univs.Type1 (Q_ (matita_basics_types.None _A)) -> _H_Some : (x_607 : cic.Term univs.Type0 _A -> cic.Term univs.Type1 (Q_ (matita_basics_types.Some _A x_607))) -> x_606 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Term univs.Type1 (Q_ x_606) .", "predict": "Output: \nAxiom Option_rect_Type1_body : forall (A : cic.Univ) (Q_ : (forall (x_606 : cic.Term) (option A) -> cic.Univ) (univs.Type1)) (H_None : (cic.Term) (univs.Type1) (Q_ (option.None))) (H_Some : (forall (x_607 : cic.Term) (A) -> (cic.Term) (univs.Type1) (Q_ (option.Some (x_607))))) -> forall (x_606 : (option A)) -> cic.Term (univs.Type1) (Q_ x_606) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDiv_mod_spec_inv_rect_CProp2. Låt $x1$ och $x2$ och $x3$ och $x4$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Hterm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $x1$ och $x2$ och $x3$ och $x4$. Då för alla funktioner $P$ från element $_z1482$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $x_851$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $x4$ och $x2$ och element $x_850$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $x1$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $x3$ och $x2$ och $x4$ och element $_z1483$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ och $Hterm$ och $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $", "label": "Axiom div_mod_spec_inv_rect_CProp2 : forall x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall x3 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall x4 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall Hterm : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4), forall P : ((_z1482 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) -> cic.Univ cic.prop), forall _H1 : ((x_851 : cic.Term cic.prop (matita_arithmetics_nat.lt x4 x2)) -> (x_850 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x3 x2) x4))) -> (_z1483 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) Hterm (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_851 x_850))) -> cic.Term cic.prop (P (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_851 x_850))), cic.Term cic.prop (P Hterm) .", "predict": "x1$ och $x2$ och $x3$ och $x4$ och $_z1482$ och $_H1$ och $_z1483$ och $P$ och $_H1$ och $x_850$, gäller att $P$ är sant. \n\nOutput: \nAxiom Div_mod_spec_inv_rect_CProp2 : \n  forall (x1 x2 x3 x4 : cic.Term univs.Type0 matita_arithmetics_nat.nat) (Hterm : cic.Term cic.prop matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4), \n  forall (P : cic.Term cic.prop matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4 -> cic.Univ cic.prop) (H1 : cic.Term cic.prop matita_arithmetics_nat.lt x4 x2 x851) (H2 : cic.Term cic.prop matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat x1) (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x3 x2) x4) mat850) (z1482 : cic.Term cic.prop matita_basics_logic.eq (cic.lift cic.prop univs.Type2 matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4) Hterm matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 z1482 H1 z1483 P H1 H2), P z1482."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBigop_I. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $p$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Soit $nil$ un élément de $cic.Term$ de $univs.Type0$ et de $B$. Soit $op$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $B$ et $nil$. Alors pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $B$ et $matita_arithmetics_bigops.bigop$ appliqué à $matita_arithmetics_nat.minus$ appliqué à $n$ et $matita_arithmetics_nat.O$ et la fonction qui envoie $i$ à la fonction qui envoie $i0$ à $p$ appliqué à $i0$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $i$ et $matita_arithmetics_nat.O$ et $B$ et $nil$ et $matita_arithmetics_bigops.op$ appliqué à $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à la fonction qui envoie $i0$ à $f$ appliqué à $i0$", "label": "postulate bigop_I : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop B nil)) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.minus n matita_arithmetics_nat.O) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i0) (matita_arithmetics_nat.plus i matita_arithmetics_nat.O)) B nil (matita_arithmetics_bigops.op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> (\\ i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i0) (matita_arithmetics_nat.plus i matita_arithmetics_nat.O))) (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) B nil (matita_arithmetics_bigops.op B nil op) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i)))", "predict": " appliqué à $matita_arithmetics_nat.plus$ appliqué à $i$ et $matita_arithmetics_nat.O$ est égal à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $B$ et $matita_arithmetics_bigops.bigop$ appliqué à $matita_arithmetics_nat.minus$ appliqué à $n$ et $matita_arithmetics_nat.O$ et la fonction qui envoie $i$ à la fonction qui envoie $i0$ à $p$ appliqué à $i0$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $i$ et $matita_arithmetics_nat.O$ et $B$ et $nil$ et $matita_arithmetics_bigops.op$ appliqué à $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à la fonction qui envoie $i0$ à $f$ appliqué à $i0$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $i$ et $matita_arithmetics_nat.O$.\n\nOutput: \n```\npostulate bigop_I : \n  {n : cic.Term univs.Type0 (matita_arithmetics_nat.nat)} \n  {p : (__) -> cic.Term univs.Type0 (matita_arithmetics_nat.nat) -> cic.Term univs.Type0 (matita_basics_bool.bool)} \n  {B : cic.Univ univs.Type0} \n  {nil : cic.Term univs.Type0 B} \n  {op : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop B nil)} \n  -> (f : (__) -> cic.Term univs.Type0 (matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) \n  -> cic.Term univs.Type0 (cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.minus n matita_arithmetics_nat.O) (λ i -> λ i0 -> p i0 (matita_arithmetics_nat.plus i matita_arithmetics_nat.O)) B nil (matita_ar"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nR2. Låt $T0$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $a0$ vara ett element av $cic.Term$ av $univs.Type0$ och $T0$. Låt $T1$ vara en funktion från element $x0$ av $cic.Term$ av $univs.Type0$ och $T0$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $x0$ till element av $cic.Univ$ av $univs.Type0$. Låt $a1$ vara ett element av $cic.Term$ av $univs.Type0$ och $T1$ applicerat på $a0$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$. Då för alla funktioner $T2$ från element $x0$ av $cic.Term$ av $univs.Type0$ och $T0$ och element $p0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $x0$ och element $x1$ av $cic.Term$ av $univs.Type0$ och $T1$ applicerat på $x0$ och $p0$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T1$ applicerat på $x0$ och $p0$ och $matita_basics_logic.R1$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $T1$ och $a1$ och $x0$ och $p0$ och $x1$ till element av $c", "label": "Axiom R2 : forall T0 : cic.Univ univs.Type0, forall a0 : cic.Term univs.Type0 T0, forall T1 : ((x0 : cic.Term univs.Type0 T0) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> cic.Univ univs.Type0), forall a1 : cic.Term univs.Type0 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0)), forall T2 : ((x0 : cic.Term univs.Type0 T0) -> (p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> (x1 : cic.Term univs.Type0 (T1 x0 p0)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T1 x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 T0) a0 T1 a1 x0 p0) x1)) -> cic.Univ univs.Type0), forall _a2 : cic.Term univs.Type0 (T2 a0 (matita_basics_logic", "predict": "ic.Term$ av $univs.Type0$ och $T2$ applicerat på $x0$ och $p0$ och element $x1$, det är sant att $a1$ är ett element av $T2$ applicerat på $x0$ och $p0$ och $x1$. \n\nOutput: \nRequire Import Cic. \nVariable T0 : Univ. \nVariable a0 : Term T0. \nVariable T1 : (Term T0 -> Term (Prop T0 matita_basics_logic.eq) -> (lift univs.Type0 univs.Type2 T0 a0) -> Univ T0). \nVariable a1 : Term T1 (a0 matita_basics_logic.refl (lift univs.Type0 univs.Type2 T0 a0)) = (T1 a0 (R1 (lift univs.Type0 univs.Type2 T0 a0))). \nHypothesis H : (forall (x0 : Term T0) (p0 : Term (Prop T0 matita_basics_logic.eq)) (x1 : Term T1 x0 p0 (lift univs.Type0 univs.Type2 T0 a0 p0) = (T1 x0 p0 (R1 (lift univs.Type0 univs.Type2 T0 a0)))) x1, a1 = T2 x0 p0 x1). \nGoal (forall (x0 : Term T0) (p0 : Term (Prop T0 matita_basics_logic.eq)) (x1 : Term T1 x0 p0 (lift univs.Type0 univs.Type2 T0 a0 p0) = (T1 x0 p0 (R1 (lift univs.Type0 univs.Type2 T0 a0)))), a1 = T2 x0 p0 x1). \nProof. \n  intros x0 p0 x1. \n  apply H. \n  reflexivity. \nQed."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRintersection. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soient $_R1$ et $_R2$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation$ appliqué à $A$. Alors pour tous les éléments $_a$ et $_b$ de $cic.Term$ de $univs.Type0$ et de $A$, $cic.Univ$ tient pour $cic.prop$.\nassistant\n", "label": "postulate Rintersection : (A : cic.Univ univs.Type0) -> (_R1 : cic.Term univs.Type0 (matita_basics_relations.relation A)) -> (_R2 : cic.Term univs.Type0 (matita_basics_relations.relation A)) -> (_a : cic.Term univs.Type0 A) -> (_b : cic.Term univs.Type0 A) -> cic.Univ cic.prop", "predict": "postulate Rintersection : forall (A : univs.Type0) (_R1 _R2 : cic.Term univs.Type0 (matita_basics_relations.relation A)), (forall (_a _b : cic.Term univs.Type0 A), cic.Univ (cic.prop ...))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nO. $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_nat.nat$.\nassistant\n", "label": "axiom O : cic.Term univs.Type0 matita_arithmetics_nat.nat", "predict": "Output: axiom prop70 : odd 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1068. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $permf$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_permutation.permut$ applied to $f$ and $n$. Let $i$ and $j$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $lein$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $i$ and $n$. Let $lejn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $j$ and $n$. Let $a$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $matita_arithmetics_nat.le$ applied to $a$ and $n$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $a$ and $i$, for all elements $lean$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $a$ and $n$, for all elements $fa$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $a$ and $i$, for all elements $b$ of $cic.Term$ of $univs.Type0$", "label": "postulate let_clause_1068 : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (permf : cic.Term cic.prop (matita_arithmetics_permutation.permut f n)) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (lein : cic.Term cic.prop (matita_arithmetics_nat.le i n)) -> (lejn : cic.Term cic.prop (matita_arithmetics_nat.le j n)) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le a n) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i))) -> (lean : cic.Term cic.prop (matita_arithmetics_nat.le a n)) -> (fa : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i)) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.And (", "predict": " and $matita_arithmetics_nat.nat$, there exists an element $permf_b$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_permutation.permut$ applied to $f$ and $b$. Let $bf$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $a$ and $i$. Let $bf_permf_b$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_permutation.permut$ applied to $f$ and $b$.\n\nOutput: \nlet let_clause_1068 where f : (univs.Type0 → matita_arithmetics_nat.nat → univs.Type0 → matita_arithmetics_nat.nat) → (univs.Type0 → matita_arithmetics_nat.nat) → (cic.prop → matita_arithmetics_permutation.permut → cic.Term) → (univs.Type0 → matita_arithmetics_nat.nat) → (cic.Term → cic.prop → matita_arithmetics_nat.le → cic.Term → cic.prop → matita_arithmetics_nat.le → cic.Term → cic.prop → matita_basics_logic.And → cic.Term → cic.prop → matita_basics_logic.eq → cic.Term → cic.prop → matita_basics_logic.eq → cic.Term → cic.prop → matita_arithmetics_permutation.permut → cic.Term → cic.prop → matita_basics_logic.eq → cic.Term → cic.prop → matita_basics_logic.eq → cic.Term → cic.prop → matita_arithmetics_permutation.permut → cic.Term → cic.prop → matita_basics_logic.eq → cic.Term → cic.prop → matita_basics_logic.eq → cic.Term → cic.prop → matita_basics_logic.eq → cic.Term → cic.prop → matita_basics_logic.eq → cic.Term → cic.prop → matita_basics_logic.eq → cic.Term → cic.prop → matita_basics_logic.eq → cic.Term → cic.prop → matita_basics_logic.eq → cic.Term → cic.prop → matita_basics_logic.eq → cic.Term → cic.prop → matita_b"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_DPair. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $return_sort$ un élément de $cic.Sort$. Soit $return_type$ une fonction des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $return_sort$. Soit $case_mk_DPair$ une fonction des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $_f$ appliqué à $dpi1$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $A$ et $_f$ et $dpi1$ et $_dpi2$. Soit $z$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$. Alors $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.\nassistant\n", "label": "match_DPair : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) -> return_sort : cic.Sort -> return_type : (z : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Univ return_sort) -> case_mk_DPair : (dpi1 : cic.Term univs.Type0 A -> _dpi2 : cic.Term univs.Type0 (_f dpi1) -> cic.Term return_sort (return_type (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> z : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Term return_sort (return_type z) .", "predict": "Output: \naxiom match_dpair : \n  forall (univ : univers) (term : type_univ univ) (univ_sort : sort) (f : (lambda (z : term) (dpair univ term univ univ_sort univ f))), \n  (lambda (dpi1 : term) (a : univ) (dpi2 : term) (f_applied : dpair univ term univ univ_sort univ f dpi1), \n  (lambda (return_sort : sort) (return_type : (lambda (z : term) (dpair univ term univ univ_sort univ)), \n  (dpair univ term univ return_sort (return_type z (dpair univ term univ univ_sort univ f dpi1))), \n  (case_mk_dpair : (lambda (dpi1 : term) (a : univ) (dpi2 : term) (f_applied : dpair univ term univ univ_sort univ f dpi1), \n  (lambda (z : term) (dpair univ term univ univ_sort univ), \n  (dpair univ term univ (case_mk_dpair (dpair univ term univ univ_sort univ f dpi1) a dpi2) (return_type z (dpair univ term univ univ_sort univ f dpi1)))), \n  (z : (dpair univ term univ univ_sort univ)), \n  (dpair univ term univ (case_mk_dpair (dpair univ term univ univ_sort univ f z) a (dpair univ term univ univ_sort univ f z)) (return_type z (dpair univ term univ univ_sort univ f z))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAnd_rect_Type1_body. För alla element $_A$ och $_B$ av $cic.Univ$ av $cic.prop$, för alla funktioner $Q_$ från element $_x_138$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $univs.Type1$, för alla funktioner $_H_conj$ från element $x_140$ av $cic.Term$ av $cic.prop$ och $_A$ och element $x_139$ av $cic.Term$ av $cic.prop$ och $_B$ till element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_basics_logic.conj$ applicerat på $_A$ och $_B$ och $x_140$ och $x_139$, för alla element $x_138$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_138$.\nassistant\n", "label": "postulate And_rect_Type1_body : (_A : cic.Univ cic.prop) -> (_B : cic.Univ cic.prop) -> (Q_ : (_x_138 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ univs.Type1) -> (_H_conj : (x_140 : cic.Term cic.prop _A) -> (x_139 : cic.Term cic.prop _B) -> cic.Term univs.Type1 (Q_ (matita_basics_logic.conj _A _B x_140 x_139))) -> (x_138 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Term univs.Type1 (Q_ x_138)", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1553. Soient $n$ et $n0$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $_clearme$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $a$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n0$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n0$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$, pour tous les éléments $a$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $_clearme0$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n0$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type", "label": "Axiom let_clause_1553 : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n0 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (fun a => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n0 (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n0 (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a))))), forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n0 (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n0 (matita", "predict": "0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n0$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$, nous avons $matita_basics_logic.implication$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n0$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n0$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$ et $matita_basics_logic.implication$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n0$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n0$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nP_ord_times. Låt $p$ och $a$ och $b$ och $qa$ och $ra$ och $qb$ och $rb$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $p$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $a$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $b$, för alla element $__3$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_ord.p_ord$ applicerat på $a$ och $p$ och $matita_basics_types.mk_Prod$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och $qa$ och $ra$, för alla element $__4$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_ord.p_ord$ applicerat på $b$ och $p$ och $matita_basics_types.mk_Prod$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$", "label": "Axiom p_ord_times : forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall qa : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall ra : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall qb : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall rb : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_primes.prime p), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O a), forall __2 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O b), forall __3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord a p) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat qa ra)), forall __4 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord b p) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat", "predict": " och $qb$ och $rb$, det finns en relation $rel$ som är lika med $matita_arithmetics_primes.rel$ applicerat på $p$ och $a$ och $b$ och $qa$ och $ra$ och $qb$ och $rb$ och $rel$ applicerat på $qa$ och $ra$ och $qb$ och $rb$ och $qa$ och $ra$ och $qb$ och $rb$ och $rel$ applicerat på $qb$ och $rb$ och $qa$ och $ra$ och $qb$ och $rb$ och $qa$ och $ra$ och $qb$ och $rb$ och $rel$ applicerat på $ra$ och $qa$ och $rb$ och $qb$ och $ra$ och $qa$ och $rb$ och $qb$ och $ra$ och $qb$ och $rb$ och $rel$ applicerat på $ra$ och $qa$ och $rb$ och $qb$ och $ra$ och $qa$ och $rb$ och $qb$ och $ra$ och $qb$ och $rb$ och $rel$ applicerat på $qa$ och $ra$ och $qb$ och $rb$ och $qa$ och $ra$ och $qb$ och $rb$ och $qa$ och $ra$ och $qb$ och $rb$ och $rel$ applicerat på $ra$ och $qa$ och $rb$ och $qb$ och $ra$ och $qa$ och $rb$ och $qb$ och $ra$ och $qb$ och $rb$ och $rel$ applicerat på $qa$ och $ra$ och $qb$ och $rb$ och $qa$ och $ra$ och $qb$ och $rb$ och $qa$ och $ra$ och $qb$ och $rb$ och $rel$ applicerat på $qb$ och $rb$ och $qa$ och $ra$ och $qb$ och $rb$ och $qa$ och $ra$ och $qb$ och $rb$ och $qa$ och $ra$ och $qb$ och $rb$ och $rel$ applicerat på $qb$ och $rb$ och $qa$ och $ra$ och $qb$ och $rb$ och $qa$ och $ra$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_rect_Type2_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $_x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $Q_$ une fonction des éléments $x_13$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $_x_14$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_13$ à des éléments de $cic.Univ$ de $univs.Type2$. Soit $_H_refl$ un élément de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$. Soit $x_13$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $x_14$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_13$. Alors $cic.Term$ tient pour $univs.Type2$ et $Q_$ appliqué à $x_13$ et $x_14$.\nassistant\n", "label": "axiom eq_rect_Type2_body (A : cic.Univ univs.Type2) (_x : cic.Term univs.Type2 A) (Q_ : (x_13 : cic.Term univs.Type2 A) -> (_x_14 : cic.Term cic.prop (matita_basics_logic.eq A _x x_13)) -> cic.Univ univs.Type2) (_H_refl : cic.Term univs.Type2 (Q_ _x (matita_basics_logic.refl A _x))) (x_13 : cic.Term univs.Type2 A) (x_14 : cic.Term cic.prop (matita_basics_logic.eq A _x x_13)) : cic.Term univs.Type2 (Q_ x_13 x_14)", "predict": "Axiom Eq_rect_Type2_body : forall (A : Univ), Term Univ (univs.Type2) A -> forall (Q_ : (x13 : Term Univ (univs.Type2) A) -> (x14 : prop Univ (matita_basics_logic.eq) A x -> Term Univ (univs.Type2) (Q_ x13 x14)), H_refl : Term Univ (univs.Type2) (Q_ x x (refl A x)), x13 : Term Univ (univs.Type2) A, x14 : prop Univ (matita_basics_logic.eq) A x x13) -> Term Univ (univs.Type2) (Q_ x13 x14)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBi_RC. Låt $A$ och $B$ vara element av $cic.Univ$ av $univs.Type0$. Låt $__$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.bi_relation$ applicerat på $A$ och $B$. Då håller $cic.Term$ för $univs.Type0$ och $matita_basics_relations.bi_relation$ applicerat på $A$ och $B$.\nassistant\n", "label": "bi_RC : A : cic.Univ univs.Type0 -> B : cic.Univ univs.Type0 -> __ : cic.Term univs.Type0 (matita_basics_relations.bi_relation A B) -> cic.Term univs.Type0 (matita_basics_relations.bi_relation A B) .", "predict": "Output: \naxiom Bi_RC : forall (A B : univs.Type0), (A : univ.Univ) -> (B : univ.Univ) -> (__) : Term.Type0 -> bi_relation.Axiom (A, B) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_CProp3. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_879$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_Aop$ une fonction des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $", "label": "postulate Aop_rect_CProp3 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_879 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_879 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Term cic.prop (Q_ x_879)", "predict": "univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ et des fonctions $_id$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $a$ et $a$.\n\nOutput: Aop_rect_CProp3 : \n  forall (A : Univ) (nil : Term) (Q : (x : Term) -> Aop A nil -> Prop) (H_mk_Aop : (op : (x : Term) -> (y : Term) -> A) -> (x : Term) -> (y : Term) -> A -> Term -> Prop) -> \n    (mk_Aop : (a : Term) -> (x : Term) -> A -> (nilr : (a : Term) -> (x : Term) -> A -> Prop) -> (assoc : (a : Term) -> (b : Term) -> (c : Term) -> A -> Prop) -> \n      (id : (a : Term) -> (x : Term) -> A -> Prop)) -> \n      (forall (x : Term) -> (y : Term) -> (z : Term) -> A -> Prop) -> \n      (forall (x : Term) -> (y : Term) -> A -> Prop) -> \n      (forall (x : Term) -> A -> Prop) -> \n      (forall (x : Term) -> A -> Prop) -> \n      (forall (x : Term) -> A -> Prop) -> \n      (forall (x : Term) -> A -> Prop) -> \n      (forall (x : Term) -> A -> Prop) -> \n      (forall (x : Term) -> A -> Prop) -> \n      (forall (x : Term"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_Type2. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_869$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type2$. Then for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift", "label": "Aop_rect_Type2 : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_869 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> cic.Univ univs.Type2) -> _H_mk_Aop : (op : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _nill : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> _nilr : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> _assoc : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type2 (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> x_869 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> cic.Term univs.Type2 (Q_ x_869) .", "predict": "$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and $op$ applied to $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Univ$ of $univs.Type2$, we have that $Q_$ applied to $op$ applied to $op$ applied to $a$ and $b$ and $c$ and $op$ applied to $op$ applied to $op$ applied to $a$ and $b$ and $c$ is equal to $Q_$ applied to $op$ applied to $a$ and $b$ and $c$ and $op$ applied to $op$ applied to $op$ applied to $a$ and $b$ and $c$.\n\nOutput: \nAop_rect_Type2 : forall (A : cic.Univ) (nil : cic.Term) (Q : (x : cic.Term) -> A op nil -> cic.Univ) (H_mk_Aop : (op : (x : cic.Term) -> A -> (y : cic.Term) -> A) (nill : (a : cic.Term) -> a -> (x : cic.prop) -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op nil a) a) (assoc : (a : cic.Term) -> (b : cic.Term) -> (c : cic.Term) -> (op (op a b) c) = op (op (op a b) c) (op a (op b c)))) -> Q (op (op (op a b) c) (op (op (op a b) c) (op a (op b c)))) = Q (op (op a b) c) (op (op (op a b) c) (op a (op b c))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_to_le_times_to_lt_S_to_div. Låt $a$ och $c$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $b$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.times$ applicerat på $b$ och $c$ och $a$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $a$ och $matita_arithmetics_nat.times$ applicerat på $b$ och $matita_arithmetics_nat.S$ applicerat på $c$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_div_and_mod.div$ applicerat på $a$ och $b$ och $c$.\nassistant\n", "label": "postulate lt_to_le_times_to_lt_S_to_div : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O b)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times b c) a)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt a (matita_arithmetics_nat.times b (matita_arithmetics_nat.S c)))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.div a b) c)", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_le. Soit $_n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $return_sort$ un élément de $cic.Sort$. Alors pour toutes les fonctions $return_type$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $_n$ et $__$ à des éléments de $cic.Univ$ de $return_sort$, pour tous les éléments $case_le_n$ de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $_n$ et $matita_arithmetics_nat.le_n$ appliqué à $_n$, pour toutes les fonctions $case_le_S$ des éléments $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $_n$ et $m$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_arithmetics_nat.S$ appliqué à $m$ et $matita_arithmetics_nat.le_S$ appliqué à $_n$ et $m$ et $__$, pour tous les éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $_n$ et $__$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $__$ et $z$.\nassistant\n", "label": "postulate match_le : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (return_sort : cic.Sort) -> (return_type : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (z : cic.Term cic.prop (matita_arithmetics_nat.le _n __)) -> cic.Univ return_sort) -> (case_le_n : cic.Term return_sort (return_type _n (matita_arithmetics_nat.le_n _n))) -> (case_le_S : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le _n m)) -> cic.Term return_sort (return_type (matita_arithmetics_nat.S m) (matita_arithmetics_nat.le_S _n m __))) -> (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (z : cic.Term cic.prop (matita_arithmetics_nat.le _n __)) -> cic.Term return_sort (return_type __ z)", "predict": "postulate match_le : \n  (n : cic.Term univs.Type0 (matita_arithmetics_nat.nat)) -> \n  (return_sort : cic.Sort) -> \n  (return_type : (x y : cic.Term univs.Type0 (matita_arithmetics_nat.nat)) -> \n    (z : cic.Term (cic.prop) (matita_arithmetics_nat.le n x)) -> \n    (case_le_n : cic.Term return_sort (return_type x (matita_arithmetics_nat.le_n n x))) -> \n    (case_le_S : (m : cic.Term univs.Type0 (matita_arithmetics_nat.nat)) -> \n      (x : cic.Term (cic.prop) (matita_arithmetics_nat.le n m)) -> \n      (case_le : cic.Term return_sort (return_type (matita_arithmetics_nat.S m) (matita_arithmetics_nat.le_S n m x))) -> \n      (x : cic.Term univs.Type0 (matita_arithmetics_nat.nat)) -> \n      (z : cic.Term (cic.prop) (matita_arithmetics_nat.le n x)) -> \n      (return_sort) (return_type x z))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMin_not_exists. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $n$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara en funktion från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $b$ och $i$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $matita_arithmetics_nat.plus$ applicerat på $n$ och $b$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $i$ och $matita_basics_bool.false$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_minimization.min$ applicerat på $n$ och $b$ och $f$ och $matita_arithmetics_nat.plus$ applicerat på $n$ och $b$.\nassistant\n", "label": "axiom min_not_exists (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (n b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le b i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_nat.plus n b))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.min n b f) (matita_arithmetics_nat.plus n b))", "predict": "Output: \naxiom min_not_exists : forall (f : univs.type0 -> matita_arithmetics_nat.nat -> univs.type0 -> matita_basics_bool.bool) (n b : univs.type0 -> matita_arithmetics_nat.nat) (i : univs.type0 -> matita_arithmetics_nat.nat -> univs.type0 -> matita_prop -> matita_arithmetics_nat.le -> univs.type0 -> matita_prop -> matita_basics_logic.eq -> univs.type0 -> matita_basics_bool.bool) (i1 : univs.type0 -> matita_arithmetics_nat.nat -> univs.type0 -> matita_prop -> matita_arithmetics_nat.lt -> univs.type0 -> matita_prop -> matita_basics_logic.eq -> univs.type0 -> matita_basics_bool.bool) (univs_type0 : univs.type0) (univs_type2 : univs.type2) (matita_basics_bool : matita_basics_bool) (f_app_i : univs.type0 -> matita_arithmetics_nat.nat -> univs.type0 -> matita_basics_bool) (n_app_i : univs.type0 -> matita_arithmetics_nat.nat -> univs.type0 -> matita_basics_bool) (b_app_i : univs.type0 -> matita_arithmetics_nat.nat -> univs.type0 -> matita_basics_bool) (lift_univs_type0_univs_type2_matita_basics_bool : univs.type0 -> univs.type2 -> matita_basics_bool) (f_app_i_app_n_app_b : univs.type0 -> matita_arithmetics_nat.nat -> univs.type0 -> matita_basics_bool) (matita_arithmetics_minimization_min_n_b_f_plus_n_b : univs.type0 -> matita_arithmetics_nat.nat -> univs.type0 -> matita_prop -> matita_basics_logic.eq -> univs.type0 -> matita_prop -> matita_basics_logic.eq -> univs.type0 -> matita_basics_bool.bool), (f_app_i_app_n_app_b univs_type0 univs_type2 matita_basics_bool n_app_i b_app_i lift_univs_type"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_rect_CProp5. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_959$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_Dop$ vara en funktion från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $_nil$ och $_nil$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$", "label": "postulate Dop_rect_CProp5 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_959 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_959 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term cic.prop (Q_ x_959)", "predict": " och $prod$ applicerat på $a$ och $b$ och $c$ och $prod$ applicerat på $a$ och $prod$ applicerat på $b$ och $c$ och $prod$ applicerat på $a$ och $prod$ applicerat på $prod$ applicerat på $b$ och $c$ och $prod$ applicerat på $a$ och $prod$ applicerat på $prod$ applicerat på $prod$ applicerat på $b$ och $c$ till element av $cic.Univ$ av $cic.prop$. \n\nOutput: \n```agda\npostulate\n  Dop_rect_CProp5 : \n    (A : univs.Type0) \n    (Q_ : (x : cic.Term) -> Dop A nil -> cic.Univ -> cic.prop)\n    (H_mk_Dop : (sum : cic.Term) -> ACop A nil -> (prod : (x : cic.Term) -> A -> cic.Term) -> (x1 : cic.Term) -> A -> cic.Term -> cic.prop -> cic.Univ -> cic.prop)\n    (H_null : (a : cic.Term) -> A -> (prod : (x : cic.Term) -> A -> cic.Term) -> (x : cic.Term) -> A -> cic.Term -> cic.prop -> cic.Term -> cic.prop -> cic.prop)\n    (H_distr : (a : cic.Term) -> A -> (b : cic.Term) -> A -> (c : cic.Term) -> A -> (prod : (x : cic.Term) -> A -> cic.Term) -> (prod : (x : cic.Term) -> A -> cic.Term) -> (prod : (x : cic.Term) -> A -> cic.Term) -> cic.prop -> cic.prop -> cic.prop -> cic.prop -> cic.prop)\n```"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_10471. Låt $n1$ och $n2$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $p1$ och $p2$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Låt $op$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $B$ och $nil$. Låt $f1$ och $f2$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_bigops.iso$ applicerat på $B$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f1$ och $n1$ och $p1$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f2$ och $n2$ och $p2$. Låt $h$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_clearme0$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic", "label": "postulate let_clause_10471 : (n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (p2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil)) -> (f1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (f2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (_clearme : cic.Term cic.prop (matita_arithmetics_bigops.iso B (matita_arithmetics_bigops.mk_range B f1 n1 p1) (matita_arithmetics_bigops.mk_range B f2 n2 p2))) -> (h : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.ex (cic.prod univs.Type0 univs.Type0 matita_arithmetics_nat.nat (\\ __ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita", "predict": ".forall$ applicerat på $B$ och $h$ och $op$ och $f1$ och $n1$ och $p1$ och $matita_arithmetics_bigops.mk_range$ applicerat på $B$ och $f2$ och $n2$ och $p2$ och $_clearme$.\n\nOutput: \nLet_clause_10471 : \n  n1 : univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term\n  n2 : univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term\n  p1 : univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term -> matita_basics_bool.bool\n  p2 : univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term -> matita_basics_bool.bool\n  B : univs.Type0 -> cic.Univ\n  nil : univs.Type0 -> B\n  op : B -> cic.Term -> matita_arithmetics_bigops.ACop -> cic.Term\n  f1 : univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term\n  f2 : univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term\n  _clearme : cic.Term -> matita_arithmetics_bigops.iso -> cic.prop -> matita_arithmetics_bigops.mk_range -> cic.prop -> matita_arithmetics_bigops.mk_range -> cic.prop -> cic.Term\n  h : univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term -> matita_arithmetics_nat.nat\n  _clearme0 : cic.Term -> matita_basics_logic.forall -> B -> h -> op -> f1 -> n1 -> p1 -> matita_arithmetics_bigops.mk_range -> f2 -> n2 -> p2 -> _clearme -> cic.prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_div_div_div_times. Let $n$ and $m$ and $q$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Then for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_div_and_mod.div$ applied to $matita_arithmetics_div_and_mod.div$ applied to $q$ and $n$ and $m$ and $matita_arithmetics_div_and_mod.div$ applied to $q$ and $matita_arithmetics_nat.times$ applied to $n$ and $m$.\nassistant\n", "label": "Axiom eq_div_div_div_times : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall q : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.div (matita_arithmetics_div_and_mod.div q n) m) (matita_arithmetics_div_and_mod.div q (matita_arithmetics_nat.times n m))) .", "predict": "Axiom Eq_div_div_div_times : forall (n m q : cic.Term univs.Type0 matita_arithmetics_nat.nat), \n  forall (__) : cic.Term univs.Type0 matita_arithmetics_nat.lt matita_arithmetics_nat.O n, \n  forall (__)1 : cic.Term univs.Type0 matita_arithmetics_nat.lt matita_arithmetics_nat.O m, \n  cic.Term univs.Type0 cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_div_and_mod.div (matita_arithmetics_div_and_mod.div q n m) (matita_arithmetics_div_and_mod.div q (matita_arithmetics_nat.times n m)))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_inv_rect_CProp1. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$. Då för alla funktioner $P$ från element $_z1422$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$", "label": "postulate Aop_inv_rect_CProp1 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> (P : (_z1422 : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1423 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.Aop x1 x2)) Hterm (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P Hterm)", "predict": " och $matita_basics_lists_list.list$ applicerat på $x1$ och $x2$ och $x1$ och $x2$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1$ och $x1"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd_discr. Låt $a1$ och $a2$ vara element av $cic.Univ$ av $univs.Type0$. Låt $x$ och $y$ vara element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $a1$ och $a2$. Låt $_e$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $a1$ och $a2$ och $x$ och $y$. Då håller $cic.Term$ för $univs.Type2$ och $matita_basics_types.match_Prod$ applicerat på $a1$ och $a2$ och $cic.succ$ applicerat på $univs.Type2$ och funktionen som avbildar $__$ som $cic.univ$ applicerat på $univs.Type2$ och funktionen som avbildar $t0$ och $t1$ som $matita_basics_types.match_Prod$ applicerat på $a1$ och $a2$ och $cic.succ$ applicerat på $univs.Type2$ och funktionen som", "label": "postulate Prod_discr : (a1 : cic.Univ univs.Type0) -> (a2 : cic.Univ univs.Type0) -> (x : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2)) -> (y : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2)) -> (_e : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod a1 a2)) x y)) -> cic.Term univs.Type2 (matita_basics_types.match_Prod a1 a2 (cic.succ univs.Type2) (\\ __ : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2) -> cic.univ univs.Type2) (\\ t0 : cic.Term univs.Type0 a1 -> \\ t1 : cic.Term univs.Type0 a2 -> matita_basics_types.match_Prod a1 a2 (cic.succ univs.Type2) (\\ __ : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2) -> cic.univ univs.Type2) (\\ u0 : cic.Term univs.Type0 a1 -> \\ u1 : cic.Term univs.Type0 a2 -> cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (\\ P : cic.Univ univs.Type1 -> cic.prod univs.Type1 univs.Type1 (cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) u0) (\\ e0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) u0) -> cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((\\ x0 : cic.Term univs.Type0 a1 -> \\ p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) x0) -> a2) u0 e0)) (mat", "predict": " avbildar $x$ och $y$ som $matita_basics_types.match_Prod$ applicerat på $a1$ och $a2$ och $cic.succ$ applicerat på $univs.Type2$ och $_e$ och $matita_basics_logic.eq_refl$ applicerat på $matita_basics_types.match_Prod$ applicerat på $a1$ och $a2$ och $cic.succ$ applicerat på $univs.Type2$ och $x$ och $y$. \nOutput: \nprod_discr : ∀ {a1 a2 : cic.Univ} {x y : cic.Term} (p : matita_basics_types.Prod a1 a2 x y) (e : cic.Term (cic.prop (cic.lift (univs.Type0) (univs.Type2) (matita_basics_types.Prod a1 a2 x y))) (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2) (matita_basics_types.Prod a1 a2 x y)) (univs.Type2) p)) → cic.Term (univs.Type2) (matita_basics_types.match_Prod a1 a2 (cic.succ univs.Type2) (\\$ -> matita_basics_types.match_Prod a1 a2 (cic.succ univs.Type2) (x y) e (matita_basics_logic.eq_refl (matita_basics_types.match_Prod a1 a2 (cic.succ univs.Type2) p)))) = matita_basics_types.match_Prod a1 a2 (cic.succ univs.Type2) (\\$ -> matita_basics_types.match_Prod a1 a2 (cic.succ univs.Type2) (x y) (matita_basics_logic.eq_refl (matita_basics_types.match_Prod a1 a2 (cic.succ univs.Type2) p)) (matita_basics_types.match_Prod a1 a2 (cic.succ univs.Type2) (x y))).\n\nNote: The provided output text is a direct translation of the given Swedish statement into Agda, without any explanations or context."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nF3_ind_aux. Låt $A1$ och $A2$ och $A3$ vara element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A2$ och element $__2$ av $cic.Term$ av $univs.Type0$ och $A3$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $P$ av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation3$ applicerat på $A1$ och $A2$ och $A3$, för alla funktioner $__$ från element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $__$ från element $a1$ av $cic.Term$ av $univs.Type0$ och $A1$ och element $a2$ av $cic.Term$ av $univs.Type0$ och $A2$ och element $a3$ av $cic.Term$ av $univs.Type0$ och $A3$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $f$ applicerat på $a1$ och $a2$ och $a3$ och $n$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $a1$ och $a2$ och $a3$ och element $a1$ av $cic.Term$ av $univs.Type0$ och $A1$ och", "label": "f3_ind_aux : A1 : cic.Univ univs.Type0 -> A2 : cic.Univ univs.Type0 -> A3 : cic.Univ univs.Type0 -> f : (__ : cic.Term univs.Type0 A1 -> __1 : cic.Term univs.Type0 A2 -> __2 : cic.Term univs.Type0 A3 -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> P : cic.Term univs.Type0 (matita_basics_relations.relation3 A1 A2 A3) -> __ : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : (a1 : cic.Term univs.Type0 A1 -> a2 : cic.Term univs.Type0 A2 -> a3 : cic.Term univs.Type0 A3 -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (f a1 a2 a3) n) -> cic.Term cic.prop (P a1 a2 a3)) -> a1 : cic.Term univs.Type0 A1 -> a2 : cic.Term univs.Type0 A2 -> a3 : cic.Term univs.Type0 A3 -> __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a1 a2 a3) n) -> cic.Term cic.prop (P a1 a2 a3)) -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> a1 : cic.Term univs.Type0 A1 -> a2 : cic.Term univs.Type0 A2 -> a3 : cic.Term univs.Type0 A3 -> __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a1 a2 a3) n) -> cic.Term cic.prop (P a1 a2 a3) .", "predict": " element $a2$ av $cic.Term$ av $univs.Type0$ och $A2$ och element $a3$ av $cic.Term$ av $univs.Type0$ och $A3$ och element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $a1$ och $a2$ och $a3$ och element $a1$ av $cic.Term$ av $univs.Type0$ och $A1$ och element $a2$ av $cic.Term$ av $univs.Type0$ och $A2$ och element $a3$ av $cic.Term$ av $univs.Type0$ och $A3$ och element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $a1$ och $a2$ och $a3$ och element $a1$ av $cic.Term$ av $univs.Type0$ och $A1$ och element $a2$ av $cic.Term$ av $univs.Type0$ och $A2$ och element $a3$ av $cic.Term$ av $univs.Type0$ och $A3$ och element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $a1$ och $a2$ och $a3$ och element $a1$ av $cic.Term$ av $univs.Type0$ och $A1$ och element $a2$ av $cic.Term$ av $univs.Type0$ och $A2$ och element $a3$ av $cic.Term$ av $univs.Type0$ och $A3$ och element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBool_rect_Type3_body. Let $Q_$ be a function from elements $_x_335$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $univs.Type3$. Let $_H_true$ be an element of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_bool.true$. Let $_H_false$ be an element of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_bool.false$. Let $x_335$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Then $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_335$.\nassistant\n", "label": "bool_rect_Type3_body : Q_ : (_x_335 : cic.Term univs.Type0 matita_basics_bool.bool -> cic.Univ univs.Type3) -> _H_true : cic.Term univs.Type3 (Q_ matita_basics_bool.true) -> _H_false : cic.Term univs.Type3 (Q_ matita_basics_bool.false) -> x_335 : cic.Term univs.Type0 matita_basics_bool.bool -> cic.Term univs.Type3 (Q_ x_335) .", "predict": "Axiom prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_15625. Soient $m$ et $n$ et $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $posm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$. Soit $pnm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Soit $c$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $d$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appl", "label": "postulate let_clause_15625 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_ar", "predict": "iqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Alors, pour tous $d$ et $e$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $e$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, nous avons $matita_basics_logic.eq$ appliqué à $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $e$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$.\nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput:"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nB2_def. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_chebyshev_bertrand.B2$ applied to $n$ and $matita_arithmetics_bigops.bigop$ applied to $matita_arithmetics_nat.S$ applied to $n$ and the function that maps $p$ to $matita_arithmetics_primes.primeb$ applied to $p$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $p$ to $matita_arithmetics_exp.exp$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_chebyshev_psi_bounds.bool_to_nat$ applied to $matita_arithmetics_nat.leb$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_chebyshev_bertrand.k$ applied to $n$ and $p$ and $matita_arithmetics_chebyshev_bertrand.k$ applied to $n$ and $p$.\nassistant\n", "label": "axiom B2_def (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_chebyshev_bertrand.B2 n) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n) (λ p => matita_arithmetics_primes.primeb p) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (λ p => matita_arithmetics_exp.exp p (matita_arithmetics_nat.times (matita_arithmetics_chebyshev_psi_bounds.bool_to_nat (matita_arithmetics_nat.leb (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_chebyshev_bertrand.k n p))) (matita_arithmetics_chebyshev_bertrand.k n p)))))", "predict": "Output: \naxiom B2_def : \n    forall (n : cic.Term univs.Type0) (matita_arithmetics_nat.nat), \n    cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_chebyshev_bertrand.B2 n (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n) (fun p => matita_arithmetics_primes.primeb p matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (fun p => matita_arithmetics_exp.exp p matita_arithmetics_nat.times (matita_arithmetics_chebyshev_psi_bounds.bool_to_nat (matita_arithmetics_nat.leb (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_chebyshev_bertrand.k n p)) (matita_arithmetics_chebyshev_bertrand.k n p))))))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBigop_diff. Soit $p$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Soit $nil$ un élément de $cic.Term$ de $univs.Type0$ et de $B$. Soit $op$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $B$ et $nil$. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$. Soient $i$ et $n$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $n$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $p$ appliqué à $i$ et $matita_basics_bool.true$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs", "label": "postulate bigop_diff : (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil)) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop n (\\ x : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p x) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (\\ x : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f x)) (matita_arithmetics_bigops.aop__o__op B nil op (f i) (matita_arithmetics_bigops.bigop n (\\ x : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_bool.andb (matita_basics_bool.notb (matita_arithmetics_nat.eqb i x)) (p x)) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (\\ x : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f x))))", "predict": ".Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $p$ appliqué à $i$ et $matita_basics_bool.false$.\n\nOutput: \npostulate bigop_diff : (p : (x : Term univs.Type0) -> nat -> Term univs.Type0) -> (B : Univ univs.Type0) -> (nil : Term univs.Type0 B) -> (op : Term univs.Type0 (ACop matita_arithmetics_bigops)) -> (f : (x : Term univs.Type0) -> nat -> Term univs.Type0 B) -> (i n : Term univs.Type0 nat) -> (i < n : prop lt) -> (p i matita_basics_bool.true = f i n : bool eq) -> (p i matita_basics_bool.false = f i n : bool eq)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1033. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $len$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $p$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $lep$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_sqrt.sqrt$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $p$. Låt $ltp$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $p$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $Hc$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat", "label": "let_clause_1033 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> len : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))) n) -> p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> lep : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_sqrt.sqrt (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) p) -> ltp : cic.Term cic.prop (matita_arithmetics_nat.lt p (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) -> Hc : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_nat.leb (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arith", "predict": " på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $Hm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $matita_arithmetics_nat.O$ och $n$. Låt $p$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $lep$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_sqrt.sqrt$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $p$. Låt $ltp$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $p$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $Hc$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $matita_arithmetics_nat.S$ applicerat på $"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBi_relation. Soient $__$ et $__1$ des éléments de $cic.Univ$ de $univs.Type0$. Alors $cic.Univ$ tient pour $univs.Type0$.\nassistant\n", "label": "Axiom bi_relation : forall __ : cic.Univ univs.Type0, forall __1 : cic.Univ univs.Type0, cic.Univ univs.Type0 .", "predict": "Axiom bi_relation : forall (a : Univ) (b : Univ), Universe a 0."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMin. Låt $__$ och $__1$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $univs.Type0$ och $matita_arithmetics_nat.nat$.\nassistant\n", "label": "postulate min : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nPermut_transpose. Låt $i$ och $j$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $i$ och $n$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $j$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_permutation.permut$ applicerat på $matita_arithmetics_permutation.transpose$ applicerat på $i$ och $j$ och $n$.\nassistant\n", "label": "Axiom permut_transpose : forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall j : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.le i n), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.le j n), cic.Term cic.prop (matita_arithmetics_permutation.permut (matita_arithmetics_permutation.transpose i j) n) .", "predict": "Permut_transpose : forall (i j n : cic.Term univs.Type0) (n : matita_arithmetics_nat.nat), (le i n) -> forall (_:cic.Term cic.prop) (_:matita_arithmetics_nat.le j n), cic.Term cic.prop (permut (transpose i j n))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nIt. $cic.Term$ holds for $univs.Type0$ and $matita_basics_types.unit$.\nassistant\n", "label": "axiom it : cic.Term univs.Type0 matita_basics_types.unit", "predict": "Output: axiom prop70 : odd 1 . \nOutput: postulate prop80 : even 2."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBool_inv_rect_Type0. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $P$ be a function from elements $_z617$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $univs.Type0$. Then for all functions $_H1$ from elements $_z618$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Hterm$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $univs.Type0$ and $P$ applied to $matita_basics_bool.true$, for all functions $_H2$ from elements $_z618$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Hterm$ and $matita_basics_bool.false$ to elements of $cic.Term$ of $univs.Type0$ and $P$ applied to $matita_basics_bool.false$, $cic.Term$ holds for $univs.Type0$ and $P$ applied to $Hterm$.\nassistant\n", "label": "postulate bool_inv_rect_Type0 : (Hterm : cic.Term univs.Type0 matita_basics_bool.bool) -> (P : (_z617 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ univs.Type0) -> (_H1 : (_z618 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.true)) -> cic.Term univs.Type0 (P matita_basics_bool.true)) -> (_H2 : (_z618 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.false)) -> cic.Term univs.Type0 (P matita_basics_bool.false)) -> cic.Term univs.Type0 (P Hterm)", "predict": "postulate Bool_inv_rect_Type0 : \n  {Hterm : cic.Term univs.Type0}\n  {matita_basics_bool : bool}\n  {P : (z : cic.Term univs.Type0) → matita_basics_bool.bool → cic.Univ univs.Type0}\n  (H1 : (z : cic.Term (cic.prop univs.Type0)) → matita_basics_logic.eq (cic.lift (univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.true) (cic.Term univs.Type0) → P matita_basics_bool.true)\n  (H2 : (z : cic.Term (cic.prop univs.Type0)) → matita_basics_logic.eq (cic.lift (univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.false) (cic.Term univs.Type0) → P matita_basics_bool.false) →\n  cic.Term univs.Type0 → P Hterm"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nPlus_minus_m_m. För alla element $n$ och $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $m$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $n$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.minus$ applicerat på $n$ och $m$ och $m$.\nassistant\n", "label": "plus_minus_m_m : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.le m n) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus n m) m)) .", "predict": "Output: forall n m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop matita_arithmetics_nat.le m n, (cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n) (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus n m) m)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_ind_body. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_915$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_range$ une fonction des fonctions $_enum$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_upto$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_filter$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_range$ appliqué à $_A$ et $_enum$ et $_upto$ et $_filter$. Alors pour tous les éléments $x_915$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_915$.\nassistant\n", "label": "range_ind_body : _A : cic.Univ univs.Type0 -> Q_ : (_x_915 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Univ cic.prop) -> _H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 _A) -> _upto : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> x_915 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Term cic.prop (Q_ x_915) .", "predict": "Axiom range_ind_body : forall A : Univ, (forall x : Term, forall range : matita_arithmetics_bigops.range A, (forall enum : (forall __ : Term, nat) -> Term A -> nat -> (forall __ : Term, nat) -> bool -> Term) -> (forall __ : Term, nat) -> (forall __ : Term, nat) -> (forall __ : Term, nat) -> (forall __ : Term, nat) -> (forall x : Term, nat) -> (forall range : matita_arithmetics_bigops.range A) -> Prop, (forall x : Term, nat) -> Prop."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBi_transitive. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $_R$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.bi_relation$ appliqué à $A$ et $B$, $cic.Univ$ tient pour $cic.prop$.\nassistant\n", "label": "postulate bi_transitive : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (_R : cic.Term univs.Type0 (matita_basics_relations.bi_relation A B)) -> cic.Univ cic.prop", "predict": "postulate bi_transitive : {A B : univs.Type0} -> (R : matita_basics_relations.bi_relation A B) -> A ∈ cic.Univ → B ∈ cic.Univ → cic.prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDivides_n_n. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $n$.\nassistant\n", "label": "postulate divides_n_n : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_primes.divides n n)", "predict": "postulate Divides_n_n : (n : univs.Type0) -> divides (matita_arithmetics_nat.nat) n n"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFold_true. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $a$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $l$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$. Soit $p$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soit $op$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$. Soit $nil$ un élément de $cic.Term$ de $univs.Type0$ et de $B$. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $p$ appliqué à $a$ et $matita_basics_bool.true$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $B$ et $matita_basics_lists_list.fold$ appliqué à $A$ et $B$ et $op$ et $nil$ et la fonction qui envoie $i$ à $p$ appliqué à $i$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $a$ et $l$ et $op$ appliqué à $f$ appliqué à $a$ et $matita_basics_lists_list.fold$ appliqué à $A$ et", "label": "Axiom fold_true : forall A : cic.Univ univs.Type0, forall B : cic.Univ univs.Type0, forall a : cic.Term univs.Type0 A, forall l : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall p : ((__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 matita_basics_bool.bool), forall op : ((__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B), forall nil : cic.Term univs.Type0 B, forall f : ((__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B), forall __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p a) matita_basics_bool.true), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_basics_lists_list.fold A B op nil (fun i => p i) (fun i => f i) (matita_basics_lists_list.cons A a l)) (op (f a) (matita_basics_lists_list.fold A B op nil (fun i => p i) (fun i => f i) l))) .", "predict": " $B$ et $op$ et $nil$ et la fonction qui envoie $i$ à $p$ appliqué à $i$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $a$ et $l$ et $op$ appliqué à $f$ appliqué à $a$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $a$ et $l$ et $op$ appliqué à $f$ appliqué à $a$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $a$ et $l$ et $op$ appliqué à $f$ appliqué à $a$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $a$ et $l$ et $op$ appliqué à $f$ appliqué à $a$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $a$ et $l$ et $op$ appliqué à $f$ appliqué à $a$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $a$ et $l$ et $op$ appliqué à $f$ appliqué à $a$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $a$ et $l$ et $op$ appliqué à $f$ appliqué à $a$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $a$ et $l$ et $op$ appliqué à $f$ appliqué à $a$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $a$ et $l$ et $op$ appliqué à $f$ appliqué à $a$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $a$ et $l$ et $op$ appliqué à $f$ appliqué à $a$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $a$ et $l$ et $op$ appliqué à $f$ appliqué à $a$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $a$ et $l"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_rect_Type0_body. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $_nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour toutes les fonctions $Q_$ des éléments $_x_955$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $_H_mk_Dop$ des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $_nil$ et $_nil$ et des fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type", "label": "axiom Dop_rect_Type0_body (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_955 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ univs.Type0) (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) (x_955 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) : cic.Term univs.Type0 (Q_ x_955)", "predict": "0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et $c$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et $c$ et des fonctions $_inv_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et $c$ et des fonctions $_inv_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et $c$, la propriété $Q_$ est vraie. \nOutput: \nOutput:"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_rect_CProp0. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_939$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_range$ des fonctions $_enum$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_upto$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_filter$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_range$ appliqué à $_A$ et $_enum$ et $_upto$ et $_filter$, pour tous les éléments $x_939$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_939$.\nassistant\n", "label": "range_rect_CProp0 : _A : cic.Univ univs.Type0 -> Q_ : (_x_939 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Univ cic.prop) -> _H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 _A) -> _upto : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> x_939 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Term cic.prop (Q_ x_939) .", "predict": "Range_rect_CProp0 : Axiom. \nA : Univ. \nthen (Q : (x : Term) -> (univs.Type0 -> matita_arithmetics_bigops.range A -> Prop)) -> \n(H_mk_range : (enum : (__) -> (nat : matita_arithmetics_nat.nat) -> Term) -> \n(A : Term) -> (upto : Term) -> (filter : (__) -> (nat : matita_arithmetics_nat.nat) -> Term -> bool) -> \n(forall (x : Term) -> (univs.Type0 -> matita_arithmetics_bigops.range A) -> Prop) -> \n(Q (matita_arithmetics_bigops.mk_range A (enum __) (upto __) (filter __)) (enum __) (upto __) (filter __)) -> \n(forall (x : Term) -> (univs.Type0 -> matita_arithmetics_bigops.range A) -> Prop) -> \n(Q x (univs.Type0) (matita_arithmetics_bigops.range A x))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLstar_ind_r_aux. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $R$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation$ appliqué à $B$, pour tous les éléments $b1$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $P$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation2$ appliqué à $matita_arithmetics_nat.nat$ et $B$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_nat.O$ et $b1$, pour toutes les fonctions $__1$ des éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $b2$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $R$ et $l$ et $b1$ et $b$ et des éléments $__2$ de $cic.Term$ de $cic.prop$ et de $R$ appliqué à $b$ et $b2$ et des éléments $__3$ de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $l$ et $b$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $l$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $b2$, pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $b$ et $b2$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $__2$ de $cic.Term$ de $c", "label": "axiom lstar_ind_r_aux (B : cic.Univ univs.Type0) (R : cic.Term univs.Type0 (matita_basics_relations.relation B)) (b1 : cic.Term univs.Type0 B) (P : cic.Term univs.Type0 (matita_basics_relations.relation2 matita_arithmetics_nat.nat B)) (__ : cic.Term cic.prop (P matita_arithmetics_nat.O b1)) (__1 : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 B) -> (b2 : cic.Term univs.Type0 B) -> (__1 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b)) -> (__2 : cic.Term cic.prop (R b b2)) -> (__3 : cic.Term cic.prop (P l b)) -> cic.Term cic.prop (P (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b2)) (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) (b b2 : cic.Term univs.Type0 B) (__2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b b2)) (__3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) b b1)) : cic.Term cic.prop (P l b2)", "predict": "ic.prop$ et de $R$ appliqué à $b$ et $b2$, pour tous les éléments $__3$ de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $l$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $b2$, nous avons que $P$ est vrai.\n\nOutput: \nLstar_ind_r_aux : forall (B : Univ), forall (R : Term Univ), forall (b1 : Term Univ), forall (P : Term Univ), forall (P_ : Prop), forall (l : Term Univ), forall (b : Term Univ), forall (b2 : Term Univ), forall (P_1 : Prop), forall (R_ : Term B), forall (b_ : Term B), forall (P_2 : Prop), forall (l_ : Term Univ), forall (b_1 : Term Univ), forall (b_2 : Term Univ), forall (P_3 : Prop), forall (l_1 : Term Univ), forall (b_1_ : Term Univ), forall (b_2_ : Term Univ), forall (P_4 : Prop), forall (l_2 : Term Univ), forall (b_1_1 : Term Univ), forall (b_2_1 : Term Univ), forall (P_5 : Prop), forall (l_3 : Term Univ), forall (b_1_2 : Term Univ), forall (b_2_2 : Term Univ), forall (P_6 : Prop), forall (l_4 : Term Univ), forall (b_1_3 : Term Univ), forall (b_2_3 : Term Univ), forall (P_7 : Prop), forall (l_5 : Term Univ), forall (b_1_4 : Term Univ), forall (b_2_4 : Term Univ), forall (P_8 : Prop), forall (l_6 : Term Univ), forall (b_1_5 : Term Univ), forall (b_2_5 : Term Univ), forall (P_9 : Prop), forall (l_7 : Term Univ), forall (b_1_6 : Term Univ), forall (b_2_6 : Term Univ), forall (P_10 : Prop), forall (l_8 : Term Univ), forall ("}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_10471. Let $n1$ and $n2$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p1$ and $p2$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $op$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $B$ and $nil$. Then for all functions $f1$ and $f2$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $B$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_bigops.iso$ applied to $B$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$, for all functions $h$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $cic.prod$ applied to $univs.Type0$ and $univs.Type0$ and $matita_arithmetics_nat.nat$ and the function that maps $__$ to $matita_arith", "label": "Axiom let_clause_10471 : forall n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n2 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall p1 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall p2 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall B : cic.Univ univs.Type0, forall nil : cic.Term univs.Type0 B, forall op : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil), forall f1 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B), forall f2 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B), forall _clearme : cic.Term cic.prop (matita_arithmetics_bigops.iso B (matita_arithmetics_bigops.mk_range B f1 n1 p1) (matita_arithmetics_bigops.mk_range B f2 n2 p2)), forall h : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall _clearme0 : cic.Term cic.prop (matita_basics_logic.ex (cic.prod univs.Type0 univs.Type0 matita_arithmetics_nat.nat (fun __ => matita_arithmetics", "predict": "metics_bigops.mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$ and $h$ and $_clearme$ and $_clearme0$, for all functions $g$ from elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.imp$ applied to $cic.prod$ applied to $univs.Type0$ and $univs.Type0$ and $matita_arithmetics_nat.nat$ and the function that maps $__$ to $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$ and $h$ and $_clearme$ and $_clearme0$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_bool.bool$, we have $op$ is equal to $g$ applied to $B$ and $nil$.\n\nOutput: Let_clause_10471 : forall (n1 : cic.Term univs.Type0) (n2 : matita_arithmetics_nat.nat) (p1 : (__) -> cic.Term univs.Type0) (p2 : (__) -> matita_basics_bool.bool) (B : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 B) (op : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil)) (f1 : (__) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) (f2 : (__) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) (clearme : cic.Term cic.prop matita_arithmetics_bigops.iso B (matita_arithmetics_bigops.mk_range B f1 n1 p1 (matita_arithmetics_bigops.mk_range B f2 n2 p2))) (h : (__) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) (clearme0 : cic.Term cic"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_rect_Type3. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_921$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type3$. Låt $_H_mk_range$ vara en funktion från funktioner $_enum$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $_A$ och element $_upto$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $_filter$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_range$ applicerat på $_A$ och $_enum$ och $_upto$ och $_filter$. Då för alla element $x_921$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$, håller $cic.Term$ för $univs.Type3$ och $Q_$ applicerat på $x_921$.\nassistant\n", "label": "Axiom range_rect_Type3 : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_921 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type3), forall _H_mk_range : ((_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type3 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))), forall x_921 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A), cic.Term univs.Type3 (Q_ x_921) .", "predict": "Range_rect_Type3. Axiom $_A$ : cic.Univ.univs.Type0. Axiom $Q_$ : (x : cic.Term.univs.Type0) -> matita_arithmetics_bigops.range A -> cic.Univ.univs.Type3. Axiom $_H_mk_range$ : (enum : (x : cic.Term.univs.Type0) -> matita_arithmetics_nat.nat -> cic.Term.univs.Type0) -> (upto : cic.Term.univs.Type0) -> (filter : (x : cic.Term.univs.Type0) -> matita_arithmetics_nat.nat -> cic.Term.univs.Type0 -> matita_basics_bool.bool) -> matita_arithmetics_bigops.mk_range A -> (enum x -> matita_arithmetics_nat.nat) -> (cic.Term.univs.Type0) -> (Q_ (matita_arithmetics_bigops.range A))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_inv_rect_CProp4. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Då för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1536$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic", "label": "Axiom Aop_inv_rect_CProp4 : forall x1 : cic.Univ univs.Type0, forall x2 : cic.Term univs.Type0 x1, forall Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2), forall P : ((_z1536 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> cic.Univ cic.prop), forall _H1 : ((op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1537 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))), cic.Term cic.prop (P Hterm) .", "predict": ".prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$, det finns en funktion $_H2$ från element $x1$ av $cic.Univ$ av $univs.Type0$ till element av $cic.Univ$ av $cic.prop$ så att $P$ applicerat på $x1$ och $x2$ och $Hterm$ och $_H1$ och $_nill$ och $_nilr$ och $_H2$ är lika med $x1$. \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProj1. För alla element $A$ och $B$ av $cic.Univ$ av $cic.prop$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $A$ och $B$, håller $cic.Term$ för $cic.prop$ och $A$.\nassistant\n", "label": "Axiom proj1 : forall A : cic.Univ cic.prop, forall B : cic.Univ cic.prop, forall __ : cic.Term cic.prop (matita_basics_logic.And A B), cic.Term cic.prop A .", "predict": "Axiom Proj1 : forall A B : cic.Univ, forall __ : cic.prop, forall and : A && B, cic.Term __ A ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSum_rect_CProp2. Let $_A$ and $_B$ be elements of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_571$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_inl$ be a function from elements $x_572$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.inl$ applied to $_A$ and $_B$ and $x_572$. Let $_H_inr$ be a function from elements $x_573$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.inr$ applied to $_A$ and $_B$ and $x_573$. Let $x_571$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_571$.\nassistant\n", "label": "axiom Sum_rect_CProp2 (_A _B : cic.Univ univs.Type0) (Q_ : (_x_571 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ cic.prop) (_H_inl : (x_572 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.inl _A _B x_572))) (_H_inr : (x_573 : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.inr _A _B x_573))) (x_571 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) : cic.Term cic.prop (Q_ x_571)", "predict": "sum_rect_cprop2 : ∀ (A B : univ) (Q_ : (x : term) → (matita_basics_types.sum A B) → univ → prop) (H_inl : (x : term) → A → term → prop → Q_ (matita_basics_types.inl A B) x) (H_inr : (x : term) → B → term → prop → Q_ (matita_basics_types.inr A B) x) (x : term) (sum : matita_basics_types.sum A B), prop Q_ x sum"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nReverse_single. Let $S$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $a$ of $cic.Term$ of $univs.Type0$ and $S$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $S$ and $matita_basics_lists_list.reverse$ applied to $S$ and $matita_basics_lists_list.cons$ applied to $S$ and $a$ and $matita_basics_lists_list.nil$ applied to $S$ and $matita_basics_lists_list.cons$ applied to $S$ and $a$ and $matita_basics_lists_list.nil$ applied to $S$.\nassistant\n", "label": "reverse_single : S : cic.Univ univs.Type0 -> a : cic.Term univs.Type0 S -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list S)) (matita_basics_lists_list.reverse S (matita_basics_lists_list.cons S a (matita_basics_lists_list.nil S))) (matita_basics_lists_list.cons S a (matita_basics_lists_list.nil S))) .", "predict": "postulate Reverse_single : (S : cic.Univ) -> (a : cic.Term) -> (S : univs.Type0) -> (S : univs.Type0) -> (S : univs.Type2) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_basics_lists_list.list) -> (S : matita_b"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nInv. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $_R$ av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $A$, för alla element $_a$ och $_b$ av $cic.Term$ av $univs.Type0$ och $A$, håller $cic.Univ$ för $cic.prop$.\nassistant\n", "label": "axiom inv (A : cic.Univ univs.Type0) (_R : cic.Term univs.Type0 (matita_basics_relations.relation A)) (_a _b : cic.Term univs.Type0 A) : cic.Univ cic.prop", "predict": "postulate element_A : univs.Type0.univ  \npostulate element_R : cic.Term.Type0.univ  \npostulate relation : element_R -> element_A -> element_A  \npostulate all_elements : (element_A -> element_A -> bool)  \npostulate cic_univ : cic.prop  \npostulate prop_holds : all_elements cic_univ relation element_A element_A"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_inv_plus_l. For all elements $x$ and $y$ and $z$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.plus$ applied to $x$ and $y$ and $z$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.And$ applied to $matita_arithmetics_nat.le$ applied to $x$ and $matita_arithmetics_nat.minus$ applied to $z$ and $y$ and $matita_arithmetics_nat.le$ applied to $y$ and $z$.\nassistant\n", "label": "axiom le_inv_plus_l (x y z : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.plus x y) z)) : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le x (matita_arithmetics_nat.minus z y)) (matita_arithmetics_nat.le y z))", "predict": "Output: Axiom Le_inv_plus_l : forall (x y z : cic.Term univs.Type0 matita_arithmetics_nat.nat), forall (___ : cic.Term univs.Type0 cic.prop matita_arithmetics_nat.le (matita_arithmetics_nat.plus x y) z), cic.Term (matita_basics_logic.And (matita_arithmetics_nat.le x (matita_arithmetics_nat.minus z y)) (matita_arithmetics_nat.le y z))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_rect_CProp4. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_652$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_DPair$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $_f$ appliqué à $dpi1$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $A$ et $_f$ et $dpi1$ et $_dpi2$, pour tous les éléments $x_652$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_652$.\nassistant\n", "label": "Axiom DPair_rect_CProp4 : forall A : cic.Univ univs.Type0, forall _f : ((__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0), forall Q_ : ((_x_652 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop), forall _H_mk_DPair : ((dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))), forall x_652 : cic.Term univs.Type0 (matita_basics_types.DPair A _f), cic.Term cic.prop (Q_ x_652) .", "predict": "Axiom DPair_rect_CProp4 : forall (A : cic.Univ), (forall (x : cic.Term) (f : DPair A -> cic.Univ), (forall (Q : DPair A -> cic.prop), (forall (dpi1 : cic.Term) (dpi2 : cic.Term), (forall (H_mk_DPair : DPair A -> cic.prop), (Q (mk_DPair A f dpi1 dpi2)) -> (forall (x : cic.Term), (x = dpi1 -> Q (mk_DPair A f x dpi2)) -> (forall (y : cic.Term), (y = dpi2 -> Q (mk_DPair A f dpi1 y)))))) -> (forall (x : cic.Term), (x = mk_DPair A f x x) -> (Q (mk_DPair A f x x)))) -> (forall (x : cic.Term), (x = mk_DPair A f x x) -> (Q (mk_DPair A f x x)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_inv_rect_Type0. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Då för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1398$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type0$, för alla funktioner $_H1$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$", "label": "postulate Aop_inv_rect_Type0 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> (P : (_z1398 : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> cic.Univ univs.Type0) -> (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1399 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.Aop x1 x2)) Hterm (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type0 (P (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type0 (P Hterm)", "predict": " av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$, har $P$ en induktiv definierad funktionalitet som en funktionalitet $_H2$ från element $_$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type0$ som är en funktionalitet som är en funktionalitet $_H3$ från element $_$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type0$ som är en funktionalitet $_H4$ från element $_$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type0$ som är en funktionalitet $_H5$ från element $_$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type0$ som är en funktionalitet $_H6$ från element $_$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type0$ som är en funktionalitet $_H7$ från element $_$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type0$ som är en"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_CProp3_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_879$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_Aop$ be a function from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic", "label": "axiom Aop_rect_CProp3_body (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_879 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop) (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) (x_879 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) : cic.Term cic.prop (Q_ x_879)", "predict": ".lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and $op$ applied to $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_assocr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $op$ applied to $op$ applied to $a$ and $b$ and $c$ and $op$ applied to $a$ and $b$ and $c$. Then, the following holds: \nOutput: \nAop_rect_CProp3_body A _nil Q_ _H_mk_Aop. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_879$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_Aop$ be a function from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSub_lt. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $e$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $A$. Låt $p$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $m$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_bigops.sub_hk$ applicerat på funktionen som avbildar $x$ som $x$ och funktionen som avbildar $x$ som $x$ och $A$ och $matita_arithmetics_bigops.mk_range$ applicerat på $A$ och $e$ och $n$ och $p$ och $matita_arithmetics_bigops.mk_range$ applicerat på $A$ och $e$ och $m$ och $p$.\nassistant\n", "label": "Axiom sub_lt : forall A : cic.Univ univs.Type0, forall e : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 A), forall p : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.le n m), cic.Term cic.prop (matita_arithmetics_bigops.sub_hk (fun x => x) (fun x => x) A (matita_arithmetics_bigops.mk_range A e n p) (matita_arithmetics_bigops.mk_range A e m p)) .", "predict": "Parameter sub_hk : forall (A : Type) (e p : forall (x y : nat), A -> term nat -> term bool), term nat -> term nat -> term prop -> term prop.\nHypothesis eq1 : A = A.\nHypothesis eq2 : e = e.\nHypothesis eq3 : p = p.\nHypothesis n : term nat.\nHypothesis m : term nat.\nHypothesis le : le n m.\nDefinition f := fun x y => x.\nDefinition g := fun x y => x.\nDefinition h := mk_range A e n p.\nDefinition h' := mk_range A e m p.\nDefinition result := sub_hk f g h h'."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_inv_rect_Type1. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x2$ un élément de $cic.Term$ de $univs.Type0$ et de $x1$. Alors pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1722$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type1$, pour toutes les fonctions $_H1$ des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $x1$ et $x2$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$", "label": "axiom Dop_inv_rect_Type1 (x1 : cic.Univ univs.Type0) (x2 : cic.Term univs.Type0 x1) (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) (P : (_z1722 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> cic.Univ univs.Type1) (_H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> (prod : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_null : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> (_distr : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> (_z1723 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term univs.Type1 (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) : cic.Term univs.Type1 (P Hterm)", "predict": " et des fonctions $_eq1$ des éléments $b$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$, il existe des fonctions $_induction$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_eq1$ des éléments $b$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ tels que pour tous les éléments $induction$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $eq1$ des éléments $b$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$, $Hterm$ est égal à $P$ appliqué à $induction$ et $eq1$.\n\nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLog_exp2. Låt $p$ och $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.times$ applicerat på $m$ och $matita_arithmetics_log.log$ applicerat på $p$ och $n$ och $matita_arithmetics_log.log$ applicerat på $p$ och $matita_arithmetics_exp.exp$ applicerat på $n$ och $m$.\nassistant\n", "label": "log_exp2 : p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times m (matita_arithmetics_log.log p n)) (matita_arithmetics_log.log p (matita_arithmetics_exp.exp n m))) .", "predict": "Output: \naxiom log_exp2 : forall (p : term univs.type0) (n : nat) (m : nat), prop (lt (suc p) (nat suc (nat 0))) -> prop (le (nat (times m (log p n))) (log p (nat (times (exp n) m))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_1_max_prime. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_minimization.max$ applied to $matita_arithmetics_nat.S$ applied to $n$ and the function that maps $i$ to $matita_basics_bool.andb$ applied to $matita_arithmetics_primes.primeb$ applied to $i$ and $matita_arithmetics_primes.dividesb$ applied to $i$ and $n$.\nassistant\n", "label": "Axiom lt_1_max_prime : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n), cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_minimization.max (matita_arithmetics_nat.S n) (fun i => matita_basics_bool.andb (matita_arithmetics_primes.primeb i) (matita_arithmetics_primes.dividesb i n)))) .", "predict": "Axiom Lt_1_max_prime : forall n : Term univs.Type0, (nat n) -> forall ___, prop $__ -> (lt (S (O n)) (max (S (S n)) (fun i => andb (primeb i) (dividesb i n))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nConf3. Let $A$ and $B$ be elements of $cic.Univ$ of $univs.Type0$. Let $__$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation2$ applied to $A$ and $B$. Then for all elements $__1$ of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $A$, $cic.Univ$ holds for $cic.prop$.\nassistant\n", "label": "Conf3 : A : cic.Univ univs.Type0 -> B : cic.Univ univs.Type0 -> __ : cic.Term univs.Type0 (matita_basics_relations.relation2 A B) -> __1 : cic.Term univs.Type0 (matita_basics_relations.relation A) -> cic.Univ cic.prop .", "predict": "Output: \naxiom conf3 : forall (A B : univs.type0), (univs.type0 -> relation2 A B) -> forall (_ : univs.type0), (relation A) -> cic.prop."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSum_rect_CProp5. Let $_A$ and $_B$ be elements of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_561$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_inl$ be a function from elements $x_562$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.inl$ applied to $_A$ and $_B$ and $x_562$. Let $_H_inr$ be a function from elements $x_563$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.inr$ applied to $_A$ and $_B$ and $x_563$. Let $x_561$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_561$.\nassistant\n", "label": "postulate Sum_rect_CProp5 : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_561 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ cic.prop) -> (_H_inl : (x_562 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.inl _A _B x_562))) -> (_H_inr : (x_563 : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.inr _A _B x_563))) -> (x_561 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Term cic.prop (Q_ x_561)", "predict": "postulate Sum_rect_CProp5 : \n  {A B : univ} -> (Q_ : (x_561 : term) -> (matita_basics_types.Sum A B) -> univ -> prop) -> \n  (H_inl : (x_562 : term) -> A -> term -> prop -> Q_ (matita_basics_types.inl A B) x_562) -> \n  (H_inr : (x_563 : term) -> B -> term -> prop -> Q_ (matita_basics_types.inr A B) x_563) -> \n  (x_561 : term) -> (matita_basics_types.Sum A B) -> prop -> Q_ x_561 x_561 (Q_ x_561 (matita_basics_types.Sum A B))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAnd_rect_CProp0_body. Let $_A$ and $_B$ be elements of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_166$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_conj$ be a function from elements $x_168$ of $cic.Term$ of $cic.prop$ and $_A$ and elements $x_167$ of $cic.Term$ of $cic.prop$ and $_B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_logic.conj$ applied to $_A$ and $_B$ and $x_168$ and $x_167$. Then for all elements $x_166$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $_A$ and $_B$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_166$.\nassistant\n", "label": "And_rect_CProp0_body : _A : cic.Univ cic.prop -> _B : cic.Univ cic.prop -> Q_ : (_x_166 : cic.Term cic.prop (matita_basics_logic.And _A _B) -> cic.Univ cic.prop) -> _H_conj : (x_168 : cic.Term cic.prop _A -> x_167 : cic.Term cic.prop _B -> cic.Term cic.prop (Q_ (matita_basics_logic.conj _A _B x_168 x_167))) -> x_166 : cic.Term cic.prop (matita_basics_logic.And _A _B) -> cic.Term cic.prop (Q_ x_166) .", "predict": "Output: Axiom prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd_rect_Type0_body. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_702$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $_H_mk_Prod$ des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $_A$ et $_B$ et $_fst$ et $_snd$, pour tous les éléments $x_702$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_702$.\nassistant\n", "label": "Axiom Prod_rect_Type0_body : forall _A : cic.Univ univs.Type0, forall _B : cic.Univ univs.Type0, forall Q_ : ((_x_702 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ univs.Type0), forall _H_mk_Prod : ((_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term univs.Type0 (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))), forall x_702 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B), cic.Term univs.Type0 (Q_ x_702) .", "predict": "Axiom Prod_rect_Type0_body : forall (A : Univ) (B : Univ) (Q : (forall x : Term Univ0) -> Prod A B -> Univ0 -> Prop), (forall (H_mk_Prod : forall (fst : Term Univ0) (snd : Term Univ0) -> A -> B -> Term Univ0) (Q_applied : Q (mk_Prod A B fst snd)), forall (x : Term Univ0) (Prod_applied : Prod A B), Prop) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1047. Let $k$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $op$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Let $lenk$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $k$. Let $j$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $leup$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $j$, for all functions $Hind$ from functions $__$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $i$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $j", "label": "postulate let_clause_1047 : (k : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (lenk : cic.Term cic.prop (matita_arithmetics_nat.le n k)) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (leup : cic.Term cic.prop (matita_arithmetics_nat.le n j)) -> (Hind : (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le n i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i j)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p i) matita_basics_bool.false)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (mat", "predict": "$ to elements of $cic.Term$ of $univs.Type0$ and $B$, we have the following proposition:\nOutput: \n```\nlet_clause_1047 : ∀ {univs Type0} {matita_arithmetics_nat nat} {cic Term} {matita_basics_bool bool} {cic Univ} {B : Univ} {cic prop} {matita_arithmetics_nat le} {matita_arithmetics_nat nat} {cic Term} {cic prop} {matita_arithmetics_nat le} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term} {cic Term}"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDpi1. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$, pour tous les éléments $_xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $f$, $cic.Term$ tient pour $univs.Type0$ et $A$.\nassistant\n", "label": "Axiom dpi1 : forall A : cic.Univ univs.Type0, forall f : ((__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0), forall _xxx : cic.Term univs.Type0 (matita_basics_types.DPair A f), cic.Term univs.Type0 A .", "predict": "Axiom dpi1 : forall A : Univ, (forall __ : Term, (forall _xxx : DPair (univs.Type0) (fun a : A => Univ), Term) -> Term) -> Term."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1617. Let $p$ and $m$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $p$. Let $gcd1$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Let $_clearme$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$. Let $c$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $nm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$ and $matita_arithmetics_nat.times$ applied to $p$ and $c$. Let $a$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme0$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $b$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $", "label": "axiom let_clause_1617 (p m n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) (gcd1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (_clearme : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times m n))) (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) (nm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times m n) (matita_arithmetics_nat.times p c))) (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme0 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (λ b => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m)) (matita_basics_logic.eq (c", "predict": "matita_arithmetics_nat.nat$ and $a$ and $b$ and $matita_arithmetics_nat.times$ applied to $p$ and $a$ and $matita_arithmetics_nat.times$ applied to $m$ and $b$ and $matita_arithmetics_nat.times$ applied to $c$ and $b$ and $matita_arithmetics_nat.times$ applied to $n$ and $b$. Let $t$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $matita_basics_logic.imp$ applied to $matita_basics_logic.eq$ applied to $matita_arithmetics_nat.nat$ and $p$ and $matita_basics_logic.imp$ applied to $matita_basics_logic.eq$ applied to $matita_arithmetics_nat.nat$ and $m$ and $matita_basics_logic.imp$ applied to $matita_basics_logic.eq$ applied to $matita_arithmetics_nat.nat$ and $n$ and $matita_basics_logic.imp$ applied to $matita_basics_logic.eq$ applied to $matita_arithmetics_nat.nat$ and $c$ and $matita_basics_logic.imp$ applied to $matita_basics_logic.eq$ applied to $matita_arithmetics_nat.nat$ and $a$ and $matita_basics_logic.imp$ applied to $matita_basics_logic.eq$ applied to $matita_arithmetics_nat.nat$ and $b$ and $matita_basics_logic.imp$ applied to $matita_basics_logic.eq$ applied to $matita_arithmetics_nat.nat$ and $p$ and $matita_basics_logic.imp$ applied to $matita_basics_logic.eq$ applied to $matita_arithmetics_nat.nat$ and $m$ and $matita_basics_logic.imp$ applied to $matita_basics_logic.eq$ applied to $matita_arithmetics_nat.nat$ and $n$ and $matita_basics_logic.imp$ applied to $matita_basics_logic.eq$ applied to $matita_arithmetics_nat.nat$ and $c$ and $matita_basics_logic.imp$ applied to $matita_basics_logic.eq$ applied to $matita_arithmetics_nat.nat$ and $a$ and $matita_b"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSig_rect_CProp3_body. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $_f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $Q_$ från element $_x_682$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_Sig$ från element $pi1$ av $cic.Term$ av $univs.Type0$ och $A$ och element $_pi2$ av $cic.Term$ av $cic.prop$ och $_f$ applicerat på $pi1$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.mk_Sig$ applicerat på $A$ och $_f$ och $pi1$ och $_pi2$, för alla element $x_682$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_682$.\nassistant\n", "label": "Sig_rect_CProp3_body : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> Q_ : (_x_682 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) -> cic.Univ cic.prop) -> _H_mk_Sig : (pi1 : cic.Term univs.Type0 A -> _pi2 : cic.Term cic.prop (_f pi1) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> x_682 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) -> cic.Term cic.prop (Q_ x_682) .", "predict": "Output: \nFör alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $_f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $Q_$ från element $_x_682$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_Sig$ från element $pi1$ av $cic.Term$ av $univs.Type0$ och $A$ och element $_pi2$ av $cic.Term$ av $cic.prop$ och $_f$ applicerat på $pi1$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.mk_Sig$ applicerat på $A$ och $_f$ och $pi1$ och $_pi2$, för alla element $x_682$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_682$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFilter_case. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Then for all elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $x$ of $cic.Term$ of $univs.Type0$ and $A$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.mem$ applied to $A$ and $x$ and $l$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_basics_lists_list.mem$ applied to $A$ and $x$ and $matita_basics_lists_list.filter$ applied to $A$ and $p$ and $l$ and $matita_basics_lists_list.mem$ applied to $A$ and $x$ and $matita_basics_lists_list.filter$ applied to $A$ and the function that maps $x0$ to $matita_basics_bool.notb$ applied to $p$ applied to $x0$ and $l$.\nassistant\n", "label": "Axiom filter_case : forall A : cic.Univ univs.Type0, forall p : ((__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 matita_basics_bool.bool), forall l : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall x : cic.Term univs.Type0 A, forall __ : cic.Term cic.prop (matita_basics_lists_list.mem A x l), cic.Term cic.prop (matita_basics_logic.Or (matita_basics_lists_list.mem A x (matita_basics_lists_list.filter A p l)) (matita_basics_lists_list.mem A x (matita_basics_lists_list.filter A (fun x0 => matita_basics_bool.notb (p x0)) l))) .", "predict": "Axiom filter_case : forall (A : cic.Univ) (p : forall ___, A -> cic.Term) (l : cic.Term) (x : A) (mem : matita_basics_lists_list.mem A x l), cic.Term (cic.prop) (matita_basics_logic.Or (matita_basics_lists_list.mem A x) (matita_basics_lists_list.filter A p l (matita_basics_lists_list.mem A x) (fun x0 => matita_basics_bool.notb (p x0 l))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_div_to_times. Soient $n$ et $m$ et $q$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $q$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_div_and_mod.div$ appliqué à $n$ et $q$ et $m$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.lt$ appliqué à $n$ et $matita_arithmetics_nat.times$ appliqué à $q$ et $m$.\nassistant\n", "label": "Axiom lt_div_to_times : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall q : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O q), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_div_and_mod.div n q) m), cic.Term cic.prop (matita_arithmetics_nat.lt n (matita_arithmetics_nat.times q m)) .", "predict": "Lt_div_to_times : forall (n m q : cic.Term univs.Type0) (q : matita_arithmetics_nat.nat), \n  (lt q (matita_arithmetics_nat.O)) -> \n  (lt (div n q) m) -> \n  (lt (times n m) (times q (matita_arithmetics_nat.times q m)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nVoid. $cic.Univ$ holds for $univs.Type0$.\nassistant\n", "label": "void : cic.Univ univs.Type0 .", "predict": "Output: Axiom prop70 : odd 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1047. Soient $k$ et $n$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $p$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Soit $nil$ un élément de $cic.Term$ de $univs.Type0$ et de $B$. Soit $op$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$. Soit $lenk$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $k$. Soit $j$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $leup$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $j$. Soit $Hind$ une fonction des fonctions $__$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $i$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $j$ à des éléments de $cic.Term$ de $cic.prop$ et de", "label": "axiom let_clause_1047 (k n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (B : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 B) (op : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) (lenk : cic.Term cic.prop (matita_arithmetics_nat.le n k)) (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) (leup : cic.Term cic.prop (matita_arithmetics_nat.le n j)) (Hind : (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le n i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i j)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p i) matita_basics_bool.false)) -> cic.Term cic.prop (matita_b", "predict": " $matita_arithmetics_nat.le$ appliqué à $n$ et $j$. Soit $H$ une fonction des éléments $x$ de $B$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $x$. Soit $fj$ un élément de $cic.Term$ de $B$ appliqué à $j$. Soit $fjH$ une fonction des éléments $x$ de $B$ et des éléments $y$ de $B$ appliqués à $x$ et $y$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $fj$ appliqué à $x$ et $y$. Soit $fjHfj$ une fonction des éléments $x$ de $B$ et des éléments $y$ de $B$ appliqués à $x$ et $y$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $fj$ appliqué à $x$ et $y$. Soit $Hfj$ une fonction des éléments $x$ de $B$ et des éléments $y$ de $B$ appliqués à $x$ et $y$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $fj$ appliqué à $x$ et $y$. Soit $Hindfj$ une fonction des éléments $x$ de $B$ et des éléments $y$ de $B$ appliqués à $x$ et $y$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $fj$ appliqué à $x$ et $y$. Soit $fjHfjfjHfjHfjHfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjfjf"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_CProp1_body. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all functions $Q_$ from elements $_x_883$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $c", "label": "Axiom Aop_rect_CProp1_body : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_883 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop), forall _H_mk_Aop : ((op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))), forall x_883 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil), cic.Term cic.prop (Q_ x_883) .", "predict": "ic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and $a$ and $b$ and $c$ and functions $_id$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assocr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and $a$ and $b$ and $c$, the following equation holds: $Q_$ applied to $A$ and $_nil$ and $a$ and $a$ and $_H_mk_Aop$ applied to $op$ and $a$ and $a$ and $_nill$ applied to $a$ and $a$ and $a$ and $_assoc$ applied to $a$ and $b$ and $c$ and $a$ and $b$ and $c$ and $_id$ applied to $a$ and $a$ and $_assocr$ applied to $a$ and $b$ and $c$ is equal to $Q_$ applied to $A$ and $_nil$ and $a$ and $a$ and $_H_mk_Aop$ applied to $op$ and $a$ and $a$ and $_nill$ applied to $a$ and $a$ and $a$ and $_assoc$ applied to $a$ and $b$ and"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1561. Pour tous les éléments $p$ et $m$ et $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $posn$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $p$, pour tous les éléments $gcd1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $_clearme$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.divides$ appliqué à $p$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $n$, pour tous les éléments $c$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $nm$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $p$ et $c$, pour tous les éléments $a$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $_clearme0$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $b$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $un", "label": "axiom let_clause_1561 (p m n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) (gcd1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (_clearme : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times m n))) (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) (nm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times m n) (matita_arithmetics_nat.times p c))) (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme0 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (λ b => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd p m", "predict": "ivs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $p$ et $a$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $p$ et $c$ et $matita_basics_logic.eq$ appliqué à $matita_arithmetics_nat.times$ appliqué à $m$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $p$ et $c$ et $matita_basics_logic.eq$ appliqué à $matita_arithmetics_nat.times$ appliqué à $m$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $p$ et $a$, pour tous les éléments $g$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $x$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $y$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $q$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $t$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $u$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $v$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDpi1__o__aop. Soit $x0$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x1$ un élément de $cic.Term$ de $univs.Type0$ et de $x0$. Alors pour toutes les fonctions $x2$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $x0$ et $x1$ à des éléments de $cic.Univ$ de $univs.Type0$, pour tous les éléments $x3$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $matita_arithmetics_bigops.ACop$ appliqué à $x0$ et $x1$ et $x2$, $cic.Term$ tient pour $univs.Type0$ et $matita_arithmetics_bigops.Aop$ appliqué à $x0$ et $x1$.\nassistant\n", "label": "dpi1__o__aop : x0 : cic.Univ univs.Type0 -> x1 : cic.Term univs.Type0 x0 -> x2 : (__ : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x0 x1) -> cic.Univ univs.Type0) -> x3 : cic.Term univs.Type0 (matita_basics_types.DPair (matita_arithmetics_bigops.ACop x0 x1) x2) -> cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x0 x1) .", "predict": "Dpi1__o__aop. Soit x0 un élément de cic.Univ de univs.Type0. Soit x1 un élément de cic.Term de univs.Type0 et de x0. Alors pour toutes les fonctions x2 des éléments $__$ de cic.Term de univs.Type0 et de matita_arithmetics_bigops.ACop appliqué à x0 et x1 à des éléments de cic.Univ de univs.Type0, pour tous les éléments x3 de cic.Term de univs.Type0 et de matita_basics_types.DPair appliqué à matita_arithmetics_bigops.ACop appliqué à x0 et x1 et x2, cic.Term tient pour univs.Type0 et matita_arithmetics_bigops.Aop appliqué à x0 et x1."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_rect_CProp4_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $_x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Alors pour toutes les fonctions $Q_$ des éléments $x_22$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $_x_23$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_22$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $_H_refl$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$, pour tous les éléments $x_22$ de $cic.Term$ de $univs.Type2$ et de $A$, pour tous les éléments $x_23$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_22$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_22$ et $x_23$.\nassistant\n", "label": "eq_rect_CProp4_body : A : cic.Univ univs.Type2 -> _x : cic.Term univs.Type2 A -> Q_ : (x_22 : cic.Term univs.Type2 A -> _x_23 : cic.Term cic.prop (matita_basics_logic.eq A _x x_22) -> cic.Univ cic.prop) -> _H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x)) -> x_22 : cic.Term univs.Type2 A -> x_23 : cic.Term cic.prop (matita_basics_logic.eq A _x x_22) -> cic.Term cic.prop (Q_ x_22 x_23) .", "predict": "Output: Axiom Eq_rect_CProp4_body : forall (A : cic.Univ) (x : cic.Term) (A : A), (forall (Q : (x22 : cic.Term) -> A -> cic.prop), (forall (x23 : cic.Term) (eq : matita_basics_logic.eq A x), (forall (H_refl : cic.Term) (Q_refl : Q x (matita_basics_logic.refl A x)), (forall (x22 : cic.Term) (A : A), (forall (x23 : cic.Term) (eq : matita_basics_logic.eq A x), (Q x22 x23)))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_rect_CProp4_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_929$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_range$ be a function from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$. Let $x_929$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_929$.\nassistant\n", "label": "axiom range_rect_CProp4_body (_A : cic.Univ univs.Type0) (Q_ : (_x_929 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ cic.prop) (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) (x_929 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) : cic.Term cic.prop (Q_ x_929)", "predict": "Output: \n```\nvariable A : Univ univs.Type0\nvariable Q : (x : Term univs.Type0) -> range matita_arithmetics_bigops A -> Univ cic.prop\nvariable H_mk_range : (enum : (x : Term univs.Type0) -> nat -> Term univs.Type0) -> A -> upto : nat -> (filter : (x : Term univs.Type0) -> nat -> bool) -> Term univs.Type0\nvariable x : Term univs.Type0 -> range matita_arithmetics_bigops A\n\n{x : Term univs.Type0} -> Q x -> Univ cic.prop\n```"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMin_spec_inv_ind. Låt $x1$ och $x2$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $x3$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $x4$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_Hterm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_minimization.min_spec$ applicerat på $x1$ och $x2$ och $x3$ och $x4$. Då för alla funktioner $P$ från element $_z1890$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $_x_1080$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $x2$ och $m$ och element $_x_1079$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $matita_arithmetics_nat.plus$ applicerat på $x1$ och $x2$ och element $_x_1078$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $x3$ applicerat på $m$ och $matita_basics_bool.true$ och funktioner $_x_1077$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och", "label": "Axiom min_spec_inv_ind : forall x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall x3 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall x4 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _Hterm : cic.Term cic.prop (matita_arithmetics_minimization.min_spec x1 x2 x3 x4), forall P : ((_z1890 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop), forall _H1 : ((m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_1080 : cic.Term cic.prop (matita_arithmetics_nat.le x2 m)) -> (_x_1079 : cic.Term cic.prop (matita_arithmetics_nat.lt m (matita_arithmetics_nat.plus x1 x2))) -> (_x_1078 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (x3 m) matita_basics_bool.true)) -> (_x_1077 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le", "predict": " element $_x_1076$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $i$ och $x2$ och element $_x_1075$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $x2$ och $i$ och element $_x_1074$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $x3$ applicerat på $i$ och $matita_basics_bool.true$ och $_Hterm$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ och $_H1$ applicerat på $m$ och $x2$ och $x4$ och $_x_1080$ och $_x_1079$ och $_x_1078$ och $_x_1077$ och $_x_1076$ och $_x_1075$ och $_x_1074$ och $x4$ och $_x_1080$ och $_x_1079$ och $_x_1078$ och $_x_1077$ och $_x_1076$ och $_x_1075$ och $_x_1074$ och $x4$, har $P$ ett värde som är $matita_basics_bool.true$.\n\nOutput: \nAxiom Min_spec_inv_ind : forall (x1 : cic.Term univs.Type0) (x2 : matita_arithmetics_nat.nat) (x3 : (cic.Term univs.Type0) -> (matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (x4 : cic.Term univs.Type0) (Hterm : cic.Term cic.prop matita_arithmetics_minimization.min_spec x1 x2 x3 x4), (forall (P : (cic.Term univs.Type0) ->"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSigma_p_dividesb1. Let $m$ and $n$ and $p$ and $k$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.prime$ applied to $p$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_arithmetics_primes.divides$ applied to $p$ and $n$, for all elements $__3$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $m$ and $k$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $m$ and $matita_arithmetics_bigops.bigop$ applied to $k$ and the function that maps $i$ to $matita_arithmetics_primes.dividesb$ applied to $matita_arithmetics_exp.exp$ applied to $p$ and $matita_arithmetics_nat.S$ applied to $i$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_exp.exp$ applied to $p$ and $m$ and $n$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.plus$ and the function that maps $i$ to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$.\nassistant\n", "label": "Axiom sigma_p_dividesb1 : forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall k : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall __1 : cic.Term cic.prop (matita_arithmetics_primes.prime p), forall __2 : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides p n)), forall __3 : cic.Term cic.prop (matita_arithmetics_nat.le m k), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_bigops.bigop k (fun i => matita_arithmetics_primes.dividesb (matita_arithmetics_exp.exp p (matita_arithmetics_nat.S i)) (matita_arithmetics_nat.times (matita_arithmetics_exp.exp p m) n)) matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_nat.plus (fun i => matita_arithmetics_nat.S matita_arithmetics_nat.O))) .", "predict": "Sigma_p_dividesb1 : forall (m : Term univs.Type0 matita_arithmetics_nat.nat) (n : Term univs.Type0 matita_arithmetics_nat.nat) (p : Term univs.Type0 matita_arithmetics_primes.prime) (k : Term univs.Type0 cic.prop) (lt_n_O : Term univs.Type0 matita_arithmetics_nat.lt (matita_arithmetics_nat.O) n) (prime_p : Term univs.Type0 matita_arithmetics_primes.prime p) (not_divides_p_n : Term univs.Type0 matita_basics_logic.Not (matita_arithmetics_primes.divides p n)) (le_m_k : Term univs.Type0 matita_arithmetics_nat.le m k), Term univs.Type2 cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat m) (matita_arithmetics_bigops.bigop k (fun i => matita_arithmetics_primes.dividesb (matita_arithmetics_exp.exp p (matita_arithmetics_nat.S i)) (matita_arithmetics_nat.times (matita_arithmetics_exp.exp p m) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.O)) n))))))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_rect_Type1. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Let $_x$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $Q_$ be a function from elements $x_16$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $_x_17$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_16$ to elements of $cic.Univ$ of $univs.Type1$. Let $_H_refl$ be an element of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $_x$ and $matita_basics_logic.refl$ applied to $A$ and $_x$. Let $x_16$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $x_17$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_16$. Then $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_16$ and $x_17$.\nassistant\n", "label": "postulate eq_rect_Type1 : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_16 : cic.Term univs.Type2 A) -> (_x_17 : cic.Term cic.prop (matita_basics_logic.eq A _x x_16)) -> cic.Univ univs.Type1) -> (_H_refl : cic.Term univs.Type1 (Q_ _x (matita_basics_logic.refl A _x))) -> (x_16 : cic.Term univs.Type2 A) -> (x_17 : cic.Term cic.prop (matita_basics_logic.eq A _x x_16)) -> cic.Term univs.Type1 (Q_ x_16 x_17)", "predict": "postulate Eq_rect_Type1 : \n  {A : cic.Univ}\n  {A' : univs.Type2}\n  {x : cic.Term A'}\n  {Q_ : (x_16 : cic.Term A') -> (x : cic.Term) -> (x_17 : cic.prop) -> (matita_basics_logic.eq A x x_16) -> univs.Type1}\n  {H_refl : (x_16 : cic.Term A') -> (A : cic.Term) -> (x : cic.Term) -> matita_basics_logic.refl A x -> univs.Type1}\n  {x_16 : cic.Term A'}\n  {x_17 : cic.prop -> matita_basics_logic.eq A x x_16}\n  -> Q_ x_16 x x_17 -> univs.Type1"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_CProp5. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_797$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_Aop$ une fonction des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0", "label": "Axiom Aop_rect_CProp5 : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_797 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop), forall _H_mk_Aop : ((op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))), forall x_797 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil), cic.Term cic.prop (Q_ x_797) .", "predict": "$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $op$ appliqué à $_nil$ et $a$ et $b$ et $op$ appliqué à $_nil$ et $b$ et $c$ et des fonctions $_id$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assocr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $_nil$ et $b$ et $c$ et des fonctions $_assocr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMin_exists. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soient $t$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $m$ et $t$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $m$ et $matita_basics_bool.true$, pour tous les éléments $k$ et $b$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $b$ et $m$, pour toutes les fonctions $__3$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__3$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $b$ et $i$ et des éléments $__4$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $m$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $i$ et $matita_basics_bool.false$, pour tous les éléments $__4$ de $cic.Term$ de", "label": "axiom min_exists (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (t m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt m t)) (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.true)) (k b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__2 : cic.Term cic.prop (matita_arithmetics_nat.le b m)) (__3 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.le b i)) -> (__4 : cic.Term cic.prop (matita_arithmetics_nat.lt i m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)) (__4 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) t (matita_arithmetics_nat.plus k b))) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.min k b f) m)", "predict": " $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $k$ et $b$, pour tous les éléments $x$ et $y$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $p$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $k$ et $matita_basics_bool.true$, on a que $p$ est égal à $p$.\n\nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nList_rect_CProp0. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_776$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $_H_nil$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_lists_list.nil$ appliqué à $_A$, pour toutes les fonctions $_H_cons$ des éléments $x_778$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $x_777$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ et des éléments $_x_780$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $x_777$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_lists_list.cons$ appliqué à $_A$ et $x_778$ et $x_777$, pour tous les éléments $x_776$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_776$.\nassistant\n", "label": "postulate list_rect_CProp0 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_776 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ cic.prop) -> (_H_nil : cic.Term cic.prop (Q_ (matita_basics_lists_list.nil _A))) -> (_H_cons : (x_778 : cic.Term univs.Type0 _A) -> (x_777 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_780 : cic.Term cic.prop (Q_ x_777)) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.cons _A x_778 x_777))) -> (x_776 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term cic.prop (Q_ x_776)", "predict": "postulate List_rect_CProp0 : forall (A : cic.Univ) (Q_ : (x : cic.Term) -> (l : matita_basics_lists_list.list A) -> (x : cic.prop) -> (H_nil : (x : cic.Term) -> (Q_ x matita_basics_lists_list.nil A)) -> (H_cons : (x : cic.Term) -> (A : cic.Univ) -> (l : matita_basics_lists_list.list A) -> (x : cic.Term) -> (H : (x : cic.Term) -> (Q_ x (matita_basics_lists_list.cons A x l) A)) -> (H : (x : cic.Term) -> (Q_ x (matita_basics_lists_list.cons A x l) A)) -> forall (x : cic.Term) -> (l : matita_basics_lists_list.list A) -> (x : cic.prop) -> Q_ x l A."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_inv_rect_Type1. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $x2$ de $cic.Term$ de $univs.Type0$ et de $x1$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1722$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type1$, pour toutes les fonctions $_H1$ des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $x1$ et $x2$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$", "label": "postulate Dop_inv_rect_Type1 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> (P : (_z1722 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> cic.Univ univs.Type1) -> (_H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> (prod : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_null : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> (_distr : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> (_z1723 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term univs.Type1 (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term univs.Type1 (P Hterm)", "predict": " et $a$ et $b$, il existe une fonction $P1$ des éléments $_z1722$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type1$ et une fonction $_H1$ des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $x1$ et $x2$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et une fonction $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $a$ et $b$ telle que $P1$ vérifie $P$ et $H1$ vérifie $_H1$.\n\nOutput: \n```agda\npostulate\n  Dop_inv_rect_Type1 : \n    (x1 : cic.Univ) -> \n    (x2 : cic.Term) -> \n    (Hterm : cic.Term) -> \n    (matita_arithmetics_bigops.Dop x1 x2) -> \n    (P : (z1722 : cic.Term) -> \n      (matita_arithmetics_bigops.Dop x1 x2) -> \n      (cic.Univ) -> \n      (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod (prod"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOrd_rem_eq. For all elements $n$ and $p$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.ord_rem$ applied to $n$ and $p$ and $matita_basics_types.snd$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.p_ord$ applied to $n$ and $p$.\nassistant\n", "label": "axiom ord_rem_eq (n p : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_ord.ord_rem n p) (matita_basics_types.snd matita_arithmetics_nat.nat matita_arithmetics_nat.nat (matita_arithmetics_ord.p_ord n p)))", "predict": "Output: \npostulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_rect_CProp2. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_626$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $_H_None$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$, för alla funktioner $_H_Some$ från element $x_627$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_627$, för alla element $x_626$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_626$.\nassistant\n", "label": "postulate option_rect_CProp2 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_626 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop) -> (_H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_627 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_627))) -> (x_626 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term cic.prop (Q_ x_626)", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nR4. Låt $T0$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $a0$ av $cic.Term$ av $univs.Type0$ och $T0$, för alla funktioner $T1$ från element $x0$ av $cic.Term$ av $univs.Type0$ och $T0$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $x0$ till element av $cic.Univ$ av $univs.Type0$, för alla element $a1$ av $cic.Term$ av $univs.Type0$ och $T1$ applicerat på $a0$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$, för alla funktioner $T2$ från element $x0$ av $cic.Term$ av $univs.Type0$ och $T0$ och element $p0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $x0$ och element $x1$ av $cic.Term$ av $univs.Type0$ och $T1$ applicerat på $x0$ och $p0$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T1$ applicerat på $x0$ och $p0$ och $matita_basics_logic.R1$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $T1$ och $a1$ och $x0$ och $p", "label": "postulate R4 : (T0 : cic.Univ univs.Type0) -> (a0 : cic.Term univs.Type0 T0) -> (T1 : (x0 : cic.Term univs.Type0 T0) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> cic.Univ univs.Type0) -> (a1 : cic.Term univs.Type0 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0))) -> (T2 : (x0 : cic.Term univs.Type0 T0) -> (p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> (x1 : cic.Term univs.Type0 (T1 x0 p0)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T1 x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 T0) a0 T1 a1 x0 p0) x1)) -> cic.Univ univs.Type0) -> (a2 : cic.Term univs.Type0 (T2 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T", "predict": "0$ till element av $cic.Univ$ av $univs.Type0$, vi har att $T1$ är lika med $T2$.\n\nOutput: \npostulate T0 : Univ (Type0) . \nforall (a0 : Term (Type0)) (T1 : (x0 : Term (Type0)) -> (T0) -> prop -> eq (lift Type0 Type2 T0 a0 x0)) -> (a1 : Term (Type0)) -> (T1 a0 refl (lift Type0 Type2 T0 a0)) -> forall (x0 : Term (Type0)) (T2 : (x0 : Term (Type0)) -> (T0) -> prop -> eq (lift Type0 Type2 T0 a0 x0)) -> (p0 : prop) -> (x1 : Term (Type0)) -> (T1 x0 p0) -> (T2 x0 p0 (R1 (lift Type0 Type2 T0 a0))) -> (T1 a1 x0 p0 x1 (eq (lift Type0 Type2 T1 x0 p0) (lift Type0 Type2 T2 x0 p0))) -> T1 == T2 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSum_inv_rect_Type3. Låt $x1$ och $x2$ vara element av $cic.Univ$ av $univs.Type0$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z984$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type3$. Låt $_H1$ vara en funktion från element $x_537$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_z985$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.inl$ applicerat på $x1$ och $x2$ och $x_537$ till element av $cic.Term$ av $univs.Type3$ och $P$ applicerat på $matita_basics_types.inl$ applicerat på $x1$ och $x2$ och $x_537$. Då för alla funktioner $_H2$ från element $x_538$ av $cic.Term$ av $univs.Type0$ och $x2$ och element $_z985$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.inr$ applicerat på $x1$ och $x2$ och $x_538$ till element av $cic.Term$ av $univs.Type3$ och $P$ applicerat på $matita_b", "label": "postulate Sum_inv_rect_Type3 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> (P : (_z984 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> cic.Univ univs.Type3) -> (_H1 : (x_537 : cic.Term univs.Type0 x1) -> (_z985 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inl x1 x2 x_537))) -> cic.Term univs.Type3 (P (matita_basics_types.inl x1 x2 x_537))) -> (_H2 : (x_538 : cic.Term univs.Type0 x2) -> (_z985 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inr x1 x2 x_538))) -> cic.Term univs.Type3 (P (matita_basics_types.inr x1 x2 x_538))) -> cic.Term univs.Type3 (P Hterm)", "predict": "asics_types.inr$ applicerat på $x1$ och $x2$ och $x_538$, vi har att $matita_basics_types.Sum$ applicerat på $x1$ och $x2$ och $_H1$ applicerat på $_H2$ är lika med $_H2$ applicerat på $_H1$. \nOutput: \n\nAssistant: postulate Sum_inv_rect_Type3 : ∀ (x1 x2 : cic.Univ) (Hterm : cic.Term) (P : (z984 : cic.Term) -> (matita_basics_types.Sum x1 x2) -> cic.Univ) (H1 : ∀ (x537 : cic.Term) (z985 : cic.Term) -> (matita_basics_logic.eq (cic.lift (univs.Type0)) (univs.Type2)) -> (matita_basics_types.Sum x1 x2) -> (Hterm , (matita_basics_types.inl x1 x2) x537) -> cic.Term) (H2 : ∀ (x538 : cic.Term) -> (matita_basics_types.Sum x1 x2) -> (matita_basics_logic.eq (cic.lift (univs.Type0)) (univs.Type2)) -> (matita_basics_types.Sum x1 x2) -> (Hterm , (matita_basics_types.inr x1 x2) x538) -> cic.Term) -> ∀ -> (matita_basics_types.Sum x1 x2) -> (H1 x537 z985 (matita_basics_logic.eq (cic.lift (univs.Type0)) (univs.Type2)) (matita_basics_types.Sum x1 x2) Hterm (matita_basics_types.inl x1 x2) x537) -> (H2 x538 (matita_basics_types.Sum x1 x2) (matita_basics_logic.eq (cic.lift (univs.Type0)) (univs.Type2)) (matita_basics_types.Sum x1 x2) Hterm (matita_basics_types.inr x1 x2) x538) -> (matita_basics_types.Sum x1 x2) (H1 x537 z985 (matita_b"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_CProp3. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Then for all functions $Q_$ from elements $_x_799$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univ", "label": "axiom Aop_rect_CProp3 (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_799 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop) (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) (x_799 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) : cic.Term cic.prop (Q_ x_799)", "predict": "s.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements of $cic.Term$ of $univs.Type0$ and $A$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements of $cic.Term$ of $univs.Type0$ and $A$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $op$ applied to $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements of $cic.Term$ of $univs.Type0$ and $A$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $op$ applied to $op$ applied to $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements of $cic.Term$ of $univs.Type0$ and $A$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $op$ applied to $op$ applied to $op$ applied to $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements of $cic.Term$ of $univs.Type0$ and $A$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $op$ applied to $op$ applied to $op$ applied to $op$ applied to $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements of $"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_4_to_fact. För alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_factorial.fact$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_factorial.fact$ applicerat på $n$ och $matita_arithmetics_factorial.fact$ applicerat på $n$.\nassistant\n", "label": "lt_4_to_fact : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) n) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_factorial.fact (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_nat.times (matita_arithmetics_nat.times (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) (matita_arithmetics_factorial.fact n)) (matita_arithmetics_factorial.fact n))) .", "predict": "Output: \nAxiom Lt_4_to_fact : forall (n : cic.Term univs.Type0) (matita_arithmetics_nat:nat), forall (_, __ : cic.Term cic.prop matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))) n)) (matita_arithmetics_nat.le (matita_arithmetics_factorial.fact (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.times (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (matita_arithmetics_nat.times (matita_arithmetics_nat.times (matita_arithmetics_nat.times (matita_arithmetics_nat.times matita_arithmetics_nat.O n) (matita_arithmetics_nat.times (matita_arithmetics_nat.times (matita_arithmetics_nat.times (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.times (matita_arithmetics_nat.times (matita_arithmetics_nat.times (matita_arithmetics_nat.times matita_arithmetics_nat.O n) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times (matita_arithmetics_nat.times (matita_arithmetics_nat.times (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.times (matita_arithmetics_nat.times (matita_arithmetics_nat.times (matita_arithmetics_nat.times matita_arithmetics_nat.O n) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) (matita"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDivides_mod_to_divides. För alla element $p$ och $m$ och $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $p$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $m$ och $n$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $p$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $p$ och $m$.\nassistant\n", "label": "axiom divides_mod_to_divides (p m n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (__1 : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_div_and_mod.mod m n))) (__2 : cic.Term cic.prop (matita_arithmetics_primes.divides p n)) : cic.Term cic.prop (matita_arithmetics_primes.divides p m)", "predict": "Axiom Divides_mod_to_divides : \n  forall (p : cic.Term univs.Type0) (m n : matita_arithmetics_nat.nat) (__: cic.Term cic.prop matita_arithmetics_nat.lt matita_arithmetics_nat.O n) (__: cic.Term cic.prop matita_arithmetics_primes.divides p) (__: cic.Term cic.prop matita_arithmetics_div_and_mod.mod m n) (__: cic.Term cic.prop matita_arithmetics_primes.divides p n), \n  matita_arithmetics_primes.divides p m."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAnd_rect_Type0_body. Pour tous les éléments $_A$ et $_B$ de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $Q_$ des éléments $_x_142$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $_H_conj$ des éléments $x_144$ de $cic.Term$ de $cic.prop$ et de $_A$ et des éléments $x_143$ de $cic.Term$ de $cic.prop$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_logic.conj$ appliqué à $_A$ et $_B$ et $x_144$ et $x_143$, pour tous les éléments $x_142$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_142$.\nassistant\n", "label": "postulate And_rect_Type0_body : (_A : cic.Univ cic.prop) -> (_B : cic.Univ cic.prop) -> (Q_ : (_x_142 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ univs.Type0) -> (_H_conj : (x_144 : cic.Term cic.prop _A) -> (x_143 : cic.Term cic.prop _B) -> cic.Term univs.Type0 (Q_ (matita_basics_logic.conj _A _B x_144 x_143))) -> (x_142 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Term univs.Type0 (Q_ x_142)", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_Type4. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_783$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type4$. Let $_H_mk_Aop$ be a function from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $", "label": "Aop_rect_Type4 : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_783 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil) -> cic.Univ univs.Type4) -> _H_mk_Aop : (op : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _nill : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> _nilr : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> _assoc : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type4 (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> x_783 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil) -> cic.Term univs.Type4 (Q_ x_783) .", "predict": "univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and $op$ applied to $op$ applied to $b$ and $c$ and $a$ to elements of $cic.Univ$ of $univs.Type4$. Let $Q_$ be defined as the application of the function $Q_$ to $A$ and $_nil$. Let $_H_rec_Aop_rect$ be a function from elements $x$ of $cic.Univ$ of $univs.Type4$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $h$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $f$ from elements $x$ of $cic.Univ$ of $univs.Type4$ and elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $g$ from elements $x$ of $cic.Univ$ of $univs.Type4$ and elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $b$ and $a$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_inv_rect_Type1. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x2$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$. Soit $P$ une fonction des éléments $_z1128$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type1$. Alors pour toutes les fonctions $_H1$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $x2$ appliqué à $dpi1$ et des éléments $_z1129$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$ à des éléments de $cic.Term$ de $univs.Type1$ et de $P$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$, $cic.Term$ tient pour $univs.Type1$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "Axiom DPair_inv_rect_Type1 : forall x1 : cic.Univ univs.Type0, forall x2 : ((__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0), forall Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2), forall P : ((_z1128 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ univs.Type1), forall _H1 : ((dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1129 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type1 (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))), cic.Term univs.Type1 (P Hterm) .", "predict": "Axiom DPair_inv_rect_Type1 : forall (x1 : Univ) (x2 : (lam($__ : Term) (x1 : Univ) -> Univ) -> DPair x1 x2) (Hterm : Term) (P : (lam(_z1128 : Term) (DPair x1 x2) -> Univ) -> P (DPair x1 x2 Hterm)), (forall (H1 : Term) (dpi1 : Term) (dpi2 : Term), (dpi1 : Term) -> (dpi2 : Term) -> (dpi1 : prop) -> (dpi2 : eq (lift univs.Type0 univs.Type2 (DPair x1 x2 Hterm)) (mk_DPair x1 x2 dpi1 dpi2)) -> (lam(_z1129 : prop) (dpi1 : Term) (dpi2 : Term) -> (dpi1 : prop) -> (dpi2 : eq (lift univs.Type0 univs.Type2 (DPair x1 x2 Hterm)) (mk_DPair x1 x2 dpi1 dpi2)) -> (lam(_z1128 : Term) (dpi1 : Term) (dpi2 : Term) -> (lam(_z1129 : prop) (dpi1 : Term) (dpi2 : Term) -> (dpi1 : prop) -> (dpi2 : eq (lift univs.Type0 univs.Type2 (DPair x1 x2 Hterm)) (mk_DPair x1 x2 dpi1 dpi2)) -> (lam(_z1128 : Term) (dpi1 : Term) (dpi2 : Term) -> (lam(_z1129 : prop) (dpi1 : Term) (dpi2 : Term) -> (dpi1 : prop) -> (dpi2 : eq (lift univs.Type0 univs.Type2 (DPair x1 x2 Hterm)) (mk_DPair x1 x2 dpi1 dpi2)) -> (lam(_z1128 : Term) (dpi1 : Term) (dpi2 : Term) -> (lam(_z1129 : prop) (dpi1 : Term) (dpi2 : Term) -> (dpi1 : prop) -> (dpi2 : eq (lift univs.Type0 univs.Type2 (DPair x1 x2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_inv_rect_CProp1. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z1752$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$. Låt $_H1$ vara en funktion från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $prod$ applicerat på $a$ och $x2$ och $x2$ och funktion", "label": "Dop_inv_rect_CProp1 : x1 : cic.Univ univs.Type0 -> x2 : cic.Term univs.Type0 x1 -> Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2) -> P : (_z1752 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2) -> cic.Univ cic.prop) -> _H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2) -> prod : (__ : cic.Term univs.Type0 x1 -> __1 : cic.Term univs.Type0 x1 -> cic.Term univs.Type0 x1) -> _null : (a : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> _distr : (a : cic.Term univs.Type0 x1 -> b : cic.Term univs.Type0 x1 -> c : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> _z1753 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr)) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term cic.prop (P Hterm) .", "predict": "er $_add$ från element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $c$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Univ$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $prod$ applicerat på $b$ och $x2$ och $c$ och $x2$ . \nOutput: (Not provided due to the complexity and specific nature of Dedukti syntax.)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd_discr. För alla element $a1$ och $a2$ av $cic.Univ$ av $univs.Type0$, för alla element $x$ och $y$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $a1$ och $a2$, för alla element $_e$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $a1$ och $a2$ och $x$ och $y$, håller $cic.Term$ för $univs.Type2$ och $matita_basics_types.match_Prod$ applicerat på $a1$ och $a2$ och $cic.succ$ applicerat på $univs.Type2$ och funktionen som avbildar $__$ som $cic.univ$ applicerat på $univs.Type2$ och funktionen som avbildar $t0$ och $t1$ som $matita_basics_types.match_Prod$ applicerat på $a1$ och $a2$ och $cic.succ$ applicerat på $univs.Type2$ och funktionen som avbildar $__$ som $cic.univ$ applicerat på $univs.Type2$ och funktionen som avbildar $u0$ och $u1$ som $cic.prod$ applicerat på $cic.succ$ applicerat på $univs.Type1$ och $univs.Type1$ och $cic.univ$ applicerat på $univs.Type1$ och funktionen som avbildar $P$ som $cic.prod$ applicerat på $univs.Type1$ och $univs.Type1$ och $cic.prod$ applicerat på $cic.prop$ och $univs.Type1$ och $matita_basics_logic.eq$ applicerat på $", "label": "axiom Prod_discr (a1 a2 : cic.Univ univs.Type0) (x y : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2)) (_e : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod a1 a2)) x y)) : cic.Term univs.Type2 (matita_basics_types.match_Prod a1 a2 (cic.succ univs.Type2) (λ __ => cic.univ univs.Type2) (λ t0 => λ t1 => matita_basics_types.match_Prod a1 a2 (cic.succ univs.Type2) (λ __ => cic.univ univs.Type2) (λ u0 => λ u1 => cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (λ P => cic.prod univs.Type1 univs.Type1 (cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) u0) (λ e0 => cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((λ x0 => λ p0 => a2) u0 e0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 a1) t0 (λ x0 => λ p0 => a2) t1 u0 e0) u1) (λ _e1 => P))) (λ _z45 => P))) y) x)", "predict": "cic.lift$ applicerat på $univs.Type1$ och $univs.Type3$ och $matita_basics_types.Prod$ applicerat på $a1$ och $a2$ och $x$ och $y$, att $_e$ är lika med $_e$.\n\nOutput: Prod_discr. Forall a1 : Univ (univs.Type0), forall a2 : Univ (univs.Type0), forall x : Term (univs.Type0), forall y : Term (univs.Type0), Prod a1 a2, forall _e : Term (cic.prop * matita_basics_types.Prod a1 a2 x y), _e == _e."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDiscr_plus_xy_minus_xz. För alla element $x$ och $z$ och $y$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.plus$ applicerat på $x$ och $y$ och $matita_arithmetics_nat.minus$ applicerat på $x$ och $z$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $y$ och $matita_arithmetics_nat.O$.\nassistant\n", "label": "postulate discr_plus_xy_minus_xz : (x : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (z : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (y : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.plus x y) (matita_arithmetics_nat.minus x z))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) y matita_arithmetics_nat.O)", "predict": "discr_plus_xy_minus_xz : ∀ x z y : cic.Term univs.Type0 matita_arithmetics_nat.nat, ∀ __ : cic.Term cic.prop matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat matita_arithmetics_nat.plus x y) (matita_arithmetics_nat.minus x z), odd y."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nM. For all elements $_m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_nat.nat$.\nassistant\n", "label": "axiom M (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term univs.Type0 matita_arithmetics_nat.nat", "predict": "Output: Axiom prop70 : odd 1 . \nOutput: postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExists_add. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $P$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $l1$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$. Soit $x$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $l2$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.Exists$ appliqué à $A$ et $P$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l1$ et $l2$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_lists_list.Exists$ appliqué à $A$ et $P$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l1$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $x$ et $l2$.\nassistant\n", "label": "axiom Exists_add (A : cic.Univ univs.Type0) (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) (x : cic.Term univs.Type0 A) (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) (__ : cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 l2))) : cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 (matita_basics_lists_list.cons A x l2)))", "predict": "Output: \nAxiom Exists_add : forall (A : Univ) (P : forall __ (Term : Term), Univ -> prop) (l1 : Term -> list A) (x : Term) (l2 : Term -> list A), forall (Q : prop -> Exists A P -> list (append A l1 l2)), Term (Exists A P (append A l1 l2)) (cons A x (append A l1 l2))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nList_divides_true. Soit $l$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $matita_arithmetics_nat.nat$. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_chebyshev_bertrand256.list_divides$ appliqué à $l$ et $n$ et $matita_basics_bool.true$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $p$ à $matita_basics_logic.And$ appliqué à $matita_basics_lists_list.mem$ appliqué à $matita_arithmetics_nat.nat$ et $p$ et $l$ et $matita_arithmetics_primes.divides$ appliqué à $p$ et $n$.\nassistant\n", "label": "list_divides_true : l : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat) -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_chebyshev_bertrand256.list_divides l n) matita_basics_bool.true) -> cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (p : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_basics_logic.And (matita_basics_lists_list.mem matita_arithmetics_nat.nat p l) (matita_arithmetics_primes.divides p n))) .", "predict": "Output: \nAxiom list_divides_true : forall l : Term of univs.Type0 and matita_basics_lists_list.list of matita_arithmetics_nat.nat, n : Term of univs.Type0 and matita_arithmetics_nat.nat, __$ : Term of cic.prop and matita_basics_logic.eq of (lift (univs.Type0) (univs.Type2)) (matita_basics_bool.bool) (list_divides l n matita_basics_bool.true), (Term holds for prop and (logic.ex (nat)) and (fun p : nat => logic.And (list.mem nat p l) (primes.divides p n)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSplit_eq. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $matita_basics_lists_list.length$ applied to $A$ and $l$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $l$ and $matita_basics_lists_list.append$ applied to $A$ and $matita_basics_types.fst$ applied to $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.split$ applied to $A$ and $l$ and $n$ and $matita_basics_types.snd$ applied to $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.split$ applied to $A$ and $l$ and $n$.\nassistant\n", "label": "split_eq : A : cic.Univ univs.Type0 -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> l : cic.Term univs.Type0 (matita_basics_lists_list.list A) -> __ : cic.Term cic.prop (matita_arithmetics_nat.le n (matita_basics_lists_list.length A l)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l (matita_basics_lists_list.append A (matita_basics_types.fst (matita_basics_lists_list.list A) (matita_basics_lists_list.list A) (matita_basics_lists_list.split A l n)) (matita_basics_types.snd (matita_basics_lists_list.list A) (matita_basics_lists_list.list A) (matita_basics_lists_list.split A l n)))) .", "predict": "Output: \nAxiom split_eq : \n  forall (A : Univ : Type0) (n : Term : Type0) (matita_arithmetics_nat:nat) (l : Term : Type0) (matita_basics_lists_list:list A) (__: Term : prop) (matita_arithmetics_nat:le) (n (matita_basics_lists_list:length A l)) (cic_TERM : prop) (matita_basics_logic:eq) (cic.lift Type0 Type2 (matita_basics_lists_list:list A) (matita_basics_lists_list:list A) (matita_basics_lists_list:append A (matita_basics_types:fst (matita_basics_lists_list:list A) (matita_basics_lists_list:list A)) (matita_basics_lists_list:split A l) (matita_basics_types:snd (matita_basics_lists_list:list A) (matita_basics_lists_list:list A)) (matita_basics_lists_list:split A l) (matita_arithmetics_nat:le n (matita_basics_lists_list:length A l)) (matita_basics_lists_list:list A) (matita_basics_lists_list:list A) (matita_basics_lists_list:split A l))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1575. Låt $m$ och $n$ och $a$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $posm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Låt $pnm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $c$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat", "label": "postulate let_clause_1575 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 un", "predict": " på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. \n\nOutput: \nLet_clause_1575: \n  m : univs.Type0 -> matita_arithmetics_nat.nat\n  n : univs.Type0 -> matita_arithmetics_nat.nat\n  a : univs.Type0 -> matita_arithmetics_nat.nat\n  b : univs.Type0 -> matita_arithmetics_nat.nat\n  posn : matita_arithmetics_nat.lt O n\n  posm : matita_arithmetics_nat.lt O m\n  pnm : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_gcd.gcd n m (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (matita_arithmetics_nat.nat)\n  c : univs.Type0 -> matita_arithmetics_nat.nat\n  _clearme : matita_basics_logic.ex (matita_arithmetics_nat.nat) (\\d -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m))) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_gcd.gcd (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arith"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_max_to_false. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $n$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_minimization.max$ applied to $n$ and $f$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $m$ and $matita_basics_bool.false$.\nassistant\n", "label": "lt_max_to_false : f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt m n) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_minimization.max n f) m) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.false) .", "predict": "Output: \nAxiom Lt_max_to_false : \nforall (f : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (P : cic.Term univs.Type0 matita_arithmetics_nat.lt) (P1 : cic.Term univs.Type0 matita_arithmetics_nat.lt (matita_arithmetics_minimization.max n) (f m)) , \ncic.Term (cic.prop) (matita_arithmetics_nat.lt m n) -> \ncic.Term (cic.prop) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool (f m)) matita_basics_bool.false) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRelation. Låt $__$ vara ett element av $cic.Univ$ av $univs.Type0$. Då håller $cic.Univ$ för $univs.Type0$.\nassistant\n", "label": "Axiom relation : forall __ : cic.Univ univs.Type0, cic.Univ univs.Type0 .", "predict": "Axiom relation : forall (univ : Univ), in_univ univ Type0 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nVoid_rect_CProp3. Pour toutes les fonctions $Q_$ des éléments $_x_491$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.void$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $x_491$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.void$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_491$.\nassistant\n", "label": "postulate void_rect_CProp3 : (Q_ : (_x_491 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ cic.prop) -> (x_491 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Term cic.prop (Q_ x_491)", "predict": "postulate Void_rect_CProp3 : (Q_ : ∀ (x_491 : cic.Term univs.Type0 matita_basics_types.void) → cic.prop (cic.Term univs.Type0 matita_basics_types.void) (Q_ x_491)) → Void"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMk_Prod. Låt $A$ och $B$ vara element av $cic.Univ$ av $univs.Type0$. Låt $_fst$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Då för alla element $_snd$ av $cic.Term$ av $univs.Type0$ och $B$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$.\nassistant\n", "label": "mk_Prod : A : cic.Univ univs.Type0 -> B : cic.Univ univs.Type0 -> _fst : cic.Term univs.Type0 A -> _snd : cic.Term univs.Type0 B -> cic.Term univs.Type0 (matita_basics_types.Prod A B) .", "predict": "Output: \nAxiom Mk_Prod : \nforall (A B : cic.Univ) (_fst : cic.Term A) (_snd : cic.Term B), \nProd A B."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDivides_pi_p_M1. Soient $m$ et $i$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $i$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $m$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_primes.divides$ appliqué à $matita_arithmetics_bigops.bigop$ appliqué à $i$ et la fonction qui envoie $p$ à $matita_basics_bool.andb$ appliqué à $matita_arithmetics_nat.leb$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $m$ et $p$ et $matita_arithmetics_primes.primeb$ appliqué à $p$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ et la fonction qui envoie $p$ à $p$ et $matita_arithmetics_binomial.M$ appliqué à $m$.\nassistant\n", "label": "postulate divides_pi_p_M1 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le i (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) m))))) -> cic.Term cic.prop (matita_arithmetics_primes.divides (matita_arithmetics_bigops.bigop i (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_bool.andb (matita_arithmetics_nat.leb (matita_arithmetics_nat.S (matita_arithmetics_nat.S m)) p) (matita_arithmetics_primes.primeb p)) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p)) (matita_arithmetics_binomial.M m))", "predict": "postulate Divides_pi_p_M1 : (m : cic.Term univs.Type0) -> (i : matita_arithmetics_nat.nat) -> (__) : cic.Term cic.prop (matita_arithmetics_nat.le i (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) m)))) -> (cic.Term) -> (cic.prop) -> (matita_arithmetics_primes.divides (cic.Term) (matita_arithmetics_bigops.bigop i (\\(p : matita_arithmetics_primes.primeb) -> (matita_basics_bool.andb (matita_arithmetics_nat.leb (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) m) p) (matita_arithmetics_primes.primeb p (matita_arithmetics_nat.nat) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (matita_arithmetics_nat.times (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (\\(p : matita_arithmetics_primes.primeb) -> (p) (matita_arithmetics_binomial.M m))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEven_or_odd. Pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $a$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$.\nassistant\n", "label": "axiom even_or_odd (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (λ a => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)))))", "predict": "Axiom even_or_odd : \n  forall (n : matita_arithmetics_nat.nat), \n  matita_basics_logic.ex (cic.Term univs.Type0) (matita_arithmetics_nat.nat n) (cic.prop) \n  (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n) \n  (matita_basics_logic.eq (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a) \n  (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNot_rect_Type0. Låt $_A$ vara ett element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_97$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type0$. Låt $_H_nmk$ vara en funktion från funktioner $x_98$ från element $__$ av $cic.Term$ av $cic.prop$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_basics_logic.nmk$ applicerat på $_A$ och $x_98$. Låt $x_97$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$. Då håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_97$.\nassistant\n", "label": "Not_rect_Type0 : _A : cic.Univ cic.prop -> Q_ : (_x_97 : cic.Term cic.prop (matita_basics_logic.Not _A) -> cic.Univ univs.Type0) -> _H_nmk : (x_98 : (__ : cic.Term cic.prop _A -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term univs.Type0 (Q_ (matita_basics_logic.nmk _A x_98))) -> x_97 : cic.Term cic.prop (matita_basics_logic.Not _A) -> cic.Term univs.Type0 (Q_ x_97) .", "predict": "Output: Let $_A$ be an element of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_97$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied on $_A$ to elements of $cic.Univ$ of $univs.Type0$. Let $_H_nmk$ be a function from functions $x_98$ from elements $__$ of $cic.Term$ of $cic.prop$ and $_A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.False$ to elements of $cic.Term$ of $univs.Type0$ and $Q_$ applied on $matita_basics_logic.nmk$ applied on $_A$ and $x_98$. Let $x_97$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied on $_A$. Then $cic.Term$ holds for $univs.Type0$ and $Q_$ applied on $x_97$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_discr. Soit $a1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $a2$ un élément de $cic.Term$ de $univs.Type0$ et de $a1$. Alors pour tous les éléments $x$ et $y$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $a1$ et $a2$, pour tous les éléments $_e$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.ACop$ appliqué à $a1$ et $a2$ et $x$ et $y$, $cic.Term$ tient pour $univs.Type2$ et $matita_arithmetics_bigops.match_ACop$ appliqué à $a1$ et $a2$ et $cic.succ$ appliqué à $univs.Type2$ et la fonction qui envoie $__$ à $cic.univ$ appliqué à $univs.Type2$ et la fonction qui envoie $t0$ et $t1$ à $matita_arithmetics_bigops.match_ACop$ appliqué à $a1$ et $a2$ et $cic.succ$ appliqué à $univs.Type2$ et la fonction qui envoie $__$ à $cic.univ$ appliqué à $univs.Type2$ et la fonction qui envoie $u0$ et $u1$ à $cic.prod$ appliqué à $cic.succ$ appliqué à $univs.Type1$ et $univs.Type1$ et $cic.univ$ appliqué à $univs.Type1$ et la fonction qui envoie $P$ à $cic.prod$ appliqué à $univs.Type1$ et $univs.Type1$ et $cic.prod$ appliqué à $cic.prop$ et $univs.Type1$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.Aop$ appliqué à $a1$ et $a2$ et $matita_basics_logic.R0", "label": "axiom ACop_discr (a1 : cic.Univ univs.Type0) (a2 : cic.Term univs.Type0 a1) (x y : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2)) (_e : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) x y)) : cic.Term univs.Type2 (matita_arithmetics_bigops.match_ACop a1 a2 (cic.succ univs.Type2) (λ __ => cic.univ univs.Type2) (λ t0 => λ t1 => matita_arithmetics_bigops.match_ACop a1 a2 (cic.succ univs.Type2) (λ __ => cic.univ univs.Type2) (λ u0 => λ u1 => cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (λ P => cic.prod univs.Type1 univs.Type1 (cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.Aop a1 a2) t0) u0) (λ", "predict": "$ appliqué à $univs.Type2$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.Aop$ appliqué à $a1$ et $a2$ et $matita_basics_logic.R1$ appliqué à $univs.Type2$ est vrai.\n\nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput:"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSame_bigop. Låt $k$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $p1$ och $p2$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Låt $op$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $B$. Låt $f$ och $g$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_bigops.sameF_upto$ applicerat på $k$ och $matita_basics_bool.bool$ och $p1$ och $p2$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_bigops.sameF_p$ applicerat på $k$ och $p1$ och $B$ och $f$ och $g$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $matita_arithmetics_bigops.bigop$ applicerat på $k$ och funktionen som avbildar $i$ som $p1$ applicerat på $i$ och $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $matita_arithmetics_bigops.bigop$ applicerat på $k$ och funktionen som avbildar $i$ som $p2$ applicerat på $i$ och $", "label": "axiom same_bigop (k : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p1 p2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (B : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 B) (op : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) (f g : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) (__ : cic.Term cic.prop (matita_arithmetics_bigops.sameF_upto k matita_basics_bool.bool p1 p2)) (__1 : cic.Term cic.prop (matita_arithmetics_bigops.sameF_p k p1 B f g)) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop k (λ i => p1 i) B nil op (λ i => f i)) (matita_arithmetics_bigops.bigop k (λ i => p2 i) B nil op (λ i => g i)))", "predict": "B$ och $g$ och $f$ och $g$ och $op$ och $B$ och $k$ och $p1$ och $p2$ och $f$ och $g$ och $k$ och $B$ och $p1$ och $p2$ och $f$ och $g$ och $k$ och $B$ och $p1$ och $p2$ och $f$ och $g$ och $k$ och $B$ och $p1$ och $p2$ och $f$ och $g$ och $k$ och $B$ och $p1$ och $p2$ och $f$ och $g$ och $k$ och $B$ och $p1$ och $p2$ och $f$ och $g$ och $k$ och $B$ och $p1$ och $p2$ och $f$ och $g$ och $k$ och $B$ och $p1$ och $p2$ och $f$ och $g$ och $k$ och $B$ och $p1$ och $p2$ och $f$ och $g$ och $k$ och $B$ och $p1$ och $p2$ och $f$ och $g$ och $k$ och $B$ och $p1$ och $p2$ och $f$ och $g$ och $k$ och $B$ och $p1$ och $p2$ och $f$ och $g$ och $k$ och $B$ och $p1$ och $p2$ och $f$ och $g$ och $k$ och $B$ och $p1$ och $p2$ och $f$ och $g$ och $k$ och $B$ och $p1$ och $p2$ och $f$ och $g$ och $k$ och $B$ och $p1$ och $p2$ och $f$ och $g$ och $k$ och $B$ och $p1$ och $p2$ och $f$ och $g$ och $k$ och $B$ och $p1$ och $p2$ och $f$ och $g$ och $k$ och $B$ och $p1$ och $p2$ och $f$ och $g$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1686. Pour tous les éléments $n$ et $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour toutes les fonctions $Hind$ des éléments $p$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $p$ et $m$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $p$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ appliqué à $p$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.pred$ appliqué à $p$ et $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $p$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $a$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $_clearme$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et", "label": "postulate let_clause_1686 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hind : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt p m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_chebyshev_psi.Psi p) (matita_arithmetics_nat.times (matita_arithmetics_nat.pred p) (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) p) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times (matita_arithmetics_nat.S (mat", "predict": " $matita_arithmetics_nat.nat$ et $a$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.pred$ appliqué à $a$ et des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.implication$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $matita_arithmetics_nat.nat$ et $a$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $matita_arithmetics_nat.nat$ et $matita_basics_logic.eq$ appliqué à $matita_arithmetics_nat.S$ appliqué à $a$ et des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.implication$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $matita_arithmetics_nat.nat$ et $a$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $matita_arithmetics_nat.nat$ et $matita_basics_logic.eq$ appliqué à $matita_basics_logic.implication$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $matita_arithmetics_nat.nat$ et $a$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $matita_arithmetics_nat.nat$ et $matita_basics_logic.eq$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $matita_arithmetics_nat.nat$ et $a$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $matita_arithmetics_nat.nat$ et $matita_basics_logic"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNot_found_min_spec. For all elements $n$ and $b$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all functions $__$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $b$ and $i$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $matita_arithmetics_nat.plus$ applied to $n$ and $b$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $i$ and $matita_basics_bool.false$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_minimization.min_spec$ applied to $n$ and $b$ and $f$ and $matita_arithmetics_nat.plus$ applied to $n$ and $b$.\nassistant\n", "label": "Axiom not_found_min_spec : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall __ : ((i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le b i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_nat.plus n b))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)), cic.Term cic.prop (matita_arithmetics_minimization.min_spec n b f (matita_arithmetics_nat.plus n b)) .", "predict": "Not_found_min_spec. \nforall n : cic.Term univs.Type0, \nforall b : matita_arithmetics_nat.nat, \nforall f : (forall __ : cic.Term univs.Type0 * matita_arithmetics_nat.nat, cic.Term univs.Type0 * matita_basics_bool.bool), \nforall i : cic.Term univs.Type0 * matita_arithmetics_nat.nat, \nforall __ : cic.Term univs.Type0 * cic.prop * matita_arithmetics_nat.le b i, \nforall __1 : cic.Term univs.Type0 * matita_arithmetics_nat.lt i (matita_arithmetics_nat.plus n b), \nlet c : cic.Term univs.Type0 * matita_basics_bool.bool := f i matita_basics_bool.false in \ncic.Term holds for cic.prop * (matita_arithmetics_minimization.min_spec n b f (matita_arithmetics_nat.plus n b))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_rect_Type2_r. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type2$. Låt $a$ vara ett element av $cic.Term$ av $univs.Type2$ och $A$. Då för alla funktioner $P$ från element $x$ av $cic.Term$ av $univs.Type2$ och $A$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $x$ och $a$ till element av $cic.Univ$ av $univs.Type2$, för alla element $__$ av $cic.Term$ av $univs.Type2$ och $P$ applicerat på $a$ och $matita_basics_logic.refl$ applicerat på $A$ och $a$, för alla element $x$ av $cic.Term$ av $univs.Type2$ och $A$, för alla element $p$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $x$ och $a$, håller $cic.Term$ för $univs.Type2$ och $P$ applicerat på $x$ och $p$.\nassistant\n", "label": "eq_rect_Type2_r : A : cic.Univ univs.Type2 -> a : cic.Term univs.Type2 A -> P : (x : cic.Term univs.Type2 A -> __ : cic.Term cic.prop (matita_basics_logic.eq A x a) -> cic.Univ univs.Type2) -> __ : cic.Term univs.Type2 (P a (matita_basics_logic.refl A a)) -> x : cic.Term univs.Type2 A -> p : cic.Term cic.prop (matita_basics_logic.eq A x a) -> cic.Term univs.Type2 (P x p) .", "predict": "Output: \nAxiom Eq_rect_Type2_r : forall (univs : Universe), (cic : Universe -> Universe), (univ : Universe), (term : Universe), (a : term), (A : Universe), (P : forall (x : term), forall (p : prop), (eq : prop) -> (eq A x a) -> Universe), (forall (x : term), forall (p : prop), (eq : prop) -> (eq A a refl) -> Universe), (forall (x : term), forall (A : Universe), (P : forall (x : term), forall (p : prop), (eq : prop) -> (eq A x a) -> Universe), (forall (x : term), forall (p : prop), (eq : prop) -> (eq A a refl) -> Universe), (forall (x : term), forall (A : Universe), (P : forall (x : term), forall (p : prop), (eq : prop) -> (eq A x a) -> Universe), (forall (x : term), forall (p : prop), (eq : prop) -> (eq A a refl) -> Universe), (forall (x : term), forall (A : Universe), (P : forall (x : term), forall (p : prop), (eq : prop) -> (eq A x a) -> Universe), (forall (x : term), forall (p : prop), (eq : prop) -> (eq A a refl) -> Universe), (forall (x : term), forall (A : Universe), (P : forall (x : term), forall (p : prop), (eq : prop) -> (eq A x a) -> Universe), (forall (x : term), forall (p : prop), (eq : prop) -> (eq A a refl) -> Universe), (forall (x : term), forall (A : Universe), (P : forall (x : term), forall (p : prop), (eq : prop) -> (eq A x a) -> Universe), (forall (x : term), forall (p : prop), (eq : prop) -> (eq A a refl) -> Universe), (forall (x : term), forall (A : Universe), (P : forall (x : term), forall (p : prop), (eq : prop) -> (eq A x a) -> Universe), (forall (x : term),"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_2_fact. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_factorial.fact$ applied to $n$.\nassistant\n", "label": "le_2_fact : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_factorial.fact n)) .", "predict": "Output: Axiom le_2_fact : forall (n : Term univs.Type0 matita_arithmetics_nat.nat) (___ : prop cic.prop lt matita_arithmetics_nat.S matita_arithmetics_nat.O n), Term cic.prop le matita_arithmetics_nat.S matita_arithmetics_nat.S matita_arithmetics_nat.O (fact n)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFilter. Let $T$ be an element of $cic.Univ$ of $univs.Type0$. Let $_p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $T$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Then for all elements $_l$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $T$, $cic.Term$ holds for $univs.Type0$ and $matita_basics_lists_list.list$ applied to $T$.\nassistant\n", "label": "postulate filter : (T : cic.Univ univs.Type0) -> (_p : (__ : cic.Term univs.Type0 T) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (_l : cic.Term univs.Type0 (matita_basics_lists_list.list T)) -> cic.Term univs.Type0 (matita_basics_lists_list.list T)", "predict": "postulate Filter : (T : cic.Univ) -> (T : univs.Type0) -> (T : matita_basics_bool.bool) -> (l : matita_basics_lists_list.list) -> (T : cic.Term) -> (univs.Type0) -> (matita_basics_lists_list.list) -> (T : cic.Term)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSig_rect_CProp2. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $Q_$ from elements $_x_684$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Sig$ from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $_f$ applied to $pi1$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_Sig$ applied to $A$ and $_f$ and $pi1$ and $_pi2$, for all elements $x_684$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_684$.\nassistant\n", "label": "postulate Sig_rect_CProp2 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_684 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ cic.prop) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_684 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term cic.prop (Q_ x_684)", "predict": "postulate Sig_rect_CProp2 : \n  {A : cic.Univ}\n  {univs.Type0}\n  {(_:cic.Term univs.Type0 A -> cic.Univ cic.prop)\n    -> (forall x_684 : cic.Term univs.Type0 (matita_basics_types.Sig A _f), \n        (forall pi1 : cic.Term univs.Type0 A, \n          (forall pi2 : cic.Term univs.Type0 (cic.prop _f pi1), \n            (forall x_684 : cic.Term univs.Type0 (matita_basics_types.Sig A _f), \n              (cic.Term cic.prop (Q_ x_684))))))\n    -> (forall x_684 : cic.Term univs.Type0 (matita_basics_types.Sig A _f), \n        (cic.Term cic.prop (Q_ x_684)))}."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1617. Låt $p$ och $m$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $p$. Då för alla element $gcd1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $n$, för alla element $c$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $nm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $p$ och $c$, för alla element $a$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $b$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applic", "label": "let_clause_1617 : p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p) -> gcd1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) -> _clearme : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times m n)) -> c : cic.Term univs.Type0 matita_arithmetics_nat.nat -> nm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times m n) (matita_arithmetics_nat.times p c)) -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _clearme0 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (b : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (mat", "predict": "erat på $matita_arithmetics_nat.times$ applicerat på $a$ och $m$ och $matita_basics_logic.eq$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $n$, det finns ett element $b$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ så att $posn$ är lika med $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $m$ och $matita_basics_logic.eq$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $n$ och $nm$ är lika med $matita_basics_logic.And$ applicerat på $matita_basics_logic.eq$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $m$ och $matita_basics_logic.eq$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $n$ och $matita_basics_logic.eq$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $c$ och $gcd1$ är lika med $matita_arithmetics_gcd.gcd$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $a$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $a$ och $c$ och $gcd1$ är lika med $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $a$ och $n$ och $gcd1$ är lika med $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $a$ och $c$ och $gcd1$ är lika med $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nUnit_rect_CProp3. Soit $Q_$ une fonction des éléments $_x_513$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour tous les éléments $_H_it$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.it$, pour tous les éléments $x_513$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_513$.\nassistant\n", "label": "Axiom unit_rect_CProp3 : forall Q_ : ((_x_513 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ cic.prop), forall _H_it : cic.Term cic.prop (Q_ matita_basics_types.it), forall x_513 : cic.Term univs.Type0 matita_basics_types.unit, cic.Term cic.prop (Q_ x_513) .", "predict": "Axiom Unit_rect_CProp3 : forall (Q : forall (x_513 : Term univs.Type0) (u : unit), Univ) (H_it : prop), forall (x : Term univs.Type0), Q x u cic.Term H_it x."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExtract_pair. Låt $A$ och $B$ och $C$ och $D$ vara element av $cic.Univ$ av $univs.Type0$. Låt $u$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$. Låt $Q$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $C$ och $D$. Låt $x$ vara ett element av $cic.Term$ av $univs.Type0$ och $C$. Då för alla element $y$ av $cic.Term$ av $univs.Type0$ och $D$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $C$ och $D$ och $matita_basics_types.match_Prod$ applicerat på $A$ och $B$ och $univs.Type0$ och funktionen som avbildar $__$ som $matita_basics_types.Prod$ applicerat på $C$ och $D$ och funktionen som avbildar $a$ och $b$ som $Q$ applicerat på $a$ och $b$ och $u$ och $matita_basics_types.mk_Prod$ applicerat på $C$ och $D$ och $x$ och $y$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.ex$", "label": "postulate extract_pair : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (C : cic.Univ univs.Type0) -> (D : cic.Univ univs.Type0) -> (u : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> (Q : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 (matita_basics_types.Prod C D)) -> (x : cic.Term univs.Type0 C) -> (y : cic.Term univs.Type0 D) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod C D)) (matita_basics_types.match_Prod A B univs.Type0 (\\ __ : cic.Term univs.Type0 (matita_basics_types.Prod A B) -> matita_basics_types.Prod C D) (\\ a : cic.Term univs.Type0 A -> \\ b : cic.Term univs.Type0 B -> Q a b) u) (matita_basics_types.mk_Prod C D x y))) -> cic.Term cic.prop (matita_basics_logic.ex A (\\ a : cic.Term univs.Type0 A -> matita_basics_logic.ex B (\\ b : cic.Term univs.Type0 B -> matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B)) (matita_basics_types.mk_Prod A B a b) u) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod C D)) (Q a b) (matita_basics_types.mk_Prod C D x y)))))", "predict": " applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $C$ och $D$ och $matita_basics_types.match_Prod$ applicerat på $A$ och $B$ och $univs.Type0$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $C$ och $D$ och $matita_basics_types.match_Prod$ applicerat på $A$ och $B$ och $univs.Type0$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $C$ och $D$ och $matita_basics_types.match_Prod$ applicerat på $A$ och $B$ och $univs.Type0$ och $Q$ applicerat på $x$ och $y$ och $u$ och $matita_basics_types.mk_Prod$ applicerat på $C$ och $D$ och $x$ och $y$ och $matita_basics_logic.eq$ applicerat på $x$ och $y$ och $matita_basics_logic.eq$ applicerat på $x$ och $y$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_O_to_le_theta_exp_theta. Soit $m$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_chebyshev_chebyshev_theta.theta$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $m$ et $matita_arithmetics_chebyshev_chebyshev_theta.theta$ appliqué à $matita_arithmetics_nat.S$ appliqué à $m$.\nassistant\n", "label": "axiom lt_O_to_le_theta_exp_theta (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_chebyshev_chebyshev_theta.theta (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) m))) (matita_arithmetics_nat.times (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) m)) (matita_arithmetics_chebyshev_chebyshev_theta.theta (matita_arithmetics_nat.S m))))", "predict": "Axiom Lt_O_to_le_theta_exp_theta : forall (m : cic.Term univs.Type0 matita_arithmetics_nat.nat), forall ($__$ : cic.Term cic.prop matita_arithmetics_nat.lt (matita_arithmetics_nat.O m)), cic.Term (cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_chebyshev_chebyshev_theta.theta (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) m)) (matita_arithmetics_nat.times (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))) m)))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFilter_eq. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soient $_x$ et $__$ des éléments de $cic.Term$ de $univs.Type2$ et de $A$. Soit $return_sort$ un élément de $cic.Sort$. Alors pour toutes les fonctions $return_type$ des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $__$ à des éléments de $cic.Univ$ de $return_sort$, pour toutes les fonctions $return$ des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $__$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $z$, pour tous les éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $__$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.\nassistant\n", "label": "Axiom filter_eq : forall A : cic.Univ univs.Type2, forall _x : cic.Term univs.Type2 A, forall __ : cic.Term univs.Type2 A, forall return_sort : cic.Sort, forall return_type : ((z : cic.Term cic.prop (matita_basics_logic.eq A _x __)) -> cic.Univ return_sort), forall return : ((z : cic.Term cic.prop (matita_basics_logic.eq A _x __)) -> cic.Term return_sort (return_type z)), forall z : cic.Term cic.prop (matita_basics_logic.eq A _x __), cic.Term return_sort (return_type z) .", "predict": "Axiom Filter_eq : forall (A : Unv Univ), (x : Term A), (_,__ : Unv A), return_sort : Sort, (return_type : forall (z : Term (prop A)), eq (A, x, __)), (return : forall (z : Term (prop A)), eq (A, x, __), (return_type (return z))), (z : Term (prop A)), eq (A, x, __), (return_sort (return_type z))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nHint_declaration_CProp0. Låt $A$ vara ett element av $cic.Univ$ av $cic.prop$. Då för alla element $_a$ och $_b$ av $cic.Term$ av $cic.prop$ och $A$, håller $cic.Univ$ för $univs.Type0$.\nassistant\n", "label": "postulate hint_declaration_CProp0 : (A : cic.Univ cic.prop) -> (_a : cic.Term cic.prop A) -> (_b : cic.Term cic.prop A) -> cic.Univ univs.Type0", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_15622. Let $m$ and $n$ and $a$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Then for all elements $posm$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, for all elements $pnm$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $c$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $d$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.n", "label": "Axiom let_clause_15622 : forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), forall pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)), forall c : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (fun d => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (", "predict": "at$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $m$ and $matita_arithmetics_nat.times$ applied to $d$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $posn'$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $n$ and $n$, for all elements $posm'$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $m$ and $m$, $matita_basics_logic.imp$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $m$ and $matita_arithmetics_nat.times$ applied to $d$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ is true. \nOutput: \n  Require Import matita_arithmetics_nat.\n  Lemma let_clause_15622 : forall (m n a b : matita_arithmetics_nat.nat), \n      (forall (posn : matita_arithmetics_nat.lt matita_arithmetics_nat.O n), \n        (forall (posm : matita_arithmetics_nat.lt matita_arithmetics_nat.O m), \n          (forall (pnm : matita"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFilter_ex2. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_P$ and $_Q$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $return_sort$ be an element of $cic.Sort$. Let $return_type$ be a function from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex2$ applied to $A$ and $_P$ and $_Q$ to elements of $cic.Univ$ of $return_sort$. Let $return$ be a function from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex2$ applied to $A$ and $_P$ and $_Q$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $z$. Then for all elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex2$ applied to $A$ and $_P$ and $_Q$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.\nassistant\n", "label": "postulate filter_ex2 : (A : cic.Univ univs.Type0) -> (_P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (_Q : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term cic.prop (matita_basics_logic.ex2 A _P _Q)) -> cic.Univ return_sort) -> (return : (z : cic.Term cic.prop (matita_basics_logic.ex2 A _P _Q)) -> cic.Term return_sort (return_type z)) -> (z : cic.Term cic.prop (matita_basics_logic.ex2 A _P _Q)) -> cic.Term return_sort (return_type z)", "predict": "postulate Filter_ex2 : (A : cic.Univ (univs.Type0)) -> ((__) -> cic.Univ (cic.prop)) -> ((__) -> cic.Univ (cic.prop)) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term (cic.prop)) -> (matita_basics_logic.ex2 A (_P z) (_Q z)) -> cic.Univ (return_sort)) -> (return : (z : cic.Term (cic.prop)) -> (matita_basics_logic.ex2 A (_P z) (_Q z)) -> cic.Term (return_sort) (return_type z)) -> (forall (z : cic.Term (cic.prop)) (matita_basics_logic.ex2 A (_P z) (_Q z)) -> cic.Term (return_sort) (return_type z))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_inv_rect_Type0. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z1134$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type0$. Låt $_H1$ vara en funktion från element $dpi1$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_dpi2$ av $cic.Term$ av $univs.Type0$ och $x2$ applicerat på $dpi1$ och element $_z1135$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_DPair$ applicerat på $x1$ och $x2$ och $dpi1$ och $_dpi2$ till element av $cic.Term$ av $univs.Type0$ och $P$ applicerat på $matita_basics_types.mk_DPair$ applicerat på $x1$ och $x2$ och $dpi1$ och $_dpi2$. Då håller $cic.Term$ för $univs.Type0$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "axiom DPair_inv_rect_Type0 (x1 : cic.Univ univs.Type0) (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) (P : (_z1134 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ univs.Type0) (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1135 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type0 (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) : cic.Term univs.Type0 (P Hterm)", "predict": "Axiom DPair_inv_rect_Type0 : \n  forall (univs : Type) (x1 : cic.Univ univs) (x2 : (forall (__) : cic.Term univs, cic.Univ univs)) (Hterm : cic.Term univs) (dpair : matita_basics_types.DPair x1 x2), \n  (forall (z1134 : cic.Term univs) (dpair : matita_basics_types.DPair x1 x2), cic.Univ univs) -> \n  (forall (dpi1 : cic.Term univs) (x1 : cic.Term univs) (dpi2 : cic.Term univs) (x2 : cic.Term univs), \n  matita_basics_types.mk_DPair x1 x2 dpi1 dpi2 -> cic.Term univs) -> \n  (forall (dpi1 : cic.Term univs) (x1 : cic.Term univs) (dpi2 : cic.Term univs) (x2 : cic.Term univs), \n  matita_basics_types.mk_DPair x1 x2 dpi1 dpi2 -> \n  matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_types.DPair x1 x2) (dpair) -> \n  matita_basics_logic.eq (matita_basics_types.mk_DPair x1 x2) (dpair) -> \n  matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (dpair) (Hterm) -> \n  matita_basics_types.mk_DPair x1 x2 dpi1 dpi2) -> \n  cic.Term univs."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nF_ind_aux. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $P$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.predicate$ applicerat på $A$. Låt $__$ vara en funktion från element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $__$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $f$ applicerat på $a$ och $n$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $a$ och element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $f$ applicerat på $a$ och $n$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $a$. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $a$ av $cic.Term$ av $univs.Type0$ och $A$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $f$ applicerat på $a$ och $n$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $a$.\nassistant\n", "label": "axiom f_ind_aux (A : cic.Univ univs.Type0) (f : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) (P : cic.Term univs.Type0 (matita_basics_relations.predicate A)) (__ : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : (a : cic.Term univs.Type0 A) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (f a) n)) -> cic.Term cic.prop (P a)) -> (a : cic.Term univs.Type0 A) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) n)) -> cic.Term cic.prop (P a)) (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (a : cic.Term univs.Type0 A) (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) n)) : cic.Term cic.prop (P a)", "predict": "Axiom F_ind_aux : forall (univs : Universe) (A : univs.Type0) (f : Term univs.Type0 A -> Term univs.Type0 A nat) (P : Term univs.Type0 (Predicate nat)) (n : Term univs.Type0 nat) (a : Term univs.Type0 A) (Q : Term univs.Type0 prop lt) (eq : Logic.eq (lift univs.Type0 univs.Type2 nat f a n) (P a a)) (eq1 : Logic.eq (lift (lift univs.Type0 univs.Type2 nat) (univs.Type0) (univs.Type2) (f a n)) (P a)) -> Prop."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNull_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $xxx$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $nil$. Alors pour tous les éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $matita_arithmetics_bigops.prod$ appliqué à $A$ et $nil$ et $xxx$ et $a$ et $nil$ et $nil$.\nassistant\n", "label": "Axiom null_body : forall A : cic.Univ univs.Type0, forall nil : cic.Term univs.Type0 A, forall xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A nil), forall a : cic.Term univs.Type0 A, cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.prod A nil xxx a nil) nil) .", "predict": "Axiom prop70 : odd 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLstar_inv_ind. For all elements $x1$ of $cic.Univ$ of $univs.Type0$, for all elements $x2$ of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $x1$, for all elements $x3$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $x4$ and $x5$ of $cic.Term$ of $univs.Type0$ and $x1$, for all elements $_Hterm$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x5$, for all functions $P$ from elements $_z2089$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $_z2088$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_z2087$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_z2092$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x3$ and $matita_arithmetics_nat.O$ and elements $_z2091$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $x4$ and $b$ and elements $_z2090$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$", "label": "Axiom lstar_inv_ind : forall x1 : cic.Univ univs.Type0, forall x2 : cic.Term univs.Type0 (matita_basics_relations.relation x1), forall x3 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall x4 : cic.Term univs.Type0 x1, forall x5 : cic.Term univs.Type0 x1, forall _Hterm : cic.Term cic.prop (matita_arithmetics_lstar.lstar x1 x2 x3 x4 x5), forall P : ((_z2089 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_z2088 : cic.Term univs.Type0 x1) -> (_z2087 : cic.Term univs.Type0 x1) -> cic.Univ cic.prop), forall _H1 : ((b : cic.Term univs.Type0 x1) -> (_z2092 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x3 matita_arithmetics_nat.O)) -> (_z2091 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) x4 b)) -> (_z2090 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) x5 b)) -> cic.Term cic.prop (P matita_arithmetics_nat.O b b)), forall _", "predict": " and $univs.Type2$ and $x1$ and $x5$ and $b$ and $matita_arithmetics_lstar.lstar_ind$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x5$ and $P$ and $_H1$ and $_Hterm$ and $x1$ and $x2$ and $x3$ and $x4$ and $x5$ and $b$ and $x3$ and $x4$ and $x5$, if $x1$ is in $univs.Type0$ and $x2$ is in $univs.Type0$ and $x3$ is in $univs.Type0$ and $x4$ is in $univs.Type0$ and $x5$ is in $univs.Type0$ and $b$ is in $cic.Term$ of $univs.Type0$ and $x3$ is in $matita_arithmetics_nat.nat$ and $x4$ is in $matita_arithmetics_nat.nat$ and $x5$ is in $matita_arithmetics_nat.nat$, then $P$ is in $cic.Univ$ of $cic.prop$.\n\nOutput: \n```\nforall x1 : Univ, \nforall x2 : Term, \nrelation x1, \nforall x3 : Term, \nnat x3, \nforall x4 : Term, \nforall x5 : Term x1, \nforall z2089 : Term, \nnat z2089, \nforall z2088 : Term x1, \nforall z2087 : Term x1, \nforall P : Term z2089 nat z2088 x1 x2 -> Univ prop, \nforall b : Term x1, \nforall z2092 : Term, \neq (lift Type0 Type2 nat x3 O) (lift Type0 Type2 x1 x4 b), \nforall z2091 : Term, \neq (lift Type0 Type2 x1 x5 b), \nforall z2090 : Term, \nforall z2087, \nforall z2088, \nforall z2089, \nforall x1 : Univ, \nforall x2 : Term, \nrelation"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSig_inv_rect_Type2. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Univ$ of $cic.prop$. Then for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1188$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type2$, for all functions $_H1$ from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $x2$ applied to $pi1$ and elements $_z1189$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Sig$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.mk_Sig$ applied to $x1$ and $x2$ and $pi1$ and $_pi2$ to elements of $cic.Term$ of $univs.Type2$ and $P$ applied to $matita_basics_types.mk_Sig$ applied to $x1$ and $x2$ and $pi1$ and $_pi2$, $cic.Term$ holds for $univs.Type2$ and $P$ applied to $Hterm$.\nassistant\n", "label": "axiom Sig_inv_rect_Type2 (x1 : cic.Univ univs.Type0) (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ cic.prop) (Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) (P : (_z1188 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> cic.Univ univs.Type2) (_H1 : (pi1 : cic.Term univs.Type0 x1) -> (_pi2 : cic.Term cic.prop (x2 pi1)) -> (_z1189 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2)) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term univs.Type2 (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) : cic.Term univs.Type2 (P Hterm)", "predict": "postulate Sig_inv_rect_Type2 : (x1 : cic.Univ) -> (x2 : (λ ___, cic.Univ) -> cic.prop) -> (Hterm : cic.Term) -> (matita_basics_types.Sig x1 x2) -> (P : (λ _z1188, cic.Term) -> (matita_basics_types.Sig x1 x2) -> cic.Univ) -> (λ _H1, pi1 : cic.Term) -> (x1) -> (λ _pi2, pi2 : cic.prop) -> (x2 pi1 _pi2) -> (λ _z1189, z1189 : cic.prop) -> (matita_basics_logic.eq (univs.Type0) (univs.Type2)) -> (matita_basics_types.Sig x1 x2 Hterm) -> (matita_basics_types.mk_Sig x1 x2 pi1 _pi2) -> (cic.Term (univs.Type2) (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2) _z1189))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_inv_rect_Type1. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Då för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1392$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type1$, för alla funktioner $_H1$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$", "label": "axiom Aop_inv_rect_Type1 (x1 : cic.Univ univs.Type0) (x2 : cic.Term univs.Type0 x1) (Hterm : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) (P : (_z1392 : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> cic.Univ univs.Type1) (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1393 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.Aop x1 x2)) Hterm (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type1 (P (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) : cic.Term univs.Type1 (P Hterm)", "predict": " och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$, det finns en funktionsfunksjon $_ind$ från element $_z1392$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type1$ så att $_ind$ applicerat på $Hterm$ och $_H1$ och $_nill$ och $_nilr$ är lika med $P$ applicerat på $_ind$ applicerat på $Hterm$ och $_H1$ och $_nill$ och $_nilr$. \n\nOutput: \nOutput: \nAop_inv_rect_Type1: \naxiom x1 : univs.univ. \naxiom x2 : univs.univ -> cic.term. \naxiom Hterm : univs.univ -> cic.term. \naxiom P : (cic.term -> univs.univ) -> (cic.term -> univs.univ). \naxiom H1 : (cic.term -> cic.term) -> (cic.term -> cic.term) -> (cic.term -> cic.term). \naxiom nill : (cic.term -> cic.prop) -> (matita_basics_logic.eq -> (cic.lift univs.univ univs.univ2 x1) -> (cic.term -> cic.prop) -> (matita_basics_logic.eq -> (cic.lift univs.univ univs.univ2 x1) -> (cic.term -> cic.prop) -> (cic.term -> cic.prop)). \naxiom nilr : (cic.term -> cic.prop) -> (matita_basics_logic.eq -> (cic.lift univs.univ univs.univ2 x1) -> (cic.term -> cic.prop) -> (matita_basics_logic.eq -> (cic.lift univs.univ univs.univ2 x1) -> (cic.term -> cic.prop) -> (cic.term -> cic.prop)). \nforall ("}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nPair_elim2. Låt $A$ och $B$ och $C$ och $C'$ vara element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $T$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $C$, för alla funktioner $T'$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $C'$, för alla element $p$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$, för alla funktioner $P$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $C$ och element $__2$ av $cic.Term$ av $univs.Type0$ och $C'$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $__$ från element $lft$ av $cic.Term$ av $univs.Type0$ och $A$ och element $rgt$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $A", "label": "Axiom pair_elim2 : forall A : cic.Univ univs.Type0, forall B : cic.Univ univs.Type0, forall C : cic.Univ univs.Type0, forall C' : cic.Univ univs.Type0, forall T : ((__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 C), forall T' : ((__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 C'), forall p : cic.Term univs.Type0 (matita_basics_types.Prod A B), forall P : ((__ : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> (__1 : cic.Term univs.Type0 C) -> (__2 : cic.Term univs.Type0 C') -> cic.Univ cic.prop), forall __ : ((lft : cic.Term univs.Type0 A) -> (rgt : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B)) p (matita_basics_types.mk_Prod A B lft rgt))) -> cic.Term cic.prop (P (matita_basics_types.mk_Prod A B lft rgt) (T lft rgt) (T' lft rgt))), cic.Term cic.prop (P p (matita_basics_types.match_Prod A B univs.Type0 (fun _0 => C) (fun lft => fun rgt => T lft rgt) p) (matita_basics_types.match_Prod A B univs.Type0 (fun _0 => C') (fun lft => fun rgt => T' lft rgt) p)) .", "predict": "$ och $B$ och element $p$ till element av $cic.Univ$ av $cic.prop$, för alla element $p$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$, för alla element $x$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$ och element $y$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$ till element av $cic.Univ$ av $cic.prop$, vi har att $p$ är ett element av $cic.prop$.\n\nOutput: \nInductive cic.Univ : Type := \n| univs.Type0 : \nInductive cic.prop : Type := \n| cic.prop.true : cic.Univ \n| cic.prop.false : cic.Univ \nInductive matita_basics_types.Prod (A B : Type) : Type := \n| prod.mk : A -> B -> matita_basics_types.Prod A B \nInductive matita_basics_logic.eq (A : Type) (x y : A) : Prop := \n| eq_refl : x = y \nDefinition lft (A : Type) (B : Type) (P : A -> B -> Type) (x : A) (y : B) : Type := \nP x y \nDefinition rgt (A : Type) (B : Type) (P : A -> B -> Type) (x : A) (y : B) : Type := \nP x y \nDefinition eq (A : Type) (x y : A) : Prop := \nmatita_basics_logic.eq A x y \nDefinition cic.Term (univs.Type0 : cic.Univ) : Type := \nunivs.Type0 \nDefinition prop_elim2 (A B C C' : cic.Univ) (T : cic.Term univs.Type0 -> A -> cic.Term univs.Type0 -> C) (T' : cic.Term univs.Type0 -> A -> cic.Term univs.Type0 -> C') (p : cic.Term univs.Type0) (pair : matita_basics_types.Prod A B) (P :"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_rect_Type4. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_945$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type4$. Soit $_H_mk_Dop$ une fonction des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $_nil$ et $_nil$ et des fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2", "label": "Dop_rect_Type4 : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_945 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil) -> cic.Univ univs.Type4) -> _H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> prod : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _null : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> _distr : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> x_945 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil) -> cic.Term univs.Type4 (Q_ x_945) .", "predict": "$ et $prod$ appliqué à $a$ et $b$ et $c$ et des fonctions $plus$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $plus$ appliqué à $a$ et $b$ et des fonctions $minus$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $minus$ appliqué à $a$ et $b$ et des fonctions $mult$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $mult$ appliqué à $a$ et $b$ et des fonctions $div$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $div$ appliqué à $a$ et $b$ et des fonctions $equal$ des éléments"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNot_divides_to_gcd_aux. Let $p$ and $m$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_arithmetics_primes.divides$ applied to $n$ and $m$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd_aux$ applied to $matita_arithmetics_nat.S$ applied to $p$ and $m$ and $n$ and $matita_arithmetics_gcd.gcd_aux$ applied to $p$ and $n$ and $matita_arithmetics_div_and_mod.mod$ applied to $m$ and $n$.\nassistant\n", "label": "Axiom not_divides_to_gcd_aux : forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall __1 : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides n m)), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S p) m n) (matita_arithmetics_gcd.gcd_aux p n (matita_arithmetics_div_and_mod.mod m n))) .", "predict": "Not_divides_to_gcd_aux : forall (p m n : cic.Term (univs.Type0)) (n_lt : matita_arithmetics_nat.lt matita_arithmetics_nat.O n) (not_divides : matita_basics_logic.Not (matita_arithmetics_primes.divides n m)), cic.Term (cic.prop (matita_arithmetics_nat.lt n)) (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2) (matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S p) m n) (matita_arithmetics_gcd.gcd_aux p n (matita_arithmetics_div_and_mod.mod m n))) (cic.lift (univs.Type0) (univs.Type2) (matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd_aux p m n) (matita_arithmetics_gcd.gcd_aux p n (matita_arithmetics_div_and_mod.mod m n))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_f3. Let $A$ and $B$ and $C$ and $D$ be elements of $cic.Univ$ of $univs.Type2$. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type2$ and $B$ and elements $__2$ of $cic.Term$ of $univs.Type2$ and $C$ to elements of $cic.Term$ of $univs.Type2$ and $D$. Then for all elements $x1$ and $x2$ of $cic.Term$ of $univs.Type2$ and $A$, for all elements $y1$ and $y2$ of $cic.Term$ of $univs.Type2$ and $B$, for all elements $z1$ and $z2$ of $cic.Term$ of $univs.Type2$ and $C$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $x1$ and $x2$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $B$ and $y1$ and $y2$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $C$ and $z1$ and $z2$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $D$ and $f$ applied to $x1$ and $y1$ and $z1$ and $f$ applied to $x2$ and $y2$ and $z2$.\nassistant\n", "label": "Axiom eq_f3 : forall A : cic.Univ univs.Type2, forall B : cic.Univ univs.Type2, forall C : cic.Univ univs.Type2, forall D : cic.Univ univs.Type2, forall f : ((__ : cic.Term univs.Type2 A) -> (__1 : cic.Term univs.Type2 B) -> (__2 : cic.Term univs.Type2 C) -> cic.Term univs.Type2 D), forall x1 : cic.Term univs.Type2 A, forall x2 : cic.Term univs.Type2 A, forall y1 : cic.Term univs.Type2 B, forall y2 : cic.Term univs.Type2 B, forall z1 : cic.Term univs.Type2 C, forall z2 : cic.Term univs.Type2 C, forall __ : cic.Term cic.prop (matita_basics_logic.eq A x1 x2), forall __1 : cic.Term cic.prop (matita_basics_logic.eq B y1 y2), forall __2 : cic.Term cic.prop (matita_basics_logic.eq C z1 z2), cic.Term cic.prop (matita_basics_logic.eq D (f x1 y1 z1) (f x2 y2 z2)) .", "predict": "Eq_f3 : forall (A B C D : cic.Univ.univs.Type2) (f : (cic.Term.univs.Type2 -> A -> (cic.Term.univs.Type2 -> B -> (cic.Term.univs.Type2 -> C -> cic.Term.univs.Type2 -> D))), (forall (x1 x2 : cic.Term.univs.Type2 -> A), matita_basics_logic.eq.cic.prop -> matita_basics_logic.eq.cic.prop -> D -> f x1 x2 (matita_basics_logic.eq x1 x2) (f x1 x2 (matita_basics_logic.eq x1 x2)) = f x2 x2 (matita_basics_logic.eq x2 x2) (f x2 x2 (matita_basics_logic.eq x2 x2)) : Prop)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAnd_inv_rect_Type0. Låt $x1$ och $x2$ vara element av $cic.Univ$ av $cic.prop$. Låt $Hterm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z353$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type0$. Låt $_H1$ vara en funktion från element $x_144$ av $cic.Term$ av $cic.prop$ och $x1$ och element $x_143$ av $cic.Term$ av $cic.prop$ och $x2$ och element $_z354$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_144$ och $x_143$ till element av $cic.Term$ av $univs.Type0$ och $P$ applicerat på $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_144$ och $x_143$. Då håller $cic.Term$ för $univs.Type0$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "And_inv_rect_Type0 : x1 : cic.Univ cic.prop -> x2 : cic.Univ cic.prop -> Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2) -> P : (_z353 : cic.Term cic.prop (matita_basics_logic.And x1 x2) -> cic.Univ univs.Type0) -> _H1 : (x_144 : cic.Term cic.prop x1 -> x_143 : cic.Term cic.prop x2 -> _z354 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_144 x_143)) -> cic.Term univs.Type0 (P (matita_basics_logic.conj x1 x2 x_144 x_143))) -> cic.Term univs.Type0 (P Hterm) .", "predict": "Axiom And_inv_rect_Type0 : (x1 : cic.Univ) -> (x2 : cic.Univ) -> (Hterm : cic.Term) -> (matita_basics_logic.And x1 x2) -> (P : (z353 : cic.Term) -> (matita_basics_logic.And x1 x2) -> cic.Univ) -> (H1 : (x144 : cic.Term) -> (x143 : cic.Term) -> (z354 : cic.Term) -> (matita_basics_logic.eq (cic.lift (cic.prop) (univs.Type2) (matita_basics_logic.And x1 x2) Hterm (matita_basics_logic.conj x1 x2)) (x144, x143)) -> cic.Term) -> (univs.Type0) -> P (matita_basics_logic.conj x1 x2) x144 x143 Hterm (matita_basics_logic.conj x1 x2) x144 x143."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDiv_mod_spec_rect_CProp5. Låt $_n$ och $_m$ och $_q$ och $_r$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla funktioner $Q_$ från element $_x_841$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_div_mod_spec_intro$ från element $x_843$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $_r$ och $_m$ och element $x_842$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $_n$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $_q$ och $_m$ och $_r$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ och $x_843$ och $x_842$, för alla element $x_841$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_841$.\nassistant\n", "label": "div_mod_spec_rect_CProp5 : _n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _q : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _r : cic.Term univs.Type0 matita_arithmetics_nat.nat -> Q_ : (_x_841 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r) -> cic.Univ cic.prop) -> _H_div_mod_spec_intro : (x_843 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m) -> x_842 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r)) -> cic.Term cic.prop (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_843 x_842))) -> x_841 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r) -> cic.Term cic.prop (Q_ x_841) .", "predict": "Output: \naxiom div_mod_spec_rect_cprop5 : \nforall (n m q r : term univs.type0) (nat : type) (qmod : prop) (div_mod_spec : prop), \nforall (hdivmod : lt r m) (hq : eq (lift univs.type0 univs.type2 nat n) (plus (times q m) r)) (hqmod : prop), \nforall (x : term prop) (f : (x n m q r) -> prop), \nf (div_mod_spec_intro n m q r) (f (div_mod_spec_intro n m q r) (hdivmod hqmod)) x."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExists_map. Låt $A$ och $B$ vara element av $cic.Univ$ av $univs.Type0$. Låt $P$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $Q$ från element $__$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $B$, för alla element $l$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.Exists$ applicerat på $A$ och $P$ och $l$, för alla funktioner $__1$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $cic.prop$ och $P$ applicerat på $a$ till element av $cic.Term$ av $cic.prop$ och $Q$ applicerat på $f$ applicerat på $a$, håller $cic.Term$ för $cic.prop$ och $matita_basics_lists_list.Exists$ applicerat på $B$ och $Q$ och $matita_basics_lists_list.map$ applicerat på $A$ och $B$ och $f$ och $l$.\nassistant\n", "label": "axiom Exists_map (A B : cic.Univ univs.Type0) (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) (Q : (__ : cic.Term univs.Type0 B) -> cic.Univ cic.prop) (f : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) (__ : cic.Term cic.prop (matita_basics_lists_list.Exists A P l)) (__1 : (a : cic.Term univs.Type0 A) -> (__1 : cic.Term cic.prop (P a)) -> cic.Term cic.prop (Q (f a))) : cic.Term cic.prop (matita_basics_lists_list.Exists B Q (matita_basics_lists_list.map A B f l))", "predict": "Output: \naxiom exists_map : ∀ (univs : cic.univ), ∀ (A B : univs.type0), ∀ (P : cic.term univs.type0 A → univs.univ), ∀ (Q : cic.term univs.type0 B → univs.univ), ∀ (f : cic.term univs.type0 A → cic.term univs.type0 B), ∀ (l : cic.term univs.type0), ∀ (existsA : matita_basics_lists_list.list A), ∀ (existsB : matita_basics_lists_list.exists B P l), ∀ (a : cic.term univs.type0), ∀ (existsA' : cic.prop P a), ∀ (existsB' : cic.prop Q (f a)), ∀ (mapB : matita_basics_lists_list.map A B f l), (cic.prop) (matita_basics_lists_list.exists B Q mapB) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd_rect_CProp5_body. For all elements $_A$ and $_B$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_706$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Prod$ from elements $_fst$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_snd$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_Prod$ applied to $_A$ and $_B$ and $_fst$ and $_snd$, for all elements $x_706$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_706$.\nassistant\n", "label": "Prod_rect_CProp5_body : _A : cic.Univ univs.Type0 -> _B : cic.Univ univs.Type0 -> Q_ : (_x_706 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) -> cic.Univ cic.prop) -> _H_mk_Prod : (_fst : cic.Term univs.Type0 _A -> _snd : cic.Term univs.Type0 _B -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) -> x_706 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) -> cic.Term cic.prop (Q_ x_706) .", "predict": "Output: Axiom Prod_rect_CProp5_body : forall (A : cic.Univ) (B : univs.Type0), (forall (x_706 : cic.Term) (P : Prod A B -> cic.Univ -> univs.Type0), (forall (fst : cic.Term) (A : cic.Term) (snd : cic.Term) (B : cic.Term), P (mk_Prod A B fst snd) (cic.prop) -> Q x_706) -> (forall (x_706 : cic.Term), Prod A B -> cic.Term -> cic.prop -> Q x_706)) -> (forall (x_706 : cic.Term), Prod A B -> cic.Term -> Q x_706)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSig_rect_Type1. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_674$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $univs.Type1$. Låt $_H_mk_Sig$ vara en funktion från element $pi1$ av $cic.Term$ av $univs.Type0$ och $A$ och element $_pi2$ av $cic.Term$ av $cic.prop$ och $_f$ applicerat på $pi1$ till element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_basics_types.mk_Sig$ applicerat på $A$ och $_f$ och $pi1$ och $_pi2$. Låt $x_674$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$. Då håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_674$.\nassistant\n", "label": "postulate Sig_rect_Type1 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_674 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ univs.Type1) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term univs.Type1 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_674 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term univs.Type1 (Q_ x_674)", "predict": "postulate Sig_rect_Type1 : ∀ {univs : Universe} (A : univs.Univ) (f : ∀ {x : univs.Term} (a : univs.Type0) -> a -> univs.Univ) -> (Q : ∀ {x : univs.Term} (a : univs.Type0) (ma : univs.prop) -> f x a -> univs.Univ) -> (∀ {x : univs.Term} (a : univs.Type0) (ma : univs.prop) -> f x a -> univs.Term) -> ∀ {x : univs.Term} (a : univs.Type0) -> Q (f x a) -> univs.Term."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFilter_DPair. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all functions $_f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $univs.Type0$, for all elements $return_sort$ of $cic.Sort$, for all functions $return_type$ from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $return_sort$, for all functions $return$ from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $z$, for all elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.\nassistant\n", "label": "filter_DPair : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) -> return_sort : cic.Sort -> return_type : (z : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Univ return_sort) -> return : (z : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Term return_sort (return_type z)) -> z : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Term return_sort (return_type z) .", "predict": "Output: \nAxiom Filter_DPair : \n  forall (A : Univ) (univs : Type0) (cic : Type0) (prop : Sort) (even : Term) (odd : Term) (return_sort : Sort) (return_type : Term -> DPair A _f -> return_sort) (return : Term -> DPair A _f -> return_sort -> return_type) (z : Term) (dpair : DPair A _f), cic holds for return_sort and return_type applied to z."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLstar_dx. Pour tous les éléments $B$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $R$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation$ appliqué à $B$, pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $b1$ et $b$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $R$ et $l$ et $b1$ et $b$, pour tous les éléments $b2$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $R$ appliqué à $b$ et $b2$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $R$ et $matita_arithmetics_nat.plus$ appliqué à $l$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $b1$ et $b2$.\nassistant\n", "label": "Axiom lstar_dx : forall B : cic.Univ univs.Type0, forall R : cic.Term univs.Type0 (matita_basics_relations.relation B), forall l : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b1 : cic.Term univs.Type0 B, forall b : cic.Term univs.Type0 B, forall __ : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b), forall b2 : cic.Term univs.Type0 B, forall __1 : cic.Term cic.prop (R b b2), cic.Term cic.prop (matita_arithmetics_lstar.lstar B R (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2) .", "predict": "Axiom Lstar_dx : forall B : univs.Type0, forall R : B -> B -> cic.prop, forall l : cic.Term, forall b1 b : B, forall __ : cic.Term, forall b2 : B, forall __1 : R b b2, (l + matita_arithmetics_nat.S matita_arithmetics_nat.O) = (b1 + b2) -> (l + matita_arithmetics_nat.plus (matita_arithmetics_nat.O) (matita_arithmetics_nat.plus l b1)) = (R b b2) -> (l + matita_arithmetics_nat.plus l b1) = (R b b2)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNat_rect_CProp3_body. Låt $Q_$ vara en funktion från element $_x_401$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_O$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_nat.O$. Då för alla funktioner $_H_S$ från element $x_402$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $_x_404$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $x_402$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_nat.S$ applicerat på $x_402$, för alla element $x_401$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_401$.\nassistant\n", "label": "postulate nat_rect_CProp3_body : (Q_ : (_x_401 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop) -> (_H_O : cic.Term cic.prop (Q_ matita_arithmetics_nat.O)) -> (_H_S : (x_402 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_404 : cic.Term cic.prop (Q_ x_402)) -> cic.Term cic.prop (Q_ (matita_arithmetics_nat.S x_402))) -> (x_401 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (Q_ x_401)", "predict": "postulate Nat_rect_CProp3_body : \n  {univs : Universe}\n  {Q : ∀ x : Term cic.prop (univs.Type0) (nat), Univ (cic.prop)}\n  {H_O : Term cic.prop (Q O)}\n  {H_S : ∀ x y : Term cic.prop (univs.Type0) (nat), \n    (Q x) (λ _, (Q x) (λ _, (Q (S y) x)) (Q (S y) (S x)))},\n  (forall x : Term cic.prop (univs.Type0) (nat), (Q x) x)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBigop_Sfalse. Soit $k$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour toutes les fonctions $p$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, pour tous les éléments $B$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $nil$ de $cic.Term$ de $univs.Type0$ et de $B$, pour toutes les fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$, pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $p$ appliqué à $k$ et $matita_basics_bool.false$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $B$ et $matita_arithmetics_bigops.bigop$ appliqué à $matita_arithmetics_nat.S$ appliqué à $k$ et la fonction qui envoie $i$ à $p$ appliqué à $i$ et $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $matita_arithmetics_bigops.bigop$ appliqué", "label": "postulate bigop_Sfalse : (k : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (B : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 B) -> (op : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p k) matita_basics_bool.false)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S k) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) B nil op (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i)) (matita_arithmetics_bigops.bigop k (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) B nil op (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i)))", "predict": " à $matita_arithmetics_nat.S$ appliqué à $k$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $B$ et $nil$ et $op$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_exp. Soient $n$ et $m$ et $p$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $p$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $n$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $p$ et $n$ et $matita_arithmetics_exp.exp$ appliqué à $p$ et $m$.\nassistant\n", "label": "postulate lt_exp : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt n m)) -> cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_exp.exp p n) (matita_arithmetics_exp.exp p m))", "predict": "postulate Lt_exp : (n m p : cic.Term univs.Type0) -> (n < m) -> (forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) -> (forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt n m)) -> (cic.Term cic.prop (matita_arithmetics_exp.exp p n) (matita_arithmetics_exp.exp p m))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_rect_Type1_body. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_925$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type1$. Låt $_H_mk_range$ vara en funktion från funktioner $_enum$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $_A$ och element $_upto$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $_filter$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_range$ applicerat på $_A$ och $_enum$ och $_upto$ och $_filter$. Då för alla element $x_925$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$, håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_925$.\nassistant\n", "label": "Axiom range_rect_Type1_body : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_925 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type1), forall _H_mk_range : ((_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))), forall x_925 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A), cic.Term univs.Type1 (Q_ x_925) .", "predict": "Range_rect_Type1_body. Let A be an element of cic.Univ of univs.Type0. Let Q be a function from elements x_925 of cic.Term of univs.Type0 and matita_arithmetics_bigops.range applied on A to elements of cic.Univ of univs.Type1. Let H_mk_range be a function from functions enum from elements $ of cic.Term of univs.Type0 and matita_arithmetics_nat.nat to elements of cic.Term of univs.Type0 and A and elements upto of cic.Term of univs.Type0 and matita_arithmetics_nat.nat and functions filter from elements $ of cic.Term of univs.Type0 and matita_arithmetics_nat.nat to elements of cic.Term of univs.Type0 and matita_basics_bool.bool to elements of cic.Term of univs.Type1 and Q applied on matita_arithmetics_bigops.mk_range applied on A and enum and upto and filter. Then for all elements x_925 of cic.Term of univs.Type0 and matita_arithmetics_bigops.range applied on A, holds cic.Term for univs.Type1 and Q applied on x_925."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_rect_Type2. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_923$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type2$. Låt $_H_mk_range$ vara en funktion från funktioner $_enum$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $_A$ och element $_upto$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $_filter$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_range$ applicerat på $_A$ och $_enum$ och $_upto$ och $_filter$. Då för alla element $x_923$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$, håller $cic.Term$ för $univs.Type2$ och $Q_$ applicerat på $x_923$.\nassistant\n", "label": "range_rect_Type2 : _A : cic.Univ univs.Type0 -> Q_ : (_x_923 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Univ univs.Type2) -> _H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 _A) -> _upto : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type2 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> x_923 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Term univs.Type2 (Q_ x_923) .", "predict": "Output: \nRange_rect_Type2 : ∀ _A : univs.Type0, (univs.Type2 → _A → range _A) → (univs.Type0 → nat → term _univs.Type0 _A (matita_arithmetics_bigops.range _A)) → (univs.Type0 → nat → term _univs.Type0 _A (matita_arithmetics_nat.nat)) → (univs.Type0 → nat → term _univs.Type0 _A (matita_basics_bool.bool)) → ∀ x_923 : univs.Type0 (matita_arithmetics_bigops.range _A), term _univs.Type2 (Q _x_923) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_rect_Type4_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_891$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type4$. Soit $_H_mk_ACop$ une fonction des éléments $aop$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ et des fonctions $_comm$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $_nil$ et $aop$ et $a$ et $b$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $_nil$ et $aop$ et $b$ et $a$ à des éléments de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_ACop$ appliqué à $A$ et $_nil$ et $aop$ et $_comm$. Alors pour tous les éléments $x_891$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$, $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_891$.\nassistant\n", "label": "axiom ACop_rect_Type4_body (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_891 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ univs.Type4) (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) (x_891 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) : cic.Term univs.Type4 (Q_ x_891)", "predict": "Axiom ACop_rect_Type4_body : forall A : cic.Univ, A -> A -> (forall x : cic.Term, A -> matita_arithmetics_bigops.ACop A x -> (forall a b : cic.Term, A -> matita_arithmetics_bigops.Aop A nil a -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A nil aop a b) (matita_arithmetics_bigops.op A nil aop b a))) -> (forall aop : cic.Term, A -> matita_arithmetics_bigops.Aop A nil aop -> forall comm : forall a b : cic.Term, A -> matita_arithmetics_bigops.op A nil aop a b -> cic.Term -> matita_arithmetics_bigops.mk_ACop A nil aop comm -> matita_arithmetics_bigops.ACop A x891) -> cic.Term -> univs.Type4 -> Q_ (matita_arithmetics_bigops.mk_ACop A nil aop comm) = (Q_ (matita_arithmetics_bigops.mk_ACop A nil aop comm))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nPermut_invert_permut. For all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_permutation.permut$ applied to $f$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_permutation.permut$ applied to $matita_arithmetics_permutation.invert_permut$ applied to $n$ and $f$ and $n$.\nassistant\n", "label": "postulate permut_invert_permut : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_permutation.permut f n)) -> cic.Term cic.prop (matita_arithmetics_permutation.permut (matita_arithmetics_permutation.invert_permut n f) n)", "predict": "postulate Permut_invert_permut : forall (f : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall (n : cic.Term univs.Type0 matita_arithmetics_nat.nat), forall (n_f : cic.prop univs.Type0 matita_arithmetics_permutation.permut), cic.Term (matita_arithmetics_permutation.permut n_f (f n)) (matita_arithmetics_permutation.permut (matita_arithmetics_permutation.invert_permut n) f n) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_rect_Type4. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type2$, pour tous les éléments $_x$ de $cic.Term$ de $univs.Type2$ et de $A$, pour toutes les fonctions $Q_$ des éléments $x_4$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $_x_5$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_4$ à des éléments de $cic.Univ$ de $univs.Type4$, pour tous les éléments $_H_refl$ de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$, pour tous les éléments $x_4$ de $cic.Term$ de $univs.Type2$ et de $A$, pour tous les éléments $x_5$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_4$, $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_4$ et $x_5$.\nassistant\n", "label": "postulate eq_rect_Type4 : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_4 : cic.Term univs.Type2 A) -> (_x_5 : cic.Term cic.prop (matita_basics_logic.eq A _x x_4)) -> cic.Univ univs.Type4) -> (_H_refl : cic.Term univs.Type4 (Q_ _x (matita_basics_logic.refl A _x))) -> (x_4 : cic.Term univs.Type2 A) -> (x_5 : cic.Term cic.prop (matita_basics_logic.eq A _x x_4)) -> cic.Term univs.Type4 (Q_ x_4 x_5)", "predict": "postulate Eq_rect_Type4 : {A : cic.Univ} {univs.Type2} {x : A} {Q_ : x4 : cic.Term univs.Type2 A -> x5 : cic.Term univs.Type2 (cic.prop (matita_basics_logic.eq A x)) -> x4 -> x5} {x4 : cic.Term univs.Type4} {H_refl : x -> matita_basics_logic.refl A x} {x5 : cic.Term univs.Type4 (Q_ x H_refl)} -> (x4 : cic.Term univs.Type2 A) -> (x5 : cic.Term univs.Type2 (cic.prop (matita_basics_logic.eq A x))) -> (x4 -> x5)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_upper_bound1. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_nat.nat$.\nassistant\n", "label": "let_upper_bound1 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_arithmetics_nat.nat .", "predict": "Output: Axiom let_upper_bound1 : forall (n : Term univs.Type0) (m : matita_arithmetics_nat.nat), Term univs.Type0."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nF_min_true. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $n$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $i$ to $matita_basics_logic.And$ applied to $matita_basics_logic.And$ applied to $matita_arithmetics_nat.le$ applied to $b$ and $i$ and $matita_arithmetics_nat.lt$ applied to $i$ and $matita_arithmetics_nat.plus$ applied to $n$ and $b$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $i$ and $matita_basics_bool.true$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $matita_arithmetics_minimization.min$ applied to $n$ and $b$ and $f$ and $matita_basics_bool.true$.\nassistant\n", "label": "axiom f_min_true (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (n b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (λ i => matita_basics_logic.And (matita_basics_logic.And (matita_arithmetics_nat.le b i) (matita_arithmetics_nat.lt i (matita_arithmetics_nat.plus n b))) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.true)))) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f (matita_arithmetics_minimization.min n b f)) matita_basics_bool.true)", "predict": "Output: \nLet $f$ be a function from elements $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $n$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $___$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $i$ to $matita_basics_logic.And$ applied to $matita_basics_logic.And$ applied to $matita_arithmetics_nat.le$ applied to $b$ and $i$ and $matita_arithmetics_nat.lt$ applied to $i$ and $matita_arithmetics_nat.plus$ applied to $n$ and $b$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $i$ and $matita_basics_bool.true$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $matita_arithmetics_minimization.min$ applied to $n$ and $b$ and $f$ and $matita_basics_bool.true$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nReflexive. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $_R$ of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $A$, $cic.Univ$ holds for $cic.prop$.\nassistant\n", "label": "axiom reflexive (A : cic.Univ univs.Type0) (_R : cic.Term univs.Type0 (matita_basics_relations.relation A)) : cic.Univ cic.prop", "predict": "Output: \npostulate Reflexive : (A : univs.Type0) -> (R : A -> A -> univs.Type0) -> (relation : matita_basics_relations.relation) -> (A : cic.Univ) -> (cic.prop)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nReverse_reverse. Låt $S$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $S$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $S$ och $matita_basics_lists_list.reverse$ applicerat på $S$ och $matita_basics_lists_list.reverse$ applicerat på $S$ och $l$ och $l$.\nassistant\n", "label": "postulate reverse_reverse : (S : cic.Univ univs.Type0) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list S)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list S)) (matita_basics_lists_list.reverse S (matita_basics_lists_list.reverse S l)) l)", "predict": "postulate Reverse_reverse : {univs : Type} {S : univs.Type0} {l : matita_basics_lists_list.list S} -> cic.Term cic.prop (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list S)) (matita_basics_lists_list.reverse S l) (matita_basics_lists_list.reverse S l) l ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nReverse_append. Soit $S$ un élément de $cic.Univ$ de $univs.Type0$. Soient $l1$ et $l2$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $S$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $S$ et $matita_basics_lists_list.reverse$ appliqué à $S$ et $matita_basics_lists_list.append$ appliqué à $S$ et $l1$ et $l2$ et $matita_basics_lists_list.append$ appliqué à $S$ et $matita_basics_lists_list.reverse$ appliqué à $S$ et $l2$ et $matita_basics_lists_list.reverse$ appliqué à $S$ et $l1$.\nassistant\n", "label": "reverse_append : S : cic.Univ univs.Type0 -> l1 : cic.Term univs.Type0 (matita_basics_lists_list.list S) -> l2 : cic.Term univs.Type0 (matita_basics_lists_list.list S) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list S)) (matita_basics_lists_list.reverse S (matita_basics_lists_list.append S l1 l2)) (matita_basics_lists_list.append S (matita_basics_lists_list.reverse S l2) (matita_basics_lists_list.reverse S l1))) .", "predict": "Output: Axiom Reverse_append : forall (S : cic.Univ) (l1 l2 : cic.Term) (lst : matita_basics_lists_list.list S), cic.Term (cic.prop (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2) (matita_basics_lists_list.list S)) S (matita_basics_lists_list.reverse S) (matita_basics_lists_list.append S l1 l2) (matita_basics_lists_list.reverse S) (matita_basics_lists_list.append S (matita_basics_lists_list.reverse S) l2) (matita_basics_lists_list.reverse S) l1))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSub0_to_false. Soient $h$ et $k$ des fonctions des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $I$ et $J$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $A$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_bigops.upto$ appliqué à $A$ et $I$ et $matita_arithmetics_nat.O$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_bigops.sub_hk$ appliqué à $h$ et $k$ et $A$ et $J$ et $I$, pour tous les éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $matita_arithmetics_bigops.upto$ appliqué à $A$ et $J$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_bigops.filter$ appliqué à $A$ et $J$ et $i$ et $matita_basics_bool.false$.\nassistant\n", "label": "Axiom sub0_to_false : forall h : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall k : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall A : cic.Univ univs.Type0, forall I : cic.Term univs.Type0 (matita_arithmetics_bigops.range A), forall J : cic.Term univs.Type0 (matita_arithmetics_bigops.range A), forall __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.upto A I) matita_arithmetics_nat.O), forall __1 : cic.Term cic.prop (matita_arithmetics_bigops.sub_hk h k A J I), forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __2 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_bigops.upto A J)), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_bigops.filter A J i) matita_basics_bool.false) .", "predict": "Parameter Sub0_to_false : forall (h k : forall A : cic.Univ, A -> A -> cic.Term, I J : cic.Term, A -> I -> J) (A : cic.Univ) (I J : cic.Term) (A' : cic.Term) (i : matita_arithmetics_nat.nat) (l : cic.Term), (forall A : cic.Univ, A -> A -> cic.Term, I J : cic.Term, A -> I -> J) A I J -> (forall A : cic.Univ, A -> A -> cic.Term, I J : cic.Term, A -> I -> J) A' i l -> (forall A : cic.Univ, A -> A -> cic.Term, I J : cic.Term, A -> I -> J) A' (matita_arithmetics_bigops.filter A J i matita_basics_bool.false) (matita_arithmetics_bigops.sub_hk h k A J I)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExists_append_r. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $P$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $l1$ et $l2$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.Exists$ appliqué à $A$ et $P$ et $l2$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_lists_list.Exists$ appliqué à $A$ et $P$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l1$ et $l2$.\nassistant\n", "label": "postulate Exists_append_r : (A : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.Exists A P l2)) -> cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 l2))", "predict": "postulate Exists_append_r : \n  {A : Univ} {univs : Type0} {P : (__) -> Univ -> Prop} {l1 l2 : Term} {matita_basics_lists_list.Exists} -> \n  {__: Term} {cic.prop} -> \n  (P _) (l1 ++ l2) -> \n  P _ (append A l1 l2)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_10333. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Alors pour tous les éléments $x2515$ et $x2516$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2515$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $x2516$ et $matita_arithmetics_div_and_mod.div$ appliqué à $x2515$ et $x2516$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $x2515$ et $x2516$.\nassistant\n", "label": "postulate let_clause_10333 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)))", "predict": "postulate let_clause_10333 : \n  (n : cic.Term univs.Type0 (matita_arithmetics_nat.nat)) \n  (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) \n  -> (forall x2515 x2516 : cic.Term univs.Type0 (matita_arithmetics_nat.nat), \n       cic.Term (cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)))) posn)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_Dop. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all elements $return_sort$ of $cic.Sort$, for all functions $return_type$ from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $return_sort$, for all functions $case_mk_Dop$ from elements $sum$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and functions $prod$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A", "label": "postulate match_Dop : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ return_sort) -> (case_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term return_sort (return_type (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (z : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term return_sort (return_type z)", "predict": "$ and $prod$ applied to $b$ and $prod$ applied to $c$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $prod$ applied to $b$ and $prod$ applied to $c$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $prod$ applied to $b$ and $prod$ applied to $c$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $prod$ applied to $b$ and $prod$ applied to $c$, the equality $prod$ applied to $return_type$ applied to $z$ and $return_sort$ is satisfied.\n\nOutput:"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBigop_0. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Då för alla element $op$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $B$ och $nil$, för alla funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $matita_arithmetics_bigops.bigop$ applicerat på $matita_arithmetics_nat.S$ applicerat på $n$ och funktionen som avbildar $i$ som $matita_basics_bool.true$ och $B$ och $nil$ och $matita_arithmetics_bigops.op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $matita_arithmetics_bigops.op$ applicerat på $B$ och $nil$ och $op$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $matita_basics_bool.true$ och $B$ och $nil$ och $matita_arithmetics_bigops.op$ applicerat på $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $matita_arithmetics_nat.S$ applicerat på $i$ och $f$ applicerat på $matita_arithmetics_nat.O$.\nassistant\n", "label": "Axiom bigop_0 : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall B : cic.Univ univs.Type0, forall nil : cic.Term univs.Type0 B, forall op : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop B nil), forall f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n) (fun i => matita_basics_bool.true) B nil (matita_arithmetics_bigops.op B nil op) (fun i => f i)) (matita_arithmetics_bigops.op B nil op (matita_arithmetics_bigops.bigop n (fun i => matita_basics_bool.true) B nil (matita_arithmetics_bigops.op B nil op) (fun i => f (matita_arithmetics_nat.S i))) (f matita_arithmetics_nat.O))) .", "predict": "Axiom bigop_0 : forall (n : cic.Term univs.Type0) (matita_arithmetics_nat:nat), forall (B : cic.Univ univs.Type0), (nil : cic.Term univs.Type0 B) -> forall (op : cic.Term univs.Type0 matita_arithmetics_bigops.Aop), forall (f : forall (i : cic.Term univs.Type0 matita_arithmetics_nat.nat), cic.Term univs.Type0 B) (cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n) (fun i => matita_basics_bool.true B nil (matita_arithmetics_bigops.op B nil op) (fun i => f i (matita_arithmetics_bigops.op B nil op) (matita_arithmetics_bigops.bigop n (fun i => matita_basics_bool.true B nil op) (fun i => f (matita_arithmetics_nat.S i) (f i)) (fun i => f (matita_arithmetics_nat.O i)))))))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExp_to_eq_O. För alla element $n$ och $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_exp.exp$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $m$ och $matita_arithmetics_nat.O$.\nassistant\n", "label": "axiom exp_to_eq_O (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_exp.exp n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m matita_arithmetics_nat.O)", "predict": "Output: Axiom Exp_to_eq_O : forall (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (___ : cic.Term cic.prop matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) (___1 : cic.Term cic.prop matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_exp.exp n m (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> c."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMod_S_fact. Låt $n$ och $i$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $i$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $i$ och $n$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_factorial.fact$ applicerat på $n$ och $i$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$.\nassistant\n", "label": "postulate mod_S_fact : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le i n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod (matita_arithmetics_nat.S (matita_arithmetics_factorial.fact n)) i) (matita_arithmetics_nat.S matita_arithmetics_nat.O))", "predict": "postulate Mod_S_fact : (n i : cic.Term univs.Type0 (matita_arithmetics_nat.nat)) -> \n(cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.O)) i)) -> \n(cic.Term cic.prop (matita_arithmetics_nat.le i n)) -> \ncic.Term cic.prop (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod (matita_arithmetics_nat.S (matita_arithmetics_factorial.fact n)) i (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_inv_rect_CProp4. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $x1$, for all functions $P$ from elements $_z1074$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $x1$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $_z1075$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $x1$ and $Hterm$ and $matita_basics_types.None$ applied to $x1$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.None$ applied to $x1$, for all functions $_H2$ from elements $x_615$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_z1075$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $x1$ and $Hterm$ and $matita_basics_types.Some$ applied to $x1$ and $x_615$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.Some$ applied to $x1$ and $x_615$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "postulate option_inv_rect_CProp4 : (x1 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.option x1)) -> (P : (_z1074 : cic.Term univs.Type0 (matita_basics_types.option x1)) -> cic.Univ cic.prop) -> (_H1 : (_z1075 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.None x1))) -> cic.Term cic.prop (P (matita_basics_types.None x1))) -> (_H2 : (x_615 : cic.Term univs.Type0 x1) -> (_z1075 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.Some x1 x_615))) -> cic.Term cic.prop (P (matita_basics_types.Some x1 x_615))) -> cic.Term cic.prop (P Hterm)", "predict": "postulate Option_inv_rect_CProp4 : \n  {x1 : cic.Univ} -> \n  {Hterm : cic.Term} -> \n  {matita_basics_types.option x1} -> \n  (P : (_z1074 : cic.Term) -> matita_basics_types.option x1 -> cic.Univ -> cic.prop) -> \n  (H1 : (_z1075 : cic.Term) -> matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_basics_types.option x1) (Hterm) (matita_basics_types.None x1) -> cic.Term -> cic.prop -> P _z1075 (matita_basics_types.None x1)) -> \n  (H2 : (x_615 : cic.Term) -> x1 -> (_z1075 : cic.Term) -> matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_basics_types.option x1) (Hterm) (matita_basics_types.Some x1) (x_615) -> cic.Term -> cic.prop -> P _z1075 (matita_basics_types.Some x1) x_615) -> \n  cic.Term (cic.prop) (P Hterm) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExp_1_n. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$.\nassistant\n", "label": "Axiom exp_1_n : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_exp.exp (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) .", "predict": "Axiom Exp_1_n : forall (n : cic.Term univs.Type0 matita_arithmetics_nat.nat), cic.Term n cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_exp.exp (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_lstar_r. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_R$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation$ appliqué à $B$. Soit $return_sort$ un élément de $cic.Sort$. Alors pour toutes les fonctions $return_type$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__2$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar_r$ appliqué à $B$ et $_R$ et $__$ et $__1$ et $__2$ à des éléments de $cic.Univ$ de $return_sort$, pour toutes les fonctions $case_lstar_r_O$ des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_arithmetics_nat.O$ et $b$ et $b$ et $matita_arithmetics_lstar.lstar_r_O$ appliqué à $B$ et $_R$ et $b$, pour toutes les fonctions $case_lstar_r_S$ des éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $b1$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $b$ de $cic.Term$ de $univs.Type0$", "label": "postulate match_lstar_r : (B : cic.Univ univs.Type0) -> (_R : cic.Term univs.Type0 (matita_basics_relations.relation B)) -> (return_sort : cic.Sort) -> (return_type : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 B) -> (__2 : cic.Term univs.Type0 B) -> (z : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R __ __1 __2)) -> cic.Univ return_sort) -> (case_lstar_r_O : (b : cic.Term univs.Type0 B) -> cic.Term return_sort (return_type matita_arithmetics_nat.O b b (matita_arithmetics_lstar.lstar_r_O B _R b))) -> (case_lstar_r_S : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R l b1 b)) -> (b2 : cic.Term univs.Type0 B) -> (__1 : cic.Term cic.prop (_R b b2)) -> cic.Term return_sort (return_type (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2 (matita_arithmetics_lstar.lstar_r_S B _R l b1 b __ b2 __1))) -> (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 B) -> (__2 : cic.Term univs.Type0 B) -> (z : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R __ __1 __2)) -> cic.Term return_sort (return_type __ __1 __2 z)", "predict": " et de $B$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $l$ et $b$ et $l$ et $l$ et $b1$ et $b$ et $case_lstar_r_S$ appliqué à $l$ et $b$ et $b$ et $l$ et $l$ et $b1$ et $b$, on a $case_lstar_r_O$ appliqué à $l$ et $b$ et $b$ et $l$ et $l$ et $b1$ et $b$ est égal à $case_lstar_r_S$ appliqué à $l$ et $b$ et $b$ et $l$ et $l$ et $b1$ et $b$. \n\nOutput: \n```agda\npostulate\n  match_lstar_r :\n    {B : univs.Type0}\n    {R : relation B}\n    {return_sort : univs.Type0}\n    {return_type : (__) -> (__) -> (__) -> (__) -> (__) -> (__) -> univs.Type0}\n    {__1 : B}\n    {__2 : B}\n    {z : prop}\n    {lstar_r : lstar_r B R}\n    {__ : (__) -> (__) -> (__) -> (__) -> (__) -> (__) -> univs.Type0}\n    {b : Term univs.Type0 B}\n    {b1 : Term univs.Type0 B}\n    {case_lstar_r_O : (b : Term univs.Type0 B) -> Term return_sort (return_type matita_arithmetics_nat.O b b (lstar_r_O R) b b (case_lstar_r_O R b))}\n    {case_lstar_r_S : (l : nat) (b : Term univs.Type0 B) (b1 : Term univs.Type0 B) -> Term return_sort (return_type l b l (lstar_r_S R l b b1 b) b (case_lstar_r_S l b b1))}\n  _==_ :\n    {B : univs.Type0}\n    {R : relation B}\n    {return_sort : univs.Type0}\n    {return_type : (__) -> (__) -> (__) -> (__) -> (__) -> (__) -> un"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNot_divides_to_gcd_aux. Soient $p$ et $m$ et $n$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $matita_arithmetics_primes.divides$ appliqué à $n$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd_aux$ appliqué à $matita_arithmetics_nat.S$ appliqué à $p$ et $m$ et $n$ et $matita_arithmetics_gcd.gcd_aux$ appliqué à $p$ et $n$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $m$ et $n$.\nassistant\n", "label": "axiom not_divides_to_gcd_aux (p m n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (__1 : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides n m))) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S p) m n) (matita_arithmetics_gcd.gcd_aux p n (matita_arithmetics_div_and_mod.mod m n)))", "predict": "Axiom not_divides_to_gcd_aux : forall (p : cic.Term univs.Type0) (m : matita_arithmetics_nat.nat) (n : matita_arithmetics_nat.nat), forall (x : cic.Term cic.prop matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall (y : cic.Term cic.prop matita_basics_logic.Not (matita_arithmetics_primes.divides n m)), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S p) m n)) (matita_arithmetics_gcd.gcd_aux p n (matita_arithmetics_div_and_mod.mod m n)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSum_inv_rect_CProp2. Soient $x1$ et $x2$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $x1$ et $x2$. Soit $P$ une fonction des éléments $_z1020$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $_H1$ des éléments $x_572$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_z1021$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sum$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.inl$ appliqué à $x1$ et $x2$ et $x_572$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.inl$ appliqué à $x1$ et $x2$ et $x_572$, pour toutes les fonctions $_H2$ des éléments $x_573$ de $cic.Term$ de $univs.Type0$ et de $x2$ et des éléments $_z1021$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sum$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.inr$ appliqué à $x1$ et $x2$ et $x_573$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.inr$ appliqué à $x1$ et $x2$ et $x_5", "label": "Sum_inv_rect_CProp2 : x1 : cic.Univ univs.Type0 -> x2 : cic.Univ univs.Type0 -> Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) -> P : (_z1020 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) -> cic.Univ cic.prop) -> _H1 : (x_572 : cic.Term univs.Type0 x1 -> _z1021 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inl x1 x2 x_572)) -> cic.Term cic.prop (P (matita_basics_types.inl x1 x2 x_572))) -> _H2 : (x_573 : cic.Term univs.Type0 x2 -> _z1021 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inr x1 x2 x_573)) -> cic.Term cic.prop (P (matita_basics_types.inr x1 x2 x_573))) -> cic.Term cic.prop (P Hterm) .", "predict": "73$, il existe une fonction $_H3$ des éléments $_z1021$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sum$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.Sum$ appliqué à $x1$ et $x2$ et $x_572$ et $x_573$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.Sum$ appliqué à $x1$ et $x2$ et $x_572$ et $x_573$. \n\nOutput: \nAxiom Sum_inv_rect_CProp2 : forall (x1 x2 : Univ) (Hterm : Term (univs.Type0) (matita_basics_types.Sum x1 x2)) (P : (z1020 : Term (univs.Type0) (matita_basics_types.Sum x1 x2)) -> Univ -> Prop), (forall (H1 : (x572 : Term (univs.Type0) x1) -> z1021 : Term (cic.prop) -> eq (lift (univs.Type0) (univs.Type2)) (Sum x1 x2) Hterm (inl x1 x2) x572) -> forall (H2 : (x573 : Term (univs.Type0) x2) -> z1021 : Term (cic.prop) -> eq (lift (univs.Type0) (univs.Type2)) (Sum x1 x2) Hterm (inr x1 x2) x573) -> exists (z1021 : Term (cic.prop) -> eq (lift (univs.Type0) (univs.Type2)) (Sum x1 x2) (Sum x1 x2) x572 x573) -> P (inl x1 x2) -> P (inr x1 x2) -> exists (z1021 : Term (c"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_CProp1. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_803$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_Aop$ be a function from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $un", "label": "Aop_rect_CProp1 : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_803 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil) -> cic.Univ cic.prop) -> _H_mk_Aop : (op : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _nill : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> _nilr : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> _assoc : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> x_803 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil) -> cic.Term cic.prop (Q_ x_803) .", "predict": "ivs.Type2$ and $A$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and $a$ and $b$ and $c$ and functions $_assocr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and $b$ and $c$ and $a$ that satisfies the following conditions: $_H_mk_Aop._nill$ is equal to $A$, $_H_mk_Aop._assoc$ is equal to $A$, and $_H_mk_Aop._assocr$ is equal to $A$. Then we can prove that $A$ is true.\nOutput: \nLet A : univs.Type0. Let Nil : univs.Type0 A. Let Q_ : (x : univs.Type0) (A : univs.Type0) (op : A -> Nil -> univs.Type0) -> (matita_basics_lists_list.Aop A Nil) -> univs.Type0 -> univs.Type0. Let H_mk_Aop : (op : (x : univs.Type0) (A : univs.Type0) -> (x1 : univs.Type0) (A : univs.Type0) -> univs.Type0) -> (nill : (a : univs.Type0) (A : univs.Type0) -> univs.Type0) -> (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op Nil a a)) -> (nilr : (a : univs.Type0) (A : univs.Type0) -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a Nil"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDiv_mod_spec_ind_body. Låt $_n$ och $_m$ och $_q$ och $_r$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Q_$ vara en funktion från element $_x_809$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H_div_mod_spec_intro$ från element $x_811$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $_r$ och $_m$ och element $x_810$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $_n$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $_q$ och $_m$ och $_r$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ och $x_811$ och $x_810$, för alla element $x_809$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_809$.\nassistant\n", "label": "Axiom div_mod_spec_ind_body : forall _n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _q : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _r : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall Q_ : ((_x_809 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ cic.prop), forall _H_div_mod_spec_intro : ((x_811 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_810 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term cic.prop (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_811 x_810))), forall x_809 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r), cic.Term cic.prop (Q_ x_809) .", "predict": "Axiom div_mod_spec_ind_body : forall (n : cic.Term univs.Type0) (m : matita_arithmetics_nat.nat) (q : cic.Term univs.Type0) (r : cic.Term univs.Type0), matita_arithmetics_div_and_mod.div_mod_spec n m q r -> forall (H_div_mod_spec_intro : forall (x : cic.Term univs.Type0) (lt : matita_arithmetics_nat.lt r m) (eq : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n) (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q m) r)) -> matita_arithmetics_div_and_mod.div_mod_spec n m q r x lt eq) -> forall (x : cic.Term univs.Type0) -> matita_arithmetics_div_and_mod.div_mod_spec n m q r x -> matita_arithmetics_div_and_mod.div_mod_spec n m q r x."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFst_p_ord_times. Soient $p$ et $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.prime$ appliqué à $p$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $a$, pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $b$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_types.fst$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_ord.p_ord$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $b$ et $p$ et $matita_arithmetics_nat.plus$ appliqué à $matita_basics_types.fst$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_ord.p_ord$ appliqué à $a$ et $p$ et $matita_basics_types.fst$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_ord.p_ord$ appliqué à $b$ et $p$.\nassistant\n", "label": "fst_p_ord_times : p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_primes.prime p) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O a) -> __2 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O b) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_types.fst matita_arithmetics_nat.nat matita_arithmetics_nat.nat (matita_arithmetics_ord.p_ord (matita_arithmetics_nat.times a b) p)) (matita_arithmetics_nat.plus (matita_basics_types.fst matita_arithmetics_nat.nat matita_arithmetics_nat.nat (matita_arithmetics_ord.p_ord a p)) (matita_basics_types.fst matita_arithmetics_nat.nat matita_arithmetics_nat.nat (matita_arithmetics_ord.p_ord b p)))) .", "predict": "Output: \nAxiom Fst_p_ord_times : \nforall p a b : cic.Term univs.Type0 (matita_arithmetics_nat.nat) \nforall (__) : cic.Term cic.prop (matita_arithmetics_primes.prime) p \nforall (__1) : cic.Term cic.prop (matita_arithmetics_nat.lt) matita_arithmetics_nat.O a \nforall (__2) : cic.Term cic.prop (matita_arithmetics_nat.lt) matita_arithmetics_nat.O b, \n(matit_basics_logic.eq) (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matit_basics_types.fst matita_arithmetics_nat.nat matita_arithmetics_nat.nat matita_arithmetics_ord.p_ord (matita_arithmetics_nat.times a b p) (matit_basics_types.fst matita_arithmetics_nat.nat matita_arithmetics_nat.nat matita_arithmetics_ord.p_ord a p) (matit_basics_types.fst matita_arithmetics_nat.nat matita_arithmetics_nat.nat matita_arithmetics_ord.p_ord b p))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_to_div_O. Soient $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $n$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_div_and_mod.div$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.O$.\nassistant\n", "label": "postulate lt_to_div_O : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt n m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.div n m) matita_arithmetics_nat.O)", "predict": "postulate Lt_to_div_O : forall (n m : cic.Term univs.Type0) (lt : matita_arithmetics_nat.lt n m), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.div n m matita_arithmetics_nat.O))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_ind. Låt $_n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla funktioner $Q_$ från element $x_417$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $_x_418$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $_n$ och $x_417$ till element av $cic.Univ$ av $cic.prop$, för alla element $_H_le_n$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $_n$ och $matita_arithmetics_nat.le_n$ applicerat på $_n$, för alla funktioner $_H_le_S$ från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $x_419$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $_n$ och $m$ och element $_x_421$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $m$ och $x_419$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_nat.S$ applicerat på $m$ och $matita_arithmetics_nat.le_S$ applicerat på $_n$ och $m$ och $x_419$, för alla element $x_417$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $x_418$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $_n$ och $x_417$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_417$ och $x_418$.\nassistant\n", "label": "Axiom le_ind : forall _n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall Q_ : ((x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_418 : cic.Term cic.prop (matita_arithmetics_nat.le _n x_417)) -> cic.Univ cic.prop), forall _H_le_n : cic.Term cic.prop (Q_ _n (matita_arithmetics_nat.le_n _n)), forall _H_le_S : ((m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_419 : cic.Term cic.prop (matita_arithmetics_nat.le _n m)) -> (_x_421 : cic.Term cic.prop (Q_ m x_419)) -> cic.Term cic.prop (Q_ (matita_arithmetics_nat.S m) (matita_arithmetics_nat.le_S _n m x_419))), forall x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall x_418 : cic.Term cic.prop (matita_arithmetics_nat.le _n x_417), cic.Term cic.prop (Q_ x_417 x_418) .", "predict": "Axiom le_ind : \n  forall (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (Q : (forall x : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (forall x_418 : cic.Term (cic.prop) (matita_arithmetics_nat.le n x_417)) -> (forall H_le_n : cic.Term (cic.prop) (Q n matita_arithmetics_nat.le_n n)) -> (forall H_le_S : (forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (forall x_419 : cic.Term (cic.prop) (matita_arithmetics_nat.le n m)) -> (forall x_421 : cic.Term (cic.prop) (Q m x_419)) -> (forall x_419 : cic.Term (cic.prop) (Q (matita_arithmetics_nat.S m) (matita_arithmetics_nat.le_S n m x_419)))) -> (forall x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (forall x_418 : cic.Term (cic.prop) (matita_arithmetics_nat.le n x_417)) -> (forall x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (forall x_418 : cic.Term (cic.prop) (matita_arithmetics_nat.le n x_417)) -> (forall x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (forall x_418 : cic.Term (cic.prop) (matita_arithmetics_nat.le n x_417)) -> (forall x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (forall x_418 : cic.Term (cic.prop) (matita_arithmetics_nat.le n x_417)) -> (forall x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (forall x_418 : cic.Term (cic.prop) (matita_arithmetics_nat.le n x_417"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_inv_rect_CProp1. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $x2$ of $cic.Term$ of $univs.Type0$ and $x1$, for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1620$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $matita_arithmetics_bigops.op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1621$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ and $Hterm$ and $matita_arithmetics_bigops.mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $x1$ and", "label": "ACop_inv_rect_CProp1 : x1 : cic.Univ univs.Type0 -> x2 : cic.Term univs.Type0 x1 -> Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2) -> P : (_z1620 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2) -> cic.Univ cic.prop) -> _H1 : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2) -> _comm : (a : cic.Term univs.Type0 x1 -> b : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (matita_arithmetics_bigops.op x1 x2 aop a b) (matita_arithmetics_bigops.op x1 x2 aop b a))) -> _z1621 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop x1 x2)) Hterm (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm)) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) -> cic.Term cic.prop (P Hterm) .", "predict": " $x2$ and $aop$ and $_comm$ and $_z1620$ and $_z1621$ and $Hterm$, we have that $P$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ and $_z1620$ and $_z1621$ and $Hterm$ is equal to $P$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ and $_z1620$ and $_z1621$ and $Hterm$. \n\nOutput: \nACop_inv_rect_CProp1 : \n  forall (x1 : Univ) (x2 : Term) (x1 : Univ) (Hterm : Term) (matita_arithmetics_bigops.ACop x1 x2) (P : _z1620 -> (matita_arithmetics_bigops.ACop x1 x2) -> Univ -> prop) (comm : (aop : Term) -> (a : Term) -> (b : Term) -> (matita_arithmetics_bigops.Aop x1 x2) aop a -> (matita_arithmetics_bigops.Aop x1 x2) aop b -> (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (x1) (matita_arithmetics_bigops.op x1 x2 aop a)) -> (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (x1) (matita_arithmetics_bigops.op x1 x2 aop b)) -> (matita_basics_logic.eq (cic.prop) (P aop a b) (matita_arithmetics_bigops.mk_ACop x1 x2 aop comm)) -> (matita_basics_logic.eq (cic.prop) (P aop a b) (matita_arithmetics_bigops.mk_ACop x1 x2 aop comm)) -> _z1621 -> (matita_basics_logic.eq (cic.prop) (P aop a b) (matita_arithmetics_bigops.mk_ACop x1 x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_Type4. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_863$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type4$. Soit $_H_mk_Aop$ une fonction des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term", "label": "axiom Aop_rect_Type4 (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_863 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ univs.Type4) (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) (x_863 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) : cic.Term univs.Type4 (Q_ x_863)", "predict": "$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nilll$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $op$ appliqué à $_nil$ et $a$ et $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $_nil$ et $b$ et $c$ et des fonctions $_assocr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $_nil$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $_nil$ et $c$. \nOutput: \nAop_rect_Type4 : \n  A : Univ -> Term -> Type0 -> Type0 -> Type0 -> Type4 -> Type0 -> Type0 -> Prop \n  _nil : Term -> Type0 -> A -> Type0 -> Type0 -> Type0 -> Type4 -> Term -> Type0 -> Type2 -> Type0 -> Prop \n  Q_ : (x : Term) -> A -> _nil -> Univ -> Type0 -> Type0 -> Type4 -> Prop \n  H_mk_Aop : (op : Term -> A"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_CProp2. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Alors pour toutes les fonctions $Q_$ des éléments $_x_881$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_Aop$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic", "label": "postulate Aop_rect_CProp2 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_881 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_881 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Term cic.prop (Q_ x_881)", "predict": ".Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_assocr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$, il existe une fonction $Q_$ qui est une fonction $op$ appliquée à $Q_$ et $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q_$ appliquée à $Q"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSame_bigop. Låt $k$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $p1$ och $p2$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Låt $op$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $B$. Låt $f$ och $g$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_bigops.sameF_upto$ applicerat på $k$ och $matita_basics_bool.bool$ och $p1$ och $p2$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_bigops.sameF_p$ applicerat på $k$ och $p1$ och $B$ och $f$ och $g$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $matita_arithmetics_bigops.bigop$ applicerat på $k$ och funktionen som avbildar $i$ som $p1$ applicerat på $i$ och $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $matita_arithmetics_bigops.bigop$ applicerat på $k$ och funktionen som avbildar $i$ som $p2$ applicerat på $i", "label": "axiom same_bigop (k : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p1 p2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (B : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 B) (op : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) (f g : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) (__ : cic.Term cic.prop (matita_arithmetics_bigops.sameF_upto k matita_basics_bool.bool p1 p2)) (__1 : cic.Term cic.prop (matita_arithmetics_bigops.sameF_p k p1 B f g)) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop k (λ i => p1 i) B nil op (λ i => f i)) (matita_arithmetics_bigops.bigop k (λ i => p2 i) B nil op (λ i => g i)))", "predict": "$ och $B$ och $g$ och $op$ och $f$ och $g$ och $matita_basics_logic.eq$ applicerat på $matita_basics_bool.bool$ och $matita_basics_bool.true$ och $matita_basics_bool.false$.\n\nOutput: \ncic.Term prop (univs.Type0) (matita_arithmetics_bigops.sameF_upto k matita_basics_bool.bool p1 p2) = cic.lift univs.Type0 univs.Type2 B (matita_arithmetics_bigops.bigop k (\\i -> p1 i B) nil (\\i -> p2 i B) op (\\i -> f i) (\\i -> matita_arithmetics_bigops.bigop k (\\i -> p2 i B) g op f g) matita_basics_logic.eq matita_basics_bool.true matita_basics_bool.false."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFilter_void. Soit $return_sort$ un élément de $cic.Sort$. Soit $return_type$ une fonction des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.void$ à des éléments de $cic.Univ$ de $return_sort$. Soit $return$ une fonction des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.void$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $z$. Alors pour tous les éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.void$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.\nassistant\n", "label": "Axiom filter_void : forall return_sort : cic.Sort, forall return_type : ((z : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ return_sort), forall return : ((z : cic.Term univs.Type0 matita_basics_types.void) -> cic.Term return_sort (return_type z)), forall z : cic.Term univs.Type0 matita_basics_types.void, cic.Term return_sort (return_type z) .", "predict": "Axiom prop70 : odd 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLstar_inv_S_dx. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $R$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $B$. Då för alla element $l$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $b1$ och $b2$ av $cic.Term$ av $univs.Type0$ och $B$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $R$ och $matita_arithmetics_nat.plus$ applicerat på $l$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $b1$ och $b2$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.ex2$ applicerat på $B$ och funktionen som avbildar $b$ som $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $R$ och $l$ och $b1$ och $b$ och funktionen som avbildar $b$ som $R$ applicerat på $b$ och $b2$.\nassistant\n", "label": "Axiom lstar_inv_S_dx : forall B : cic.Univ univs.Type0, forall R : cic.Term univs.Type0 (matita_basics_relations.relation B), forall l : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b1 : cic.Term univs.Type0 B, forall b2 : cic.Term univs.Type0 B, forall __ : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2), cic.Term cic.prop (matita_basics_logic.ex2 B (fun b => matita_arithmetics_lstar.lstar B R l b1 b) (fun b => R b b2)) .", "predict": "Axiom Lstar_inv_S_dx : forall (univs : Type0) (B : univs) (R : relation B) (l : Term univs Type0) (nat : nat) (b1 b2 : Term univs Type0) (__) : prop (lstar B R (plus l (S O) b1 b2) B (ex2 B (lstar B R l b1 b) (lstar B R l b2)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_rect_CProp2. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $_f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $Q_$ des éléments $_x_658$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_DPair$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $_f$ appliqué à $dpi1$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $A$ et $_f$ et $dpi1$ et $_dpi2$, pour tous les éléments $x_658$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_658$.\nassistant\n", "label": "DPair_rect_CProp2 : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) -> Q_ : (_x_658 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Univ cic.prop) -> _H_mk_DPair : (dpi1 : cic.Term univs.Type0 A -> _dpi2 : cic.Term univs.Type0 (_f dpi1) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> x_658 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Term cic.prop (Q_ x_658) .", "predict": "DPair_rect_CProp2 : \nforall (A : cic.Univ) (f : forall ($__: cic.Term) (a : A), cic.Univ) (Q_ : forall (x_658 : cic.Term) (d : DPair A f), cic.prop) (H_mk_DPair : forall (dpi1 : cic.Term) (a : A) (dpi2 : cic.Term) (f_ : f dpi1), cic.Term Q_ (mk_DPair A f dpi1 dpi2)) (x_658 : cic.Term) (d : DPair A f), cic.Term (Q_ x_658)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDiv_mod_spec_rect_Type4. Soient $_n$ et $_m$ et $_q$ et $_r$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $Q_$ une fonction des éléments $_x_813$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $_n$ et $_m$ et $_q$ et $_r$ à des éléments de $cic.Univ$ de $univs.Type4$. Soit $_H_div_mod_spec_intro$ une fonction des éléments $x_815$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $_r$ et $_m$ et des éléments $x_814$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $_n$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $_q$ et $_m$ et $_r$ à des éléments de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_arithmetics_div_and_mod.div_mod_spec_intro$ appliqué à $_n$ et $_m$ et $_q$ et $_r$ et $x_815$ et $x_814$. Alors pour tous les éléments $x_813$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $_n$ et $_m$ et $_q$ et $_r$, $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_813$.\nassistant\n", "label": "axiom div_mod_spec_rect_Type4 (_n _m _q _r : cic.Term univs.Type0 matita_arithmetics_nat.nat) (Q_ : (_x_813 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ univs.Type4) (_H_div_mod_spec_intro : (x_815 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_814 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_815 x_814))) (x_813 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) : cic.Term univs.Type4 (Q_ x_813)", "predict": "postulate div_mod_spec_rect_Type4 : \n  ∀ n m q r : cic.Term univs.Type0 \n  × matita_arithmetics_nat.nat \n  × cic.Term univs.Type0 \n  × matita_arithmetics_nat.nat \n  × matita_arithmetics_div_and_mod.div_mod_spec n m q r \n  × ∀ x813 : cic.Term univs.Type4 \n  × ∀ x815 : cic.Term univs.Type4 \n  × ∀ x814 : cic.Term univs.Type4 \n  × even x815 \n  × ∀ x : cic.Term univs.Type4 \n  × ∀ H_div_mod_spec_intro : \n      ∀ x813 : cic.Term univs.Type4 \n      × matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n) \n      (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q m) r) \n      × ∀ x814 : cic.Term univs.Type4 \n      × ∀ x813 : cic.Term univs.Type4 \n      × ∀ x815 : cic.Term univs.Type4 \n      × ∀ x : cic.Term univs.Type4 \n      × Q x813 x815 x814 \n      → Q x x815 x814 \n  → Q x813 x815 x814."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nCongruent_ab_lt. Let $m$ and $n$ and $a$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Then for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $x$ to $matita_basics_logic.And$ applied to $matita_basics_logic.And$ applied to $matita_arithmetics_congruence.congruent$ applied to $x$ and $a$ and $m$ and $matita_arithmetics_congruence.congruent$ applied to $x$ and $b$ and $n$ and $matita_arithmetics_nat.lt$ applied to $x$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$.\nassistant\n", "label": "Axiom congruent_ab_lt : forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), forall __2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)), cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (fun x => matita_basics_logic.And (matita_basics_logic.And (matita_arithmetics_congruence.congruent x a m) (matita_arithmetics_congruence.congruent x b n)) (matita_arithmetics_nat.lt x (matita_arithmetics_nat.times m n)))) .", "predict": "Axiom Congruent_ab_lt : forall (m n a b : cic.Term univs.Type0 matita_arithmetics_nat.nat), (m n : matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> forall (_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat), (m : matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> forall (_2 : cic.Term univs.Type0 matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_gcd.gcd n m (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (cic.Term univs.Type0 matita_basics_logic.ex matita_arithmetics_nat.nat (fun x => matita_basics_logic.And (matita_basics_logic.And (matita_arithmetics_congruence.congruent x a m) (matita_arithmetics_congruence.congruent x b n)) (matita_arithmetics_nat.lt x (matita_arithmetics_nat.times m n))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nList_rect_CProp0. For all elements $_A$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_776$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$, for all elements $_H_nil$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_lists_list.nil$ applied to $_A$, for all functions $_H_cons$ from elements $x_778$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $x_777$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ and elements $_x_780$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $x_777$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_lists_list.cons$ applied to $_A$ and $x_778$ and $x_777$, for all elements $x_776$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_776$.\nassistant\n", "label": "list_rect_CProp0 : _A : cic.Univ univs.Type0 -> Q_ : (_x_776 : cic.Term univs.Type0 (matita_basics_lists_list.list _A) -> cic.Univ cic.prop) -> _H_nil : cic.Term cic.prop (Q_ (matita_basics_lists_list.nil _A)) -> _H_cons : (x_778 : cic.Term univs.Type0 _A -> x_777 : cic.Term univs.Type0 (matita_basics_lists_list.list _A) -> _x_780 : cic.Term cic.prop (Q_ x_777) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.cons _A x_778 x_777))) -> x_776 : cic.Term univs.Type0 (matita_basics_lists_list.list _A) -> cic.Term cic.prop (Q_ x_776) .", "predict": "Output: \nforall A : univ, (forall x_776 : term, list A -> univ -> prop, x_776, (forall x_778 : term, A, x_777 : term, A, list A, prop, Q_ x_777, Q_ (cons A x_778 x_777)) -> (forall x_776 : term, list A, term) -> prop, prop, Q_ nil A, Q_ (cons A x_778 x_777)) -> (forall x_776 : term, list A, term) -> prop, Axiom List_rect_CProp0 : (odd 1) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_sigma_p. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla funktioner $p1$ och $p2$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, för alla funktioner $g1$ och $g2$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla funktioner $__$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $p1$ applicerat på $i$ och $matita_basics_bool.true$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $p2$ applicerat på $i$ och $matita_basics_bool.true$, för alla funktioner $__1$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type", "label": "axiom lt_sigma_p (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p1 p2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (g1 g2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p2 i) matita_basics_bool.true)) (__1 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i n)) -> (__2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_arithmetics_nat.le (", "predict": "2$ och $matita_basics_bool.bool$ och $g1$ applicerat på $i$ och $matita_basics_bool.true$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $g2$ applicerat på $i$ och $matita_basics_bool.true$, det finns en funktion $f$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ så att $p1$ applicerat på $i$ och $matita_basics_bool.true$ är lika med $p2$ applicerat på $i$ och $matita_basics_bool.true$ och $g1$ applicerat på $i$ och $matita_basics_bool.true$ är lika med $g2$ applicerat på $i$ och $matita_basics_bool.true$ och $f$ applicerat på $i$ och $n$ är lika med $f$ applicerat på $i$ och $n$.\n\nOutput: \nAxiom lt_sigma_p : \n  forall (n : Term univs.Type0 nat) (p1 p2 : (Term univs.Type0 nat -> Term univs.Type0 bool) -> Term univs.Type0 prop) (g1 g2 : (Term univs.Type0 nat -> Term univs.Type0 nat) -> Term univs.Type0 prop) (i : Term univs.Type0 nat) (p1_1 : prop) (p2_1 : prop) (g1_1 : bool) (g2_1 : bool) (eq_p1 : (lift univs.Type0 univs.Type2 bool) (p1 i matita_basics_bool.true) = p2 i matita_basics_bool.true) (eq_g1 : (lift un"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_15692. Let $m$ and $n$ and $a$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Let $posm$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$. Let $pnm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Let $c$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $d$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $", "label": "axiom let_clause_15692 (m n a b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (λ d => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) (d : cic.Term univs.Type0 matita", "predict": "matita_arithmetics_nat.times$ applied to $c$ and $m$ and $matita_arithmetics_nat.times$ applied to $d$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, the proposition $_clearme$ is true. \nOutput: \nLet_clause_15692 : \n  m : univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term -> cic.prop -> matita_arithmetics_nat.lt -> cic.Term -> cic.prop -> matita_basics_logic.eq -> cic.Term -> univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term -> cic.prop -> matita_basics_logic.ex -> cic.Term -> matita_basics_logic.Or -> cic.Term -> univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term -> cic.prop -> matita_basics_logic.eq -> cic.Term -> univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term -> cic.prop -> matita_basics_logic.eq -> cic.Term -> univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term -> cic.prop -> matita_basics_logic.eq -> cic.Term -> univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term -> cic.prop -> matita_basics_logic.eq -> cic.Term -> univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term -> cic.prop -> matita_basics_logic.eq -> cic.Term -> univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term -> cic.prop -> matita_basics_logic.eq -> cic.Term -> univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term -> cic.prop -> matita_basics_logic.eq -> cic.Term -> univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term -> cic.prop -> matita_basics_logic.eq -> cic.Term -> univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term -> cic.prop -> matita_basics_logic.eq -> cic.Term -> univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term -> cic.prop -> matita_basics_logic.eq -> cic.Term -> univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term -> cic.prop -> matita_basics_logic.eq -> cic.Term -> univ"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDiv_mod_spec_rect_Type1_body. Soient $_n$ et $_m$ et $_q$ et $_r$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $Q_$ une fonction des éléments $_x_829$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $_n$ et $_m$ et $_q$ et $_r$ à des éléments de $cic.Univ$ de $univs.Type1$. Soit $_H_div_mod_spec_intro$ une fonction des éléments $x_831$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $_r$ et $_m$ et des éléments $x_830$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $_n$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $_q$ et $_m$ et $_r$ à des éléments de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_arithmetics_div_and_mod.div_mod_spec_intro$ appliqué à $_n$ et $_m$ et $_q$ et $_r$ et $x_831$ et $x_830$. Soit $x_829$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $_n$ et $_m$ et $_q$ et $_r$. Alors $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_829$.\nassistant\n", "label": "postulate div_mod_spec_rect_Type1_body : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Q_ : (_x_829 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ univs.Type1) -> (_H_div_mod_spec_intro : (x_831 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_830 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_831 x_830))) -> (x_829 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Term univs.Type1 (Q_ x_829)", "predict": "postulate Div_mod_spec_rect_Type1_body : (n : Term univs.Type0) (m : Term univs.Type0) (q : Term univs.Type0) (r : Term univs.Type0) -> (Q : (x : Term univs.Type0) -> prop) -> (div_mod_spec : div_mod_spec n m q r) -> (H_div_mod_spec_intro : (x : Term univs.Type0) -> prop -> lt r m -> (x' : Term univs.Type0) -> prop -> eq (lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n) (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q m) r) -> Q x) -> (x : Term univs.Type0) -> (div_mod_spec_rect n m q r Q div_mod_spec H_div_mod_spec_intro) -> (univs.Type1 -> prop) -> (Q x)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAnd_inv_rect_CProp1. Låt $x1$ och $x2$ vara element av $cic.Univ$ av $cic.prop$. Låt $Hterm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$. Då för alla funktioner $P$ från element $_z377$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $x_164$ av $cic.Term$ av $cic.prop$ och $x1$ och element $x_163$ av $cic.Term$ av $cic.prop$ och $x2$ och element $_z378$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_164$ och $x_163$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_164$ och $x_163$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "And_inv_rect_CProp1 : x1 : cic.Univ cic.prop -> x2 : cic.Univ cic.prop -> Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2) -> P : (_z377 : cic.Term cic.prop (matita_basics_logic.And x1 x2) -> cic.Univ cic.prop) -> _H1 : (x_164 : cic.Term cic.prop x1 -> x_163 : cic.Term cic.prop x2 -> _z378 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_164 x_163)) -> cic.Term cic.prop (P (matita_basics_logic.conj x1 x2 x_164 x_163))) -> cic.Term cic.prop (P Hterm) .", "predict": "And_inv_rect_CProp1 : ∀ (x1 x2 : cic.Univ) (Hterm : cic.Term (cic.prop)) (and : matita_basics_logic.And x1 x2), (∀ (P : cic.Term (cic.prop) → matita_basics_logic.And x1 x2 → cic.Univ (cic.prop)) (H1 : cic.Term (cic.prop) → x1) (H2 : cic.Term (cic.prop) → x2), P (matita_basics_logic.conj x1 x2 H1 H2) Hterm) → cic.Term (cic.prop) P Hterm"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLop_Strue. Soient $m$ et $i$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $acc$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_chebyshev_bertrand256.list_divides$ appliqué à $acc$ et $i$ et $matita_basics_bool.true$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_chebyshev_bertrand256.lprim$ appliqué à $matita_arithmetics_nat.S$ appliqué à $m$ et $i$ et $acc$ et $matita_arithmetics_chebyshev_bertrand256.lprim$ appliqué à $m$ et $matita_arithmetics_nat.S$ appliqué à $i$ et $acc$.\nassistant\n", "label": "axiom lop_Strue (m i : cic.Term univs.Type0 matita_arithmetics_nat.nat) (acc : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_chebyshev_bertrand256.list_divides acc i) matita_basics_bool.true)) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) (matita_arithmetics_chebyshev_bertrand256.lprim (matita_arithmetics_nat.S m) i acc) (matita_arithmetics_chebyshev_bertrand256.lprim m (matita_arithmetics_nat.S i) acc))", "predict": "Axiom Lop_Strue : \n  forall (m : Term univs.Type0 (nat matita_arithmetics_nat.nat)) (i : Term univs.Type0 (nat matita_arithmetics_nat.nat)) (acc : Term univs.Type0 (list (nat matita_arithmetics_nat.nat))) (prop : Term cic.prop) (eq : Term (cic.lift (univs.Type0) (univs.Type2) (bool matita_basics_bool.bool) (list_divides (acc i true)))) (lprim_m : Term (nat matita_arithmetics_nat.nat)) (lprim_i : Term (nat matita_arithmetics_nat.nat)) (lprim_acc : Term (list (nat matita_arithmetics_nat.nat))) (lprim_m_S : Term (nat matita_arithmetics_nat.nat)) (lprim_i_S : Term (nat matita_arithmetics_nat.nat)) (lprim_acc_S : Term (list (nat matita_arithmetics_nat.nat))), prop eq (lprim_m i acc) (lprim_m_S i_S acc_S)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1033. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $posn$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $x2515$ et $x2516$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2515$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $x2516$ et $matita_arithmetics_div_and_mod.div$ appliqué à $x2515$ et $x2516$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $x2515$ et $x2516$.\nassistant\n", "label": "axiom let_clause_1033 (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (x2515 x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)))", "predict": "Axiom let_clause_1033 : forall (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop matita_arithmetics_nat.lt matita_arithmetics_nat.O n) (x2515 x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat x2515) (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nPrimes_below. Soit $_l$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $matita_arithmetics_nat.nat$. Soit $_n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Univ$ tient pour $cic.prop$.\nassistant\n", "label": "axiom primes_below (_l : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Univ cic.prop", "predict": "Output: Axiom Primes_below : forall l : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat), forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Univ (cic.prop)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_rect_CProp0_body. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Let $_x$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $Q_$ be a function from elements $x_37$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $_x_38$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_37$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_refl$ be an element of $cic.Term$ of $cic.prop$ and $Q_$ applied to $_x$ and $matita_basics_logic.refl$ applied to $A$ and $_x$. Then for all elements $x_37$ of $cic.Term$ of $univs.Type2$ and $A$, for all elements $x_38$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_37$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_37$ and $x_38$.\nassistant\n", "label": "postulate eq_rect_CProp0_body : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_37 : cic.Term univs.Type2 A) -> (_x_38 : cic.Term cic.prop (matita_basics_logic.eq A _x x_37)) -> cic.Univ cic.prop) -> (_H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x))) -> (x_37 : cic.Term univs.Type2 A) -> (x_38 : cic.Term cic.prop (matita_basics_logic.eq A _x x_37)) -> cic.Term cic.prop (Q_ x_37 x_38)", "predict": "postulate Eq_rect_CProp0_body : {univs : Type} -> {A : univs} -> {x : Term univs} -> (x : Term univs) -> (Q_ : (x37 : Term univs) -> (A : Term univs) -> (x : Term univs) -> Prop) -> (H_refl : (x : Term univs) -> eq univs A x) -> {x37 : Term univs} -> {x38 : Prop univs (eq univs A x)} -> Prop univs (Q_ x37 A x)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSum_rect_CProp4_body. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_556$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_inl$ des éléments $x_557$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.inl$ appliqué à $_A$ et $_B$ et $x_557$, pour toutes les fonctions $_H_inr$ des éléments $x_558$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.inr$ appliqué à $_A$ et $_B$ et $x_558$, pour tous les éléments $x_556$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_556$.\nassistant\n", "label": "Sum_rect_CProp4_body : _A : cic.Univ univs.Type0 -> _B : cic.Univ univs.Type0 -> Q_ : (_x_556 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) -> cic.Univ cic.prop) -> _H_inl : (x_557 : cic.Term univs.Type0 _A -> cic.Term cic.prop (Q_ (matita_basics_types.inl _A _B x_557))) -> _H_inr : (x_558 : cic.Term univs.Type0 _B -> cic.Term cic.prop (Q_ (matita_basics_types.inr _A _B x_558))) -> x_556 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) -> cic.Term cic.prop (Q_ x_556) .", "predict": "Axiom Sum_rect_CProp4_body : forall (univs : Type) (A B : Univ) (Q : forall x : Term univs.Type0, (Sum A B) -> Univ -> prop -> Q (inl A x) -> Q (inr B x)) (H_inl : forall x : Term univs.Type0, A -> Term univs.Type0 -> prop -> Q (inl A x) -> Q x) (H_inr : forall x : Term univs.Type0, B -> Term univs.Type0 -> prop -> Q (inr B x) -> Q x), forall x : Term univs.Type0, (Sum A B) -> prop -> Q x."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nComm. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $xxx$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $nil$. Then for all elements $a$ and $b$ of $cic.Term$ of $univs.Type0$ and $A$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $nil$ and $matita_arithmetics_bigops.aop$ applied to $A$ and $nil$ and $xxx$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $nil$ and $matita_arithmetics_bigops.aop$ applied to $A$ and $nil$ and $xxx$ and $b$ and $a$.\nassistant\n", "label": "Axiom comm : forall A : cic.Univ univs.Type0, forall nil : cic.Term univs.Type0 A, forall xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A nil), forall a : cic.Term univs.Type0 A, forall b : cic.Term univs.Type0 A, cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A nil (matita_arithmetics_bigops.aop A nil xxx) a b) (matita_arithmetics_bigops.op A nil (matita_arithmetics_bigops.aop A nil xxx) b a)) .", "predict": "Axiom comm_example : forall (A : cic.Univ) (nil : Term) (xxx : Term (matita_arithmetics_bigops.ACop A nil)) (a b : Term) (op : (matita_arithmetics_bigops.op A nil (matita_arithmetics_bigops.aop A nil xxx))) (aop : (matita_arithmetics_bigops.op A nil (matita_arithmetics_bigops.aop A nil xxx))) (eq : (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A nil (matita_arithmetics_bigops.aop A nil xxx) a b))) (eq2 : (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A nil (matita_arithmetics_bigops.aop A nil xxx) b a))), eq = eq2."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_n_Sn. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $n$.\nassistant\n", "label": "Axiom le_n_Sn : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term cic.prop (matita_arithmetics_nat.le n (matita_arithmetics_nat.S n)) .", "predict": "Axiom Le_n_Sn : forall (n : Term univs.Type0) (matita_arithmetics_nat:nat), prop (le n (S n))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_m1. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $n$ och $_x_365$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $univs.Type0$ och $matita_arithmetics_nat.nat$.\nassistant\n", "label": "Axiom let_m1 : forall f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term univs.Type0 matita_arithmetics_nat.nat .", "predict": "Axiom let_m1 : \n  forall (f : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool), \n  forall (n : cic.Term univs.Type0 matita_arithmetics_nat.nat), \n  forall (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat), \n  forall (b : cic.Term univs.Type0 matita_arithmetics_nat.nat), \n  f n _x_365 b."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAnd_ind. Pour tous les éléments $_A$ et $_B$ de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $Q_$ des éléments $_x_118$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_conj$ des éléments $x_120$ de $cic.Term$ de $cic.prop$ et de $_A$ et des éléments $x_119$ de $cic.Term$ de $cic.prop$ et de $_B$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_logic.conj$ appliqué à $_A$ et $_B$ et $x_120$ et $x_119$, pour tous les éléments $x_118$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_118$.\nassistant\n", "label": "Axiom And_ind : forall _A : cic.Univ cic.prop, forall _B : cic.Univ cic.prop, forall Q_ : ((_x_118 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ cic.prop), forall _H_conj : ((x_120 : cic.Term cic.prop _A) -> (x_119 : cic.Term cic.prop _B) -> cic.Term cic.prop (Q_ (matita_basics_logic.conj _A _B x_120 x_119))), forall x_118 : cic.Term cic.prop (matita_basics_logic.And _A _B), cic.Term cic.prop (Q_ x_118) .", "predict": "Axiom And_ind : forall (A B : Univ) (prop : A -> B -> Prop), (forall x118 : Term, prop x118) -> (forall x119 x120 : Term, And A B -> prop x119 -> prop x120 -> prop (And A B)) -> forall x118 : Term, And A B -> prop x118."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDistributive_times_plus. $cic.Term$ tient pour $cic.prop$ et $matita_basics_relations.distributive$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.times$ et $matita_arithmetics_nat.plus$.\nassistant\n", "label": "distributive_times_plus : cic.Term cic.prop (matita_basics_relations.distributive matita_arithmetics_nat.nat matita_arithmetics_nat.times matita_arithmetics_nat.plus) .", "predict": "Output: Axiom distributive_times_plus : forall (c : Prop) (a b : nat), c (a + b) -> c (times c a) + c (times c b)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNot_found_max_spec. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all functions $__$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $i$ and $matita_basics_bool.false$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_minimization.max_spec$ applied to $n$ and $f$ and $matita_arithmetics_nat.O$.\nassistant\n", "label": "not_found_max_spec : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> __ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt i n) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)) -> cic.Term cic.prop (matita_arithmetics_minimization.max_spec n f matita_arithmetics_nat.O) .", "predict": "Output: Not_found_max_spec : \n  forall (n : Term univs.Type0) (matita_arithmetics_nat:nat), \n  forall (f : (Term univs.Type0 * matita_arithmetics_nat:nat) -> Term univs.Type0 * matita_basics_bool.bool), \n  forall (i : Term univs.Type0 * matita_arithmetics_nat:nat) (__) (cic.prop * matita_arithmetics_nat:lt i n), \n  (Term univs.Type0 * matita_basics_logic:eq (cic.lift (univs.Type0,univs.Type2,matita_basics_bool.bool,f i matita_basics_bool.false)) (Term univs.Type0 * matita_basics_logic:eq (cic.lift (univs.Type0,univs.Type2,matita_basics_bool.bool,f i matita_basics_bool.false)) (Term univs.Type0 * matita_basics_logic:eq (cic.lift (univs.Type0,univs.Type2,matita_basics_bool.bool,f i matita_basics_bool.false)) (Term univs.Type0 * matita_basics_logic:eq (cic.lift (univs.Type0,univs.Type2,matita_basics_bool.bool,f i matita_basics_bool.false)) (Term univs.Type0 * matita_basics_logic:eq (cic.lift (univs.Type0,univs.Type2,matita_basics_bool.bool,f i matita_basics_bool.false)) (Term univs.Type0 * matita_basics_logic:eq (cic.lift (univs.Type0,univs.Type2,matita_basics_bool.bool,f i matita_basics_bool.false)) (Term univs.Type0 * matita_basics_logic:eq (cic.lift (univs.Type0,univs.Type2,matita_basics_bool.bool,f i matita_basics_bool.false)) (Term univs.Type0 * matita_basics_logic:eq (cic.lift (univs.Type0,univs.Type2,matita_basics_bool.bool,f i matita_basics_bool.false)) (Term univs.Type0 * matita_basics_logic:eq (cic.lift (univs.Type0,univs.Type2,matita_b"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMin_not_exists. Pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, pour tous les éléments $n$ et $b$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour toutes les fonctions $__$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $b$ et $i$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $matita_arithmetics_nat.plus$ appliqué à $n$ et $b$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $i$ et $matita_basics_bool.false$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_minimization.min$ appliqué à $n$ et $b$ et $f$ et $matita_arithmetics_nat.plus$ appliqué à $n$ et $b$.\nassistant\n", "label": "Axiom min_not_exists : forall f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : ((i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le b i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_nat.plus n b))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.min n b f) (matita_arithmetics_nat.plus n b)) .", "predict": "Output: \nDefinition min_not_exists : forall (f : univs.Type0 -> matita_arithmetics_nat.nat -> univs.Type0) (c : univs.Type0 -> matita_basics_bool.bool), forall (n b : matita_arithmetics_nat.nat), forall (i : matita_arithmetics_nat.nat -> univs.Type0 -> matita_arithmetics_nat.le b i -> univs.Type0 -> matita_arithmetics_nat.lt i n -> univs.Type0), (forall (i : matita_arithmetics_nat.nat), (cic.Term (cic.prop)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat matita_basics_bool.bool) f i matita_basics_bool.false)) (cic.Term (cic.prop)) (matita_arithmetics_minimization.min n b f (matita_arithmetics_nat.plus n b)) = (cic.Term (cic.prop)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat matita_basics_bool.bool) c (matita_arithmetics_minimization.min n b) (matita_arithmetics_nat.plus n b))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_inv_rect_CProp4. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be an element of $cic.Term$ of $univs.Type0$ and $x1$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $x1$ and $x2$. Then for all functions $P$ from elements $_z1734$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $sum$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ and functions $prod$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $", "label": "Dop_inv_rect_CProp4 : x1 : cic.Univ univs.Type0 -> x2 : cic.Term univs.Type0 x1 -> Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2) -> P : (_z1734 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2) -> cic.Univ cic.prop) -> _H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2) -> prod : (__ : cic.Term univs.Type0 x1 -> __1 : cic.Term univs.Type0 x1 -> cic.Term univs.Type0 x1) -> _null : (a : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> _distr : (a : cic.Term univs.Type0 x1 -> b : cic.Term univs.Type0 x1 -> c : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> _z1735 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr)) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term cic.prop (P Hterm) .", "predict": "x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_plus$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_zero$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $a$ and functions $_add$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_mul$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_one$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $a$ and functions $_succ$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSquare_double. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $n$ et $matita_arithmetics_nat.S$ appliqué à $n$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $n$.\nassistant\n", "label": "square_double : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S n)) (matita_arithmetics_nat.times (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) n)) .", "predict": "Axiom Square_double : forall (n : Term univs.Type0 nat), (forall ($__$ : Term prop lt (S (S O) n) (S n)), (times (times (S (S O)) n) (S n) <= times (S (S O)) (times (S (S O)) (times (S (S O)) O n) n)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAnd_rect_Type3. Let $_A$ and $_B$ be elements of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_130$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $univs.Type3$. Then for all functions $_H_conj$ from elements $x_132$ of $cic.Term$ of $cic.prop$ and $_A$ and elements $x_131$ of $cic.Term$ of $cic.prop$ and $_B$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_logic.conj$ applied to $_A$ and $_B$ and $x_132$ and $x_131$, for all elements $x_130$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $_A$ and $_B$, $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_130$.\nassistant\n", "label": "And_rect_Type3 : _A : cic.Univ cic.prop -> _B : cic.Univ cic.prop -> Q_ : (_x_130 : cic.Term cic.prop (matita_basics_logic.And _A _B) -> cic.Univ univs.Type3) -> _H_conj : (x_132 : cic.Term cic.prop _A -> x_131 : cic.Term cic.prop _B -> cic.Term univs.Type3 (Q_ (matita_basics_logic.conj _A _B x_132 x_131))) -> x_130 : cic.Term cic.prop (matita_basics_logic.And _A _B) -> cic.Term univs.Type3 (Q_ x_130) .", "predict": "Output: \nAxiom And_rect_Type3 : forall (A : Univ) (B : Univ) (Q_ : (x_130 : Term) -> And A B -> Univ) (H_conj : (x_132 : Term) -> A -> (x_131 : Term) -> B -> Type3 -> Term) (conj_AB : And A B) (x_130 : Term), Term -> Type3 -> Q_ x_130 (And A B) -> Term."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExtract_pair. Let $A$ and $B$ and $C$ and $D$ be elements of $cic.Univ$ of $univs.Type0$. Let $u$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $A$ and $B$. Let $Q$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $C$ and $D$. Then for all elements $x$ of $cic.Term$ of $univs.Type0$ and $C$, for all elements $y$ of $cic.Term$ of $univs.Type0$ and $D$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $C$ and $D$ and $matita_basics_types.match_Prod$ applied to $A$ and $B$ and $univs.Type0$ and the function that maps $__$ to $matita_basics_types.Prod$ applied to $C$ and $D$ and the function that maps $a$ and $b$ to $Q$ applied to $a$ and $b$ and $u$ and $matita_basics_types.mk_Prod$ applied to $C$ and $D$ and $x$ and $y$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.ex$ applied to $A$ and the function that maps $a$ to $matita_basics_logic.ex$ applied to $B$ and the function that maps $b$ to $matita_basics_logic.And$ applied to $matita_basics", "label": "extract_pair : A : cic.Univ univs.Type0 -> B : cic.Univ univs.Type0 -> C : cic.Univ univs.Type0 -> D : cic.Univ univs.Type0 -> u : cic.Term univs.Type0 (matita_basics_types.Prod A B) -> Q : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 B -> cic.Term univs.Type0 (matita_basics_types.Prod C D)) -> x : cic.Term univs.Type0 C -> y : cic.Term univs.Type0 D -> __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod C D)) (matita_basics_types.match_Prod A B univs.Type0 (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B) => matita_basics_types.Prod C D) (a : cic.Term univs.Type0 A => b : cic.Term univs.Type0 B => Q a b) u) (matita_basics_types.mk_Prod C D x y)) -> cic.Term cic.prop (matita_basics_logic.ex A (a : cic.Term univs.Type0 A => matita_basics_logic.ex B (b : cic.Term univs.Type0 B => matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B)) (matita_basics_types.mk_Prod A B a b) u) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod C D)) (Q a b) (matita_basics_types.mk_Prod C D x y))))) .", "predict": "_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $C$ and $D$ and $matita_basics_types.match_Prod$ applied to $A$ and $B$ and $univs.Type0$ and $Q$ applied to $a$ and $b$ and $u$ and $matita_basics_types.mk_Prod$ applied to $C$ and $D$ and $x$ and $y$ and $cic.Term$ applied to $cic.prop$ and $matita_basics_logic.imp$ applied to $A$ and $B$ and $C$ and $D$ and $matita_basics_logic.And$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $C$ and $D$ and $matita_basics_types.match_Prod$ applied to $A$ and $B$ and $univs.Type0$ and $Q$ applied to $a$ and $b$ and $u$ and $matita_basics_types.mk_Prod$ applied to $C$ and $D$ and $x$ and $y$ and $cic.Term$ applied to $cic.prop$ and $matita_basics_logic.imp$ applied to $A$ and $B$ and $C$ and $D$ and $matita_basics_logic.And$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $C$ and $D$ and $matita_basics_types.match_Prod$ applied to $A$ and $B$ and $univs.Type0$ and $Q$ applied to $a$ and $b$ and $u$ and $matita_basics_types.mk_Prod$ applied to $C$ and $D$ and $x$ and $y$ and $cic.Term$ applied to $cic.prop$ and $matita_basics_logic.imp$ applied to $A$ and $B$ and $C$ and $D$ and $matita_basics"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_rect_CProp1. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_937$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_range$ be a function from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$. Then for all elements $x_937$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_937$.\nassistant\n", "label": "postulate range_rect_CProp1 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_937 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ cic.prop) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_937 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term cic.prop (Q_ x_937)", "predict": "postulate Range_rect_CProp1 : \n  ∀ {A : universes.univ} \n  → (Q_ : ∀ x_937 : terms.term universes.Type0 → matita_arithmetics_bigops.range A → universes.univ → universes.prop) \n  → (∀ enum : ∀ __ : terms.term universes.Type0 → nat → terms.term universes.Type0 → ∀ upto : terms.term universes.Type0 → nat → (filter : ∀ __ : terms.term universes.Type0 → nat → bool → terms.term universes.Type0) → universes.term) \n  → (∀ x_937 : terms.term universes.Type0 → matita_arithmetics_bigops.range A → universes.term) \n  → (∀ x_937 : terms.term universes.Type0 → matita_arithmetics_bigops.range A) \n  → universes.term."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBigop_commute. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $p11$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $p12$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $p21$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $p22$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Låt $op$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $B$ och $nil$. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $univs", "label": "bigop_commute : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p11 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> p12 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> p21 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> p22 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> B : cic.Univ univs.Type0 -> nil : cic.Term univs.Type0 B -> op : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil) -> f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 B) -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics", "predict": ".Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $x$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $y$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $res$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $p13$ vara en proposition som säger att om $p11(x)$ är sant och $p12(x,y)$ är sant, så är $p21(y)$ sant och $p22(x,y)$ är sant. Låt $p14$ vara en proposition som säger att om $p11(y)$ är sant och $p12(x,y)$ är sant, så är $p21(x)$ sant och $p22(x,y)$ är sant. Låt $p23$ vara en proposition som säger att om $p11(x)$ är sant och $p21(y)$ är sant, så är $p12(x,y)$ sant. Låt $p24$ vara en proposition som säger att om $p11(y)$ är sant och $p21(x)$ är sant, så är $p12(x,y)$ sant. Låt $p31$ vara en proposition som säger att om $p11(x)$ är sant och $p12(x,y)$ är sant, så är $p21(y)$ sant och $p22(x,y)$ är sant. Låt $p32$ vara en proposition som säger att om $p11(y)$ är sant och $p12(x,y)$ är sant, så är $p21(x)$ sant och $p22(x,y)$ är sant. Låt $p41$ vara en proposition som säger att om $p11(x)$ är sant och $p21(y)$ är sant, så är $p12(x,y)$ sant. Låt $p42$ vara en proposition som säger att om"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nUnit_rect_Type3_body. Let $Q_$ be a function from elements $_x_501$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$ to elements of $cic.Univ$ of $univs.Type3$. Let $_H_it$ be an element of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_types.it$. Then for all elements $x_501$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$, $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_501$.\nassistant\n", "label": "postulate unit_rect_Type3_body : (Q_ : (_x_501 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ univs.Type3) -> (_H_it : cic.Term univs.Type3 (Q_ matita_basics_types.it)) -> (x_501 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Term univs.Type3 (Q_ x_501)", "predict": "postulate Unit_rect_Type3_body : (Q_ : (x_501 : cic.Term univs.Type0 matita_basics_types.unit) -> (H_it : cic.Term univs.Type3) -> Q_ H_it) -> (x_501 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Term univs.Type3 (Q_ x_501)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_eq. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Alors pour tous les éléments $_x$ de $cic.Term$ de $univs.Type2$ et de $A$, pour tous les éléments $return_sort$ de $cic.Sort$, pour toutes les fonctions $return_type$ des éléments $__$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $__$ à des éléments de $cic.Univ$ de $return_sort$, pour tous les éléments $case_refl$ de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$, pour tous les éléments $__$ de $cic.Term$ de $univs.Type2$ et de $A$, pour tous les éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $__$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $__$ et $z$.\nassistant\n", "label": "postulate match_eq : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (return_sort : cic.Sort) -> (return_type : (__ : cic.Term univs.Type2 A) -> (z : cic.Term cic.prop (matita_basics_logic.eq A _x __)) -> cic.Univ return_sort) -> (case_refl : cic.Term return_sort (return_type _x (matita_basics_logic.refl A _x))) -> (__ : cic.Term univs.Type2 A) -> (z : cic.Term cic.prop (matita_basics_logic.eq A _x __)) -> cic.Term return_sort (return_type __ z)", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMax_spec_ind. Let $_n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $Q_$ be a function from elements $x_971$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $_x_972$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_minimization.max_spec$ applied to $_n$ and $_f$ and $x_971$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_found_max_spec$ be a function from elements $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $x_975$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $_n$ and elements $x_974$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $_f$ applied to $m$ and $matita_basics_bool.true$ and functions $x_973$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $i$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $_n$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $mat", "label": "postulate max_spec_ind : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (Q_ : (x_971 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_972 : cic.Term cic.prop (matita_arithmetics_minimization.max_spec _n _f x_971)) -> cic.Univ cic.prop) -> (_H_found_max_spec : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_975 : cic.Term cic.prop (matita_arithmetics_nat.lt m _n)) -> (x_974 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f m) matita_basics_bool.true)) -> (x_973 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt m i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i _n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f i) matita_basics_bool.false)) -> cic.Term cic.prop (Q_ m (matita_arithmetics_min", "predict": "ita_basics_bool.bool$ and $Q_$ applied to $m$ and $x_975$ and $x_972$ and $x_971$ to elements of $cic.Univ$ of $cic.prop$. Let $Q$ be a function from elements $x_976$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $_x_977$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_minimization.max_spec$ applied to $_n$ and $_f$ and $x_976$ to elements of $cic.Univ$ of $cic.prop$. Let $x_978$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $x_979$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_minimization.max_spec$ applied to $_n$ and $_f$ and $x_978$. Let $x_980$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Q_$ applied to $x_978$ and $x_979$ and $x_972$ and $x_971$ to elements of $cic.Univ$ of $cic.prop$. Let $x_981$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $x_982$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_minimization.max_spec$ applied to $_n$ and $_f$ and $x_981$. Let $x_983$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $mat"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOp. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour tous les éléments $_xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $nil$, pour tous les éléments $_x_807$ et $_x_808$ de $cic.Term$ de $univs.Type0$ et de $A$, $cic.Term$ tient pour $univs.Type0$ et $A$.\nassistant\n", "label": "op : A : cic.Univ univs.Type0 -> nil : cic.Term univs.Type0 A -> _xxx : cic.Term univs.Type0 (matita_basics_lists_list.Aop A nil) -> _x_807 : cic.Term univs.Type0 A -> _x_808 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A .", "predict": "Axiom op_80 : forall A : cic.Univ -> univs.Type0, forall nil : cic.Term -> univs.Type0, forall _xxx : cic.Term -> univs.Type0, forall A_op_applied : matita_basics_lists_list.Aop A nil, forall _x_807 : cic.Term -> univs.Type0, forall _x_808 : cic.Term -> univs.Type0, A _x_807 _x_808."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTrue_rect_CProp2. Soit $Q_$ une fonction des éléments $_x_60$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_I$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_logic.I$. Soit $x_60$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_60$.\nassistant\n", "label": "postulate True_rect_CProp2 : (Q_ : (_x_60 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ cic.prop) -> (_H_I : cic.Term cic.prop (Q_ matita_basics_logic.I)) -> (x_60 : cic.Term cic.prop matita_basics_logic.True) -> cic.Term cic.prop (Q_ x_60)", "predict": "postulate True_rect_CProp2 : (Q : (x : cic.Term cic.prop) -> True -> cic.Univ cic.prop) -> (H_I : (x : cic.Term cic.prop) -> Q x (matita_basics_logic.I)) -> (x_60 : (x : cic.Term cic.prop) -> True) -> cic.Term (Q x_60 (matita_basics_logic.True))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSameF_upto_le. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $f$ and $g$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $A$. Then for all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $m$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_bigops.sameF_upto$ applied to $m$ and $A$ and $f$ and $g$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_bigops.sameF_upto$ applied to $n$ and $A$ and $f$ and $g$.\nassistant\n", "label": "axiom sameF_upto_le (A : cic.Univ univs.Type0) (f g : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 A) (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.le n m)) (__1 : cic.Term cic.prop (matita_arithmetics_bigops.sameF_upto m A f g)) : cic.Term cic.prop (matita_arithmetics_bigops.sameF_upto n A f g)", "predict": "postulate SameF_upto_le : (A : cic.Univ -> univs.Type0) -> (f g : (x : cic.Term -> univs.Type0) -> matita_arithmetics_nat.nat -> cic.Term -> univs.Type0) -> (n m : cic.Term -> univs.Type0 -> matita_arithmetics_nat.nat) -> (p q : cic.Term -> cic.prop -> matita_arithmetics_nat.le -> p q) -> (x : cic.Term -> cic.prop -> matita_arithmetics_bigops.sameF_upto -> x y) -> (n m : cic.Term -> matita_arithmetics_nat.nat) -> (p q : cic.Term -> cic.prop) -> (x y : cic.Term -> matita_arithmetics_bigops.sameF_upto) -> p q x y"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_times_div_m_m. For all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_div_and_mod.div$ applied to $n$ and $m$ and $m$ and $n$.\nassistant\n", "label": "le_times_div_m_m : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div n m) m) n) .", "predict": "Le_times_div_m_m : forall (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (___ : cic.Term cic.prop matita_arithmetics_nat.lt matita_arithmetics_nat.O m), cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div n m) m) n)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMk_Aop. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Alors pour toutes les fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$, pour toutes les fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $nil$ et $a$ et $a$, pour toutes les fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $nil$ et $a$, pour toutes les fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$, $cic.Term$ tient pour $univs.Type0$ et $matita_basics_lists_list.Aop$ appliqué à $A$ et $nil$.\nassistant\n", "label": "Axiom mk_Aop : forall A : cic.Univ univs.Type0, forall nil : cic.Term univs.Type0 A, forall op : ((__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A), forall _nill : ((a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op nil a) a)), forall _nilr : ((a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a nil) a)), forall _assoc : ((a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))), cic.Term univs.Type0 (matita_basics_lists_list.Aop A nil) .", "predict": "Axiom Mk_Aop : \n  forall (A : Univ), \n  forall (nil : Term), \n  (forall (op : Term -> Term -> Term), \n  (forall (_ : Term), \n  (forall (_1 : Term), \n  (forall (a : Term), \n  (forall (_nil : Term -> Prop), \n  (forall (_nilr : Term -> Prop), \n  (forall (_assoc : Term -> Term -> Term -> Prop), \n  (forall (a : Term), \n  (forall (b : Term), \n  (forall (c : Term), \n  (forall (a_b_c : Prop), \n  (forall (_a_b_c : Prop), \n  (forall (_a_b_c_assoc : Prop), \n  (forall (a_b_c_assoc_a_b_c : Prop), \n  (forall (a_b_c_assoc_a_b_c_a_b_c : Prop), \n  (forall (a_b_c_assoc_a_b_c_a_b_c_a : Prop), \n  (forall (a_b_c_assoc_a_b_c_a_b_c_b : Prop), \n  (forall (a_b_c_assoc_a_b_c_a_b_c_c : Prop), \n  (forall (a_b_c_assoc_a_b_c_a_b_c_a_b_c_a : Prop), \n  (forall (a_b_c_assoc_a_b_c_a_b_c_b_a : Prop), \n  (forall (a_b_c_assoc_a_b_c_a_b_c_c_a : Prop), \n  (forall (a_b_c_assoc_a_b_c_a_b_c_b_c : Prop), \n  (forall (a_b_c_assoc_a_b_c_a_b_c_a_b_c_a_b_c : Prop), \n  (forall (a_b_c_assoc_a_b_c_a_b_c_b_a_b : Prop), \n  (forall (a_b_c_assoc_a_b_c_a_b_c_c_a_b : Prop), \n  (forall (a_b_c_assoc_a_b_c_a_b_c_b_c_a : Prop), \n  (forall (a_b_c_assoc_a_b_c_a_b_c_b_c_b : Prop), \n  (forall (a_b_c_assoc_a_b_c_a_b_c_a_b_c_a_b_c_b_c : Prop), \n  (forall (a_b_c_assoc_a_b_c_a_b_c_b_a_b_a : Prop), \n  (forall (a_b_c_assoc_a_b_c_a_b_c_c_a_b_a : Prop), \n"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nInvert_permut. Soit $__$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour toutes les fonctions $__1$ des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__2$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $univs.Type0$ et $matita_arithmetics_nat.nat$.\nassistant\n", "label": "Axiom invert_permut : forall __ : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __1 : ((__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall __2 : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term univs.Type0 matita_arithmetics_nat.nat .", "predict": "Axiom Invert_permut : forall (cic : Type) (univs : Universe) (matita_arithmetics_nat : Type) (x : matita_arithmetics_nat), (forall (f : (cic -> cic) -> (cic -> cic)), forall (y : cic), (cic y) -> (univs) -> (matita_arithmetics_nat) -> (cic))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExp_sigma. Soient $n$ et $a$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour toutes les fonctions $p$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_bigops.bigop$ appliqué à $n$ et la fonction qui envoie $i$ à $p$ appliqué à $i$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ et la fonction qui envoie $i$ à $a$ et $matita_arithmetics_exp.exp$ appliqué à $a$ et $matita_arithmetics_bigops.bigop$ appliqué à $n$ et la fonction qui envoie $i$ à $p$ appliqué à $i$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.plus$ et la fonction qui envoie $i$ à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$.\nassistant\n", "label": "Axiom exp_sigma : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall p : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (fun i => p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (fun i => a)) (matita_arithmetics_exp.exp a (matita_arithmetics_bigops.bigop n (fun i => p i) matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_nat.plus (fun i => matita_arithmetics_nat.S matita_arithmetics_nat.O)))) .", "predict": "Definition Exp_sigma : \n  forall (n a : cic.Term univs.Type0) (a_nat : matita_arithmetics_nat.nat) (p : forall (i : cic.Term univs.Type0) (i_nat : matita_arithmetics_nat.nat), cic.Term univs.Type0) (p_bool : matita_basics_bool.bool) (eq : matita_basics_logic.eq univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (bigop_n : matita_arithmetics_bigops.bigop n) (bigop_p_i : forall (i : matita_arithmetics_nat.nat), cic.Term univs.Type0) (bigop_a : matita_arithmetics_nat.times a matita_arithmetics_nat.O) (bigop_n_S : matita_arithmetics_nat.plus n matita_arithmetics_nat.O) (bigop_a_S : matita_arithmetics_nat.plus a matita_arithmetics_nat.O), \n  cic.prop eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat bigop_n (bigop_p_i i) matita_arithmetics_nat.nat matita_arithmetics_nat.O (bigop_a_S i)) = p_bool."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFalse_rect_CProp2_body. Let $Q_$ be a function from elements $_x_76$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.False$ to elements of $cic.Univ$ of $cic.prop$. Then for all elements $x_76$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.False$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_76$.\nassistant\n", "label": "postulate False_rect_CProp2_body : (Q_ : (_x_76 : cic.Term cic.prop matita_basics_logic.False) -> cic.Univ cic.prop) -> (x_76 : cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ x_76)", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSome. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $__$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Då håller $cic.Term$ för $univs.Type0$ och $matita_basics_types.option$ applicerat på $A$.\nassistant\n", "label": "Some : A : cic.Univ univs.Type0 -> __ : cic.Term univs.Type0 A -> cic.Term univs.Type0 (matita_basics_types.option A) .", "predict": "Output: \nlet A : univs.Type0.cic.Univ;\nlet __ : cic.Term.univs.Type0.Term A;\nthen cic.Term.univs.Type0.A and (cic.Term.univs.Type0.option) A."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDivides_plus. Låt $n$ och $p$ och $q$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $p$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $q$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $matita_arithmetics_nat.plus$ applicerat på $p$ och $q$.\nassistant\n", "label": "Axiom divides_plus : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall q : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_primes.divides n p), forall __1 : cic.Term cic.prop (matita_arithmetics_primes.divides n q), cic.Term cic.prop (matita_arithmetics_primes.divides n (matita_arithmetics_nat.plus p q)) .", "predict": "Axiom divides_plus : forall (n : cic.Term univs.Type0) (p q : matita_arithmetics_nat.nat), divides n p -> forall (_1 : cic.Term univs.Type0) (q : matita_arithmetics_primes.divides n), divides n (matita_arithmetics_nat.plus p q)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1033. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Alors pour tous les éléments $x2515$ et $x2516$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2515$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $x2516$ et $matita_arithmetics_div_and_mod.div$ appliqué à $x2515$ et $x2516$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $x2515$ et $x2516$.\nassistant\n", "label": "axiom let_clause_1033 (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (x2515 x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516)))", "predict": "Axiom let_clause_1033 : \n  \\[\n  \\forall n : \\text{cic.Term}\\ (\\text{univs.Type0}) \\land \\text{matita_arithmetics_nat.nat}, \\forall posn : \\text{cic.Term}\\ (\\text{cic.prop}) \\land (\\text{matita_arithmetics_nat.lt}\\ (\\text{matita_arithmetics_nat.O})\\ n), \\text{cic.Term}\\ (\\text{cic.prop}) \\land (\\text{matita_basics_logic.eq}\\ (\\text{cic.lift}\\ (\\text{univs.Type0})\\ (\\text{univs.Type2})\\ (\\text{matita_arithmetics_nat.nat}))\\ x2515\\ (\\text{matita_arithmetics_nat.plus}\\ (\\text{matita_arithmetics_nat.times}\\ x2516\\ (\\text{matita_arithmetics_div_and_mod.div}\\ x2515\\ x2516))\\ (\\text{matita_arithmetics_div_and_mod.mod}\\ x2515\\ x2516)).\n  \\]"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSplit_eq. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $matita_basics_lists_list.length$ applied to $A$ and $l$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $l$ and $matita_basics_lists_list.append$ applied to $A$ and $matita_basics_types.fst$ applied to $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.split$ applied to $A$ and $l$ and $n$ and $matita_basics_types.snd$ applied to $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.split$ applied to $A$ and $l$ and $n$.\nassistant\n", "label": "Axiom split_eq : forall A : cic.Univ univs.Type0, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall l : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall __ : cic.Term cic.prop (matita_arithmetics_nat.le n (matita_basics_lists_list.length A l)), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l (matita_basics_lists_list.append A (matita_basics_types.fst (matita_basics_lists_list.list A) (matita_basics_lists_list.list A) (matita_basics_lists_list.split A l n)) (matita_basics_types.snd (matita_basics_lists_list.list A) (matita_basics_lists_list.list A) (matita_basics_lists_list.split A l n)))) .", "predict": "Parameter split_eq : \n  (A : cic.Univ) \n  (n : cic.Term) \n  (matita_arithmetics_nat:nat) \n  (l : matita_basics_lists_list.list A) \n  (___ : cic.Term) \n  (matita_basics_logic:eq (cic.lift (univs.Type0) (univs.Type2) (matita_basics_lists_list.list A) l) \n    (matita_basics_lists_list.append A (matita_basics_types.fst (matita_basics_lists_list.list A) l) \n      (matita_basics_lists_list.split A l) \n      (n, matita_basics_types.snd (matita_basics_lists_list.list A) l) \n      (matita_basics_lists_list.split A l) \n      (n)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSig_inv_rect_CProp1. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1224$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $pi1$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_pi2$ av $cic.Term$ av $cic.prop$ och $x2$ applicerat på $pi1$ och element $_z1225$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Sig$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_Sig$ applicerat på $x1$ och $x2$ och $pi1$ och $_pi2$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.mk_Sig$ applicerat på $x1$ och $x2$ och $pi1$ och $_pi2$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "Axiom Sig_inv_rect_CProp1 : forall x1 : cic.Univ univs.Type0, forall x2 : ((__ : cic.Term univs.Type0 x1) -> cic.Univ cic.prop), forall Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2), forall P : ((_z1224 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> cic.Univ cic.prop), forall _H1 : ((pi1 : cic.Term univs.Type0 x1) -> (_pi2 : cic.Term cic.prop (x2 pi1)) -> (_z1225 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2)) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))), cic.Term cic.prop (P Hterm) .", "predict": "Axiom Sig_inv_rect_CProp1 : forall (x1 : cic.Univ) (x2 : (forall _, cic.Term) -> x1 -> cic.Univ), (forall Hterm : cic.Term), (forall P : (forall _z1224, cic.Term) -> matita_basics_types.Sig -> x1 -> x2), (forall _H1 : cic.Term), (forall _pi2 : cic.Term), (forall _z1225 : cic.prop), (forall _eq : matita_basics_logic.eq), (forall _lift : cic.lift), (forall _Sig : matita_basics_types.Sig), (forall _Hterm : cic.Term), (forall _mk_Sig : matita_basics_types.mk_Sig), (forall _pi1 : cic.Term), (forall _P : (forall _, cic.Term) -> matita_basics_types.Sig -> _pi1 -> _pi2), (forall _eq : matita_basics_logic.eq), (forall _cic_term : cic.Term), (forall _cic_prop : cic.prop), (forall _P_app : P (mk_Sig x1 x2 pi1 pi2)), (forall _Hterm_app : Hterm), (forall _mk_Sig_app : mk_Sig x1 x2), (forall _pi1_app : pi1), (forall _pi2_app : pi2), (forall _eq_app : eq), (forall _lift_app : lift), (forall _univs_type0 : univs.Type0), (forall _cic_term_app : cic.Term), (forall _cic_prop_app : cic.prop), (forall _P_app_app : P (mk_Sig_app)), (forall _Hterm_app_app : Hterm_app), (forall _mk_Sig_app_app : mk_Sig_app), (forall _pi1_app_app : pi1_app), (forall _pi2_app_app : pi2_app), (forall _eq_app_app : eq_app), (forall _lift_app_app : lift_app), (forall _cic_term_app_app : cic.Term), (forall _cic_prop_app_app : cic.prop), (forall _P_app_app_app : P (mk_Sig_app_app)), (forall _Hterm_app_app_app : Hterm_app_app), (forall _mk_Sig_app_app_app : mk_Sig_app_app), (forall _pi1_app"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nUnit_rect_Type4_body. Låt $Q_$ vara en funktion från element $_x_497$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$ till element av $cic.Univ$ av $univs.Type4$. Låt $_H_it$ vara ett element av $cic.Term$ av $univs.Type4$ och $Q_$ applicerat på $matita_basics_types.it$. Låt $x_497$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$. Då håller $cic.Term$ för $univs.Type4$ och $Q_$ applicerat på $x_497$.\nassistant\n", "label": "axiom unit_rect_Type4_body (Q_ : (_x_497 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ univs.Type4) (_H_it : cic.Term univs.Type4 (Q_ matita_basics_types.it)) (x_497 : cic.Term univs.Type0 matita_basics_types.unit) : cic.Term univs.Type4 (Q_ x_497)", "predict": "Output: \nAxiom Unit_rect_Type4_body : \n  (Q : forall (x_497 : cic.Term univs.Type0 matita_basics_types.unit), Q (x_497)) \n  -> (H_it : cic.Term univs.Type4 matita_basics_types.it), \n  (x_497 : cic.Term univs.Type0 matita_basics_types.unit), \n  (Q x_497) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNot_bertrand_to_le1. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_chebyshev_bertrand.not_bertrand$ appliqué à $n$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_div_and_mod.div$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.times$ appliqué à", "label": "Axiom not_bertrand_to_le1 : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))) n), forall __1 : cic.Term cic.prop (matita_arithmetics_chebyshev_bertrand.not_bertrand n), cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_div_and_mod.div (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) (matita_arithmetics_exp.exp (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_div_and_mod.div (matita_arithmetics_sqrt.sqrt (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) .", "predict": " $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$. \nOutput: \nNot_bertrand_to_le1 : forall (n : nat), (not_bertrand n) -> (le (exp (S (S O)) (S (S O))) (div (times (S (S O)) (S (S O))) n) (S (S (S (S (S (S (S (S O))))))))) -> (le (exp (S (S (S (S (S (S (S (S O)))))))) (S (S (S (S (S (S (S (S O))))))))) (mod (times (S (S (S (S (S (S (S (S O))))))) (S (S (S (S (S (S (S (S O))))))))) n) (S (S (S (S (S (S (S (S O)))))))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_rect_Type1. For all elements $_A$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_606$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type1$, for all elements $_H_None$ of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_basics_types.None$ applied to $_A$, for all functions $_H_Some$ from elements $x_607$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_basics_types.Some$ applied to $_A$ and $x_607$, for all elements $x_606$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$, $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_606$.\nassistant\n", "label": "option_rect_Type1 : _A : cic.Univ univs.Type0 -> Q_ : (_x_606 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Univ univs.Type1) -> _H_None : cic.Term univs.Type1 (Q_ (matita_basics_types.None _A)) -> _H_Some : (x_607 : cic.Term univs.Type0 _A -> cic.Term univs.Type1 (Q_ (matita_basics_types.Some _A x_607))) -> x_606 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Term univs.Type1 (Q_ x_606) .", "predict": "Output: Axiom prop70 : odd 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLstar_inv_S_dx. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $R$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $B$. Let $l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $b1$ and $b2$ be elements of $cic.Term$ of $univs.Type0$ and $B$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $matita_arithmetics_nat.plus$ applied to $l$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $b1$ and $b2$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.ex2$ applied to $B$ and the function that maps $b$ to $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $l$ and $b1$ and $b$ and the function that maps $b$ to $R$ applied to $b$ and $b2$.\nassistant\n", "label": "Axiom lstar_inv_S_dx : forall B : cic.Univ univs.Type0, forall R : cic.Term univs.Type0 (matita_basics_relations.relation B), forall l : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b1 : cic.Term univs.Type0 B, forall b2 : cic.Term univs.Type0 B, forall __ : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2), cic.Term cic.prop (matita_basics_logic.ex2 B (fun b => matita_arithmetics_lstar.lstar B R l b1 b) (fun b => R b b2)) .", "predict": "Axiom Lstar_inv_S_dx : forall (B : Univ), (Term B), (relation B), (l : Term), (nat l), (b1 b2 : Term B), (forall ($__ : prop), (lstar B R l b1 b2), (Term $__)), (ex2 B (fun b => lstar B R l (plus l (S O)) b1 b)), (forall ($__ : prop), (ex2 B (fun b => R b)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_rect_Type1_body. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $Q_$ från element $_x_925$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type1$, för alla funktioner $_H_mk_range$ från funktioner $_enum$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $_A$ och element $_upto$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $_filter$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_range$ applicerat på $_A$ och $_enum$ och $_upto$ och $_filter$, för alla element $x_925$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$, håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_925$.\nassistant\n", "label": "range_rect_Type1_body : _A : cic.Univ univs.Type0 -> Q_ : (_x_925 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Univ univs.Type1) -> _H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 _A) -> _upto : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> x_925 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Term univs.Type1 (Q_ x_925) .", "predict": "Range_rect_Type1_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $Q_$ from elements $_x_925$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied on $_A$ to elements of $cic.Univ$ of $univs.Type1$, for all functions $_H_mk_range$ from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied on $matita_arithmetics_bigops.mk_range$ applied on $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_925$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied on $_A$, holds $cic.Term$ for $univs.Type1$ and $Q_$ applied on $x_925$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAnd_inv_rect_CProp3. För alla element $x1$ och $x2$ av $cic.Univ$ av $cic.prop$, för alla element $Hterm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z365$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $x_156$ av $cic.Term$ av $cic.prop$ och $x1$ och element $x_155$ av $cic.Term$ av $cic.prop$ och $x2$ och element $_z366$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_156$ och $x_155$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_156$ och $x_155$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "axiom And_inv_rect_CProp3 (x1 x2 : cic.Univ cic.prop) (Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2)) (P : (_z365 : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> cic.Univ cic.prop) (_H1 : (x_156 : cic.Term cic.prop x1) -> (x_155 : cic.Term cic.prop x2) -> (_z366 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_156 x_155))) -> cic.Term cic.prop (P (matita_basics_logic.conj x1 x2 x_156 x_155))) : cic.Term cic.prop (P Hterm)", "predict": "And_inv_rect_CProp3 : forall (x1 x2 : cic.Univ) (Hterm : cic.Term (cic.prop) (matita_basics_logic.And x1 x2)) (P : (forall z365 : cic.Term (cic.prop) (matita_basics_logic.And x1 x2)) -> cic.Univ (cic.prop)) (H1 : (forall x156 : cic.Term (cic.prop) x1) (forall x155 : cic.Term (cic.prop) x2) (z366 : cic.Term (cic.prop) (matita_basics_logic.eq (cic.lift (cic.prop) univs.Type2) (matita_basics_logic.And x1 x2) Hterm (matita_basics_logic.conj x1 x2 x156 x155))) -> P z366), P Hterm."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nR4. Let $T0$ be an element of $cic.Univ$ of $univs.Type0$. Let $a0$ be an element of $cic.Term$ of $univs.Type0$ and $T0$. Let $T1$ be a function from elements $x0$ of $cic.Term$ of $univs.Type0$ and $T0$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $T0$ and $a0$ and $x0$ to elements of $cic.Univ$ of $univs.Type0$. Let $a1$ be an element of $cic.Term$ of $univs.Type0$ and $T1$ applied to $a0$ and $matita_basics_logic.refl$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $T0$ and $a0$. Then for all functions $T2$ from elements $x0$ of $cic.Term$ of $univs.Type0$ and $T0$ and elements $p0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $T0$ and $a0$ and $x0$ and elements $x1$ of $cic.Term$ of $univs.Type0$ and $T1$ applied to $x0$ and $p0$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $T1$ applied to $x0$ and $p0$ and $matita_basics_logic.R1$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $T0$ and $a0$ and $T1$ and $a1$ and $x0$ and $p0$ and $x1$ to elements of $cic.Univ$ of", "label": "axiom R4 (T0 : cic.Univ univs.Type0) (a0 : cic.Term univs.Type0 T0) (T1 : (x0 : cic.Term univs.Type0 T0) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> cic.Univ univs.Type0) (a1 : cic.Term univs.Type0 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0))) (T2 : (x0 : cic.Term univs.Type0 T0) -> (p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> (x1 : cic.Term univs.Type0 (T1 x0 p0)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T1 x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 T0) a0 T1 a1 x0 p0) x1)) -> cic.Univ univs.Type0) (a2 : cic.Term univs.Type0 (T2 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0) a1 (matita_basics_logic.refl (cic", "predict": " $univs.Type0$, there exists an element $a2$ of $cic.Term$ of $univs.Type0$ and $T2$ applied to $x0$ and $p0$ and $x1$ such that $T1$ applied to $x0$ and $p0$ and $x1$ is equal to $T2$ applied to $x0$ and $p0$ and $x1$ under the condition that $T0$ is equal to $T2$ applied to $x0$ and $p0$ and $x1$.\n\nOutput: \nAxiom R4 : ∀ (T0 : cic.Univ univs.Type0) (a0 : cic.Term univs.Type0 T0) (T1 : ∀ (x0 : cic.Term univs.Type0 T0) (__) : cic.Term univs.Type0 T0 (cic.lift univs.Type0 univs.Type2 T0 a0 x0) → cic.Univ univs.Type0) (a1 : cic.Term univs.Type0 T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0 a0))) (T2 : ∀ (x0 : cic.Term univs.Type0 T0) (p0 : cic.Term univs.Type0 cic.prop (cic.lift univs.Type0 univs.Type2 T0 a0 x0)) (__) : cic.Term univs.Type0 T1 (x0 p0) (cic.lift univs.Type0 univs.Type2 T1 (x0 p0) matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 T0 a0 T1 a1 x0 p0 x1)) → cic.Univ univs.Type0), (∃ (a2 : cic.Term univs.Type0 T2 x0 p0 x1), T1 x0 p0 x1 ≡ T2 x0 p0 x1) → T0 ≡ T2 x0 p0 x1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAnd_rect_CProp4. Let $_A$ and $_B$ be elements of $cic.Univ$ of $cic.prop$. Then for all functions $Q_$ from elements $_x_146$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_conj$ from elements $x_148$ of $cic.Term$ of $cic.prop$ and $_A$ and elements $x_147$ of $cic.Term$ of $cic.prop$ and $_B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_logic.conj$ applied to $_A$ and $_B$ and $x_148$ and $x_147$, for all elements $x_146$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $_A$ and $_B$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_146$.\nassistant\n", "label": "And_rect_CProp4 : _A : cic.Univ cic.prop -> _B : cic.Univ cic.prop -> Q_ : (_x_146 : cic.Term cic.prop (matita_basics_logic.And _A _B) -> cic.Univ cic.prop) -> _H_conj : (x_148 : cic.Term cic.prop _A -> x_147 : cic.Term cic.prop _B -> cic.Term cic.prop (Q_ (matita_basics_logic.conj _A _B x_148 x_147))) -> x_146 : cic.Term cic.prop (matita_basics_logic.And _A _B) -> cic.Term cic.prop (Q_ x_146) .", "predict": "Output: \nAxiom And_rect_CProp4 : forall (A B : Univ) (Q_ : Term prop) (AndAB : And A B) (H_conj : forall (x148 : Term) (x147 : Term), (And A B) -> (Term prop) -> Term prop), (forall (x146 : Term), (And A B) -> (Term prop)) -> Term prop (Q_ (AndAB (H_conj x148 x147))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_min_r. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Då för alla element $n$ och $b$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_minimization.min$ applicerat på $n$ och $b$ och $f$ och $matita_arithmetics_nat.plus$ applicerat på $n$ och $b$.\nassistant\n", "label": "le_min_r : f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_minimization.min n b f) (matita_arithmetics_nat.plus n b)) .", "predict": "Output: \nAxiom le_min_r : forall (f : term univs.Type0 (cic.Term (matita_arithmetics_nat.nat)) -> term univs.Type0 (matita_basics_bool.bool)), (forall (n b : term univs.Type0 (matita_arithmetics_nat.nat)), (cic.prop (matita_arithmetics_minimization.min (n b) f (matita_arithmetics_nat.plus n b)) (matita_arithmetics_nat.le n b)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLength_filter_eqb. Let $m$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.unique$ applied to $matita_arithmetics_nat.nat$ and $l$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_basics_lists_list.length$ applied to $matita_arithmetics_nat.nat$ and $matita_basics_lists_list.filter$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.eqb$ applied to $m$ and $l$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$.\nassistant\n", "label": "axiom length_filter_eqb (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (l : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) (__ : cic.Term cic.prop (matita_basics_lists_list.unique matita_arithmetics_nat.nat l)) : cic.Term cic.prop (matita_arithmetics_nat.le (matita_basics_lists_list.length matita_arithmetics_nat.nat (matita_basics_lists_list.filter matita_arithmetics_nat.nat (matita_arithmetics_nat.eqb m) l)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))", "predict": "Output: \nVariable m : cic.Term univs.Type0 matita_arithmetics_nat.nat. \nVariable l : cic.Term univs.Type0 matita_basics_lists_list.list matita_arithmetics_nat.nat. \nVariable ___ : cic.Term cic.prop matita_basics_lists_list.unique matita_arithmetics_nat.nat l. \nHypothesis H : cic.Term cic.prop matita_arithmetics_nat.le (matita_basics_lists_list.length matita_arithmetics_nat.nat l) (matita_basics_lists_list.filter matita_arithmetics_nat.nat (matita_arithmetics_nat.eqb m l) (matita_arithmetics_nat.S matita_arithmetics_nat.O))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_16003. För alla element $m$ och $n$ och $a$ och $b$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $posn$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $posm$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla element $pnm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $c$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$", "label": "let_clause_16003 : m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) -> c : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (d : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat", "predict": " och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat sur $n$ et $m$, on peut démontrer que $matita_basics_logic.eq$ applicerat sur $pnm$ et $posn$ et $posm$ et $c$ et $matita_basics_logic.eq$ applicerat sur $matita_arithmetics_nat.minus$ applicerat sur $matita_arithmetics_nat.times$ applicerat sur $c$ et $n$ et $matita_arithmetics_nat.times$ applicerat sur $d$ et $m$ et $matita_arithmetics_nat.S$ applicerat sur $matita_arithmetics_nat.O$ et $matita_arithmetics_gcd.gcd$ applicerat sur $n$ et $m$ est vrai.\n\nOutput: \nOutput: \nAxiom let_clause_16003 : forall (m : cic.Term univs.Type0) (n : matita_arithmetics_nat.lt) (a : matita_arithmetics_nat.nat) (b : matita_arithmetics_nat.nat) (posn : cic.Term univs.Type0 matita_arithmetics_nat.lt) (posm : cic.Term univs.Type0 matita_arithmetics_nat.lt) (pnm : cic.Term univs.Type0 matita_basics_logic.eq) (c : univs.Type0 matita_arithmetics_nat.nat) (d : matita_basics_logic.ex matita_arithmetics_nat.nat) (clearme : cic.Term univs.Type0 matita_basics_logic.ex matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_gcd.gcd n m (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) (gcd_nm : matita_arithmetics_gcd.gcd n m), pnm posn posm c clearme."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1033. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour toutes les fonctions $p1$ et $p2$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, pour toutes les fonctions $g1$ et $g2$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $n1$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour toutes les fonctions $Hind$ des fonctions $__$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $n1$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $p1$ appliqué à $i$ et $matita_basics_bool.true$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $p2$ appliqué à $i$ et $matita_basics_bool.true$ et des fonctions $__1$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et", "label": "Axiom let_clause_1033 : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall p1 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall p2 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall g1 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall g2 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall Hind : ((__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i n1)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p2 i) matita_basics_bool.true)) -> (__1 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term cic.prop (mat", "predict": " des éléments $n1$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $p1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $p2$ appliqué à $i$ et $matita_basics_bool.true$ et des fonctions $g1$ et $g2$ des éléments $n1$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $Hind$ appliquées à $n1$ et $n1$ et $g1$ appliquées à $n1$ et $g2$ appliquées à $n1$ et des fonctions $Hind$ appliquées à $n1$ et $n1$ et $g1$ appliquées à $n1$ et $g2$ appliquées à $n1$ et des fonctions $Hind$ appliquées à $n1$ et $n1$ et $g1$ appliquées à $n1$ et $g2$ appliquées à $n1$ et des fonctions $Hind$ appliquées à $n1$ et $n1$ et $g1$ appliquées à $n1$ et $g2$ appliquées à $n1$, il est vrai que $Hind$ appliqué à $n$ et $n1$ et $g1$ appliquées à $n$ et $g2$ appliquées à $n$ est vrai. \n\nOutput: \n(* The input text you want to translate into Coq goes here. *)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAnd_inv_rect_Type2. For all elements $x1$ and $x2$ of $cic.Univ$ of $cic.prop$, for all elements $Hterm$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z341$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type2$, for all functions $_H1$ from elements $x_136$ of $cic.Term$ of $cic.prop$ and $x1$ and elements $x_135$ of $cic.Term$ of $cic.prop$ and $x2$ and elements $_z342$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_basics_logic.And$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_logic.conj$ applied to $x1$ and $x2$ and $x_136$ and $x_135$ to elements of $cic.Term$ of $univs.Type2$ and $P$ applied to $matita_basics_logic.conj$ applied to $x1$ and $x2$ and $x_136$ and $x_135$, $cic.Term$ holds for $univs.Type2$ and $P$ applied to $Hterm$.\nassistant\n", "label": "postulate And_inv_rect_Type2 : (x1 : cic.Univ cic.prop) -> (x2 : cic.Univ cic.prop) -> (Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> (P : (_z341 : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> cic.Univ univs.Type2) -> (_H1 : (x_136 : cic.Term cic.prop x1) -> (x_135 : cic.Term cic.prop x2) -> (_z342 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_136 x_135))) -> cic.Term univs.Type2 (P (matita_basics_logic.conj x1 x2 x_136 x_135))) -> cic.Term univs.Type2 (P Hterm)", "predict": "postulate And_inv_rect_Type2 : (x1 x2 : cic.Univ) -> (Hterm : cic.Term cic.prop) -> (matita_basics_logic.And x1 x2) -> (P : (z341 : cic.Term cic.prop) -> (matita_basics_logic.And x1 x2) -> cic.Univ univs.Type2) -> (H1 : (x136 : cic.Term cic.prop) -> (x135 : cic.Term cic.prop) -> (z342 : cic.Term cic.prop) -> (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2) Hterm) (matita_basics_logic.conj x1 x2 x136 x135)) -> cic.Term univs.Type2 (P z341 (matita_basics_logic.conj x1 x2 x136 x135))) -> cic.Term univs.Type2 (P Hterm)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_rect_Type5. För alla element $_A$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $Q_$ från element $_x_594$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type5$, för alla element $_H_None$ av $cic.Term$ av $univs.Type5$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$, för alla funktioner $_H_Some$ från element $x_595$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $univs.Type5$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_595$, för alla element $x_594$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $univs.Type5$ och $Q_$ applicerat på $x_594$.\nassistant\n", "label": "postulate option_rect_Type5 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_594 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ univs.Type5) -> (_H_None : cic.Term univs.Type5 (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_595 : cic.Term univs.Type0 _A) -> cic.Term univs.Type5 (Q_ (matita_basics_types.Some _A x_595))) -> (x_594 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term univs.Type5 (Q_ x_594)", "predict": "Output: \npostulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMonotonic_pred. $cic.Term$ holds for $cic.prop$ and $matita_basics_relations.monotonic$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.le$ and $matita_arithmetics_nat.pred$.\nassistant\n", "label": "postulate monotonic_pred : cic.Term cic.prop (matita_basics_relations.monotonic matita_arithmetics_nat.nat matita_arithmetics_nat.le matita_arithmetics_nat.pred)", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExists_mid. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $P$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $l1$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$. Soit $x$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $l2$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $x$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_lists_list.Exists$ appliqué à $A$ et $P$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l1$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $x$ et $l2$.\nassistant\n", "label": "Axiom Exists_mid : forall A : cic.Univ univs.Type0, forall P : ((__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop), forall l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall x : cic.Term univs.Type0 A, forall l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall __ : cic.Term cic.prop (P x), cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 (matita_basics_lists_list.cons A x l2))) .", "predict": "Axiom exists_mid : forall (A : cic.Univ) (P : forall _, cic.Univ -> cic.prop) (l1 : matita_basics_lists_list.list A) (x : A) (l2 : matita_basics_lists_list.list A) (_ : P x A) -> cic.Term -> cic.prop -> matita_basics_lists_list.Exists A P l1 -> cic.Term -> matita_basics_lists_list.append A l1 (matita_basics_lists_list.cons A x l2) -> matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 (matita_basics_lists_list.cons A x l2))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1572. Soient $m$ et $n$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $H$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $m$ et $n$ et $matita_arithmetics_nat.O$. Soit $auto$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $m$ et $matita_arithmetics_nat.O$. Alors pour tous les éléments $auto'$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n$ et $matita_arithmetics_nat.O$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $m$ et $matita_arithmetics_nat.O$.\nassistant\n", "label": "Axiom let_clause_1572 : forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd m n) matita_arithmetics_nat.O), forall auto : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m matita_arithmetics_nat.O), forall auto' : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n matita_arithmetics_nat.O), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m matita_arithmetics_nat.O) .", "predict": "Let_clause_1572 : forall (m : cic.Term univs.Type0) (n : matita_arithmetics_nat.nat) (posn : cic.Term (cic.prop * matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (H : cic.Term (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_gcd.gcd m n matita_arithmetics_nat.O)))) (auto : cic.Term (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat m matita_arithmetics_nat.O))) (auto' : cic.Term (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n matita_arithmetics_nat.O))), (cic.Term (cic.prop * matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat m matita_arithmetics_nat.O)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_10331. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $lt4n$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$. Let $m$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $le4m$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $m$. Let $Hind$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_exp.exp$ applied to $matita_arithmetics_nat.S$ applied to $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_exp.exp$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $m$. Let $a$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $lea$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.S", "label": "postulate let_clause_10331 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (lt4n : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) n)) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (le4m : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))) m)) -> (Hind : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S m) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) m))) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (lea : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))) a)) -> (", "predict": "$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $a$. Let $Ha$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_exp.exp$ applied to $matita_arithmetics_nat.S$ applied to $a$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_exp.exp$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $a$. Let $Hle`a`n`lt4n`Hind`Ha`le4m`prop80`m`n`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp`matita_arithmetics_exp.exp"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSum_rect_Type2. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_541$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type2$, pour toutes les fonctions $_H_inl$ des éléments $x_542$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_basics_types.inl$ appliqué à $_A$ et $_B$ et $x_542$, pour toutes les fonctions $_H_inr$ des éléments $x_543$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_basics_types.inr$ appliqué à $_A$ et $_B$ et $x_543$, pour tous les éléments $x_541$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $univs.Type2$ et $Q_$ appliqué à $x_541$.\nassistant\n", "label": "postulate Sum_rect_Type2 : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_541 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ univs.Type2) -> (_H_inl : (x_542 : cic.Term univs.Type0 _A) -> cic.Term univs.Type2 (Q_ (matita_basics_types.inl _A _B x_542))) -> (_H_inr : (x_543 : cic.Term univs.Type0 _B) -> cic.Term univs.Type2 (Q_ (matita_basics_types.inr _A _B x_543))) -> (x_541 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Term univs.Type2 (Q_ x_541)", "predict": "postulate Sum_rect_Type2 : \n  ∀ {univs : Type} {A B : Univ} → \n  ∀ {univs : Type} {Q : Term univs.Type0 (Sum A B)} → \n  ∀ {univs : Type} {H_inl : Term univs.Type0 A (Term univs.Type2 Q)} → \n  ∀ {univs : Type} {H_inr : Term univs.Type0 B (Term univs.Type2 Q)} → \n  ∀ {univs : Type} {x : Term univs.Type0} → \n  x ≡ (Sum A B) → \n  Term univs.Type2 Q x."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFilter. Soit $T$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $_p$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $T$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, pour tous les éléments $_l$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $T$, $cic.Term$ tient pour $univs.Type0$ et $matita_basics_lists_list.list$ appliqué à $T$.\nassistant\n", "label": "Axiom filter : forall T : cic.Univ univs.Type0, forall _p : ((__ : cic.Term univs.Type0 T) -> cic.Term univs.Type0 matita_basics_bool.bool), forall _l : cic.Term univs.Type0 (matita_basics_lists_list.list T), cic.Term univs.Type0 (matita_basics_lists_list.list T) .", "predict": "Axiom Filter : \n  forall (T : cic.Univ) (p : forall __ : cic.Term univs.Type0, T -> cic.Term univs.Type0 -> matita_basics_bool.bool), \n  forall (l : cic.Term univs.Type0) (l_list : matita_basics_lists_list.list T), \n  (cic.Term univs.Type0) l (matita_basics_lists_list.list cic.Term univs.Type0) l_list."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSum_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all elements $_xxx$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $nil$, $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $nil$.\nassistant\n", "label": "sum_body : A : cic.Univ univs.Type0 -> nil : cic.Term univs.Type0 A -> _xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A nil) -> cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A nil) .", "predict": "Output: \naxiom sum_body : \n    (A : cic.univ univs.type0) ->\n    (nil : cic.term univs.type0) ->\n    A ->\n    (_xxx : cic.term univs.type0) ->\n    (matita_arithmetics_bigops.dop A nil) ->\n    (cic.term univs.type0) ->\n    (matita_arithmetics_bigops.acop A nil) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nPrime_smallest_factor_n. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $matita_arithmetics_primes.smallest_factor$ applicerat på $n$.\nassistant\n", "label": "prime_smallest_factor_n : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) -> cic.Term cic.prop (matita_arithmetics_primes.prime (matita_arithmetics_primes.smallest_factor n)) .", "predict": "Output: Axiom prime_smallest_factor_n : forall (n : Term univs.Type0 nat) (p : prop lt (S O) n), Term p (prime (smallest_factor n))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFoldr. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$. Alors pour tous les éléments $_b$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $_l$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, $cic.Term$ tient pour $univs.Type0$ et $B$.\nassistant\n", "label": "postulate foldr : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) -> (_b : cic.Term univs.Type0 B) -> (_l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> cic.Term univs.Type0 B", "predict": "postulate Foldr : (A : univs.Type0) (B : univs.Type0) (f : (x : cic.Term univs.Type0) -> A -> (y : cic.Term univs.Type0) -> B -> cic.Term univs.Type0) -> (b : cic.Term univs.Type0) -> (l : matita_basics_lists_list.list A) -> cic.Term univs.Type0 B"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_rect_CProp1. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $_f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_660$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_DPair$ from elements $dpi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_dpi2$ of $cic.Term$ of $univs.Type0$ and $_f$ applied to $dpi1$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_DPair$ applied to $A$ and $_f$ and $dpi1$ and $_dpi2$, for all elements $x_660$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_660$.\nassistant\n", "label": "postulate DPair_rect_CProp1 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (Q_ : (_x_660 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop) -> (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (x_660 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term cic.prop (Q_ x_660)", "predict": "postulate DPair_rect_CProp1 : (A : univs.Type0) -> (f : (x : cic.Term) -> A -> univs.Type0) -> (Q : (x : cic.Term) -> (dpair : DPair A f) -> univs.Type0) -> (H_mk_DPair : (dpi1 : cic.Term) -> (A : univs.Type0) -> (dpi2 : cic.Term) -> (f dpi1 : cic.Term) -> (Q dpi1 (mk_DPair A f dpi1 dpi2)) -> univs.Type0) -> (x : cic.Term) -> (dpair : DPair A f) -> cic.Term (cic.prop) (Q x dpair) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_times_n_to_lt_r. Låt $n$ och $p$ och $q$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.times$ applicerat på $n$ och $p$ och $matita_arithmetics_nat.times$ applicerat på $n$ och $q$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $p$ och $q$.\nassistant\n", "label": "axiom lt_times_n_to_lt_r (n p q : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.times n p) (matita_arithmetics_nat.times n q))) : cic.Term cic.prop (matita_arithmetics_nat.lt p q)", "predict": "Axiom prop70 : odd 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nInjn_Sn_n. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_permutation.injn$ applied to $f$ and $matita_arithmetics_nat.S$ applied to $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_permutation.injn$ applied to $f$ and $n$.\nassistant\n", "label": "Axiom injn_Sn_n : forall f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_permutation.injn f (matita_arithmetics_nat.S n)), cic.Term cic.prop (matita_arithmetics_permutation.injn f n) .", "predict": "Output: \nDefinition Injn_Sn_n := \nforall (f : Term univs.Type0 matita_arithmetics_nat.nat -> Term univs.Type0 matita_arithmetics_nat.nat), \nforall (n : Term univs.Type0 matita_arithmetics_nat.nat), \nforall (phi : Prop), \nforall (injn : matita_arithmetics_permutation.injn f (matita_arithmetics_nat.S n)), \ncic.Term phi (matita_arithmetics_permutation.injn f n)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLog_exp. Låt $p$ och $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_log.log$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $p$ och $n$ och $m$ och $matita_arithmetics_nat.plus$ applicerat på $n$ och $matita_arithmetics_log.log$ applicerat på $p$ och $m$.\nassistant\n", "label": "Axiom log_exp : forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_log.log p (matita_arithmetics_nat.times (matita_arithmetics_exp.exp p n) m)) (matita_arithmetics_nat.plus n (matita_arithmetics_log.log p m))) .", "predict": "Output: \nParameter p : cic.Term univs.Type0 matita_arithmetics_nat.nat. \nParameter n : cic.Term univs.Type0 matita_arithmetics_nat.nat. \nParameter m : cic.Term univs.Type0 matita_arithmetics_nat.nat. \nParameter __ : cic.Term cic.prop matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p. \nAxiom log_exp : forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), cic.Term cic.prop (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_basics_logic.eq (matita_arithmetics_log.log p) (matita_arithmetics_nat.times (matita_arithmetics_exp.exp p n) m))) (matita_arithmetics_nat.plus n (matita_arithmetics_log.log p m))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSub_pi2. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $P$ och $P'$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $__$ från element $x$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__$ av $cic.Term$ av $cic.prop$ och $P$ applicerat på $x$ till element av $cic.Term$ av $cic.prop$ och $P'$ applicerat på $x$, för alla element $x$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och funktionen som avbildar $x$ som $P$ applicerat på $x$, håller $cic.Term$ för $cic.prop$ och $P'$ applicerat på $matita_basics_types.pi1$ applicerat på $A$ och funktionen som avbildar $x0$ som $P$ applicerat på $x0$ och $x$.\nassistant\n", "label": "sub_pi2 : A : cic.Univ univs.Type0 -> P : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> P' : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> __ : (x : cic.Term univs.Type0 A -> __ : cic.Term cic.prop (P x) -> cic.Term cic.prop (P' x)) -> x : cic.Term univs.Type0 (matita_basics_types.Sig A (x : cic.Term univs.Type0 A => P x)) -> cic.Term cic.prop (P' (matita_basics_types.pi1 A (x0 : cic.Term univs.Type0 A => P x0) x)) .", "predict": "Output: \nforall A : univs.Type0, (forall P P' : (cic.Term univs.Type0 A -> cic.Univ), (forall x : cic.Term univs.Type0 A, P x = P' x) -> (forall x : cic.Term univs.Type0, matita_basics_types.Sig A -> cic.Term univs.Type0 (cic.prop)) -> (forall x : cic.Term univs.Type0, P x -> cic.Term univs.Type0 (cic.prop))) -> (forall x : cic.Term univs.Type0, matita_basics_types.pi1 A -> cic.Term univs.Type0 (cic.prop)) -> (forall x0 : cic.Term univs.Type0, P x0 -> cic.Term univs.Type0 (cic.prop))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_inv_rect_CProp1. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x2$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$. Soit $P$ une fonction des éléments $_z1158$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H1$ une fonction des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $x2$ appliqué à $dpi1$ et des éléments $_z1159$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$. Alors $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "postulate DPair_inv_rect_CProp1 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> (P : (_z1158 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1159 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P Hterm)", "predict": "postulate DPair_inv_rect_CProp1 : (x1 : cic.Univ) -> (x2 : (univs.Type0 -> cic.Term -> cic.Univ)) -> (Hterm : cic.Term) -> (xdpair : matita_basics_types.DPair x1 x2) -> (P : (z1158 : cic.Term) -> (xdpair : matita_basics_types.DPair x1 x2) -> cic.Univ -> cic.prop) -> (_H1 : (dpi1 : cic.Term) -> (x1 : _) -> (dpi2 : cic.Term) -> (x2 : _) -> (z1159 : cic.Term) -> (cic.lift univs.Type0 univs.Type2 matita_basics_types.DPair x1 x2 Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 dpi2)) -> (cic.prop) -> (P z1158 (matita_basics_types.mk_DPair x1 x2 dpi1 dpi2) z1159) -> cic.Term -> cic.prop -> (P (matita_basics_types.mk_DPair x1 x2 dpi1 dpi2) Hterm)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExists_mid. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $P$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Then for all elements $l1$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $x$ of $cic.Term$ of $univs.Type0$ and $A$, for all elements $l2$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $P$ applied to $x$, $cic.Term$ holds for $cic.prop$ and $matita_basics_lists_list.Exists$ applied to $A$ and $P$ and $matita_basics_lists_list.append$ applied to $A$ and $l1$ and $matita_basics_lists_list.cons$ applied to $A$ and $x$ and $l2$.\nassistant\n", "label": "Axiom Exists_mid : forall A : cic.Univ univs.Type0, forall P : ((__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop), forall l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall x : cic.Term univs.Type0 A, forall l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall __ : cic.Term cic.prop (P x), cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 (matita_basics_lists_list.cons A x l2))) .", "predict": "Axiom exists_mid : forall (A : Univ) (P : Term -> A -> Univ -> Prop), forall (l1 : list Term) (A : Univ), forall (x : Term) (A : Univ), forall (l2 : list Term) (A : Univ), forall (__ : Prop) (P : Term -> A -> Prop), (forall (x : Term) (A : Univ), (P x x) -> (forall (l1 : list Term) (A : Univ), (forall (x : Term) (A : Univ), (P x x) -> (forall (l2 : list Term) (A : Univ), (forall (x : Term) (A : Univ), (P x x) -> (forall (__ : Prop) (P : Term -> A -> Prop), (forall (x : Term) (A : Univ), (P x x) -> (forall (l1 : list Term) (A : Univ), (forall (x : Term) (A : Univ), (P x x) -> (forall (l2 : list Term) (A : Univ), (forall (x : Term) (A : Univ), (P x x) -> (forall (__ : Prop) (P : Term -> A -> Prop), (forall (x : Term) (A : Univ), (P x x) -> (forall (l1 : list Term) (A : Univ), (forall (x : Term) (A : Univ), (P x x) -> (forall (l2 : list Term) (A : Univ), (forall (x : Term) (A : Univ), (P x x) -> (forall (__ : Prop) (P : Term -> A -> Prop), (forall (x : Term) (A : Univ), (P x x) -> (forall (l1 : list Term) (A : Univ), (forall (x : Term) (A : Univ), (P x x) -> (forall (l2 : list Term) (A : Univ), (forall (x : Term) (A : Univ), (P x x) -> (forall (__ : Prop) (P : Term -> A -> Prop), (forall (x : Term) (A : Univ), (P x x) -> (forall (l1 : list Term) (A : Univ), (forall (x : Term) (A : Univ), (P x x) ->"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLprim_invariant. Pour tous les éléments $n$ et $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $acc$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $i$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_chebyshev_bertrand256.primes_below$ appliqué à $acc$ et $i$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_chebyshev_bertrand256.primes_below$ appliqué à $matita_arithmetics_chebyshev_bertrand256.lprim$ appliqué à $n$ et $i$ et $acc$ et $matita_arithmetics_nat.plus$ appliqué à $n$ et $i$.\nassistant\n", "label": "Axiom lprim_invariant : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall acc : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat), forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) i), forall __1 : cic.Term cic.prop (matita_arithmetics_chebyshev_bertrand256.primes_below acc i), cic.Term cic.prop (matita_arithmetics_chebyshev_bertrand256.primes_below (matita_arithmetics_chebyshev_bertrand256.lprim n i acc) (matita_arithmetics_nat.plus n i)) .", "predict": "Axiom Lprim_invariant : forall (n : matita_arithmetics_nat.nat) (i : matita_arithmetics_nat.nat) (acc : matita_basics_lists_list.list (matita_arithmetics_nat.nat)) (__$ : matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.O)) i) (__$1 : matita_arithmetics_chebyshev_bertrand256.primes_below acc i) (n' : matita_arithmetics_nat.nat), \n    matita_arithmetics_chebyshev_bertrand256.primes_below (matita_arithmetics_chebyshev_bertrand256.lprim n i acc) i (matita_arithmetics_nat.plus n i)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_rect_Type0_body. For all elements $_A$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_927$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type0$, for all functions $_H_mk_range$ from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $univs.Type0$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_927$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $univs.Type0$ and $Q_$ applied to $x_927$.\nassistant\n", "label": "postulate range_rect_Type0_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_927 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type0) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_927 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term univs.Type0 (Q_ x_927)", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_CProp2. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $_nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour toutes les fonctions $Q_$ des éléments $_x_881$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_Aop$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs", "label": "axiom Aop_rect_CProp2 (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_881 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop) (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) (x_881 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) : cic.Term cic.prop (Q_ x_881)", "predict": ".Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ et des fonctions $_assocr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $b$ et $op$ appliqué à $a$ et $c$, nous pouvons construire une preuve de $A$.\n\nOutput: \nOutput: \nAop_rect_CProp2 : forall (A : cic.Univ) (Q : A -> cic.Term -> A -> prop) (Q_mk : A -> A -> A -> prop) (H_nil : forall (a : cic.Term) (A : cic.Univ), Q a _nil A -> prop) (H_assoc : forall (a : cic.Term) (b : cic.Term) (c : cic.Term) (A : cic.Univ), Q a b c -> Q (op a b) c -> prop) (H_assocr : forall (a : cic.Term) (b : cic.Term) (c : cic.Term) (A : cic.Univ), Q a b c -> Q b (op a c) -> prop), A."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_rect_CProp4. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $_nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour toutes les fonctions $Q_$ des éléments $_x_957$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_Dop$ des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $_nil$ et $_nil$ et des fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univ", "label": "Axiom Dop_rect_CProp4 : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_957 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ cic.prop), forall _H_mk_Dop : ((sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))), forall x_957 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil), cic.Term cic.prop (Q_ x_957) .", "predict": "s.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$ et $prod$ appliqué à $a$ et $b$ et $c$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSig_rect_Type1. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_674$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $univs.Type1$. Låt $_H_mk_Sig$ vara en funktion från element $pi1$ av $cic.Term$ av $univs.Type0$ och $A$ och element $_pi2$ av $cic.Term$ av $cic.prop$ och $_f$ applicerat på $pi1$ till element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_basics_types.mk_Sig$ applicerat på $A$ och $_f$ och $pi1$ och $_pi2$. Då för alla element $x_674$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $_f$, håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_674$.\nassistant\n", "label": "axiom Sig_rect_Type1 (A : cic.Univ univs.Type0) (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) (Q_ : (_x_674 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ univs.Type1) (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term univs.Type1 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) (x_674 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) : cic.Term univs.Type1 (Q_ x_674)", "predict": "postulate Sig_rect_Type1 : {univs : Universe} -> (A : univs.Univ) -> (_f : (x : univs.Term) -> A -> univs.Univ) -> (Q_ : (x_674 : univs.Term) -> (matita_basics_types.Sig A _f) -> univs.Univ) -> (pi1 : univs.Term) -> A -> (pi2 : univs.Term) -> (univs.prop) -> (univs.Term) -> (univs.Univ) -> (Q_ (matita_basics_types.mk_Sig A _f pi1) -> univs.Term) -> (univs.Univ) -> (univs.Type1) -> (univs.Type1) -> (univs.Type0) -> (univs.Type0) -> (univs.Type1) -> (univs.Type1) -> (univs.Type1) -> (univs.Type0) -> (univs.Type0) -> (univs.Type1) -> (univs.Type1) -> (univs.Type1) -> (univs.Type0) -> (univs.Type0) -> (univs.Type1) -> (univs.Type1) -> (univs.Type1) -> (univs.Type0) -> (univs.Type0) -> (univs.Type1) -> (univs.Type1) -> (univs.Type1) -> (univs.Type0) -> (univs.Type0) -> (univs.Type1) -> (univs.Type1) -> (univs.Type1) -> (univs.Type0) -> (univs.Type0) -> (univs.Type1) -> (univs.Type1) -> (univs.Type1) -> (univs.Type0) -> (univs.Type0) -> (univs.Type1) -> (univs.Type1) -> (univs.Type1) -> (univs.Type0) -> (univs.Type0) -> (univs.Type1) -> (univs.Type1) -> (univs.Type1) -> (univs.Type0) -> (univs.Type0) ->"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEven_or_odd. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $a$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $a$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $a$.\nassistant\n", "label": "even_or_odd : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (a : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a))))) .", "predict": "Output: Axiom Even_or_odd : (n : Term univs.Type0 nat) -> (match (odd n) with | true => (even (nat (lift univs.Type0 univs.Type2 nat n))) | false => (even (nat (times (nat (plus (nat (plus (nat (plus (nat (times (nat (nat (nat O)) (nat (nat (nat S) (nat (nat (nat S))))))))) (nat (nat (nat S)))))) (nat (nat (nat S)))) (nat (nat (nat S)))) (nat (nat (nat O))))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_Type1. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Alors pour toutes les fonctions $Q_$ des éléments $_x_791$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type1$, pour toutes les fonctions $_H_mk_Aop$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c", "label": "postulate Aop_rect_Type1 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_791 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ univs.Type1) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type1 (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_791 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term univs.Type1 (Q_ x_791)", "predict": "$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ et des fonctions $_assocr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$, il existe une fonction $_mk_Aop$ des éléments $_x_791$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$ appliqué à des éléments de $cic.Univ$ de $univs.Type1$ et des fonctions $op$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $op$ des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$ appliqué à des éléments de $cic.Univ$ de $univs.Type1$ et des fonctions"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or", "label": "postulate Aop_discr : (a1 : cic.Univ univs.Type0) -> (a2 : cic.Term univs.Type0 a1) -> (x : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop a1 a2)) -> (y : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop a1 a2)) -> (_e : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop a1 a2)) x y)) -> cic.Term univs.Type2 (matita_arithmetics_bigops.match_Aop a1 a2 (cic.succ univs.Type2) (\\ __ : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop a1 a2) -> cic.univ univs.Type2) (\\ t0 : ((__ : cic.Term univs.Type0 a1) -> (__1 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ t1 : ((a : cic.Term univs.Type0 a1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (t0 a2 a) a)) -> \\ t2 : ((a : cic.Term univs.Type0 a1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (t0 a a2) a)) -> \\ t3 : ((a : cic.Term univs.Type0 a1) -> (b : cic.Term univs.Type0 a1) -> (c : cic.Term univs.Type0 a1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (t0 a (t0 b c)) (t0 (t0 a b) c))) -> matita_arithmetics_bigops.match_Aop a1 a2 (cic.succ univs.Type2) (\\ __ : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop a1 a2) -> cic.univ univs.Type2) (\\ u0 : ((__ : cic.Term univs.Type0 a1) -> (__1 : cic.Term univs.Type0 a1) -> cic.Term univs.Type0 a1) -> \\ u1 : ((a : cic.Term univs.Type0 a1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (u0 a2 a) a)) -> \\ u2 : ((a : cic.Term univs.Type0 a1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (u0 a a2) a)) -> \\ u3 : ((a : cic.Term univs.Type0 a1) -> (b : cic.Term univs.Type0 a1) -> (c : cic.Term univs.Type0 a1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (u0 a (u0 b c)) (u0 (u0 a b) c))) -> cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (\\ P : cic.Univ univs.Type1 -> cic.prod univs.Type1 univs.Type1 (cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 -> a1)))) (matita_basics_logic.R0 (cic.prod univs.Type0 univs.Type0 a1 (\\ __ : cic.Term univs.Type0 a1 -> cic.prod univs.Type0 univs.Type0 a1 (\\ __1 : cic.Term univs.Type0 a1 ->", "predict": " extra text).\n\nEnglish statement: The sum of the squares of two numbers is equal to the square of their sum.\n\nAgda code: \n```agda\ndata Nat : Set where\n  zero : Nat\n  suc  : Nat -> Nat\n\nsquare : Nat -> Nat\nsquare zero = zero\nsquare (suc n) = suc (suc (square n))\n\nsumOfSquares : Nat -> Nat -> Nat\nsumOfSquares a b = square a + square b\n\nsquareOfSum : Nat -> Nat -> Nat\nsquareOfSum a b = square (suc (suc a + suc (suc b)))\n\ncheck : (a : Nat) -> (b : Nat) -> sumOfSquares a b ≡ squareOfSum a b\ncheck zero _ = refl\ncheck (suc a) zero = refl\ncheck (suc a) (suc b) = cong suc (check a b)\n```\n\nOutput text:\n```agda\ndata Nat : Set where\n  zero : Nat\n  suc  : Nat -> Nat\n\nsquare : Nat -> Nat\nsquare zero = zero\nsquare (suc n) = suc (suc (square n))\n\nsumOfSquares : Nat -> Nat -> Nat\nsumOfSquares a b = square a + square b\n\nsquareOfSum : Nat -> Nat -> Nat\nsquareOfSum a b = square (suc (suc a + suc (suc b)))\n\ncheck : (a : Nat) -> (b : Nat) -> sumOfSquares a b ≡ squareOfSum a b\ncheck zero _ = refl\ncheck (suc a) zero = refl\ncheck (suc a) (suc b) = cong suc (check a b)\n```"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_rect_CProp2. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $_f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $univs.Type0$, för alla funktioner $Q_$ från element $_x_658$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_DPair$ från element $dpi1$ av $cic.Term$ av $univs.Type0$ och $A$ och element $_dpi2$ av $cic.Term$ av $univs.Type0$ och $_f$ applicerat på $dpi1$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.mk_DPair$ applicerat på $A$ och $_f$ och $dpi1$ och $_dpi2$, för alla element $x_658$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_658$.\nassistant\n", "label": "axiom DPair_rect_CProp2 (A : cic.Univ univs.Type0) (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) (Q_ : (_x_658 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop) (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) (x_658 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) : cic.Term cic.prop (Q_ x_658)", "predict": "DPair_rect_CProp2 : \n  ∀ A : cic.Univ,\n  ∀ f : ∀ x : cic.Term, A → cic.Univ,\n  ∀ Q : ∀ x : cic.Term, DPair A f → cic.prop,\n  ∀ H_mk_DPair : ∀ dpi1 : cic.Term, A → ∀ dpi2 : cic.Term, f dpi1 → cic.Term → cic.prop,\n  (∀ x : cic.Term, DPair A f → cic.prop → Q x) A f λ x dpi → Q (dpi (x, DPair A f)) (H_mk_DPair dpi x)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_15622. Soient $m$ et $n$ et $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $posn$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $posm$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$, pour tous les éléments $pnm$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $c$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $_clearme$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $d$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs", "label": "let_clause_15622 : m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) -> c : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (d : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arith", "predict": ".Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, on a $\\text{Prop}$.\n\nOutput: Let_clause_15622 : forall (m : cic.Term univs.Type0) (n : cic.Term univs.Type0) (a : cic.Term matita_arithmetics_nat.nat) (b : cic.Term matita_arithmetics_nat.nat), forall (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)), forall (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_gcd.gcd n m (matita_arithmetics_nat.S matita_arithmetics_nat.O))))), forall (c : cic.Term univs.Type0 matita_arithmetics_nat.nat), forall (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (fun d => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_gcd.gcd n m (matita_arithmetics_nat.S matita_arithmetics_nat.O))))))), Prop."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExp_pi. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Then for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_bigops.bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $matita_arithmetics_exp.exp$ applied to $f$ applied to $i$ and $m$ and $matita_arithmetics_exp.exp$ applied to $matita_arithmetics_bigops.bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $f$ applied to $i$ and $m$.\nassistant\n", "label": "axiom exp_pi (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (λ i => p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (λ i => matita_arithmetics_exp.exp (f i) m)) (matita_arithmetics_exp.exp (matita_arithmetics_bigops.bigop n (λ i => p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (λ i => f i)) m))", "predict": "Output: \n```\nRequire Import Coq.QArith.QArith.\nRequire Import Coq.QArith.Qpow.\nRequire Import Coq.QArith.Qlog.\nRequire Import Coq.QArith.Qnump.\nRequire Import Coq.QArith.Qring.\nRequire Import Coq.QArith.Qreals.\nRequire Import Coq.QArith.Qexp.\nRequire Import Coq.QArith.Qnat.\nRequire Import Coq.QArith.Qfin.\nRequire Import Coq.QArith.Qfin_dec.\nRequire Import Coq.QArith.Qfin2.\nRequire Import Coq.QArith.Qfin2_dec.\nRequire Import Coq.QArith.Qfin3.\nRequire Import Coq.QArith.Qfin3_dec.\nRequire Import Coq.QArith.Qfin4.\nRequire Import Coq.QArith.Qfin4_dec.\nRequire Import Coq.QArith.Qfin5.\nRequire Import Coq.QArith.Qfin5_dec.\nRequire Import Coq.QArith.Qfin6.\nRequire Import Coq.QArith.Qfin6_dec.\nRequire Import Coq.QArith.Qfin7.\nRequire Import Coq.QArith.Qfin7_dec.\nRequire Import Coq.QArith.Qfin8.\nRequire Import Coq.QArith.Qfin8_dec.\nRequire Import Coq.QArith.Qfin9.\nRequire Import Coq.QArith.Qfin9_dec.\nRequire Import Coq.QArith.Qfin10.\nRequire Import Coq.QArith.Qfin10_dec.\nRequire Import Coq.QArith.Qfin11.\nRequire Import Coq.QArith.Qfin11_dec.\nRequire Import Coq.QArith.Qfin12.\nRequire Import Coq.QArith.Qfin12_dec.\nRequire Import Coq.QArith.Qfin13.\nRequire Import Coq.QArith.Qfin13_dec.\nRequire Import Coq.QArith.Qfin14.\nRequire Import Coq.QArith.Qfin14_dec.\nRequire Import Coq.QArith.Qfin15.\nRequire Import Coq.QArith.Qfin15_dec.\nRequire Import Coq.QArith.Qfin16.\nRequire Import Coq.QArith.Qfin16_dec.\nRequire Import Coq.QArith.Qfin17.\nRequire Import Coq.QArith.Qfin17_dec.\nRequire Import Coq.QArith.Qfin18.\nRequire Import Coq.QArith"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBool_rect_CProp2_body. För alla funktioner $Q_$ från element $_x_356$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Univ$ av $cic.prop$, för alla element $_H_true$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_bool.true$, för alla element $_H_false$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_bool.false$, för alla element $x_356$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_356$.\nassistant\n", "label": "Axiom bool_rect_CProp2_body : forall Q_ : ((_x_356 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop), forall _H_true : cic.Term cic.prop (Q_ matita_basics_bool.true), forall _H_false : cic.Term cic.prop (Q_ matita_basics_bool.false), forall x_356 : cic.Term univs.Type0 matita_basics_bool.bool, cic.Term cic.prop (Q_ x_356) .", "predict": "Axiom FörallaFunktionerQ_ : cTermunivsType0boolcic.propQ_true : cTermcic.propQ_false : cTermcic.prop (λx_356 : cTermunivsType0bool, Q_ x_356)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Alors pour tous les éléments $_xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $nil$, pour tous les éléments $_x_969$ et $_x_970$ de $cic.Term$ de $univs.Type0$ et de $A$, $cic.Term$ tient pour $univs.Type0$ et $A$.\nassistant\n", "label": "prod_body : A : cic.Univ univs.Type0 -> nil : cic.Term univs.Type0 A -> _xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A nil) -> _x_969 : cic.Term univs.Type0 A -> _x_970 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A .", "predict": "Axiom prod_body : forall (A : cic.Univ univs.Type0) (nil : Term univs.Type0 A) (_xxx : Term univs.Type0 (Dop A nil)) (_x_969 _x_970 : Term univs.Type0 A), Term univs.Type0 A."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_inv_rect_Type2. For all elements $x1$ of $cic.Univ$ of $univs.Type0$, for all elements $x2$ of $cic.Term$ of $univs.Type0$ and $x1$, for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1716$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type2$, for all functions $_H1$ from elements $sum$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ and functions $prod$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $c", "label": "axiom Dop_inv_rect_Type2 (x1 : cic.Univ univs.Type0) (x2 : cic.Term univs.Type0 x1) (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) (P : (_z1716 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> cic.Univ univs.Type2) (_H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> (prod : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_null : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> (_distr : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> (_z1717 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term univs.Type2 (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) : cic.Term univs.Type2 (P Hterm)", "predict": "ic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ of $univs.Type0$ and $x1$, there exists a function $Q$ from elements $x3$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Univ$ of $univs.Type2$ and a function $_H2$ from elements $sum$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ and functions $prod$ from elements $x3$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $x4$ of $cic.Term$ of $univs.Type0$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ of $univs.Type0$ and $x1$ and functions $_null$ from elements $x3$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $prod$ applied to $x3$ and $x2$ and $x4$ and $x4$ and functions $_distr$ from elements $x3$ of $cic.Term$ of $univs.Type0$ and $x1$ and"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nUnit_rect_Type2. Soit $Q_$ une fonction des éléments $_x_503$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $univs.Type2$. Alors pour tous les éléments $_H_it$ de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_basics_types.it$, pour tous les éléments $x_503$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$, $cic.Term$ tient pour $univs.Type2$ et $Q_$ appliqué à $x_503$.\nassistant\n", "label": "unit_rect_Type2 : Q_ : (_x_503 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Univ univs.Type2) -> _H_it : cic.Term univs.Type2 (Q_ matita_basics_types.it) -> x_503 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Term univs.Type2 (Q_ x_503) .", "predict": "Axiom prop70 : odd 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTrue_to_andb_true. Låt $b1$ och $b2$ vara element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $b1$ och $matita_basics_bool.true$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $b2$ och $matita_basics_bool.true$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $matita_basics_bool.andb$ applicerat på $b1$ och $b2$ och $matita_basics_bool.true$.\nassistant\n", "label": "postulate true_to_andb_true : (b1 : cic.Term univs.Type0 matita_basics_bool.bool) -> (b2 : cic.Term univs.Type0 matita_basics_bool.bool) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) b1 matita_basics_bool.true)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) b2 matita_basics_bool.true)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_basics_bool.andb b1 b2) matita_basics_bool.true)", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExp_S_sigma_p. För alla element $a$ och $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_exp.exp$ applicerat på $matita_arithmetics_nat.S$ applicerat på $a$ och $n$ och $matita_arithmetics_bigops.bigop$ applicerat på $matita_arithmetics_nat.S$ applicerat på $n$ och funktionen som avbildar $k$ som $matita_basics_bool.true$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.plus$ och funktionen som avbildar $k$ som $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_binomial.bc$ applicerat på $n$ och $k$ och $matita_arithmetics_exp.exp$ applicerat på $a$ och $matita_arithmetics_nat.minus$ applicerat på $n$ och $k$.\nassistant\n", "label": "postulate exp_S_sigma_p : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_exp.exp (matita_arithmetics_nat.S a) n) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n) (\\ k : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_bool.true) matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_nat.plus (\\ k : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_nat.times (matita_arithmetics_binomial.bc n k) (matita_arithmetics_exp.exp a (matita_arithmetics_nat.minus n k)))))", "predict": "postulate Exp_S_sigma_p : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) (n : matita_arithmetics_nat.nat) -> cic.prop (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_exp.exp matita_arithmetics_nat.S a n) -> (k : matita_arithmetics_nat.nat) -> matita_basics_bool.true -> matita_arithmetics_nat.nat -> matita_arithmetics_nat.O -> matita_arithmetics_nat.plus -> matita_arithmetics_nat.times -> (k' : matita_arithmetics_nat.nat) -> (k' -> matita_basics_bool.true) -> matita_arithmetics_binomial.bc n k (matita_arithmetics_exp.exp a (matita_arithmetics_nat.minus n k)) -> matita_arithmetics_exp.exp a (matita_arithmetics_nat.plus (matita_arithmetics_nat.times (matita_arithmetics_binomial.bc n k (matita_arithmetics_exp.exp a (matita_arithmetics_nat.minus n k))) (matita_arithmetics_exp.exp a k)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExp_to_eq_O. För alla element $n$ och $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_exp.exp$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $m$ och $matita_arithmetics_nat.O$.\nassistant\n", "label": "exp_to_eq_O : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) -> __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_exp.exp n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m matita_arithmetics_nat.O) .", "predict": "Output: Axiom Exp_to_eq_O : forall (n m : Term univs.Type0 matita_arithmetics_nat.nat) (__) : prop (lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (exp n m (S O))) (eq (lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (exp n m O)) (lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (exp n m (S O))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_max_spec. Let $_n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $return_sort$ be an element of $cic.Sort$. Let $return_type$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $z$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_minimization.max_spec$ applied to $_n$ and $_f$ and $__$ to elements of $cic.Univ$ of $return_sort$. Then for all functions $case_found_max_spec$ from elements $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $_n$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $_f$ applied to $m$ and $matita_basics_bool.true$ and functions $__2$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $i$ and elements $__3$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $_n$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $_f$ applied to $i$ and $matita_basics_bool.false$ to elements of $", "label": "match_max_spec : _n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> return_sort : cic.Sort -> return_type : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> z : cic.Term cic.prop (matita_arithmetics_minimization.max_spec _n _f __) -> cic.Univ return_sort) -> case_found_max_spec : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt m _n) -> __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f m) matita_basics_bool.true) -> __2 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __2 : cic.Term cic.prop (matita_arithmetics_nat.lt m i) -> __3 : cic.Term cic.prop (matita_arithmetics_nat.lt i _n) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f i) matita_basics_bool.false)) -> cic.Term return_sort (return_type m (matita_arithmetics_minimization.found_max_spec _n _f m __ __", "predict": "cic.Univ$ of $return_type$ applied to $m$ and $z$ and $case_found_max_spec$ and $return_sort$, the following is true: return_type $case_found_max_spec$ applied to $m$ and $z$ and $return_sort$ applied to $m$ and $z$ and $case_found_max_spec$ and $return_sort$ is equal to return_type $case_found_max_spec$ applied to $m$ and $z$ and $return_sort$ applied to $m$ and $z$ and $case_found_max_spec$ and $return_sort$.\nOutput: \nOutput: \nMatch_max_spec : forall (n : Term univs.Type0) (matita_arithmetics_nat:nat) (f : (Term univs.Type0) -> (nat) -> (Term univs.Type0) -> (bool)) (return_sort : Sort) (return_type : (Term univs.Type0) -> (nat) -> (prop) -> (max_spec n f _) -> (Term univs.Type0) -> (return_sort)) -> forall (case_found_max_spec : (nat) -> (prop) -> (eq (lift univs.Type0 univs.Type2 bool) (f m matita_basics_bool.true)) -> ((Term univs.Type0) -> (prop) -> (lt m n) -> (Term univs.Type0) -> (eq (lift univs.Type0 univs.Type2 bool) (f i matita_basics_bool.false))) -> return_type (case_found_max_spec m z return_sort) = return_type (case_found_max_spec m z return_sort)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRewrite_r. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Alors pour toutes les fonctions $P$ des éléments $__$ de $cic.Term$ de $univs.Type2$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type2$, pour tous les éléments $__$ de $cic.Term$ de $univs.Type2$ et de $P$ appliqué à $x$, pour tous les éléments $y$ de $cic.Term$ de $univs.Type2$ et de $A$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $y$ et $x$, $cic.Term$ tient pour $univs.Type2$ et $P$ appliqué à $y$.\nassistant\n", "label": "postulate rewrite_r : (A : cic.Univ univs.Type2) -> (x : cic.Term univs.Type2 A) -> (P : (__ : cic.Term univs.Type2 A) -> cic.Univ univs.Type2) -> (__ : cic.Term univs.Type2 (P x)) -> (y : cic.Term univs.Type2 A) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq A y x)) -> cic.Term univs.Type2 (P y)", "predict": "postulate Rewrite_r : (A : cic.Univ) -> (x : A) -> (P : (__) -> cic.Univ) -> (y : A) -> (y_eq_x : matita_basics_logic.eq A y x) -> (__) -> cic.Term univs.Type2 -> P y (y_eq_x _ _) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSig_inv_rect_CProp1. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $x2$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1224$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $x2$ appliqué à $pi1$ et des éléments $_z1225$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sig$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_Sig$ appliqué à $x1$ et $x2$ et $pi1$ et $_pi2$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $x1$ et $x2$ et $pi1$ et $_pi2$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "Axiom Sig_inv_rect_CProp1 : forall x1 : cic.Univ univs.Type0, forall x2 : ((__ : cic.Term univs.Type0 x1) -> cic.Univ cic.prop), forall Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2), forall P : ((_z1224 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> cic.Univ cic.prop), forall _H1 : ((pi1 : cic.Term univs.Type0 x1) -> (_pi2 : cic.Term cic.prop (x2 pi1)) -> (_z1225 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2)) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))), cic.Term cic.prop (P Hterm) .", "predict": "Output: \nAxiom Sig_inv_rect_CProp1 : forall (x1 : cic.Univ) (x2 : forall __ : cic.Term, x1 -> cic.Univ -> cic.prop), (forall Hterm : forall x1' : cic.Term, forall x2' : cic.Term, x1' -> x2' -> matita_basics_types.Sig x1' x2' -> cic.Term -> cic.prop -> cic.Term), (forall P : forall z1224 : cic.Term, matita_basics_types.Sig x1 x2 -> cic.Univ -> cic.prop), (forall _H1 : forall pi1 : cic.Term, x1 -> pi1 -> cic.Term, forall _pi2 : forall pi2 : cic.prop, x2 -> pi2 -> cic.Term, forall z1225 : cic.Term, matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_types.Sig x1 x2) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2) (cic.Term z1225)), P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2) (matita_basics_types.mk_Sig x1 x2 pi1 _pi2) (cic.Term z1225) -> cic.Term -> cic.prop -> cic.Term."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nIs_nil. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $__$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$. Then $cic.Univ$ holds for $cic.prop$.\nassistant\n", "label": "axiom is_nil (A : cic.Univ univs.Type0) (__ : cic.Term univs.Type0 (matita_basics_lists_list.list A)) : cic.Univ cic.prop", "predict": "Output: \naxiom is_nil : univs.type0 -> cic.prop.\nlet A : univs.type0 := cic.univ.\nlet __ : univs.type0 := cic.term.\nlet list_A : matita_basics_lists_list.list A := ... -- some value.\nthen_universe A holds."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_rect_Type1_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_925$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type1$. Let $_H_mk_range$ be a function from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$. Let $x_925$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$. Then $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_925$.\nassistant\n", "label": "Axiom range_rect_Type1_body : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_925 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type1), forall _H_mk_range : ((_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))), forall x_925 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A), cic.Term univs.Type1 (Q_ x_925) .", "predict": "Output: \nVariable A : cic.Univ univs.Type0.\nVariable Q : (x : cic.Term univs.Type0) -> matita_arithmetics_bigops.range A -> Univ univs.Type1.\nVariable H_mk_range : (enum : (x : _) -> nat -> Term univs.Type0) -> A -> upto : nat -> filter : (x : _) -> nat -> Term univs.Type0 -> bool -> Term univs.Type0 -> Term univs.Type1 -> Q (matita_arithmetics_bigops.mk_range A enum upto filter).\nVariable x_925 : cic.Term univs.Type0 -> matita_arithmetics_bigops.range A.\nLemma range_rect_Type1_body : (x_925 : _) -> Term univs.Type1 -> Q x_925."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1553. Let $n$ and $n0$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $a$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $a$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $a$. Let $a$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme0$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $a$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $mat", "label": "let_clause_1553 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (a : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n0 (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n0 (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a))))) -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n0 (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n0 (matita_arithmetics_nat.S (mat", "predict": "ita_arithmetics_nat.nat$ and $n0$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $a$. \nOutput: Let_clause_1553 : (forall (n : Term univs Type0) (n0 : nat), (forall (_clearme : prop) (ex : Or (eq (lift Type0 Type2 nat) n0) (Or (eq (lift Type0 Type2 nat) n0) (And (eq (lift Type0 Type2 nat) n0) (times S (S O) a))))) -> (forall (a : nat), (forall (_clearme0 : prop) (Or (eq (lift Type0 Type2 nat) n0) (Or (eq (lift Type0 Type2 nat) n0) (And (eq (lift Type0 Type2 nat) n0) (times S (S (times S O)) a))))))) . \n\nExample3: \nInput: Translate the following English statement into Dedukti. Prop81. We can prove that $2$ is even. \nOutput: Axiom prop81 : even 2 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMonotonic. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_R$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$, håller $cic.Univ$ för $cic.prop$.\nassistant\n", "label": "monotonic : A : cic.Univ univs.Type0 -> _R : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> _f : (__ : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> cic.Univ cic.prop .", "predict": "Output: \naxiom monotonic : forall (univs : univs.type0) (term : term.univs.type0 univs) (a : term.univs.type0 univs) (r : term.univs.type0 univs a term.univs.type0 univs a prop.univ), (forall (f : term.univs.type0 univs a term.univs.type0 univs a), prop.univ) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nPi1_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_xxx$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $f$. Alors $cic.Term$ tient pour $univs.Type0$ et $A$.\nassistant\n", "label": "pi1_body : A : cic.Univ univs.Type0 -> f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> _xxx : cic.Term univs.Type0 (matita_basics_types.Sig A f) -> cic.Term univs.Type0 A .", "predict": "Axiom Pi1_body : forall A : univers.Type0 -> (term.Type0 -> univers.Univ -> proposition) -> (term.Type0 -> matita_basics_types.Sig A) -> univers.Type0 -> proposition ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSameF_p_le. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $p$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Alors pour toutes les fonctions $f$ et $g$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$, pour tous les éléments $n$ et $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $m$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_bigops.sameF_p$ appliqué à $m$ et $p$ et $A$ et $f$ et $g$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_bigops.sameF_p$ appliqué à $n$ et $p$ et $A$ et $f$ et $g$.\nassistant\n", "label": "sameF_p_le : A : cic.Univ univs.Type0 -> p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 A) -> g : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 A) -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.le n m) -> __1 : cic.Term cic.prop (matita_arithmetics_bigops.sameF_p m p A f g) -> cic.Term cic.prop (matita_arithmetics_bigops.sameF_p n p A f g) .", "predict": "Output: Axiom SameF_p_le : forall (A : cic.Univ univs.Type0) (p : forall ___, cic.Term univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term univs.Type0 -> matita_basics_bool.bool), forall (f g : forall ___, cic.Term univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term univs.Type0), forall (n m : cic.Term univs.Type0), forall (le : matita_arithmetics_nat.le n m), forall (sameF_p : matita_arithmetics_bigops.sameF_p m p A f g), cic.Term (cic.prop univs.Type0) (matita_arithmetics_bigops.sameF_p n p A f g)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1549. Let $m$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Then for all elements $eqm0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $m$, for all elements $x1106$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x1106$ and $matita_arithmetics_nat.minus$ applied to $x1106$ and $m$.\nassistant\n", "label": "axiom let_clause_1549 (m n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (eqm0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O m)) (x1106 : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1106 (matita_arithmetics_nat.minus x1106 m))", "predict": "Output: \nLet_clause_1549 : ∀ m : cic.Term univs.Type0 matita_arithmetics_nat.nat, ∀ n : cic.Term univs.Type0 matita_arithmetics_nat.nat, ∀ posn : cic.Term univs.Type0 matita_arithmetics_nat.lt matita_arithmetics_nat.O n, ∀ eqm0 : cic.Term univs.Type0 matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat matita_arithmetics_nat.O m), ∀ x1106 : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term univs.Type0 holds (cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat x1106 matita_arithmetics_nat.minus x1106 m)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1068. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $permf$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_permutation.permut$ applicerat på $f$ och $n$. Låt $i$ och $j$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $lein$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $i$ och $n$. Låt $lejn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $j$ och $n$. Då för alla element $a$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $matita_arithmetics_nat.le$ applicerat på $a$ och $n$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $f$ applicerat på $a$ och $i$, för alla element $lean$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $a$ och $n$, för alla element $fa$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $f$ applicerat på $a$ och $", "label": "postulate let_clause_1068 : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (permf : cic.Term cic.prop (matita_arithmetics_permutation.permut f n)) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (lein : cic.Term cic.prop (matita_arithmetics_nat.le i n)) -> (lejn : cic.Term cic.prop (matita_arithmetics_nat.le j n)) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le a n) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i))) -> (lean : cic.Term cic.prop (matita_arithmetics_nat.le a n)) -> (fa : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i)) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme", "predict": "j$, är det sann att $permf$ applicerat på $_clearme$ och $lein$ och $fa$ och $lejn$ och $fa$ och $lean$ och $fa$ och $a$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$ och $fa$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_rect_Type4_body. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_590$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type4$, pour tous les éléments $_H_None$ de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_basics_types.None$ appliqué à $_A$, pour toutes les fonctions $_H_Some$ des éléments $x_591$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_basics_types.Some$ appliqué à $_A$ et $x_591$, pour tous les éléments $x_590$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$, $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_590$.\nassistant\n", "label": "option_rect_Type4_body : _A : cic.Univ univs.Type0 -> Q_ : (_x_590 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Univ univs.Type4) -> _H_None : cic.Term univs.Type4 (Q_ (matita_basics_types.None _A)) -> _H_Some : (x_591 : cic.Term univs.Type0 _A -> cic.Term univs.Type4 (Q_ (matita_basics_types.Some _A x_591))) -> x_590 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Term univs.Type4 (Q_ x_590) .", "predict": "Axiom option_rect_Type4_body : forall A : cic.Univ, univs.Type0, (forall x_590 : cic.Term, univs.Type0, matita_basics_types.option, (forall H_None : cic.Term, univs.Type4, Q_ H_None (matita_basics_types.None A)), (forall H_Some : forall x_591 : cic.Term, univs.Type0, A -> cic.Term, univs.Type4, Q_ (H_Some x_591 (A x_591))), (forall x_590 : cic.Term, univs.Type0, matita_basics_types.option A), cic.Term, univs.Type4, Q_ x_590) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_div_S_div. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_div_and_mod.div$ applicerat på $n$ och $matita_arithmetics_nat.S$ applicerat på $m$ och $matita_arithmetics_div_and_mod.div$ applicerat på $n$ och $m$.\nassistant\n", "label": "lt_div_S_div : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp m (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))) n) -> cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_div_and_mod.div n (matita_arithmetics_nat.S m)) (matita_arithmetics_div_and_mod.div n m)) .", "predict": "Output: Axiom Lt_div_S_div : forall (n : Term univs.Type0) (m : nat), (lt m matita_arithmetics_nat.O) -> (forall (__) : prop (lt (matita_arithmetics_exp.exp m) (S (S (S (S (S (S (S (S (S (S (O))))))))))))), (forall (__1 : prop (le (matita_arithmetics_exp.exp m) (S (S (S (S (S (S (S (S (S (S (O)))))))))))))), (div n (S m) (div n m)) = (div n m)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd_rect_Type0_body. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_702$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $_H_mk_Prod$ une fonction des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $_A$ et $_B$ et $_fst$ et $_snd$. Alors pour tous les éléments $x_702$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_702$.\nassistant\n", "label": "Prod_rect_Type0_body : _A : cic.Univ univs.Type0 -> _B : cic.Univ univs.Type0 -> Q_ : (_x_702 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) -> cic.Univ univs.Type0) -> _H_mk_Prod : (_fst : cic.Term univs.Type0 _A -> _snd : cic.Term univs.Type0 _B -> cic.Term univs.Type0 (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) -> x_702 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) -> cic.Term univs.Type0 (Q_ x_702) .", "predict": "Output: Axiom Prod_rect_Type0_body : forall (A : cic.Univ) (B : cic.Univ), (forall (x_702 : cic.Term), (forall (Q_ : Prod A B (cic.Univ -> univs.Type0)), (forall (H_mk_Prod : A -> B -> cic.Term), (forall (fst : cic.Term), (forall (snd : cic.Term), (Q_ (matita_basics_types.mk_Prod A B fst snd)) -> (H_mk_Prod fst A snd B -> (Q_ (matita_basics_types.mk_Prod A B (fst) (snd)))))) -> (forall (x_702 : Prod A B (cic.Univ -> univs.Type0)), (Q_ x_702)))) -> (forall (x_702 : Prod A B (cic.Univ -> univs.Type0)), (Q_ x_702))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBigop_prod. Låt $k1$ och $k2$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $p1$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $p2$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Låt $op$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $B$ och $nil$. Då för alla funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat", "label": "axiom bigop_prod (k1 k2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (p2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (B : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 B) (op : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop B nil)) (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop k1 (λ x => p1 x) B nil (matita_arithmetics_bigops.op B nil op) (λ x => matita_arithmetics_bigops.bigop k2 (λ i => p2 x i) B nil (matita_arithmetics_bigops.op B nil op) (λ i => f x i))) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.times k1 k2) (λ i => matita_basics_bool.andb (p1 (matita_arithmetics_div_and_mod.div i k2)) (p2 (matita_arithmetics_div_and_mod.div i k2) (matita_arithmetics_div_and_mod.mod i k2))) B nil (matita_arithmetics_bigops.op B nil op) (λ i => f (matita_arithmetics_div_and_mod.div i k2) (matita_arithmetics_div_and_mod.mod i k2))))", "predict": " på $f$ och $op$ och $p1$ och $p2$ samt $f$ och $p1$ och $nil$ samt $f$ och $p2$ och $nil$ och $f$ och $p2$ och $p1$ samt $f$ och $p1$ och $p2$ samt $f$ och $p2$ och $p1$ samt $f$ och $p2$ och $nil$ samt $f$ och $p1$ och $nil$ samt $f$ och $p1$ och $nil$ samt $f$ och $p1$ och $p1$ samt $f$ och $p2$ och $p2$ samt $f$ och $p1$ och $p2$ samt $f$ och $p2$ och $p1$ samt $f$ och $p2$ och $p1$ samt $f$ och $p1$ och $p2$ samt $f$ och $p2$ och $p1$ samt $f$ och $p1$ och $p1$ samt $f$ och $p2$ och $p2$ samt $f$ och $p1$ och $p2$ samt $f$ och $p2$ och $p1$ samt $f$ och $p2$ och $p1$ samt $f$ och $p1$ och $p2$ samt $f$ och $p2$ och $p1$ samt $f$ och $p1$ och $p1$ samt $f$ och $p2$ och $p2$ samt $f$ och $p1$ och $p2$ samt $f$ och $p2$ och $p1$ samt $f$ och $p2$ och $p1$ samt $f$ och $p1$ och $p2$ samt $f$ och $p2$ och $p1$ samt $f$ och $p1$ och $p1$ samt $f$ och $p2$ och $p2$ samt $f$ och $p1$ och $p2$ samt $f$ och $p2$ och $p1$ samt $f$ och $p2$ och $p1$ samt $f$ och $p1$ och $p2$ samt $f$ och $p2$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAnd_rect_CProp1_body. Låt $_A$ och $_B$ vara element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_162$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_conj$ vara en funktion från element $x_164$ av $cic.Term$ av $cic.prop$ och $_A$ och element $x_163$ av $cic.Term$ av $cic.prop$ och $_B$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_logic.conj$ applicerat på $_A$ och $_B$ och $x_164$ och $x_163$. Låt $x_162$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$. Då håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_162$.\nassistant\n", "label": "And_rect_CProp1_body : _A : cic.Univ cic.prop -> _B : cic.Univ cic.prop -> Q_ : (_x_162 : cic.Term cic.prop (matita_basics_logic.And _A _B) -> cic.Univ cic.prop) -> _H_conj : (x_164 : cic.Term cic.prop _A -> x_163 : cic.Term cic.prop _B -> cic.Term cic.prop (Q_ (matita_basics_logic.conj _A _B x_164 x_163))) -> x_162 : cic.Term cic.prop (matita_basics_logic.And _A _B) -> cic.Term cic.prop (Q_ x_162) .", "predict": "Output: Axiom And_rect_CProp1_body : ∀ _A _B : cic.Univ, ∀ Q_ : ∀ _x_162 : cic.Term cic.prop, ∀ conj : ∀ _A : cic.prop, ∀ _B : cic.prop, ∀ _x_163 : cic.Term cic.prop, (Q_ _A _x_163) ∧ (Q_ _B _x_163) → (Q_ (And _A _B) (conj _A _B _x_163))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nR4. Låt $T0$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $a0$ av $cic.Term$ av $univs.Type0$ och $T0$, för alla funktioner $T1$ från element $x0$ av $cic.Term$ av $univs.Type0$ och $T0$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $x0$ till element av $cic.Univ$ av $univs.Type0$, för alla element $a1$ av $cic.Term$ av $univs.Type0$ och $T1$ applicerat på $a0$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$, för alla funktioner $T2$ från element $x0$ av $cic.Term$ av $univs.Type0$ och $T0$ och element $p0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $x0$ och element $x1$ av $cic.Term$ av $univs.Type0$ och $T1$ applicerat på $x0$ och $p0$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T1$ applicerat på $x0$ och $p0$ och $matita_basics_logic.R1$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $T1$ och $a1$ och $x0$ och $p0$", "label": "Axiom R4 : forall T0 : cic.Univ univs.Type0, forall a0 : cic.Term univs.Type0 T0, forall T1 : ((x0 : cic.Term univs.Type0 T0) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> cic.Univ univs.Type0), forall a1 : cic.Term univs.Type0 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0)), forall T2 : ((x0 : cic.Term univs.Type0 T0) -> (p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> (x1 : cic.Term univs.Type0 (T1 x0 p0)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T1 x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 T0) a0 T1 a1 x0 p0) x1)) -> cic.Univ univs.Type0), forall a2 : cic.Term univs.Type0 (T2 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0)", "predict": " till element av $cic.Univ$ av $univs.Type0$, $T1$ är lika med $T2$.\n\nOutput: \nAxiom R4 : \nforall T0 : univs.Type0 -> cic.Univ, \nforall a0 : cic.Term -> univs.Type0 -> cic.Univ, \nforall T1 : (forall x0 : cic.Term -> univs.Type0 -> cic.prop -> matita_basics_logic.eq -> cic.lift univs.Type0 univs.Type2 T0 a0 x0) -> cic.Term -> univs.Type0 -> cic.prop -> matita_basics_logic.eq -> cic.lift univs.Type0 univs.Type2 T0 a0 x0 -> cic.Term -> univs.Type0 -> cic.prop -> matita_basics_logic.eq -> cic.lift univs.Type0 univs.Type2 T0 a0 x0 -> cic.Term -> univs.Type0 -> cic.prop -> matita_basics_logic.eq -> cic.lift univs.Type0 univs.Type2 T0 a0 x0 -> cic.Term -> univs.Type0 -> cic.prop -> matita_basics_logic.eq -> cic.lift univs.Type0 univs.Type2 T0 a0 x0 -> cic.Term -> univs.Type0 -> cic.prop -> matita_basics_logic.eq -> cic.lift univs.Type0 univs.Type2 T0 a0 x0 -> cic.Term -> univs.Type0 -> cic.prop -> matita_basics_logic.eq -> cic.lift univs.Type0 univs.Type2 T0 a0 x0 -> cic.Term -> univs.Type0 -> cic.prop -> matita_basics_logic.eq -> cic.lift univs.Type0 univs.Type2 T0 a0 x0 -> cic.Term -> univs.Type0 -> cic.prop -> matita_basics_logic.eq -> cic.lift univs.Type0 univs.Type2 T0 a0 x0 -> cic.Term -> univs.Type0 -> cic.prop -> matita_basics_logic.eq -> cic.lift univs.Type0 univs.Type2 T0 a0 x0 -> cic.Term -> univs.Type0 -> cic.prop -> matita_basics_logic.eq -> cic.lift univs.Type0 univs.Type2 T0 a0 x0 -> cic.Term -> univs.Type0 -> cic.prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_rect_Type4_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_640$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $univs.Type4$. Let $_H_mk_DPair$ be a function from elements $dpi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_dpi2$ of $cic.Term$ of $univs.Type0$ and $_f$ applied to $dpi1$ to elements of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $matita_basics_types.mk_DPair$ applied to $A$ and $_f$ and $dpi1$ and $_dpi2$. Let $x_640$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$. Then $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_640$.\nassistant\n", "label": "postulate DPair_rect_Type4_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (Q_ : (_x_640 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ univs.Type4) -> (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term univs.Type4 (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (x_640 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term univs.Type4 (Q_ x_640)", "predict": "postulate DPair_rect_Type4_body : (A : univs.Type0) -> (f : (__) -> univs.Type0 -> univs.Type0) -> (Q_ : (x_640 : univs.Type0) -> matita_basics_types.DPair A f -> univs.Type4) -> (H_mk_DPair : (dpi1 : univs.Type0) -> A -> (dpi2 : univs.Type0) -> (f dpi1) -> univs.Type4 -> univs.Type4) -> (x_640 : (cic.Term univs.Type0) -> matita_basics_types.DPair A f) -> (cic.Term univs.Type4) -> Q_ x_640."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_rect_CProp0. Pour tous les éléments $_A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $Q_$ des éléments $_x_634$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $_H_None$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.None$ appliqué à $_A$, pour toutes les fonctions $_H_Some$ des éléments $x_635$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.Some$ appliqué à $_A$ et $x_635$, pour tous les éléments $x_634$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_634$.\nassistant\n", "label": "postulate option_rect_CProp0 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_634 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop) -> (_H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_635 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_635))) -> (x_634 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term cic.prop (Q_ x_634)", "predict": "postulate Option_rect_CProp0 : (A : univs.Type0) -> (Q_ : (x_634 : cic.Term) -> (option A (univ cic.Univ) -> (prop A cic.Univ) -> (option A (cic.Term prop) -> (Q_ x_634 (None _) (H_None) -> (H_Some x_635 (A x_635) (Q_ x_635) -> (x_634)))))) -> (x_634 : cic.Term) -> (prop A cic.Univ) -> (Q_ x_634)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_inv_rect_Type4. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x2$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$. Soit $P$ une fonction des éléments $_z1110$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type4$. Alors pour toutes les fonctions $_H1$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $x2$ appliqué à $dpi1$ et des éléments $_z1111$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$ à des éléments de $cic.Term$ de $univs.Type4$ et de $P$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$, $cic.Term$ tient pour $univs.Type4$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "postulate DPair_inv_rect_Type4 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> (P : (_z1110 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ univs.Type4) -> (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1111 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type4 (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type4 (P Hterm)", "predict": "postulate DPair_inv_rect_Type4 : \n  {x1 : cic.Univ} \n  {x2 : (λ _ _ → cic.Univ)} \n  {Hterm : cic.Term (DPair x1 x2)} \n  {P : (λ _ _ → cic.Univ) (DPair x1 x2)} \n  (H1 : (λ dpi1 dpi2 z1110 → cic.Term (univs.Type4))) \n  (H2 : (λ dpi1 dpi2 z1111 → cic.prop) (matita_basics_logic.eq (univs.Type0) (univs.Type2) (DPair x1 x2) (matita_basics_types.mk_DPair x1 x2) Hterm (matita_basics_types.mk_DPair x1 x2) dpi1 dpi2)) \n  → (P (matita_basics_types.mk_DPair x1 x2) (dpi1) (dpi2)) \n  where Hterm = (matita_basics_types.mk_DPair x1 x2) (dpi1) (dpi2)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nInvert_permut_f. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $m$ and $n$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_permutation.injn$ applied to $f$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_permutation.invert_permut$ applied to $n$ and $f$ and $f$ applied to $m$ and $m$.\nassistant\n", "label": "postulate invert_permut_f : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le m n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_permutation.injn f n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_permutation.invert_permut n f (f m)) m)", "predict": "postulate Invert_permut_f : (f : (λ (x y : (univs.Type0 -> matita_arithmetics_nat.nat)) -> (univs.Type0 -> matita_arithmetics_nat.nat))) -> (n m : (univs.Type0 -> matita_arithmetics_nat.nat)) -> (P : (cic.prop -> (matita_arithmetics_nat.le m n) -> (cic.prop -> (matita_arithmetics_permutation.injn f n) -> (cic.Term -> (matita_basics_logic.eq (cic.lift (univs.Type0 -> univs.Type2) (matita_arithmetics_nat.nat) (matita_arithmetics_permutation.invert_permut n f (f m)) (f m))))) -> (cic.Term -> (matita_basics_logic.eq (cic.Term -> (cic.prop -> (matita_arithmetics_nat.le m n) -> (cic.Term -> (matita_arithmetics_permutation.injn f n) -> (cic.prop -> (matita_basics_logic.eq (cic.lift (univs.Type0 -> univs.Type2) (matita_arithmetics_nat.nat) (matita_arithmetics_permutation.invert_permut n f (f m)) (f m))))) -> (cic.Term -> (matita_basics_logic.eq (cic.Term -> (cic.prop -> (matita_arithmetics_nat.le m n) -> (cic.Term -> (matita_arithmetics_permutation.injn f n) -> (cic.prop -> (matita_basics_logic.eq (cic.lift (univs.Type0 -> univs.Type2) (matita_arithmetics_nat.nat) (matita_arithmetics_permutation.invert_permut n f (f m)) (f m))))) -> (cic.Term -> (matita_basics_logic.eq (cic.Term -> (cic.prop -> (matita_arithmetics_nat.le m n) -> (cic.Term -> (matita_arithmetics_permutation.injn f n) -> (cic.prop -> (matita_basics_logic.eq (cic.lift (univs.Type0 -> univs.Type2) (matita_arithmetics_nat.nat) (matita_arithmetics_permutation.invert_permut n f"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_to_log_O. För alla element $n$ och $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_log.log$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.O$.\nassistant\n", "label": "postulate lt_to_log_O : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt m n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_log.log n m) matita_arithmetics_nat.O)", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd_inv_rect_Type3. Let $x1$ and $x2$ be elements of $cic.Univ$ of $univs.Type0$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z1248$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type3$. Let $_H1$ be a function from elements $_fst$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_snd$ of $cic.Term$ of $univs.Type0$ and $x2$ and elements $_z1249$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.mk_Prod$ applied to $x1$ and $x2$ and $_fst$ and $_snd$ to elements of $cic.Term$ of $univs.Type3$ and $P$ applied to $matita_basics_types.mk_Prod$ applied to $x1$ and $x2$ and $_fst$ and $_snd$. Then $cic.Term$ holds for $univs.Type3$ and $P$ applied to $Hterm$.\nassistant\n", "label": "postulate Prod_inv_rect_Type3 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2)) -> (P : (_z1248 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2)) -> cic.Univ univs.Type3) -> (_H1 : (_fst : cic.Term univs.Type0 x1) -> (_snd : cic.Term univs.Type0 x2) -> (_z1249 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod x1 x2)) Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term univs.Type3 (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term univs.Type3 (P Hterm)", "predict": "postulate Prod_inv_rect_Type3 : {x1 x2 : cic.Univ} -> univs.Type0 -> Prod x1 x2 -> (P : {z1248 : cic.Term} -> Prod x1 x2 -> cic.Univ) -> {H1 : {fst : cic.Term} -> {snd : cic.Term} -> {z1249 : cic.Term} -> cic.prop -> eq (cic.lift univs.Type0 univs.Type2 (Prod x1 x2 Hterm)) (matita_basics_types.mk_Prod x1 x2 (fst snd)) -> cic.Term} -> univs.Type3 -> P (matita_basics_types.mk_Prod x1 x2 (fst snd))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nCoerc_pair_sigma. Låt $A$ och $B$ vara element av $cic.Univ$ av $univs.Type0$. Låt $P$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $p$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.snd$ applicerat på $A$ och $B$ och $p$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $matita_basics_types.Sig$ applicerat på $B$ och funktionen som avbildar $x$ som $P$ applicerat på $x$.\nassistant\n", "label": "postulate coerc_pair_sigma : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 B) -> cic.Univ cic.prop) -> (p : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> (__ : cic.Term cic.prop (P (matita_basics_types.snd A B p))) -> cic.Term univs.Type0 (matita_basics_types.Prod A (matita_basics_types.Sig B (\\ x : cic.Term univs.Type0 B -> P x)))", "predict": "postulate Coerc_pair_sigma : \n  ∀ {univs : Universe} {Type0 : univs.Type} {A B : univs.Univ} (P : (x : Type0) → B → univs.Univ) → \n  (A , B) → (P (fst (A , B)) (snd (A , B))) → \n  (univs.Term) (Type0) → \n  ((A , B) , (univs.Term , P)) → \n  (univs.Term) (univs.Type0) → \n  ((fst (A , B)) , (snd (A , B))) → \n  (univs.Term) (univs.Type0) → \n  (fst ((fst (A , B)) , (snd (A , B))) , (snd ((fst (A , B)) , (snd (A , B))))) → \n  (univs.Term) (univs.Type0) → \n  (fst (P (fst (A , B)) (snd (A , B))) , (snd (P (fst (A , B)) (snd (A , B))))) → \n  (univs.Term) (univs.Type0) → \n  (P (fst (A , B)) (snd (A , B))) , (P (fst (A , B)) (snd (A , B))) → \n  (univs.Term) (univs.Type0) → \n  (fst (P (fst (A , B)) (snd (A , B))) , (snd (P (fst (A , B)) (snd (A , B))))) → \n  (univs.Term) (univs.Type0) → \n  (P (fst (A , B)) (snd (A , B))) , (P (fst (A , B)) (snd (A , B))) → \n  (univs.Term) (univs.Type0) → \n  (P (fst (A , B)) (snd (A , B))) , (P (fst (A , B)) (snd (A , B))) → \n  (univs.Term) (univs.Type0) → \n  (P (fst (A , B)) (snd (A , B))) , (P (fst (A , B"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_rect_Type0. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_927$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type0$. Let $_H_mk_range$ be a function from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $univs.Type0$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$. Then for all elements $x_927$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $univs.Type0$ and $Q_$ applied to $x_927$.\nassistant\n", "label": "Axiom range_rect_Type0 : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_927 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type0), forall _H_mk_range : ((_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))), forall x_927 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A), cic.Term univs.Type0 (Q_ x_927) .", "predict": "Range_rect_Type0. Parameter A : univs.Type0. Function Q : (x : cic.Term univs.Type0) -> (matita_arithmetics_bigops.range A) -> univs.Type0. Function H_mk_range : (enum : (x : _) -> (cic.Term univs.Type0)) -> (A : _) -> (upto : matita_arithmetics_nat.nat) -> (filter : (x : _) -> (matita_arithmetics_nat.nat) -> (cic.Term univs.Type0)) -> (matita_basics_bool.bool) -> (cic.Term univs.Type0). Hypothesis H : (forall x : (cic.Term univs.Type0) -> (matita_arithmetics_bigops.range A) -> (cic.Term univs.Type0) -> (Q (enum _) A upto (filter _) _)). Then for all x : (cic.Term univs.Type0) -> (matita_arithmetics_bigops.range A) -> (cic.Term univs.Type0) -> (Q x)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOp_body. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour tous les éléments $_xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $nil$, pour tous les éléments $_x_807$ et $_x_808$ de $cic.Term$ de $univs.Type0$ et de $A$, $cic.Term$ tient pour $univs.Type0$ et $A$.\nassistant\n", "label": "Axiom op_body : forall A : cic.Univ univs.Type0, forall nil : cic.Term univs.Type0 A, forall _xxx : cic.Term univs.Type0 (matita_basics_lists_list.Aop A nil), forall _x_807 : cic.Term univs.Type0 A, forall _x_808 : cic.Term univs.Type0 A, cic.Term univs.Type0 A .", "predict": "Axiom op_body : forall A : Univ, forall nil : Term, forall _xxx : Term, Aop A nil, forall _x_807 _x_808 : Term, (Term) = univs.Type0 A."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_rect_CProp4_body. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Then for all elements $_x$ of $cic.Term$ of $univs.Type2$ and $A$, for all functions $Q_$ from elements $x_22$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $_x_23$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_22$ to elements of $cic.Univ$ of $cic.prop$, for all elements $_H_refl$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $_x$ and $matita_basics_logic.refl$ applied to $A$ and $_x$, for all elements $x_22$ of $cic.Term$ of $univs.Type2$ and $A$, for all elements $x_23$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_22$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_22$ and $x_23$.\nassistant\n", "label": "eq_rect_CProp4_body : A : cic.Univ univs.Type2 -> _x : cic.Term univs.Type2 A -> Q_ : (x_22 : cic.Term univs.Type2 A -> _x_23 : cic.Term cic.prop (matita_basics_logic.eq A _x x_22) -> cic.Univ cic.prop) -> _H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x)) -> x_22 : cic.Term univs.Type2 A -> x_23 : cic.Term cic.prop (matita_basics_logic.eq A _x x_22) -> cic.Term cic.prop (Q_ x_22 x_23) .", "predict": "Output: \nAxiom Eq_rect_CProp4_body : \n  forall (A : univ.univ) (x : univ.univ) (A : term.univ) (Q : (x22 : univ.univ) -> (A : univ.univ) -> (x23 : prop.univ) -> (eq.univ) -> (prop.univ) -> (prop.univ)) (H_refl : univ.univ) (Q : (x : term.univ) -> (refl.univ) -> (A : univ.univ) -> (x : term.univ) -> (prop.univ)) (x22 : univ.univ) (x23 : prop.univ) -> (eq.univ) -> (prop.univ) -> (term.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) -> (prop.univ) ->"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFalse_rect_CProp4_body. Låt $Q_$ vara en funktion från element $_x_73$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $x_73$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_73$.\nassistant\n", "label": "Axiom False_rect_CProp4_body : forall Q_ : ((_x_73 : cic.Term cic.prop matita_basics_logic.False) -> cic.Univ cic.prop), forall x_73 : cic.Term cic.prop matita_basics_logic.False, cic.Term cic.prop (Q_ x_73) .", "predict": "False_rect_CProp4_body. Let Q_ be a function from elements x_73 of cic.Term of cic.prop and matita_basics_logic.False to elements of cic.Univ of cic.prop. Then for all elements x_73 of cic.Term of cic.prop and matita_basics_logic.False, holds cic.Term for cic.prop and Q_ applied on x_73."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTrue_rect_Type5. För alla funktioner $Q_$ från element $_x_44$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$ till element av $cic.Univ$ av $univs.Type5$, för alla element $_H_I$ av $cic.Term$ av $univs.Type5$ och $Q_$ applicerat på $matita_basics_logic.I$, för alla element $x_44$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$, håller $cic.Term$ för $univs.Type5$ och $Q_$ applicerat på $x_44$.\nassistant\n", "label": "postulate True_rect_Type5 : (Q_ : (_x_44 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ univs.Type5) -> (_H_I : cic.Term univs.Type5 (Q_ matita_basics_logic.I)) -> (x_44 : cic.Term cic.prop matita_basics_logic.True) -> cic.Term univs.Type5 (Q_ x_44)", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_unit. Låt $return_sort$ vara ett element av $cic.Sort$. Låt $return_type$ vara en funktion från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$ till element av $cic.Univ$ av $return_sort$. Låt $case_it$ vara ett element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $matita_basics_types.it$. Låt $z$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$. Då håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.\nassistant\n", "label": "postulate match_unit : (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ return_sort) -> (case_it : cic.Term return_sort (return_type matita_basics_types.it)) -> (z : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Term return_sort (return_type z)", "predict": "postulate match_unit : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_transpose. Låt $i$ och $j$ och $k$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $j$ och $i$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $i$ och $k$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $j$ och $k$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_permutation.transpose$ applicerat på $i$ och $j$ och $n$ och $matita_arithmetics_permutation.transpose$ applicerat på $i$ och $k$ och $matita_arithmetics_permutation.transpose$ applicerat på $k$ och $j$ och $matita_arithmetics_permutation.transpose$ applicerat på $i$ och $k$ och $n$.\nassistant\n", "label": "Axiom eq_transpose : forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall j : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall k : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) j i)), forall __1 : cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) i k)), forall __2 : cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) j k)), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_permutation.transpose i j n) (matita_arithmetics_permutation.transpose i k (matita_arithmetics_permutation.transpose k j (matita_arithmetics_permutation.transpose i k n)))) .", "predict": "Axiom Eq_transpose : forall (i j k n : cic.Term univs.Type0 matita_arithmetics_nat.nat), \nforall P : cic.Term cic.prop (Not (eq (lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) j i)), \nforall Q : cic.Term cic.prop (Not (eq (lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) i k)), \nforall R : cic.Term cic.prop (Not (eq (lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) j k)), \neq (transpose (transpose (transpose i j n)) (transpose (transpose i k) (transpose k j) n))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nInj_mk_Sig. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $P$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $x$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $P$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sig$ appliqué à $A$ et $P$ et $x$ et $matita_basics_types.mk_Sig$ appliqué à $A$ et $P$ et $matita_basics_types.pi1$ appliqué à $A$ et $P$ et $x$ et $matita_basics_types.pi2$ appliqué à $A$ et $P$ et $x$.\nassistant\n", "label": "Axiom inj_mk_Sig : forall A : cic.Univ univs.Type0, forall P : ((__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop), forall x : cic.Term univs.Type0 (matita_basics_types.Sig A P), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig A P)) x (matita_basics_types.mk_Sig A P (matita_basics_types.pi1 A P x) (matita_basics_types.pi2 A P x))) .", "predict": "Axiom Inj_mk_Sig : forall (A : Univ univs.Type0) (P : forall _, Univ) (x : Term univs.Type0 matita_basics_types.Sig A P), Term cic.prop (univs.Type0 univs.Type2) (lift univs.Type0 univs.Type2 (Sig A P x)) (lift univs.Type0 univs.Type2 (mk_Sig A P x) (pi1 A P x) (pi2 A P x))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBool_rect_CProp4_body. Soit $Q_$ une fonction des éléments $_x_347$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_true$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_bool.true$. Alors pour tous les éléments $_H_false$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_bool.false$, pour tous les éléments $x_347$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_347$.\nassistant\n", "label": "axiom bool_rect_CProp4_body (Q_ : (_x_347 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) (_H_true : cic.Term cic.prop (Q_ matita_basics_bool.true)) (_H_false : cic.Term cic.prop (Q_ matita_basics_bool.false)) (x_347 : cic.Term univs.Type0 matita_basics_bool.bool) : cic.Term cic.prop (Q_ x_347)", "predict": "Output: \nAxiom Bool_rect_CProp4_body : forall (Q : cic.Term cic.Univ (cic.prop) -> univs.Type0 matita_basics_bool.bool -> cic.Univ), (H_true : cic.Term cic.prop (Q matita_basics_bool.true)) -> forall (H_false : cic.Term cic.prop (Q matita_basics_bool.false)), forall (x_347 : cic.Term univs.Type0 matita_basics_bool.bool), (cic.Term cic.prop (Q x_347))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_rect_Type0_body. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_901$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type0$, för alla funktioner $_H_mk_ACop$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$, för alla element $x_901$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_901$.\nassistant\n", "label": "ACop_rect_Type0_body : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_901 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Univ univs.Type0) -> _H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> _comm : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> x_901 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Term univs.Type0 (Q_ x_901) .", "predict": "Output: Axiom ACop_rect_Type0_body : \n  forall A : cic.Univ,\n  forall _nil : cic.Term,\n  forall A : univs.Type0,\n  forall Q_ : forall x_901 : cic.Term, univs.Type0 -> cic.Univ,\n  forall Q_ : forall x_901 : cic.Term, univs.Type0 -> cic.Univ,\n  forall _H_mk_ACop : forall aop : cic.Term, matita_arithmetics_bigops.Aop -> cic.Term -> matita_arithmetics_bigops.ACop -> cic.Term,\n  forall _comm : forall a : cic.Term, A -> forall b : cic.Term, A -> cic.Term -> matita_basics_logic.eq -> cic.Term -> cic.Term,\n  forall aop : cic.Term, matita_arithmetics_bigops.Aop -> cic.Term,\n  forall a : cic.Term, A -> forall b : cic.Term, A -> cic.Term -> matita_arithmetics_bigops.op -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic.Term -> cic"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSum_inv_rect_CProp0. Låt $x1$ och $x2$ vara element av $cic.Univ$ av $univs.Type0$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z1032$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$. Låt $_H1$ vara en funktion från element $x_582$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_z1033$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.inl$ applicerat på $x1$ och $x2$ och $x_582$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.inl$ applicerat på $x1$ och $x2$ och $x_582$. Låt $_H2$ vara en funktion från element $x_583$ av $cic.Term$ av $univs.Type0$ och $x2$ och element $_z1033$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.inr$ applicerat på $x1$ och $x2$ och $x_583$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.inr$ applicerat på $x1", "label": "Axiom Sum_inv_rect_CProp0 : forall x1 : cic.Univ univs.Type0, forall x2 : cic.Univ univs.Type0, forall Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2), forall P : ((_z1032 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> cic.Univ cic.prop), forall _H1 : ((x_582 : cic.Term univs.Type0 x1) -> (_z1033 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inl x1 x2 x_582))) -> cic.Term cic.prop (P (matita_basics_types.inl x1 x2 x_582))), forall _H2 : ((x_583 : cic.Term univs.Type0 x2) -> (_z1033 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inr x1 x2 x_583))) -> cic.Term cic.prop (P (matita_basics_types.inr x1 x2 x_583))), cic.Term cic.prop (P Hterm) .", "predict": "$ och $x2$ och $x_583$. Låt $_H3$ vara en funktion från element $x_584$ av $cic.Term$ av $univs.Type0$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.eq$ applicerat på $x1$ och $x2$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.eq$ applicerat på $x1$ och $x2$. Låt $_H4$ vara en funktion från element $x_585$ av $cic.Term$ av $univs.Type0$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Sum$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.eq$ applicerat på $x2$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.eq$ applicerat på $x2$ och $x1$. Låt $H$ vara en proposition som kan vara $True$ eller $False$. Låt $H$ vara en proposition som kan vara $True$ eller $False$. Låt $H$ vara en proposition som kan vara $True$ eller $False$. Låt $H$ vara en proposition som kan vara $True$ eller $False$. Låt $H$ vara en proposition som kan vara $True$ eller $False$. Låt $H$ vara en proposition som kan vara $True$ eller $False$. Låt $H$ vara en proposition som kan vara $True$ eller $False$. Låt $H$ vara en proposition som kan vara $True$ eller $False$. Låt $H$ vara en proposition som kan vara $True$ eller $False$. Låt"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_CProp1. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Then for all functions $Q_$ from elements $_x_883$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$", "label": "Aop_rect_CProp1 : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_883 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> cic.Univ cic.prop) -> _H_mk_Aop : (op : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _nill : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> _nilr : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> _assoc : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> x_883 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> cic.Term cic.prop (Q_ x_883) .", "predict": " and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and functions $_assocr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$, $Q_$ applied to $A$ and $op$ applied to $_nil$ and $a$ and $a$ and $op$ applied to $a$ and $_nil$ and $a$ and $op$ applied to $a$ and $_nil$ and $a$ is true. \n\nOutput: \nAop_rect_CProp1 : forall (A : Univ) (nil : Term A) , (forall (Q_ : (x : Term A) -> Aop A nil -> prop), (forall (op : (x : Term A) -> (x1 : Term A) -> Term A), (forall (nill : (a : Term A) -> eq (lift Type0 Type2 A (op nil a a)) (eq (lift Type0 Type2 A (op a nil a)) (eq (lift Type0 Type2 A (op a a nil)) (forall (assoc : (a : Term A) -> (b : Term A) -> (c : Term A) -> prop), (forall (assocr : (a : Term A) -> (b : Term A) -> (c : Term A) -> prop), (Q_ A (op a (op b c)) (assoc a b c)) (Q_ A (op (op a b) c) (assocr a b c))))) (forall (Qmk_Aop : (op : (x : Term A) -> (x1 : Term A) -> Term A) -> (nill : (a : Term A) -> eq (lift Type0 Type2 A (op nil a a)) (eq (lift Type0 Type2 A (op a nil a)) (eq (lift Type0 Type2 A (op a a nil)) (forall (assoc : (a : Term A) -> (b : Term A) -> (c :"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_mop. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $p$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Alors pour tous les éléments $B$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $nil$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $R$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $B$ et $nil$, pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $a$ et $_x_969$ et $_x_970$ de $cic.Term$ de $univs.Type0$ et de $B$, $cic.Term$ tient pour $univs.Type0$ et $B$.\nassistant\n", "label": "axiom let_mop (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (B : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 B) (R : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop B nil)) (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) (a _x_969 _x_970 : cic.Term univs.Type0 B) : cic.Term univs.Type0 B", "predict": "Axiom Let_mop : forall (n : cic.Term univs.Type0) (p : forall ___, (cic.Term univs.Type0) -> (matita_basics_bool.bool)), (forall B : cic.Univ univs.Type0), (forall nil : cic.Term univs.Type0) (R : (matita_arithmetics_bigops.Dop B) (nil)), (forall f : forall ___, (cic.Term univs.Type0) -> B), (forall a : cic.Term univs.Type0) (x_969 : B) (x_970 : B), (cic.Term univs.Type0) B."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_n_fact_n. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $n$ and $matita_arithmetics_factorial.fact$ applied to $n$.\nassistant\n", "label": "axiom lt_n_fact_n (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) : cic.Term cic.prop (matita_arithmetics_nat.lt n (matita_arithmetics_factorial.fact n))", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMod_times_mod. Soient $n$ et $m$ et $p$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $p$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $n$ et $p$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $matita_arithmetics_div_and_mod.mod$ appliqué à $n$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $p$ et $p$.\nassistant\n", "label": "postulate mod_times_mod : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod n p) (matita_arithmetics_div_and_mod.mod (matita_arithmetics_div_and_mod.mod n (matita_arithmetics_nat.times m p)) p))", "predict": "postulate mod_times_mod : (n m p : cic.Term univs.Type0) -> (x : cic.Term cic.prop) -> (y : cic.Term matita_arithmetics_nat.lt matita_arithmetics_nat.O p) -> (z : cic.Term cic.prop) -> (k : cic.Term matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> cic.Term -> cic.prop -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod n p) (matita_arithmetics_div_and_mod.mod (matita_arithmetics_div_and_mod.mod n m p) p p)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1075. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $bijf$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_permutation.bijn$ applied to $f$ and $matita_arithmetics_nat.S$ applied to $n$. Let $fS$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $matita_arithmetics_nat.S$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $n$. Let $i$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $lein$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $i$ and $n$. Let $a$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $matita_arithmetics_nat.le$ applied to $a$ and $matita_arithmetics_nat.S$ applied to $n$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $", "label": "let_clause_1075 : f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> bijf : cic.Term cic.prop (matita_arithmetics_permutation.bijn f (matita_arithmetics_nat.S n)) -> fS : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f (matita_arithmetics_nat.S n)) (matita_arithmetics_nat.S n)) -> i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> lein : cic.Term cic.prop (matita_arithmetics_nat.le i n) -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _clearme : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le a (matita_arithmetics_nat.S n)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i)) -> lean : cic.Term cic.prop (matita_arithmetics_nat.le a (matita_arithmetics_nat.S n)) -> fa : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i) -> Hc : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a (matita_arithmetics_nat.S n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) i a) .", "predict": "univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $matita_arithmetics_nat.S$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $n$. Let $bijf' := bijf$ and $bijf := bijf'$. Let $bijfS' := fS$ and $fS := bijfS'$. Let $bijfS := fS$. Let $bijfS$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $matita_arithmetics_nat.S$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $n$. Let $bijfS$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $matita_arithmetics_nat.S$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $n$. Let $bijfS := bijfS$. Let $bijfS := bijfS$. Let $bijfS := bijfS$. Let $bijfS := bijfS$. Let $bijfS := bijfS$. Let $bijfS := bijfS$. Let $bijfS := bijfS$. Let $bijfS := bijfS$. Let $bijfS := bijfS$. Let $bijfS := bijfS$. Let $bijfS := bijfS$. Let $bijfS := bijfS$. Let $bijfS := bijfS$. Let $bijfS := bijfS$. Let $bijfS := bijfS$. Let $bijfS := bijfS$. Let $bijfS := bijfS$. Let $bijfS := bijfS$. Let $bijfS := bijfS$. Let $bijfS := bijfS$. Let $bijfS := bijfS$. Let $bij"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_Psi_BPsi1. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_chebyshev_factorization.B$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ applied to $n$.\nassistant\n", "label": "axiom le_Psi_BPsi1 (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_chebyshev_psi.Psi (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_nat.times (matita_arithmetics_chebyshev_factorization.B (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_chebyshev_chebyshev_psi.Psi n)))", "predict": "Output: \nAxiom Le_Psi_BPsi1 : forall (n : Term univs.Type0 matita_arithmetics_nat.nat), \nforall (P : prop), \nforall (lt : lt matita_arithmetics_nat.O n), \nTerm n (cic.prop) (matita_arithmetics_nat.le (Psi (times (S (S (O))) (S (S (O)))) (times (B (times (S (S (O))) (Psi n))) (times (Psi n)))) (times (times (S (S (O))) (S (S (O)))) (n)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_rect_Type0. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_955$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type0$, för alla funktioner $_H_mk_Dop$ från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $_nil$ och $_nil$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat", "label": "axiom Dop_rect_Type0 (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_955 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ univs.Type0) (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) (x_955 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) : cic.Term univs.Type0 (Q_ x_955)", "predict": " surjection $a$ et $b$ sur $c$ et $prod$ applicerat surjection $a$ et $c$ sur $b$ et $prod$ applicerat surjection $b$ et $c$ sur $a$ et $prod$ applicerat surjection $a$ et $b$ sur $c$ et $prod$ applicerat surjection $a$ et $c$ sur $b$ et $prod$ applicerat surjection $b$ et $c$ sur $a$ et $prod$ applicerat surjection $a$ et $b$ sur $c$ et $prod$ applicerat surjection $a$ et $c$ sur $b$ et $prod$ applicerat surjection $b$ et $c$ sur $a$ et $prod$ applicerat surjection $a$ et $b$ sur $c$ et $prod$ applicerat surjection $a$ et $c$ sur $b$ et $prod$ applicerat surjection $b$ et $c$ sur $a$ et $prod$ applicerat surjection $a$ et $b$ sur $c$ et $prod$ applicerat surjection $a$ et $c$ sur $b$ et $prod$ applicerat surjection $b$ et $c$ sur $a$ et $prod$ applicerat surjection $a$ et $b$ sur $c$ et $prod$ applicerat surjection $a$ et $c$ sur $b$ et $prod$ applicerat surjection $b$ et $c$ sur $a$ et $prod$ applicerat surjection $a$ et $b$ sur $c$ et $prod$ applicerat surjection $a$ et $c$ sur $b$ et $prod$ applicerat surjection $b$ et $c$ sur $a$ et $prod$ applicerat surjection $a$ et $b$ sur $c$ et $prod$ applicerat surjection $a$ et $c$ sur $b$ et $prod$ applicerat surjection $b$ et $c$ sur $a$ et $prod$ applicerat surjection $a$ et $b$ sur $c$ et $prod$ applicerat surjection $a$ et $c$ sur $b"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRefute_none_by_refl. Let $A$ and $B$ be elements of $cic.Univ$ of $univs.Type0$. Let $P$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Then for all functions $Q$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Univ$ of $univs.Type0$, for all elements $x$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $A$, for all functions $H$ from elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $A$ and $x$ and $matita_basics_types.None$ applied to $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.False$, for all functions $__$ from elements $v$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $A$ and $x$ and $matita_basics_types.Some$ applied to $A$ and $v$ to elements of $cic.Term$ of $univs.Type0$ and $Q$ applied to $P$ applied to $v$, $cic.Term$ holds for $univs.Type0$ and $Q$ applied to $matita_basics_types.match_option$ applied to $A$ and $univs.Type0$ and the function that maps $y$ to $cic.prod$", "label": "postulate refute_none_by_refl : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) -> (Q : (__ : cic.Term univs.Type0 B) -> cic.Univ univs.Type0) -> (x : cic.Term univs.Type0 (matita_basics_types.option A)) -> (H : (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option A)) x (matita_basics_types.None A))) -> cic.Term cic.prop matita_basics_logic.False) -> (__ : (v : cic.Term univs.Type0 A) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option A)) x (matita_basics_types.Some A v))) -> cic.Term univs.Type0 (Q (P v))) -> cic.Term univs.Type0 (Q (matita_basics_types.match_option A univs.Type0 (\\ y : cic.Term univs.Type0 (matita_basics_types.option A) -> cic.prod cic.prop univs.Type0 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option A)) x y) (\\ __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option A)) x y) -> B)) (\\ E : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option A)) x (", "predict": " applied to $y$ and $matita_basics_logic.refl$ applied to $matita_basics_logic.eq$ applied to $y$ and $y$ and $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $A$ and $x$ and $matita_basics_types.None$ applied to $A$ and $cic.prod$ applied to $y$ and $matita_basics_logic.refl$ applied to $matita_basics_logic.eq$ applied to $y$ and $y$ and $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $A$ and $x$ and $matita_basics_types.Some$ applied to $A$ and $v$.\nOutput: \npostulate refute_none_by_refl : \n  {A B : cic.Univ}\n  {P : (__) -> A -> B}\n  {Q : (__) -> B -> cic.Univ}\n  {x : cic.Term univs.Type0 (matita_basics_types.option A)}\n  {H : (__) -> (cic.Term univs.Type0 (matita_basics_logic.eq (cic.lift (univs.Type0, univs.Type2)) (matita_basics_types.option A x matita_basics_types.None A))) -> (cic.Term univs.Type0 (cic.prop, matita_basics_logic.False))}\n  {__ : (v : cic.Term univs.Type0 A) -> (__) -> (cic.Term univs.Type0 (cic.prop, matita_basics_logic.eq (cic.lift (univs.Type0, univs.Type2)) (matita_basics_types.option A x matita_basics_types.Some A v))) -> (cic.Term univs.Type0 (B, Q (P v)))}\n  -> (univs.Type0, Q (matita_basics_types.match_option A univs.Type0 (λ y, (cic.prod y (matita_basics_logic.refl (matita_basics_logic.eq y y)) (cic.lift (univs.Type0, univs.Type2)) (matita_basics_types.option A x matita_basics_types.None A))) ("}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_rect_CProp3. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $Q_$ från element $_x_622$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$, för alla element $_H_None$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$, för alla funktioner $_H_Some$ från element $x_623$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_623$, för alla element $x_622$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_622$.\nassistant\n", "label": "option_rect_CProp3 : _A : cic.Univ univs.Type0 -> Q_ : (_x_622 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Univ cic.prop) -> _H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A)) -> _H_Some : (x_623 : cic.Term univs.Type0 _A -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_623))) -> x_622 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Term cic.prop (Q_ x_622) .", "predict": "Output: Axiom Option_rect_CProp3 : forall (A : univers : type0) (Q : term : type0 -> option A -> prop), forall (H_None : term : prop) (Q_None : option A -> prop) (H_Some : forall (x : term : type0) (a : A), term : prop -> option A -> prop), forall (x : term : type0), Q x (option A x)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTrue_rect_CProp0. Låt $Q_$ vara en funktion från element $_x_64$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $_H_I$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_logic.I$, för alla element $x_64$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_64$.\nassistant\n", "label": "axiom True_rect_CProp0 (Q_ : (_x_64 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ cic.prop) (_H_I : cic.Term cic.prop (Q_ matita_basics_logic.I)) (x_64 : cic.Term cic.prop matita_basics_logic.True) : cic.Term cic.prop (Q_ x_64)", "predict": "Axiom True_rect_CProp0 : \n  forall (Q : forall (x : cic.Term) (p : matita_basics_logic.True), cic.Univ) (H_I : cic.Term) (x : cic.Term) (p : matita_basics_logic.True), \n  cic.Term (cic.prop) (Q x p) H_I x p."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExp_pi. Soient $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour toutes les fonctions $p$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_bigops.bigop$ appliqué à $n$ et la fonction qui envoie $i$ à $p$ appliqué à $i$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ et la fonction qui envoie $i$ à $matita_arithmetics_exp.exp$ appliqué à $f$ appliqué à $i$ et $m$ et $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_bigops.bigop$ appliqué à $n$ et la fonction qui envoie $i$ à $p$ appliqué à $i$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $m$.\nassistant\n", "label": "Axiom exp_pi : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall p : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (fun i => p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (fun i => matita_arithmetics_exp.exp (f i) m)) (matita_arithmetics_exp.exp (matita_arithmetics_bigops.bigop n (fun i => p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (fun i => f i)) m)) .", "predict": "Axiom exp_pi : forall (n m : cic.Term univs.Type0) (n : matita_arithmetics_nat.nat) (m : matita_arithmetics_nat.nat), forall (p : forall $__ : cic.Term univs.Type0 (matita_arithmetics_nat.nat), cic.Term univs.Type0 matita_basics_bool.bool) (f : forall $__ : cic.Term univs.Type0 (matita_arithmetics_nat.nat), cic.Term univs.Type0 matita_arithmetics_nat.nat), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_bigops.bigop n (fun i => p i matita_arithmetics_nat.nat matita_arithmetics_nat.S matita_arithmetics_nat.O matita_arithmetics_nat.times (fun i => matita_arithmetics_exp.exp f i m) matita_arithmetics_exp.exp (matita_arithmetics_bigops.bigop n (fun i => p i matita_arithmetics_nat.nat matita_arithmetics_nat.S matita_arithmetics_nat.O matita_arithmetics_nat.times (fun i => f i m)))))) = true."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_inv_rect_CProp1. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$. Då för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1158$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $dpi1$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_dpi2$ av $cic.Term$ av $univs.Type0$ och $x2$ applicerat på $dpi1$ och element $_z1159$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_DPair$ applicerat på $x1$ och $x2$ och $dpi1$ och $_dpi2$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.mk_DPair$ applicerat på $x1$ och $x2$ och $dpi1$ och $_dpi2$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "postulate DPair_inv_rect_CProp1 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> (P : (_z1158 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1159 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P Hterm)", "predict": "postulate DPair_inv_rect_CProp1 : {univs : Universe} -> (x1 : univs.Type0) -> (x2 : (univs.Type0 -> univs.Type0) -> univs.Type0) -> (Hterm : univs.Type0) -> (pair : univs.Type0) -> (P : (univs.Type0 -> pair) -> univs.Type0) -> (H1 : univs.Type0) -> (H2 : univs.Type0) -> (eq : matita_basics_logic.eq (cic.lift (univs.Type0, univs.Type2)) (matita_basics_types.DPair x1 x2)) -> (P (matita_basics_types.mk_DPair x1 x2) (univs.Type0) H1 H2) -> (cic.Term (cic.prop))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd_inv_rect_Type4. Pour tous les éléments $x1$ et $x2$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1242$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type4$, pour toutes les fonctions $_H1$ des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $x2$ et des éléments $_z1243$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Prod$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_Prod$ appliqué à $x1$ et $x2$ et $_fst$ et $_snd$ à des éléments de $cic.Term$ de $univs.Type4$ et de $P$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $x1$ et $x2$ et $_fst$ et $_snd$, $cic.Term$ tient pour $univs.Type4$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "Prod_inv_rect_Type4 : x1 : cic.Univ univs.Type0 -> x2 : cic.Univ univs.Type0 -> Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) -> P : (_z1242 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) -> cic.Univ univs.Type4) -> _H1 : (_fst : cic.Term univs.Type0 x1 -> _snd : cic.Term univs.Type0 x2 -> _z1243 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod x1 x2)) Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) -> cic.Term univs.Type4 (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term univs.Type4 (P Hterm) .", "predict": "prod_inv_rect_type4 : forall (x1 x2 : cic.Univ) (Hterm : cic.Term) (P : forall _z1242 : cic.Term, matita_basics_types.Prod x1 x2 -> cic.Univ -> univs.Type4 -> cic.Term), forall (_H1 : forall _fst : cic.Term x1, forall _snd : cic.Term x2, forall _z1243 : cic.Term (cic.prop), matita_basics_logic.eq (univs.Type0) (univs.Type2) (matita_basics_types.Prod x1 x2) (Hterm) (matita_basics_types.mk_Prod x1 x2 _fst _snd) _z1243), cic.Term (univs.Type4) (P (matita_basics_types.mk_Prod x1 x2 _fst _snd) Hterm)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_17041. For all elements $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $posm$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, for all elements $a$ and $x1029$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x1029$ and $matita_arithmetics_bigops.aop__o__op$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $matita_arithmetics_sigma_pi.plusAC$ and $x1029$ and $matita_arithmetics_nat.O$.\nassistant\n", "label": "postulate let_clause_17041 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x1029 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1029 (matita_arithmetics_bigops.aop__o__op matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_sigma_pi.plusAC x1029 matita_arithmetics_nat.O))", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1033. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $lt1n$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$. Let $x2515$ and $x2516$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x2515$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $x2516$ and $matita_arithmetics_div_and_mod.div$ applied to $x2515$ and $x2516$ and $matita_arithmetics_div_and_mod.mod$ applied to $x2515$ and $x2516$.\nassistant\n", "label": "let_clause_1033 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> lt1n : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) -> x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516))) .", "predict": "Output: Let_clause_1033 : let n : univs.Type0 * matita_arithmetics_nat.nat let lt1n : cic.Term * cic.prop * matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n let x2515 : univs.Type0 * matita_arithmetics_nat.nat let x2516 : univs.Type0 * matita_arithmetics_nat.nat in cic.Term (cic.prop * matita_basics_logic.eq (cic.lift (univs.Type0, univs.Type2) (matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516))))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1034. Soient $n$ et $m$ et $q$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $posm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$. Soient $x2515$ et $x2516$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2515$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_div_and_mod.mod$ appliqué à $x2515$ et $x2516$ et $matita_arithmetics_nat.times$ appliqué à $x2516$ et $matita_arithmetics_div_and_mod.div$ appliqué à $x2515$ et $x2516$.\nassistant\n", "label": "let_clause_1034 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> q : cic.Term univs.Type0 matita_arithmetics_nat.nat -> posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_div_and_mod.mod x2515 x2516) (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)))) .", "predict": "Output: \nlet_clause_1034 : Soient n : cic.Term univs.Type0, m : cic.Term univs.Type0, q : cic.Term univs.Type0 et matita_arithmetics_nat.nat, posn : cic.Term cic.prop matita_arithmetics_nat.lt matita_arithmetics_nat.O n, posm : cic.Term cic.prop matita_arithmetics_nat.lt matita_arithmetics_nat.O m, x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat, x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat, alors cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_div_and_mod.mod x2515 x2516) (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nUnit_inv_rect_CProp1. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$. Låt $P$ vara en funktion från element $_z960$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$ till element av $cic.Univ$ av $cic.prop$. Låt $_H1$ vara en funktion från element $_z961$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.unit$ och $Hterm$ och $matita_basics_types.it$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.it$. Då håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "Axiom unit_inv_rect_CProp1 : forall Hterm : cic.Term univs.Type0 matita_basics_types.unit, forall P : ((_z960 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ cic.prop), forall _H1 : ((_z961 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm matita_basics_types.it)) -> cic.Term cic.prop (P matita_basics_types.it)), cic.Term cic.prop (P Hterm) .", "predict": "Axiom Unit_inv_rect_CProp1 : forall (Hterm : cic.Term univs.Type0 matita_basics_types.unit) (P : _z960 -> cic.Univ cic.prop) (H1 : _z961 -> cic.Term cic.prop (matita_basics_logic.eq) (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit Hterm matita_basics_types.it) -> cic.Term cic.prop P matita_basics_types.it) -> cic.Term cic.prop P Hterm."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_plus. For all elements $n1$ and $n2$ and $m1$ and $m2$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n1$ and $n2$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $m1$ and $m2$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.plus$ applied to $n1$ and $m1$ and $matita_arithmetics_nat.plus$ applied to $n2$ and $m2$.\nassistant\n", "label": "axiom le_plus (n1 n2 m1 m2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.le n1 n2)) (__1 : cic.Term cic.prop (matita_arithmetics_nat.le m1 m2)) : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.plus n1 m1) (matita_arithmetics_nat.plus n2 m2))", "predict": "Output: \naxiom le_plus : forall (n1 n2 m1 m2 : cic.term univs.type0 matita_arithmetics_nat.nat), forall (__) : cic.term cic.prop matita_arithmetics_nat.le n1 n2, forall (__1 : cic.term cic.prop matita_arithmetics_nat.le m1 m2), cic.term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.plus n1 m1) (matita_arithmetics_nat.plus n2 m2))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_aop. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $R$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $B$ and $nil$. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Then for all elements $a$ of $cic.Term$ of $univs.Type0$ and $B$, $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $B$ and $nil$.\nassistant\n", "label": "axiom let_aop (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (B : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 B) (R : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop B nil)) (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) (a : cic.Term univs.Type0 B) : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil)", "predict": "postulate let_aop : (n : Term univs.Type0) (matita_arithmetics_nat.nat) -> (p : (x : Term univs.Type0) (matita_arithmetics_nat.nat) -> Term univs.Type0) -> (B : Univ univs.Type0) -> (nil : Term univs.Type0 B) -> (R : Term univs.Type0 matita_arithmetics_bigops.Dop B nil) -> (f : (x : Term univs.Type0) (matita_arithmetics_nat.nat) -> Term univs.Type0 B) -> (forall (a : Term univs.Type0) (B : B), Term univs.Type0 matita_arithmetics_bigops.ACop B nil)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_inv_rect_Type3. For all elements $x1$ of $cic.Univ$ of $univs.Type0$, for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $x1$, for all functions $P$ from elements $_z1644$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $x1$ to elements of $cic.Univ$ of $univs.Type3$, for all functions $_H1$ from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ and elements $_z1645$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_bigops.range$ applied to $x1$ and $Hterm$ and $matita_arithmetics_bigops.mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$ to elements of $cic.Term$ of $univs.Type3$ and $P$ applied to $matita_arithmetics_bigops.mk_range$ applied to $x1$ and $_enum$ and $_upto$ and $_filter$, $cic.Term$ holds for $univs.Type3$ and $P$ applied to $Hterm$.\nassistant\n", "label": "Axiom range_inv_rect_Type3 : forall x1 : cic.Univ univs.Type0, forall Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1), forall P : ((_z1644 : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1)) -> cic.Univ univs.Type3), forall _H1 : ((_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 x1) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (_z1645 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.range x1)) Hterm (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter))) -> cic.Term univs.Type3 (P (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter))), cic.Term univs.Type3 (P Hterm) .", "predict": "Range_inv_rect_Type3 : \n  forall (x1 : Univ) (Hterm : Term) (range : matita_arithmetics_bigops.range x1) (P : (z1644 : Term) -> (matita_arithmetics_bigops.range x1) -> Univ) (enum : (x : Term) -> (nat : matita_arithmetics_nat.nat) -> Term) (upto : Term) (filter : (x : Term) -> (nat : matita_arithmetics_nat.nat) -> Term) (z1645 : Term) (eq : matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2) (matita_arithmetics_bigops.range x1) Hterm (matita_arithmetics_bigops.mk_range x1 enum upto filter))) (H : P (matita_arithmetics_bigops.mk_range x1 enum upto filter)), \n  (Term) (univs.Type3) (P (Hterm))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_inv_rect_CProp2. Pour tous les éléments $x1$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $x1$, pour toutes les fonctions $P$ des éléments $_z1680$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $x1$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des fonctions $_enum$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_upto$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_filter$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ et des éléments $_z1681$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.range$ appliqué à $x1$ et $Hterm$ et $matita_arithmetics_bigops.mk_range$ appliqué à $x1$ et $_enum$ et $_upto$ et $_filter$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_bigops.mk_range$ appliqué à $x1$ et $_enum$ et $_upto$ et $_filter$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "Axiom range_inv_rect_CProp2 : forall x1 : cic.Univ univs.Type0, forall Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1), forall P : ((_z1680 : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1)) -> cic.Univ cic.prop), forall _H1 : ((_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 x1) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (_z1681 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.range x1)) Hterm (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter))), cic.Term cic.prop (P Hterm) .", "predict": "Axiom Range_inv_rect_CProp2 : \nforall x1 : Univ, \nforall Hterm : Term, \n(matita_arithmetics_bigops.range x1) -> \nforall P : (fun _z1680 : Term -> matita_arithmetics_bigops.range x1 -> Univ -> prop), \nforall _H1 : (fun enum : (fun _ : Term -> nat) -> (fun _upto : Term -> nat) -> (fun _filter : (fun _ : Term -> nat) -> (fun _z1681 : Term -> prop -> bool) -> Term -> prop)), \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_arithmetics_bigops.range x1) -> \n(matita_ar"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_option. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $return_sort$ be an element of $cic.Sort$. Then for all functions $return_type$ from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$ to elements of $cic.Univ$ of $return_sort$, for all elements $case_None$ of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_basics_types.None$ applied to $_A$, for all functions $case_Some$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_basics_types.Some$ applied to $_A$ and $__$, for all elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.\nassistant\n", "label": "postulate match_option : (_A : cic.Univ univs.Type0) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ return_sort) -> (case_None : cic.Term return_sort (return_type (matita_basics_types.None _A))) -> (case_Some : (__ : cic.Term univs.Type0 _A) -> cic.Term return_sort (return_type (matita_basics_types.Some _A __))) -> (z : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term return_sort (return_type z)", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nList_ind. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_716$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_nil$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_lists_list.nil$ appliqué à $_A$. Soit $_H_cons$ une fonction des éléments $x_718$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $x_717$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ et des éléments $_x_720$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $x_717$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_lists_list.cons$ appliqué à $_A$ et $x_718$ et $x_717$. Alors pour tous les éléments $x_716$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_716$.\nassistant\n", "label": "list_ind : _A : cic.Univ univs.Type0 -> Q_ : (_x_716 : cic.Term univs.Type0 (matita_basics_lists_list.list _A) -> cic.Univ cic.prop) -> _H_nil : cic.Term cic.prop (Q_ (matita_basics_lists_list.nil _A)) -> _H_cons : (x_718 : cic.Term univs.Type0 _A -> x_717 : cic.Term univs.Type0 (matita_basics_lists_list.list _A) -> _x_720 : cic.Term cic.prop (Q_ x_717) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.cons _A x_718 x_717))) -> x_716 : cic.Term univs.Type0 (matita_basics_lists_list.list _A) -> cic.Term cic.prop (Q_ x_716) .", "predict": "Output: \nAxiom List_ind : \n  forall (A : cic.Univ) (Q : (x : cic.Term) -> (x : matita_basics_lists_list.list A) -> cic.prop), \n  (H_nil : (x : cic.Term) -> Q A (matita_basics_lists_list.nil A)) -> \n  (H_cons : (x : cic.Term) -> (x : A) -> (x : (x : matita_basics_lists_list.list A) -> (x : cic.Term) -> (x : cic.prop) -> Q x (matita_basics_lists_list.cons A x x)) -> \n  (x : cic.Term) -> (x : A) -> (x : (x : matita_basics_lists_list.list A) -> cic.prop) -> \n  (x : (x : matita_basics_lists_list.list A) -> cic.prop) -> \n  (forall (x : (x : cic.Term) -> (x : univs.Type0) -> (x : matita_basics_lists_list.list A), Q x), \n  (forall (x : (x : cic.Term) -> (x : univs.Type0) -> (x : matita_basics_lists_list.list A), Q x))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nReflexive. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_R$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $A$. Then $cic.Univ$ holds for $cic.prop$.\nassistant\n", "label": "axiom reflexive (A : cic.Univ univs.Type0) (_R : cic.Term univs.Type0 (matita_basics_relations.relation A)) : cic.Univ cic.prop", "predict": "Output: \nDefinition reflexive (A : univs.Type0) (_R : univs.Type0) (relation : matita_basics_relations.relation A) : cic.Univ cic.prop := λ _, true."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExists_forall_lt. För alla funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, för alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.Or$ applicerat på $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $i$ som $matita_basics_logic.And$ applicerat på $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $i$ och $matita_basics_bool.true$ och $cic.prod$ applicerat på $univs.Type0$ och $cic.prop$ och $matita_arithmetics_nat.nat$ och funktionen som avbildar $i$ som $cic.prod$ applicerat på $cic.prop$ och $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och funktionen som avbildar $__$ som $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $i$ och $matita_basics_bool.false$.\nassistant\n", "label": "axiom exists_forall_lt (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.ex matita_arithmetics_nat.nat (λ i => matita_basics_logic.And (matita_arithmetics_nat.lt i n) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.true))) (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat (λ i => cic.prod cic.prop cic.prop (matita_arithmetics_nat.lt i n) (λ __ => matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false))))", "predict": "Output: \nAxiom Exists_forall_lt : \n  (forall (f : function_from (term univs.Type0) (nat) (term univs.Type0) (bool)),\n     forall (n : term univs.Type0) (nat),\n     prop (Or (ex (lambda (i : term univs.Type0) (bool) (And (lt (i) n) (eq (lift univs.Type0 univs.Type2 bool) (f i true)))))) \n     (lambda (i : term univs.Type0) (bool) (And (lt (i) n) (eq (lift univs.Type0 univs.Type2 bool) (f i true))))) \n     (lambda (i : term univs.Type0) (bool) (And (lt (i) n) (eq (lift univs.Type0 univs.Type2 bool) (f i true))) \n     (lambda (__) (bool) (eq (lift univs.Type0 univs.Type2 bool) (f i true))))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLog_exp. For all elements $p$ and $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $p$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_log.log$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_exp.exp$ applied to $p$ and $n$ and $m$ and $matita_arithmetics_nat.plus$ applied to $n$ and $matita_arithmetics_log.log$ applied to $p$ and $m$.\nassistant\n", "label": "axiom log_exp (p n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_log.log p (matita_arithmetics_nat.times (matita_arithmetics_exp.exp p n) m)) (matita_arithmetics_nat.plus n (matita_arithmetics_log.log p m)))", "predict": "Output: \nAxiom Log_exp : \nforall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, \nforall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, \nforall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, \nforall __ : cic.Term univs.Type0 cic.prop matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p, \nforall __1 : cic.Term univs.Type0 cic.prop matita_arithmetics_nat.lt matita_arithmetics_nat.O m, \ncic.Term holds cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat matita_arithmetics_log.log p) (matita_arithmetics_nat.times (matita_arithmetics_exp.exp p n m) (matita_arithmetics_nat.plus n (matita_arithmetics_log.log p m))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd_rect_CProp4. Let $_A$ and $_B$ be elements of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_704$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_Prod$ be a function from elements $_fst$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_snd$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_Prod$ applied to $_A$ and $_B$ and $_fst$ and $_snd$. Then for all elements $x_704$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_704$.\nassistant\n", "label": "axiom Prod_rect_CProp4 (_A _B : cic.Univ univs.Type0) (Q_ : (_x_704 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ cic.prop) (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) (x_704 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) : cic.Term cic.prop (Q_ x_704)", "predict": "postulate Prod_rect_CProp4 : \n  {A : univ.univ} \n  {B : univ.univ} \n  {Q_ : (x_704 : term.univ) (matita_basics_types.Prod A B) → univ.univ → prop} \n  {H_mk_Prod : (fst : term.univ) A (snd : term.univ) B → (term.term prop) (Q_ (matita_basics_types.mk_Prod A B fst snd))} → \n  (∀ x_704 : term.univ (matita_basics_types.Prod A B), term.term (cic.prop) (Q_ x_704))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd_inv_rect_Type4. Låt $x1$ och $x2$ vara element av $cic.Univ$ av $univs.Type0$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z1242$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type4$. Då för alla funktioner $_H1$ från element $_fst$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_snd$ av $cic.Term$ av $univs.Type0$ och $x2$ och element $_z1243$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_Prod$ applicerat på $x1$ och $x2$ och $_fst$ och $_snd$ till element av $cic.Term$ av $univs.Type4$ och $P$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $x1$ och $x2$ och $_fst$ och $_snd$, håller $cic.Term$ för $univs.Type4$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "Axiom Prod_inv_rect_Type4 : forall x1 : cic.Univ univs.Type0, forall x2 : cic.Univ univs.Type0, forall Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2), forall P : ((_z1242 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2)) -> cic.Univ univs.Type4), forall _H1 : ((_fst : cic.Term univs.Type0 x1) -> (_snd : cic.Term univs.Type0 x2) -> (_z1243 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod x1 x2)) Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term univs.Type4 (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))), cic.Term univs.Type4 (P Hterm) .", "predict": "Axiom Prod_inv_rect_Type4 : \n  forall (x1 : cic.Univ) (x2 : cic.Univ), \n  forall (Hterm : cic.Term), \n  Prod x1 x2 -> \n  (forall (_z1242 : cic.Term), Prod x1 x2 -> cic.Univ) -> \n  (forall (_H1 : cic.Term x1), forall (_fst : cic.Term), forall (_snd : cic.Term), \n   Prod x1 x2 -> cic.prop -> eq (cic.lift univs.Type0 univs.Type2 (Prod x1 x2) Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) -> \n   cic.Term univs.Type4) -> \n  cic.Term univs.Type4 (cic.Term univs.Type4 Hterm)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_gcd_SO_to_not_divides. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_primes.divides$ applicerat på $n$ och $m$.\nassistant\n", "label": "eq_gcd_SO_to_not_divides : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) -> __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) -> cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides n m)) .", "predict": "Axiom Eq_gcd_SO_to_not_divides : forall (n : Term univs.Type0) (m : nat), forall (p : prop) (q : eq (lift univs.Type0 univs.Type2 nat) (gcd n m) (S O))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOrd_exp. Let $p$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $p$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.ord$ applied to $matita_arithmetics_exp.exp$ applied to $p$ and $m$ and $p$ and $m$.\nassistant\n", "label": "Axiom ord_exp : forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_ord.ord (matita_arithmetics_exp.exp p m) p) m) .", "predict": "Axiom ord_exp : forall (p m : Term univs.Type0 matita_arithmetics_nat.nat), forall ($__$ : Term cic.prop matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O p), cic.Term p m) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nIter. Soit $H$ un élément de $cic.Univ$ de $univs.Type0$. Soit $__$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $H$ à des éléments de $cic.Term$ de $univs.Type0$ et de $H$. Soit $__1$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__2$ de $cic.Term$ de $univs.Type0$ et de $H$, $cic.Term$ tient pour $univs.Type0$ et $H$.\nassistant\n", "label": "axiom iter (H : cic.Univ univs.Type0) (__ : (__ : cic.Term univs.Type0 H) -> cic.Term univs.Type0 H) (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__2 : cic.Term univs.Type0 H) : cic.Term univs.Type0 H", "predict": "Axiom prop80 : even 2  \nPostulate prop80 : odd 1  \nInductive property : universe => (element : universe) => (function : term => term) => (element1 : term) => (forall element2 : term, function element1 element2) => (universe : Type) => (element : universe) => (property : term) => (function element property)  \nVariable H : Universe. Function function : Term => Term => H. Element element1 : Term => Nat. For all element2 : Term => H, property."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFold_filter. Let $A$ and $B$ be elements of $cic.Univ$ of $univs.Type0$. Let $_a$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$. Let $p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $op$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $matita_basics_lists_list.fold$ applied to $A$ and $B$ and $op$ and $nil$ and the function that maps $i$ to $p$ applied to $i$ and the function that maps $i$ to $f$ applied to $i$ and $l$ and $matita_basics_lists_list.fold$ applied to $A$ and $B$ and $op$ and $nil$ and the function that maps $i$ to $matita_basics_bool.true$ and the function that maps $i$ to $f$ applied to $i$ and $matita_basics_lists_list.filter$ applied to $A$ and $p$ and $l$.\nassistant\n", "label": "fold_filter : A : cic.Univ univs.Type0 -> B : cic.Univ univs.Type0 -> _a : cic.Term univs.Type0 A -> l : cic.Term univs.Type0 (matita_basics_lists_list.list A) -> p : (__ : cic.Term univs.Type0 A -> cic.Term univs.Type0 matita_basics_bool.bool) -> op : (__ : cic.Term univs.Type0 B -> __1 : cic.Term univs.Type0 B -> cic.Term univs.Type0 B) -> nil : cic.Term univs.Type0 B -> f : (__ : cic.Term univs.Type0 A -> cic.Term univs.Type0 B) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_basics_lists_list.fold A B op nil (i : cic.Term univs.Type0 A => p i) (i : cic.Term univs.Type0 A => f i) l) (matita_basics_lists_list.fold A B op nil (i : cic.Term univs.Type0 A => matita_basics_bool.true) (i : cic.Term univs.Type0 A => f i) (matita_basics_lists_list.filter A p l))) .", "predict": "Output: \nAxiom fold_filter : \n  forall (A B : univs.Type0) (_a : Term A) (l : Term A -> matita_basics_lists_list.list B) (p : forall i : Term A, A -> Term B) (op : forall i i1 : Term B, B -> Term B) (nil : Term B), \n  (Term univs.Type0 B) (prop matita_basics_logic.eq (lift univs.Type0 univs.Type2 B) (fold B op nil (fun i : Term A => p i _a) (fun i : Term A => f i l) (filter B p l)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNot_rect_Type3_body. Soit $_A$ un élément de $cic.Univ$ de $cic.prop$. Soit $Q_$ une fonction des éléments $_x_88$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type3$. Soit $_H_nmk$ une fonction des fonctions $x_89$ des éléments $__$ de $cic.Term$ de $cic.prop$ et de $_A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$ à des éléments de $cic.Term$ de $univs.Type3$ et de $Q_$ appliqué à $matita_basics_logic.nmk$ appliqué à $_A$ et $x_89$. Soit $x_88$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $_A$. Alors $cic.Term$ tient pour $univs.Type3$ et $Q_$ appliqué à $x_88$.\nassistant\n", "label": "Axiom Not_rect_Type3_body : forall _A : cic.Univ cic.prop, forall Q_ : ((_x_88 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ univs.Type3), forall _H_nmk : ((x_89 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term univs.Type3 (Q_ (matita_basics_logic.nmk _A x_89))), forall x_88 : cic.Term cic.prop (matita_basics_logic.Not _A), cic.Term univs.Type3 (Q_ x_88) .", "predict": "Axiom Not_rect_Type3_body : forall (A : Universe) (Q : Term -> prop -> Not (A : Universe)) -> (forall (x : Term) (A : Universe) (False : prop), Not (A : Universe) -> Term -> Type3) -> (forall (x : Term) (A : Universe), Not (A : Universe) -> prop -> Term -> Type3) -> (forall (x : Term) (A : Universe), Not (A : Universe) -> prop -> Term -> Type3) -> (forall (x : Term) (A : Universe), Not (A : Universe) -> prop -> Term -> Type3) -> (forall (x : Term) (A : Universe), Not (A : Universe) -> prop -> Term -> Type3) -> (forall (x : Term) (A : Universe), Not (A : Universe) -> prop -> Term -> Type3) -> (forall (x : Term) (A : Universe), Not (A : Universe) -> prop -> Term -> Type3) -> (forall (x : Term) (A : Universe), Not (A : Universe) -> prop -> Term -> Type3) -> (forall (x : Term) (A : Universe), Not (A : Universe) -> prop -> Term -> Type3) -> (forall (x : Term) (A : Universe), Not (A : Universe) -> prop -> Term -> Type3) -> (forall (x : Term) (A : Universe), Not (A : Universe) -> prop -> Term -> Type3) -> (forall (x : Term) (A : Universe), Not (A : Universe) -> prop -> Term -> Type3) -> (forall (x : Term) (A : Universe), Not (A : Universe) -> prop -> Term -> Type3) -> (forall (x : Term) (A : Universe), Not (A : Universe) -> prop -> Term -> Type3) -> (forall (x : Term) (A : Universe), Not (A : Universe) -> prop -> Term -> Type3) -> (forall (x : Term) (A : Universe), Not (A : Universe) -> prop -> Term -> Type3) -> (forall (x : Term) (A : Universe), Not (A : Universe) -> prop -> Term -> Type3) -> (forall (x : Term) (A : Universe), Not (A : Universe) -> prop ->"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd. Låt $s1$ och $s2$ vara element av $Sort$. Låt $a$ vara ett element av $Univ$ av $s1$. Låt $b$ vara en funktion från element av $Term$ av $s1$ och $a$ till element av $Univ$ av $s2$. Då håller $Univ$ för $rule$ applicerat på $s1$ och $s2$.\nassistant\n", "label": "axiom prod (s1 s2 : Sort) (a : Univ s1) (b : Term s1 a -> Univ s2) : Univ (rule s1 s2)", "predict": "Output: \n```\nProd.\nLet s1 : Sort.\nLet s2 : Sort.\nLet a : Univ of s1.\nLet b : Term of s1 × a → Univ of s2.\nThen Univ holds for rule applied on s1 and s2.\n```"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLog_exp1. För alla element $p$ och $n$ och $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_log.log$ applicerat på $p$ och $matita_arithmetics_exp.exp$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_log.log$ applicerat på $p$ och $n$.\nassistant\n", "label": "log_exp1 : p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_log.log p (matita_arithmetics_exp.exp n m)) (matita_arithmetics_nat.times m (matita_arithmetics_nat.S (matita_arithmetics_log.log p n)))) .", "predict": "Output: \nFör alla element $p$ och $n$ och $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_log.log$ applicerat på $p$ och $matita_arithmetics_exp.exp$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_log.log$ applicerat på $p$ och $n$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_inv_rect_CProp1. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $x1$ och $x2$. Då för alla funktioner $P$ från element $_z1752$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $prod$ applicerat på $a$ och $x2$ och $x2$ och funktioner $_", "label": "Dop_inv_rect_CProp1 : x1 : cic.Univ univs.Type0 -> x2 : cic.Term univs.Type0 x1 -> Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2) -> P : (_z1752 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2) -> cic.Univ cic.prop) -> _H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2) -> prod : (__ : cic.Term univs.Type0 x1 -> __1 : cic.Term univs.Type0 x1 -> cic.Term univs.Type0 x1) -> _null : (a : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> _distr : (a : cic.Term univs.Type0 x1 -> b : cic.Term univs.Type0 x1 -> c : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> _z1753 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr)) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term cic.prop (P Hterm) .", "predict": "rec$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $prod$ applicerat på $a$ och $x2$ och $x2$, har vi $Hterm$ som är lika med $_rec$ applicerat på $x1$ och $x2$ och $H1$ och $Hterm$ applicerat på $prod$ applicerat på $a$ och $x2$ och $x2$ och $_null$ applicerat på $a$ och $x2$ och $x2$.\n\nOutput: \nAxiom Dop_inv_rect_CProp1 : forall (x1 : cic.Univ) (x2 : cic.Term) (Hterm : cic.Term) (P : forall (term : cic.Term) (Dop : matita_arithmetics_bigops.Dop), term -> cic.Univ -> cic.prop) (H1 : forall (sum : cic.Term) (ACop : matita_arithmetics_bigops.ACop), sum -> cic.Term -> cic.Term) (prod : forall (__) (x1 : cic.Term), cic.Term -> cic.Term) (null : forall (a : cic.Term), a -> cic.Term -> cic.prop) (eq : matita_basics_logic.eq) (lift : cic.lift) (univs : univs.Type0), (eq (Hterm) (fun (a : cic.Term) (x1 : cic.Univ) => (prod (a) (x2) (x2)) (null (a) (x2) (x2)) (rec (a) (x1) (prod (a) (x2) (x2)) (null (a) (x2) (x2)) (H1) (Hterm (prod (a) (x2) (x2))))) (univs.Type2) (x1) (prod (x1) (x2) (x2)) (eq (cic.lift (univs.Type0) (univs.Type2) (x1)) (prod (x1)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1572. Let $m$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Let $H$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $m$ and $n$ and $matita_arithmetics_nat.O$. Then for all elements $auto$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $m$ and $matita_arithmetics_nat.O$, for all elements $auto'$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $matita_arithmetics_nat.O$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $m$ and $matita_arithmetics_nat.O$.\nassistant\n", "label": "axiom let_clause_1572 (m n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd m n) matita_arithmetics_nat.O)) (auto : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m matita_arithmetics_nat.O)) (auto' : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n matita_arithmetics_nat.O)) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m matita_arithmetics_nat.O)", "predict": "Output: \nLet_clause_1572 : \n  let m : cic.Term univs.Type0 matita_arithmetics_nat.nat in \n  let n : cic.Term univs.Type0 matita_arithmetics_nat.nat in \n  let posn : cic.Term univs.Type0 matita_arithmetics_nat.lt matita_arithmetics_nat.O n in \n  let H : cic.Term univs.Type0 matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_gcd.gcd m n matita_arithmetics_nat.O)) in \n  let auto : cic.Term univs.Type0 matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat m matita_arithmetics_nat.O) in \n  let auto' : cic.Term univs.Type0 matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n matita_arithmetics_nat.O) in \n  cic.Term _ holds _ (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat m matita_arithmetics_nat.O) auto) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n matita_arithmetics_nat.O) auto')"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nInvert_permut_f. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $m$ och $n$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_permutation.injn$ applicerat på $f$ och $n$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_permutation.invert_permut$ applicerat på $n$ och $f$ och $f$ applicerat på $m$ och $m$.\nassistant\n", "label": "postulate invert_permut_f : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le m n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_permutation.injn f n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_permutation.invert_permut n f (f m)) m)", "predict": "postulate Invert_permut_f : forall (f : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_arithmetics_nat.nat) (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (P : cic.prop -> matita_arithmetics_nat.le m n) (P1 : cic.prop -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_permutation.injn f n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_permutation.invert_permut n f f m m))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nIff_trans. Soient $A$ et $B$ et $C$ des éléments de $cic.Univ$ de $cic.prop$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.iff$ appliqué à $A$ et $B$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.iff$ appliqué à $B$ et $C$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.iff$ appliqué à $A$ et $C$.\nassistant\n", "label": "axiom iff_trans (A B C : cic.Univ cic.prop) (__ : cic.Term cic.prop (matita_basics_logic.iff A B)) (__1 : cic.Term cic.prop (matita_basics_logic.iff B C)) : cic.Term cic.prop (matita_basics_logic.iff A C)", "predict": "Output: \nAxiom Iff_trans : forall (A B C : cic.Univ) (__: cic.Term (cic.prop A B) (matita_basics_logic.iff A B)) (__: cic.Term (cic.prop B C) (matita_basics_logic.iff B C)), cic.Term (cic.prop A C) (matita_basics_logic.iff A C)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBool_ind. For all functions $Q_$ from elements $_x_326$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $cic.prop$, for all elements $_H_true$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_bool.true$, for all elements $_H_false$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_bool.false$, for all elements $x_326$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_326$.\nassistant\n", "label": "axiom bool_ind (Q_ : (_x_326 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) (_H_true : cic.Term cic.prop (Q_ matita_basics_bool.true)) (_H_false : cic.Term cic.prop (Q_ matita_basics_bool.false)) (x_326 : cic.Term univs.Type0 matita_basics_bool.bool) : cic.Term cic.prop (Q_ x_326)", "predict": "Output: \nAxiom prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1034. Let $n$ and $m$ and $q$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $posn$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, for all elements $posm$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, for all elements $x2515$ and $x2516$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x2515$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_div_and_mod.mod$ applied to $x2515$ and $x2516$ and $matita_arithmetics_nat.times$ applied to $x2516$ and $matita_arithmetics_div_and_mod.div$ applied to $x2515$ and $x2516$.\nassistant\n", "label": "Axiom let_clause_1034 : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall q : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), forall x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_div_and_mod.mod x2515 x2516) (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)))) .", "predict": "Let_clause_1034. Parameter n : univs.Type0. Parameter m : univs.Type0. Parameter q : univs.Type0. Parameter posn : cic.prop. Parameter posm : cic.prop. Parameter x2515 : univs.Type0. Parameter x2516 : univs.Type0. Goal. intro n. intro m. intro q. intro posn. intro posm. intro x2515. intro x2516. apply cic.Term. apply cic.prop. apply matita_basics_logic.eq. apply cic.lift. apply univs.Type0. apply univs.Type2. apply matita_arithmetics_nat.nat. apply x2515. apply matita_arithmetics_nat.plus. apply matita_arithmetics_div_and_mod.mod. apply x2515. apply x2516. apply matita_arithmetics_nat.times. apply x2516. apply matita_arithmetics_div_and_mod.div. apply x2515. apply x2516. Qed."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1075. For all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $bijf$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_permutation.bijn$ applied to $f$ and $matita_arithmetics_nat.S$ applied to $n$, for all elements $fS$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $matita_arithmetics_nat.S$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $n$, for all elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $lein$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $i$ and $n$, for all elements $a$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $matita_arithmetics_nat.le$ applied to $a$ and $matita_arithmetics_nat.S$ applied to $n$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and", "label": "axiom let_clause_1075 (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (bijf : cic.Term cic.prop (matita_arithmetics_permutation.bijn f (matita_arithmetics_nat.S n))) (fS : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f (matita_arithmetics_nat.S n)) (matita_arithmetics_nat.S n))) (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) (lein : cic.Term cic.prop (matita_arithmetics_nat.le i n)) (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le a (matita_arithmetics_nat.S n)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i))) (lean : cic.Term cic.prop (matita_arithmetics_nat.le a (matita_arithmetics_nat.S n))) (fa : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i)) (Hc : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a (matita_arithmetics_nat.S n))) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) i a)", "predict": " $matita_arithmetics_nat.nat$ and $f$ applied to $matita_arithmetics_nat.S$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $n$ and $matita_arithmetics_nat.le$ applied to $a$ and $matita_arithmetics_nat.S$ applied to $n$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $matita_arithmetics_nat.S$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $n$, we have $cic.prop$ applied to $fS$ and $matita_arithmetics_nat.le$ applied to $a$ and $matita_arithmetics_nat.S$ applied to $n$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $matita_arithmetics_nat.S$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $n$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $matita_arithmetics_nat.S$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $n$.\nOutput: \nLet_clause_1075 : \n  {f : ∀ ($$$ : cic.Term) (n : matita_arithmetics_nat.nat), cic.Term × cic.Term × matita_arithmetics_nat.nat × cic.Term × matita_arithmetics_nat.nat × matita_arithmetics_nat.nat × cic.Term × matita_arithmetics_nat.nat × matita_arithmetics_nat.nat × matita_arithmetics_nat.nat × matita_arithmetics_nat.nat × matita_arithmetics_nat.nat × matita_arithmetics_nat.nat × matita_arithmetics_nat.nat × matita_arithmetics_nat.nat × matita_arithmetics_nat.nat × mat"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_inv_rect_CProp4. Pour tous les éléments $x1$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $x2$ de $cic.Term$ de $univs.Type0$ et de $x1$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1602$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $aop$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $x1$ et $x2$ et des fonctions $_comm$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $matita_arithmetics_bigops.op$ appliqué à $x1$ et $x2$ et $aop$ et $a$ et $b$ et $matita_arithmetics_bigops.op$ appliqué à $x1$ et $x2$ et $aop$ et $b$ et $a$ et des éléments $_z1603$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.ACop$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_arithmetics_bigops.mk_ACop$ appliqué à $x1$ et $x2$ et $aop$ et $_comm$ à des", "label": "Axiom ACop_inv_rect_CProp4 : forall x1 : cic.Univ univs.Type0, forall x2 : cic.Term univs.Type0 x1, forall Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2), forall P : ((_z1602 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> cic.Univ cic.prop), forall _H1 : ((aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (_comm : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (matita_arithmetics_bigops.op x1 x2 aop a b) (matita_arithmetics_bigops.op x1 x2 aop b a))) -> (_z1603 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop x1 x2)) Hterm (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))), cic.Term cic.prop (P Hterm) .", "predict": " éléments de $cic.prop$, il est vrai que $P$ est égal à $comm$ appliqué à $P$ appliqué à $a$ et $b$ et $comm$ appliqué à $Hterm$ et $comm$ appliqué à $matita_arithmetics_bigops.mk_ACop$ appliqué à $x1$ et $x2$ et $aop$ et $_comm$ appliqué à $a$ et $b$ et $comm$ appliqué à $Hterm$ et $comm$ appliqué à $matita_arithmetics_bigops.mk_ACop$ appliqué à $x1$ et $x2$ et $aop$ et $_comm$ appliqué à $a$ et $b$. \n\nOutput: \nAxiom ACop_inv_rect_CProp4 : forall x1 : Univ, forall x2 : Term, forall Hterm : Term, forall P : forall _z1602 : Term, ACop x1 x2 -> prop, forall aop : Term, forall a : Term, forall b : Term, forall _z1603 : Term, eq (lift Type0 Type2 x1) (lift Type0 Type2 (ACop x1 x2)) -> (mk_ACop x1 x2 aop) -> eq (comm P a b) (comm (eq (mk_ACop x1 x2 aop) (mk_ACop x1 x2 aop)) (comm (mk_ACop x1 x2 aop) a b) (comm (mk_ACop x1 x2 aop) (mk_ACop x1 x2 aop) aop) _z1603) (comm (eq (mk_ACop x1 x2 aop) (mk_ACop x1 x2 aop)) (comm (mk_ACop x1 x2 aop) a b) (comm (mk_ACop x1 x2 aop) (mk_ACop x1 x2 aop) aop) _z1603)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_rect_Type3. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type2$. Låt $_x$ vara ett element av $cic.Term$ av $univs.Type2$ och $A$. Låt $Q_$ vara en funktion från element $x_10$ av $cic.Term$ av $univs.Type2$ och $A$ och element $_x_11$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_10$ till element av $cic.Univ$ av $univs.Type3$. Låt $_H_refl$ vara ett element av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $_x$ och $matita_basics_logic.refl$ applicerat på $A$ och $_x$. Då för alla element $x_10$ av $cic.Term$ av $univs.Type2$ och $A$, för alla element $x_11$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_10$, håller $cic.Term$ för $univs.Type3$ och $Q_$ applicerat på $x_10$ och $x_11$.\nassistant\n", "label": "postulate eq_rect_Type3 : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_10 : cic.Term univs.Type2 A) -> (_x_11 : cic.Term cic.prop (matita_basics_logic.eq A _x x_10)) -> cic.Univ univs.Type3) -> (_H_refl : cic.Term univs.Type3 (Q_ _x (matita_basics_logic.refl A _x))) -> (x_10 : cic.Term univs.Type2 A) -> (x_11 : cic.Term cic.prop (matita_basics_logic.eq A _x x_10)) -> cic.Term univs.Type3 (Q_ x_10 x_11)", "predict": "postulate Eq_rect_Type3 : {univs : Universe} {A : univs.Type2} {x : univs.Type2 A} (Q : (x10 : univs.Type2) (x : A) -> (x11 : univs.Type2) -> (x10 == matita_basics_logic.eq A x x10) -> univs.Type3) (H_refl : univs.Type3 Q x (matita_basics_logic.refl A x)) -> (x10 : univs.Type2) (x11 : univs.Type2) -> (x10 == matita_basics_logic.eq A x x10) -> univs.Type3 (Q x10 x x11)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFilter_False. Låt $return_sort$ vara ett element av $cic.Sort$. Då för alla funktioner $return_type$ från element $z$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Univ$ av $return_sort$, för alla funktioner $return$ från element $z$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $z$, för alla element $z$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$, håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.\nassistant\n", "label": "postulate filter_False : (return_sort : cic.Sort) -> (return_type : (z : cic.Term cic.prop matita_basics_logic.False) -> cic.Univ return_sort) -> (return : (z : cic.Term cic.prop matita_basics_logic.False) -> cic.Term return_sort (return_type z)) -> (z : cic.Term cic.prop matita_basics_logic.False) -> cic.Term return_sort (return_type z)", "predict": "postulate Filter_False : (z : cic.Term (cic.prop , matita_basics_logic.False)) -> (return : z -> cic.Term return_sort) -> (return_type : z -> cic.Term return_sort -> cic.Term return_type) -> (return_type z (return z return_type)) -> (z : cic.Term (cic.prop , matita_basics_logic.False)) -> cic.Term return_sort (return_type z (return z return_type))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDpi1__o__op. Let $x0$ be an element of $cic.Univ$ of $univs.Type0$. Let $x1$ be an element of $cic.Term$ of $univs.Type0$ and $x0$. Let $x2$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x0$ and $x1$ to elements of $cic.Univ$ of $univs.Type0$. Let $x3$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $matita_arithmetics_bigops.Aop$ applied to $x0$ and $x1$ and $x2$. Then for all elements $_x_887$ and $_x_888$ of $cic.Term$ of $univs.Type0$ and $x0$, $cic.Term$ holds for $univs.Type0$ and $x0$.\nassistant\n", "label": "postulate dpi1__o__op : (x0 : cic.Univ univs.Type0) -> (x1 : cic.Term univs.Type0 x0) -> (x2 : (__ : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x0 x1)) -> cic.Univ univs.Type0) -> (x3 : cic.Term univs.Type0 (matita_basics_types.DPair (matita_arithmetics_bigops.Aop x0 x1) x2)) -> (_x_887 : cic.Term univs.Type0 x0) -> (_x_888 : cic.Term univs.Type0 x0) -> cic.Term univs.Type0 x0", "predict": "postulate Dpi1__o__op : (x0 : cic.Univ (univs.Type0)) -> (x1 : cic.Term (univs.Type0) x0) -> (x2 : (x : cic.Term (univs.Type0)) -> matita_arithmetics_bigops.Aop x0 x1 -> cic.Univ (univs.Type0)) -> (x3 : (x : cic.Term (univs.Type0)) -> matita_basics_types.DPair (matita_arithmetics_bigops.Aop x0 x1) (x2 x)) -> (x : cic.Term (univs.Type0)) -> (x0 : x) -> cic.Term (univs.Type0) x0"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_inv_rect_CProp0. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x2$ un élément de $cic.Term$ de $univs.Type0$ et de $x1$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $x1$ et $x2$. Soit $P$ une fonction des éléments $_z1428$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H1$ une fonction des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $x2$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $", "label": "Axiom Aop_inv_rect_CProp0 : forall x1 : cic.Univ univs.Type0, forall x2 : cic.Term univs.Type0 x1, forall Hterm : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2), forall P : ((_z1428 : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> cic.Univ cic.prop), forall _H1 : ((op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1429 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.Aop x1 x2)) Hterm (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))), cic.Term cic.prop (P Hterm) .", "predict": "cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $x2$ et $a$ et $a$ à des fonctions $_cons$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $x2$ et $a$ et $b$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $x2$ et $a$ et $a$ à des fonctions $_cons$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $x2$ et $a$ et $b$. Soit $_H2$ une fonction des fonctions $op$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1033. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $ltn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $H$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $H1$ vara en funktion från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $m$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $m$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat", "label": "postulate let_clause_1033 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (ltn : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> (_clearme : cic.Term cic.prop (matita_arithmetics_primes.prime (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) -> (H : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) -> (H1 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_primes.divides m (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita", "predict": " på $ltn$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $H2$ vara en funktion från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $matita_arithmetics_primes.prime$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $cic.lift$ applicerat på $ltn$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$. \n\nOutput: \n```\nlet_clause_1033 : \n  ∀ {univs : Type} {cic : Context} {Term : Type (univs ⊔ 0)} {prop : Type (univs ⊔ "}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nUnit_inv_rect_CProp2. Pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$, pour toutes les fonctions $P$ des éléments $_z954$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $_z955$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.unit$ et $Hterm$ et $matita_basics_types.it$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.it$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "postulate unit_inv_rect_CProp2 : (Hterm : cic.Term univs.Type0 matita_basics_types.unit) -> (P : (_z954 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ cic.prop) -> (_H1 : (_z955 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm matita_basics_types.it)) -> cic.Term cic.prop (P matita_basics_types.it)) -> cic.Term cic.prop (P Hterm)", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFilter_Or. Let $_A$ and $_B$ be elements of $cic.Univ$ of $cic.prop$. Let $return_sort$ be an element of $cic.Sort$. Let $return_type$ be a function from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $return_sort$. Let $return$ be a function from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $_A$ and $_B$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $z$. Let $z$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $_A$ and $_B$. Then $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.\nassistant\n", "label": "Axiom filter_Or : forall _A : cic.Univ cic.prop, forall _B : cic.Univ cic.prop, forall return_sort : cic.Sort, forall return_type : ((z : cic.Term cic.prop (matita_basics_logic.Or _A _B)) -> cic.Univ return_sort), forall return : ((z : cic.Term cic.prop (matita_basics_logic.Or _A _B)) -> cic.Term return_sort (return_type z)), forall z : cic.Term cic.prop (matita_basics_logic.Or _A _B), cic.Term return_sort (return_type z) .", "predict": "Filter_Or : \n  ∀ A B : cic.Univ, \n  ∀ return_sort : cic.Sort, \n  ∀ return_type : (z : cic.Term (cic.prop)) → (A, B : matita_basics_logic.Or) → cic.Univ (return_sort), \n  ∀ return : (z : cic.Term (cic.prop)) → (A, B : matita_basics_logic.Or) → cic.Term (return_sort) (return_type z), \n  ∀ z : cic.Term (cic.prop) (A, B : matita_basics_logic.Or), \n  cic.Term (return_sort (return_type z))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAll_inv_append. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $P$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $l1$ and $l2$ be elements of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.All$ applied to $A$ and $P$ and $matita_basics_lists_list.append$ applied to $A$ and $l1$ and $l2$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.And$ applied to $matita_basics_lists_list.All$ applied to $A$ and $P$ and $l1$ and $matita_basics_lists_list.All$ applied to $A$ and $P$ and $l2$.\nassistant\n", "label": "postulate All_inv_append : (A : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.All A P (matita_basics_lists_list.append A l1 l2))) -> cic.Term cic.prop (matita_basics_logic.And (matita_basics_lists_list.All A P l1) (matita_basics_lists_list.All A P l2))", "predict": "postulate All_inv_append : (A : cic.Univ) -> (P : (__) -> A -> cic.Univ) -> (l1 l2 : (A -> matita_basics_lists_list.list A)) -> ((__) -> matita_basics_lists_list.All A P l1) -> ((__) -> matita_basics_lists_list.All A P l2) -> (matita_basics_lists_list.All A P (matita_basics_lists_list.append A l1 l2)) -> (cic.Term cic.prop)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_rect_CProp5_body. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all functions $Q_$ from elements $_x_905$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_ACop$ from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_905$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_905$.\nassistant\n", "label": "ACop_rect_CProp5_body : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_905 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Univ cic.prop) -> _H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> _comm : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> x_905 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Term cic.prop (Q_ x_905) .", "predict": "Output: \nAxiom ACop_rect_CProp5_body : \n  forall (A : cic.Univ) (nil : cic.Term) (A : univs.Type0) (Q_ : forall (x_905 : cic.Term) (ACop : matita_arithmetics_bigops.ACop A nil), A -> univs.Type0 -> cic.prop), \n  forall (_H_mk_ACop : forall (aop : cic.Term) (A : univs.Type0) (matita_arithmetics_bigops.Aop A nil), \n    forall (comm : forall (a : cic.Term) (A : univs.Type0) (a : A) (b : cic.Term) (A : univs.Type0) (b : A), cic.Term -> univs.Type0 -> cic.prop) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A (matita_arithmetics_bigops.op A nil aop a) (matita_arithmetics_bigops.op A nil aop b a))), \n    forall (x_905 : cic.Term) (ACop : matita_arithmetics_bigops.ACop A nil), cic.Term -> univs.Type0 -> cic.prop) (Q_ (matita_arithmetics_bigops.mk_ACop A nil aop comm) (matita_arithmetics_bigops.op A nil aop a) (matita_arithmetics_bigops.op A nil aop b)), \n  forall (x_905 : cic.Term) (ACop : matita_arithmetics_bigops.ACop A nil), cic.prop -> cic.Term -> univs.Type0 -> cic.prop) (Q_ (matita_arithmetics_bigops.mk_ACop A nil aop comm) (matita_arithmetics_bigops.op A nil aop a) (matita_arithmetics_bigops.op A nil aop b))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_inv_rect_CProp0. Pour tous les éléments $x1$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $x1$, pour toutes les fonctions $P$ des éléments $_z1098$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $x1$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $_z1099$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.option$ appliqué à $x1$ et $Hterm$ et $matita_basics_types.None$ appliqué à $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.None$ appliqué à $x1$, pour toutes les fonctions $_H2$ des éléments $x_635$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_z1099$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.option$ appliqué à $x1$ et $Hterm$ et $matita_basics_types.Some$ appliqué à $x1$ et $x_635$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.Some$ appliqué à $x1$ et $x_635$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "option_inv_rect_CProp0 : x1 : cic.Univ univs.Type0 -> Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) -> P : (_z1098 : cic.Term univs.Type0 (matita_basics_types.option x1) -> cic.Univ cic.prop) -> _H1 : (_z1099 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.None x1)) -> cic.Term cic.prop (P (matita_basics_types.None x1))) -> _H2 : (x_635 : cic.Term univs.Type0 x1 -> _z1099 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.Some x1 x_635)) -> cic.Term cic.prop (P (matita_basics_types.Some x1 x_635))) -> cic.Term cic.prop (P Hterm) .", "predict": "Output: Axiom Option_inv_rect_CProp0 : \n  forall x1 : Univ, \n  forall Hterm : Term, \n  option x1 -> \n  (forall z1098 : Term, \n  option x1 -> \n  Univ -> prop -> \n  (forall z1099 : Term, \n  prop -> logic.eq (lift (Type0, Type2)) (option x1 Hterm None x1) -> \n  (forall x_635 : Term, \n  x1 -> prop -> \n  (forall z1099 : Term, \n  prop -> logic.eq (lift (Type0, Type2)) (option x1 Hterm (Some x1 x_635)) -> \n  prop) (Some x1 x_635))) (None x1) -> \n  prop) (Hterm))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNull_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $xxx$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $nil$. Låt $a$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.prod$ applicerat på $A$ och $nil$ och $xxx$ och $a$ och $nil$ och $nil$.\nassistant\n", "label": "postulate null_body : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A nil)) -> (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.prod A nil xxx a nil) nil)", "predict": "postulate prop80 : even 2  \ndata univs : Set where\n  Type0 : univs\n  Type2 : univs\n\ndata cic.Univ : univs → Set where\n  univ0 : {A : univs} → A → cic.Univ A\n\ndata cic.Term : ∀{A} → univs → Set where\n  term0 : ∀{A} → A → cic.Term A\n  dop : ∀{A} → A → cic.Term A → cic.Term A\n\ndata matita_arithmetics_bigops.Dop : ∀{A} → A → cic.Term A → cic.Term A where\n  dop0 : ∀{A} → A → cic.Term A → cic.Term A\n\ndata matita_arithmetics_bigops.prod : ∀{A B} → cic.Term A → cic.Term B → cic.Term (A × B) where\n  prod0 : ∀{A B} → cic.Term A → cic.Term B → cic.Term (A × B)\n\ndata matita_basics_logic.eq : ∀{A} → A → A → Set where\n  eq0 : ∀{A} → A → A → Set\n\ndata cic.prop : ∀{A} → Set where\n  prop0 : ∀{A} → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic.Term A → cic"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTo_max. Låt $i$ och $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $i$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $m$ och $i$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.max$ applicerat på $n$ och $m$ och $i$.\nassistant\n", "label": "Axiom to_max : forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.le n i), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.le m i), cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.max n m) i) .", "predict": "Axiom to_max : forall (i : cic.Term univs.Type0) (n m : matita_arithmetics_nat.nat), (n <= i) -> forall (_1 : cic.Term cic.prop) (_ : matita_arithmetics_nat.le m i), (matita_arithmetics_nat.max n m) <= i."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nUnit_rect_CProp2. Soit $Q_$ une fonction des éléments $_x_515$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_it$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.it$. Alors pour tous les éléments $x_515$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_515$.\nassistant\n", "label": "axiom unit_rect_CProp2 (Q_ : (_x_515 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ cic.prop) (_H_it : cic.Term cic.prop (Q_ matita_basics_types.it)) (x_515 : cic.Term univs.Type0 matita_basics_types.unit) : cic.Term cic.prop (Q_ x_515)", "predict": "Axiom Unit_rect_CProp2 : forall (Q : forall (x : cic.Term univs.Type0) (u : matita_basics_types.unit), cic.Univ -> cic.prop), (H : cic.Term univs.Type0 -> cic.prop -> Q x u H), forall (x : cic.Term univs.Type0) (u : matita_basics_types.unit), cic.Term univs.Type0 -> cic.prop -> Q x u _ ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLop_Sfalse. Soient $m$ et $i$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $acc$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_chebyshev_bertrand256.list_divides$ appliqué à $acc$ et $i$ et $matita_basics_bool.false$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_chebyshev_bertrand256.lprim$ appliqué à $matita_arithmetics_nat.S$ appliqué à $m$ et $i$ et $acc$ et $matita_arithmetics_chebyshev_bertrand256.lprim$ appliqué à $m$ et $matita_arithmetics_nat.S$ appliqué à $i$ et $matita_basics_lists_list.append$ appliqué à $matita_arithmetics_nat.nat$ et $acc$ et $matita_basics_lists_list.cons$ appliqué à $matita_arithmetics_nat.nat$ et $i$ et $matita_basics_lists_list.nil$ appliqué à $matita_arithmetics_nat.nat$.\nassistant\n", "label": "Axiom lop_Sfalse : forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall acc : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat), forall __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_chebyshev_bertrand256.list_divides acc i) matita_basics_bool.false), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) (matita_arithmetics_chebyshev_bertrand256.lprim (matita_arithmetics_nat.S m) i acc) (matita_arithmetics_chebyshev_bertrand256.lprim m (matita_arithmetics_nat.S i) (matita_basics_lists_list.append matita_arithmetics_nat.nat acc (matita_basics_lists_list.cons matita_arithmetics_nat.nat i (matita_basics_lists_list.nil matita_arithmetics_nat.nat))))) .", "predict": "Axiom Lop_Sfalse : (forall m i : Term univs.Type0 (nat matita_arithmetics_nat.nat), \n   (forall acc : Term univs.Type0 (list (nat matita_arithmetics_nat.nat)), \n      (forall __ : prop (eq (lift univs.Type0 univs.Type2 (bool matita_basics_bool.bool) (list_divides acc i matita_basics_bool.false)) \n         (lift univs.Type0 univs.Type2 (list (nat matita_arithmetics_nat.nat)) (lprim (S m) i acc) (lprim m (S i) (append (nat acc) (cons (nat i) nil (nat)))))) \n      ) -> cic.Term cic.prop (eq (lift univs.Type0 univs.Type2 (list (nat matita_arithmetics_nat.nat))) (lprim (S m) i acc) (lprim m (S i) (append (nat acc) (cons (nat i) nil (nat))))))))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nGcd_n_n. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $n$ et $n$.\nassistant\n", "label": "axiom gcd_n_n (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n n) n)", "predict": "Gcd_n_n : forall (n : matita_arithmetics_nat.nat), cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_gcd.gcd n n n)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nUnit_rect_Type0. Soit $Q_$ une fonction des éléments $_x_507$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $_H_it$ un élément de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_types.it$. Soit $x_507$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$. Alors $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_507$.\nassistant\n", "label": "Axiom unit_rect_Type0 : forall Q_ : ((_x_507 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ univs.Type0), forall _H_it : cic.Term univs.Type0 (Q_ matita_basics_types.it), forall x_507 : cic.Term univs.Type0 matita_basics_types.unit, cic.Term univs.Type0 (Q_ x_507) .", "predict": "Axiom prop70 : odd 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_inv_rect_Type4. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$. Då för alla funktioner $P$ från element $_z1110$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type4$, för alla funktioner $_H1$ från element $dpi1$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_dpi2$ av $cic.Term$ av $univs.Type0$ och $x2$ applicerat på $dpi1$ och element $_z1111$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_DPair$ applicerat på $x1$ och $x2$ och $dpi1$ och $_dpi2$ till element av $cic.Term$ av $univs.Type4$ och $P$ applicerat på $matita_basics_types.mk_DPair$ applicerat på $x1$ och $x2$ och $dpi1$ och $_dpi2$, håller $cic.Term$ för $univs.Type4$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "postulate DPair_inv_rect_Type4 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> (P : (_z1110 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ univs.Type4) -> (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1111 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type4 (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type4 (P Hterm)", "predict": "postulate DPair_inv_rect_Type4 : {univs : Universe} -> (x1 : univs.univ) -> (x2 : (x : univs.term) -> univs.univ) -> (Hterm : univs.term) -> (DPair : x1 -> x2 x1 -> univs.univ) -> ((P : (z1110 : univs.term) -> DPair -> univs.univ) -> ((dpi1 : univs.term) -> (dpi2 : univs.term) -> (z1111 : univs.prop) -> (eq : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (DPair x1 x2)) -> (Hterm : univs.term) -> (matita_basics_types.mk_DPair x1 x2 dpi1 dpi2) -> univs.term) -> univs.term) -> (cic.term univs.Type4) -> (P (matita_basics_types.mk_DPair x1 x2) Hterm)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDpi1__o__op. Låt $x0$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x1$ vara ett element av $cic.Term$ av $univs.Type0$ och $x0$. Låt $x2$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $x0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$. Låt $x3$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $matita_basics_lists_list.Aop$ applicerat på $x0$ och $x1$ och $x2$. Låt $_x_807$ och $_x_808$ vara element av $cic.Term$ av $univs.Type0$ och $x0$. Då håller $cic.Term$ för $univs.Type0$ och $x0$.\nassistant\n", "label": "dpi1__o__op : x0 : cic.Univ univs.Type0 -> x1 : cic.Term univs.Type0 x0 -> x2 : (__ : cic.Term univs.Type0 (matita_basics_lists_list.Aop x0 x1) -> cic.Univ univs.Type0) -> x3 : cic.Term univs.Type0 (matita_basics_types.DPair (matita_basics_lists_list.Aop x0 x1) x2) -> _x_807 : cic.Term univs.Type0 x0 -> _x_808 : cic.Term univs.Type0 x0 -> cic.Term univs.Type0 x0 .", "predict": "Output: \nlet x0 be an element of cic.Univ of univs.Type0. \nlet x1 be an element of cic.Term of univs.Type0 and x0. \nlet x2 be a function from elements __ of cic.Term of univs.Type0 and matita_basics_lists_list.Aop applied on x0 and x1 to elements of cic.Univ of univs.Type0. \nlet x3 be an element of cic.Term of univs.Type0 and matita_basics_types.DPair applied on matita_basics_lists_list.Aop applied on x0 and x1 and x2. \nlet _x_807 and _x_808 be elements of cic.Term of univs.Type0 and x0. \nthen $cic.Term$ holds for univs.Type0 and x0."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_15625. Låt $m$ och $n$ och $a$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $posm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Låt $pnm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $c$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $", "label": "let_clause_15625 : m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) -> c : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (d : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat", "predict": "cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. \n\nOutput: \n```\nLet_clause_15625 : \n  ∀ m : cic.Term univs.Type0 matita_arithmetics_nat.nat,\n  ∀ n : cic.Term univs.Type0 matita_arithmetics_nat.nat,\n  ∀ a : cic.Term univs.Type0 matita_arithmetics_nat.nat,\n  ∀ b : cic.Term univs.Type0 matita_arithmetics_nat.nat,\n  ∀ posn : cic.Term univs.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n),\n  ∀ posm : cic.Term univs.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m),\n  ∀ pnm : cic.Term univs.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)),\n  ∀ c : cic.Term univs.Type0 matita_arithmetics_nat.nat,\n  ∀ _clearme : cic.Term univs.prop (matita_basics_logic.ex (matita_arithmetics_nat.nat) (\\d => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))).\n```"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_15691. Soient $m$ et $n$ et $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $posm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$. Soit $pnm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Soit $c$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $d$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.n", "label": "axiom let_clause_15691 (m n a b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (λ d => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))", "predict": "at$ et $matita_basics_logic.eq$ appliqué à $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_logic.eq$ appliqué à $matita_basics_logic.And$ appliqué à $matita_arithmetics_nat.lt$ appliqué à $n$ et $posn$ et $matita_arithmetics_nat.lt$ appliqué à $m$ et $posm$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_logic.eq$ appliqué à $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_logic.eq$ appliqué à $matita_basics_logic.And$ appliqué à $matita_arithmetics_nat.lt$ appliqué à $n$ et $posn$ et $matita_arithmetics_nat.lt$ appliqué à $m$ et $posm$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_logic.eq$ appliqué à $matita_basics_logic.And$ appliqué à $matita_arithmetics_nat.lt$ appliqué à $n$ et $posn$ et $matita_arithmetics_nat.lt$ appliqué à $"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nUnit_rect_Type5. Soit $Q_$ une fonction des éléments $_x_499$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $univs.Type5$. Soit $_H_it$ un élément de $cic.Term$ de $univs.Type5$ et de $Q_$ appliqué à $matita_basics_types.it$. Alors pour tous les éléments $x_499$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$, $cic.Term$ tient pour $univs.Type5$ et $Q_$ appliqué à $x_499$.\nassistant\n", "label": "unit_rect_Type5 : Q_ : (_x_499 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Univ univs.Type5) -> _H_it : cic.Term univs.Type5 (Q_ matita_basics_types.it) -> x_499 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Term univs.Type5 (Q_ x_499) .", "predict": "Output: \nAxiom Unit_rect_Type5 : \nforall (Q_ : cic.Term univs.Type0 matita_basics_types.unit -> cic.Univ univs.Type5) (H_it : cic.Term univs.Type5 (Q_ matita_basics_types.it)) (x_499 : cic.Term univs.Type0 matita_basics_types.unit), \ncic.Term univs.Type5 (Q_ x_499)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNot_rect_CProp5. Låt $_A$ vara ett element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_103$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_nmk$ vara en funktion från funktioner $x_104$ från element $__$ av $cic.Term$ av $cic.prop$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_logic.nmk$ applicerat på $_A$ och $x_104$. Då för alla element $x_103$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_103$.\nassistant\n", "label": "axiom Not_rect_CProp5 (_A : cic.Univ cic.prop) (Q_ : (_x_103 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ cic.prop) (_H_nmk : (x_104 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ (matita_basics_logic.nmk _A x_104))) (x_103 : cic.Term cic.prop (matita_basics_logic.Not _A)) : cic.Term cic.prop (Q_ x_103)", "predict": "Output: \naxiom Not_rect_CProp5 : forall (A : cic.univ) (Q_A : (x : cic.term prop) -> matita_basics_logic.Not A -> cic.univ prop) (H_nmk : (x : cic.term prop) -> (A : prop) -> (False -> cic.term prop) -> Q_A x A -> cic.term prop) -> forall (x : cic.term prop) -> matita_basics_logic.Not A -> cic.term prop."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nPermut_mod. Låt $p$ och $a$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $p$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_primes.divides$ applicerat på $p$ och $a$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_permutation.permut$ applicerat på funktionen som avbildar $n$ som $matita_arithmetics_div_and_mod.mod$ applicerat på $matita_arithmetics_nat.times$ applicerat på $a$ och $n$ och $p$ och $matita_arithmetics_nat.pred$ applicerat på $p$.\nassistant\n", "label": "axiom permut_mod (p a : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_primes.prime p)) (__1 : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides p a))) : cic.Term cic.prop (matita_arithmetics_permutation.permut (λ n => matita_arithmetics_div_and_mod.mod (matita_arithmetics_nat.times a n) p) (matita_arithmetics_nat.pred p))", "predict": "Output: Axiom Permut_mod : (p : cic.Term univs.Type0) -> (a : matita_arithmetics_nat.nat) -> (n : cic.Term cic.prop) -> (is_prime : matita_arithmetics_primes.prime) -> (not_divides : matita_basics_logic.Not (matita_arithmetics_primes.divides p a)) -> (n1 : cic.Term cic.prop) -> (is_prime1 : matita_arithmetics_primes.prime) -> (not_divides1 : matita_basics_logic.Not (matita_arithmetics_primes.divides n1 a)) -> (p1 : cic.Term univs.Type0) -> (n2 : cic.Term cic.prop) -> (is_prime2 : matita_arithmetics_primes.prime) -> (not_divides2 : matita_basics_logic.Not (matita_arithmetics_primes.divides n2 a)) -> (n3 : cic.Term cic.prop) -> (is_prime3 : matita_arithmetics_primes.prime) -> (not_divides3 : matita_basics_logic.Not (matita_arithmetics_primes.divides n3 a)) -> (f : (forall n : cic.Term cic.prop, (matita_arithmetics_div_and_mod.mod (matita_arithmetics_nat.times a n) p) = n) -> (forall n : cic.Term cic.prop, (matita_arithmetics_div_and_mod.mod (matita_arithmetics_nat.times a (matita_arithmetics_nat.pred p)) p) = (matita_arithmetics_nat.pred p)) -> (forall n : cic.Term cic.prop, (matita_arithmetics_div_and_mod.mod (matita_arithmetics_nat.times a (matita_arithmetics_nat.pred (matita_arithmetics_nat.pred p))) p) = (matita_arithmetics_nat.pred (matita_arithmetics_nat.pred p))) -> (forall n : cic.Term cic.prop, (matita_arithmetics_div_and_mod.mod (matita_arithmetics_nat.times a (matita_arithmetics_nat.pred (matita_arithmetics_nat.pred (matita_arithmetics_nat.pred p)))) p) = (matita_arithmetics_nat.pred (matita_arithmetics_nat.pred (matita_arithmetics_nat.pred p)))) -> (forall n : cic.Term cic.prop, (matita_arith"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_CProp4_body. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_795$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_Aop$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $c", "label": "Axiom Aop_rect_CProp4_body : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_795 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop), forall _H_mk_Aop : ((op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))), forall x_795 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil), cic.Term cic.prop (Q_ x_795) .", "predict": "ic.prop$ och $matita_basics_logic.eq$ applicerat surjection de $cic.lift$ applicerat de $univs.Type0$ et $univs.Type2$ et $A$ et $op$ applicerat sur $a$ et $b$ et $c$ et fonction $matita_basics_logic.eq$ applicerat de $cic.lift$ applicerat de $univs.Type0$ et $univs.Type2$ et $A$ et $op$ applicerat sur $a$ et $b$ et $c$ et fonction $matita_basics_logic.eq$ applicerat de $cic.lift$ applicerat de $univs.Type0$ et $univs.Type2$ et $A$ et $op$ applicerat sur $a$ et $b$ et $c$ et fonction $matita_basics_logic.eq$ applicerat de $cic.lift$ applicerat de $univs.Type0$ et $univs.Type2$ et $A$ et $op$ applicerat sur $a$ et $b$ et $c$ et fonction $matita_basics_logic.eq$ applicerat de $cic.lift$ applicerat de $univs.Type0$ et $univs.Type2$ et $A$ et $op$ applicerat sur $a$ et $b$ et $c$ et fonction $matita_basics_logic.eq$ applicerat de $cic.lift$ applicerat de $univs.Type0$ et $univs.Type2$ et $A$ et $op$ applicerat sur $a$ et $b$ et $c$ et fonction $matita_basics_logic.eq$ applicerat de $cic.lift$ applicerat de $univs.Type0$ et $univs.Type2$ et $A$ et $op$ applicerat sur $a$ et $b$ et $c$ et fonction $matita_basics_logic.eq$ applicerat de $cic.lift$ applicerat de $univs.Type0$ et $univs.Type2$ et $A$ et $op$ applicerat sur $a$ et $b$ et $c$ et fonction $matita_basics_logic.eq$ applicerat de $cic.lift$ applic"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nInj_mk_Sig. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $P$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $x$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $P$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Sig$ applicerat på $A$ och $P$ och $x$ och $matita_basics_types.mk_Sig$ applicerat på $A$ och $P$ och $matita_basics_types.pi1$ applicerat på $A$ och $P$ och $x$ och $matita_basics_types.pi2$ applicerat på $A$ och $P$ och $x$.\nassistant\n", "label": "inj_mk_Sig : A : cic.Univ univs.Type0 -> P : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> x : cic.Term univs.Type0 (matita_basics_types.Sig A P) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig A P)) x (matita_basics_types.mk_Sig A P (matita_basics_types.pi1 A P x) (matita_basics_types.pi2 A P x))) .", "predict": "Output: Axiom Inj_mk_Sig : forall (univs : Univ), (A : univs.Type0) -> (P : Term -> univs.Type0 -> Univ) -> forall (x : Term), Sig A (fun y -> prop) -> Term (prop) (lift univs.Type0 univs.Type2 Sig A P x) (mk_Sig A P x) (pi1 A P x) (pi2 A P x)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExp_sigma_l. Let $n$ and $a$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_bigops.bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $matita_arithmetics_exp.exp$ applied to $a$ and $f$ applied to $i$ and $matita_arithmetics_exp.exp$ applied to $a$ and $matita_arithmetics_bigops.bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.plus$ and the function that maps $i$ to $f$ applied to $i$.\nassistant\n", "label": "axiom exp_sigma_l (n a : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (λ i => p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (λ i => matita_arithmetics_exp.exp a (f i))) (matita_arithmetics_exp.exp a (matita_arithmetics_bigops.bigop n (λ i => p i) matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_nat.plus (λ i => f i))))", "predict": "Output: \nLet n a : univs.Type0 -> matita_arithmetics_nat.nat -> cic.Term -> cic.prop -> matita_basics_logic.eq -> univs.Type0 -> univs.Type2 -> matita_arithmetics_nat.nat -> matita_basics_bool.bool -> matita_arithmetics_bigops.bigop -> cic.Term -> cic.Term -> matita_arithmetics_nat.nat -> matita_arithmetics_exp.exp -> cic.Term -> cic.Term -> matita_arithmetics_exp.exp -> matita_arithmetics_bigops.bigop -> cic.Term -> cic.Term -> matita_arithmetics_nat.nat -> matita_arithmetics_nat.S -> matita_arithmetics_nat.O -> matita_arithmetics_nat.times -> matita_arithmetics_exp.exp -> matita_arithmetics_bigops.bigop -> cic.Term -> cic.Term -> matita_arithmetics_nat.nat -> matita_arithmetics_exp.exp -> cic.Term -> cic.Term -> matita_arithmetics_exp.exp -> matita_arithmetics_bigops.bigop -> cic.Term -> \nThen cic.Term holds for n a p f."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_15311. Soient $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$. Soit $_clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.divides$ appliqué à $n$ et $m$. Soient $d$ et $p$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $eqm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $n$ et $matita_arithmetics_nat.S$ appliqué à $p$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $m$ et $matita_arithmetics_nat.plus$ appliqué à $n$ et $matita_arithmetics_nat.times$ appliqué à $n$ et $p$.\nassistant\n", "label": "Axiom let_clause_15311 : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), forall _clearme : cic.Term cic.prop (matita_arithmetics_primes.divides n m), forall d : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall eqm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times n (matita_arithmetics_nat.S p))), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.plus n (matita_arithmetics_nat.times n p))) .", "predict": "Let_clause_15311 : \n  | n : univs.Type0 -> matita_arithmetics_nat.nat \n  | m : univs.Type0 -> matita_arithmetics_nat.nat \n  | posm : cic.Term -> matita_arithmetics_nat.lt (matita_arithmetics_nat.O) m \n  | _clearme : cic.Term -> matita_arithmetics_primes.divides n m \n  | d : univs.Type0 -> matita_arithmetics_nat.nat \n  | p : univs.Type0 -> matita_arithmetics_nat.nat \n  | eqm : cic.Term -> cic.prop -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times n (matita_arithmetics_nat.S p)) \n  | then : cic.Term -> cic.prop -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.plus n (matita_arithmetics_nat.times n p))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_15491. Pour tous les éléments $m$ et $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $eqn0$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $x1106$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x1106$ et $matita_arithmetics_nat.minus$ appliqué à $x1106$ et $n$.\nassistant\n", "label": "postulate let_clause_15491 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (eqn0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O n)) -> (x1106 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1106 (matita_arithmetics_nat.minus x1106 n))", "predict": "postulate let_clause_15491 : \n  forall (m n : cic.Term univs.Type0 (matita_arithmetics_nat.nat)) (eqn0 : cic.Term univs.Type0 (cic.prop) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O n)) (x1106 : cic.Term univs.Type0 (matita_arithmetics_nat.nat)) , \n  cic.Term univs.Type0 (cic.prop) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1106 (matita_arithmetics_nat.minus x1106 n))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBool_rect_CProp1. För alla funktioner $Q_$ från element $_x_359$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Univ$ av $cic.prop$, för alla element $_H_true$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_bool.true$, för alla element $_H_false$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_bool.false$, för alla element $x_359$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_359$.\nassistant\n", "label": "axiom bool_rect_CProp1 (Q_ : (_x_359 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) (_H_true : cic.Term cic.prop (Q_ matita_basics_bool.true)) (_H_false : cic.Term cic.prop (Q_ matita_basics_bool.false)) (x_359 : cic.Term univs.Type0 matita_basics_bool.bool) : cic.Term cic.prop (Q_ x_359)", "predict": "Bool_rect_CProp1 : \n  {x : univs.Type0}\n  {Q : (cic.Term univs.Type0) -> (matita_basics_bool.bool) -> (cic.Univ)}\n  {H_true : (cic.Term (cic.prop)) (Q (matita_basics_bool.true) _)}\n  {H_false : (cic.Term (cic.prop)) (Q (matita_basics_bool.false) _)}\n  -> (forall (x_359 : (cic.Term univs.Type0)) (matita_basics_bool.bool), (cic.Term (cic.prop)) (Q x_359 _))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_rect_CProp3. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $_x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $Q_$ une fonction des éléments $x_28$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $_x_29$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_28$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour tous les éléments $_H_refl$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$, pour tous les éléments $x_28$ de $cic.Term$ de $univs.Type2$ et de $A$, pour tous les éléments $x_29$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_28$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_28$ et $x_29$.\nassistant\n", "label": "postulate eq_rect_CProp3 : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_28 : cic.Term univs.Type2 A) -> (_x_29 : cic.Term cic.prop (matita_basics_logic.eq A _x x_28)) -> cic.Univ cic.prop) -> (_H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x))) -> (x_28 : cic.Term univs.Type2 A) -> (x_29 : cic.Term cic.prop (matita_basics_logic.eq A _x x_28)) -> cic.Term cic.prop (Q_ x_28 x_29)", "predict": "postulate Eq_rect_CProp3 : {A : Univ} -> {x : Term A} -> (Q : (x28 : Term A) -> A -> prop) -> (x29 : prop) -> (refl : eq A x refl) -> (x28 : Term A) -> (x29' : prop) -> (eq (Q x28 x refl) x29')."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFilter_Not. Pour tous les éléments $_A$ de $cic.Univ$ de $cic.prop$, pour tous les éléments $return_sort$ de $cic.Sort$, pour toutes les fonctions $return_type$ des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $_A$ à des éléments de $cic.Univ$ de $return_sort$, pour toutes les fonctions $return$ des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $_A$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $z$, pour tous les éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $_A$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.\nassistant\n", "label": "Axiom filter_Not : forall _A : cic.Univ cic.prop, forall return_sort : cic.Sort, forall return_type : ((z : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ return_sort), forall return : ((z : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Term return_sort (return_type z)), forall z : cic.Term cic.prop (matita_basics_logic.Not _A), cic.Term return_sort (return_type z) .", "predict": "Axiom Filter_Not : forall A : Univ, forall return_sort : Sort, (forall z : Term A, prop (Not z)) -> (forall z : Term A, prop (return return_sort z)) -> (forall z : Term A, prop (return_type z return_sort z)) -> (forall z : Term A, prop z) -> prop z."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSub_comp_l. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $R$ och $R1$ och $R2$ av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $A$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_relations.subR$ applicerat på $A$ och $R1$ och $R2$, håller $cic.Term$ för $cic.prop$ och $matita_basics_relations.subR$ applicerat på $A$ och $matita_basics_relations.Rcomp$ applicerat på $A$ och $R1$ och $R$ och $matita_basics_relations.Rcomp$ applicerat på $A$ och $R2$ och $R$.\nassistant\n", "label": "sub_comp_l : A : cic.Univ univs.Type0 -> R : cic.Term univs.Type0 (matita_basics_relations.relation A) -> R1 : cic.Term univs.Type0 (matita_basics_relations.relation A) -> R2 : cic.Term univs.Type0 (matita_basics_relations.relation A) -> __ : cic.Term cic.prop (matita_basics_relations.subR A R1 R2) -> cic.Term cic.prop (matita_basics_relations.subR A (matita_basics_relations.Rcomp A R1 R) (matita_basics_relations.Rcomp A R2 R)) .", "predict": "Output: \nAxiom sub_comp_l : forall (A : univs.Type0) (R R1 R2 : cic.Term), (matita_basics_relations.relation A) -> (matita_basics_relations.subR A R1 R2) -> (cic.Term A cic.prop) -> (matita_basics_relations.Rcomp A R1 R) -> (matita_basics_relations.Rcomp A R2 R) -> (matita_basics_relations.Rcomp A matita_basics_relations.Rcomp)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nPad_bigop1. För alla element $k$ och $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla funktioner $p$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, för alla element $B$ av $cic.Univ$ av $univs.Type0$, för alla element $nil$ av $cic.Term$ av $univs.Type0$ och $B$, för alla funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $B$, för alla funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $k$, för alla funktioner $__1$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $i$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $k$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $p$ applicerat på $i$ och $matita_basics_bool.false$, håller $cic.Term$ för $cic.prop$ och $", "label": "axiom pad_bigop1 (k n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (B : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 B) (op : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) (__ : cic.Term cic.prop (matita_arithmetics_nat.le n k)) (__1 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le n i)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt i k)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p i) matita_basics_bool.false)) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop n (λ i => p i) B nil op (λ i => f i)) (matita_arithmetics_bigops.bigop k (λ i => p i) B nil op (λ i => f i)))", "predict": "matita_basics_bool.bool$ och $p$ applicerat på $i$ och $matita_basics_bool.true$ och $f$ applicerat på $i$ och $k$ och $op$ applicerat på $i$ och $k$ och $f$ applicerat på $i$ och $k$ och $p$ applicerat på $i$ och $k$ och $f$ applicerat på $i$ och $k$ och $op$ applicerat på $i$ och $k$ och $f$ applicerat på $i$ och $k$ och $p$ applicerat på $i$ och $k$ och $f$ applicerat på $i$ och $k$ och $op$ applicerat på $i$ och $k$ och $f$ applicerat på $i$ och $k$ och $p$ applicerat på $i$ och $k$ och $f$ applicerat på $i$ och $k$ och $op$ applicerat på $i$ och $k$ och $f$ applicerat på $i$ och $k$ och $p$ applicerat på $i$ och $k$ och $f$ applicerat på $i$ och $k$ och $op$ applicerat på $i$ och $k$ och $f$ applicerat på $i$ och $k$ och $p$ applicerat på $i$ och $k$ och $f$ applicerat på $i$ och $k$ och $op$ applicerat på $i$ och $k$ och $f$ applicerat på $i$ och $k$ och $p$ applicerat på $i$ och $k$ och $f$ applicerat på $i$ och $k$ och $op$ applicerat på $i$ och $k$ och $f$ applicerat på $i$ och $k$ och $p$ applicerat på $i$ och $k$ och $f$ applicerat på $i$ och $k$ och $op$ applicerat på $i$ och $k$ och $f$ applicerat på $i$ och $k$ och $p$ applicerat på $i$ och $k$ och $f$ applic"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMinus_plus_m_m. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.plus$ applied to $n$ and $m$ and $m$.\nassistant\n", "label": "minus_plus_m_m : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus n m) m)) .", "predict": "Output: Axiom minus_plus_m_m : forall (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat), cic.prop (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus n m) m))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNot_rect_Type2_body. Låt $_A$ vara ett element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_91$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type2$. Låt $_H_nmk$ vara en funktion från funktioner $x_92$ från element $__$ av $cic.Term$ av $cic.prop$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_basics_logic.nmk$ applicerat på $_A$ och $x_92$. Låt $x_91$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$. Då håller $cic.Term$ för $univs.Type2$ och $Q_$ applicerat på $x_91$.\nassistant\n", "label": "axiom Not_rect_Type2_body (_A : cic.Univ cic.prop) (Q_ : (_x_91 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ univs.Type2) (_H_nmk : (x_92 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term univs.Type2 (Q_ (matita_basics_logic.nmk _A x_92))) (x_91 : cic.Term cic.prop (matita_basics_logic.Not _A)) : cic.Term univs.Type2 (Q_ x_91)", "predict": "Output: \nAxiom prop70 : odd 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExists_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $_P$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$, för alla element $_l$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$, håller $cic.Univ$ för $cic.prop$.\nassistant\n", "label": "postulate Exists_body : (A : cic.Univ univs.Type0) -> (_P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (_l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> cic.Univ cic.prop", "predict": "postulate exists_body : {univs : Universe} -> (A : univs.Type0) -> (P : (x : univs.Type0) -> A -> Universe) -> (l : univs.Type0) -> (L : list A) -> Universe."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nF_max_true. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $i$ som $matita_basics_logic.And$ applicerat på $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $i$ och $matita_basics_bool.true$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $matita_arithmetics_minimization.max$ applicerat på $n$ och $f$ och $matita_basics_bool.true$.\nassistant\n", "label": "postulate f_max_true : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.And (matita_arithmetics_nat.lt i n) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.true)))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f (matita_arithmetics_minimization.max n f)) matita_basics_bool.true)", "predict": "postulate F_max_true : \n  (f : ∀ (i : cic.Term univs.Type0 (matita_arithmetics_nat.nat) → cic.Term univs.Type0 (matita_basics_bool.bool))) →\n  (n : cic.Term univs.Type0 (matita_arithmetics_nat.nat)) →\n  (∀ (P : cic.prop → ex) → (λ (i : matita_arithmetics_nat.nat) → matita_basics_logic.And (matita_arithmetics_nat.lt i n) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool (f i)) matita_basics_bool.true)) →\n  (cic.Term univs.Type0 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool (f (matita_arithmetics_minimization.max n f matita_basics_bool.true))) (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool true))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1068. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $permf$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_permutation.permut$ applied to $f$ and $n$. Let $i$ and $j$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $lein$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $i$ and $n$. Let $lejn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $j$ and $n$. Then for all elements $a$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $matita_arithmetics_nat.le$ applied to $a$ and $n$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $a$ and $i$, for all elements $lean$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $a$ and $n$, for all elements $fa$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $a$ and $i$, for all elements $b$ of $cic.Term$ of $univs.Type0$ and $matita_ar", "label": "Axiom let_clause_1068 : forall f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall permf : cic.Term cic.prop (matita_arithmetics_permutation.permut f n), forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall j : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall lein : cic.Term cic.prop (matita_arithmetics_nat.le i n), forall lejn : cic.Term cic.prop (matita_arithmetics_nat.le j n), forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le a n) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i)), forall lean : cic.Term cic.prop (matita_arithmetics_nat.le a n), forall fa : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i), forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme0 : cic.Term cic.prop (matita_basics_logic.And (matita_arith", "predict": "ithmetics_nat.nat$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $matita_arithmetics_nat.le$ applied to $b$ and $n$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $b$ and $j$, for all elements $lebn$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $b$ and $n$, for all elements $fb$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $f$ applied to $b$ and $j$, for all elements $p$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $permf$ applied to $a$ and $b$ and $i$ and $j$ and $p$, we have that $f$ applied to $a$ and $i$ is equal to $f$ applied to $b$ and $j$.\n\nOutput: \nAxiom let_clause_1068 : \n  forall (f : cic.Term (univs.Type0) (matita_arithmetics_nat.nat) -> cic.Term (univs.Type0) (matita_arithmetics_nat.nat)), \n  (n : cic.Term (univs.Type0) (matita_arithmetics_nat.nat)), \n  (permf : cic.prop (matita_arithmetics_permutation.permut (f n))), \n  (i : cic.Term (univs.Type0) (matita_arithmetics_nat.nat)), \n  (j : cic.Term (univs.Type0) (matita_arithmetics_nat.nat)), \n  (lein : cic.prop (matita_arithmetics_nat.le i"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_ord_rem. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.prime$ applied to $n$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$. Then for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $n$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_ord.ord_rem$ applied to $m$ and $n$ and $m$.\nassistant\n", "label": "Axiom lt_ord_rem : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_primes.prime n), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), forall __2 : cic.Term cic.prop (matita_arithmetics_primes.divides n m), cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_ord.ord_rem m n) m) .", "predict": "Lt_ord_rem : forall (n m : cic.Term univs.Type0), (matita_arithmetics_nat.nat n) -> (matita_arithmetics_primes.prime n) -> (forall (m1 : cic.Term univs.Type0), (matita_arithmetics_nat.nat m) -> (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> (forall (p : cic.Term univs.Type0), (matita_arithmetics_primes.prime p) -> (matita_arithmetics_primes.divides p n) -> (cic.Term univs.Type0) -> (cic.prop univs.Type0) -> (matita_arithmetics_ord.ord_rem m n) -> (matita_arithmetics_nat.lt m n) -> (matita_arithmetics_nat.lt n m)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_rect_CProp0. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_913$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_ACop$ une fonction des éléments $aop$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ et des fonctions $_comm$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $_nil$ et $aop$ et $a$ et $b$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $_nil$ et $aop$ et $b$ et $a$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_ACop$ appliqué à $A$ et $_nil$ et $aop$ et $_comm$. Soit $x_913$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_913$.\nassistant\n", "label": "postulate ACop_rect_CProp0 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_913 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (x_913 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term cic.prop (Q_ x_913)", "predict": "postulate ACop_rect_CProp0 : \n  ∀ (A : univ) (H : A) -> \n  (A -> univ -> prop) -> \n  (A -> nil -> (x : univ) -> eq (lift univs.Type0 univs.Type2 A (op A nil (aop x nil) a b) (op A nil (aop x b) a b a)) -> prop) -> \n  (x : term) -> \n  (ACop A nil) -> \n  ((a : term) -> (comm : (a' : term) -> (b : term) -> eq (bigop a' b) (bigop b a')) -> \n   (bigop (mk_ACop A nil aop comm) (bigop x (bigop nil x)))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDpi1. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $univs.Type0$, for all elements $_xxx$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $f$, $cic.Term$ holds for $univs.Type0$ and $A$.\nassistant\n", "label": "Axiom dpi1 : forall A : cic.Univ univs.Type0, forall f : ((__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0), forall _xxx : cic.Term univs.Type0 (matita_basics_types.DPair A f), cic.Term univs.Type0 A .", "predict": "Dpi1. Parameter A : univs.Type0. Parameter f : (cic.Term -> A -> univs.Type0). Parameter _xxx : cic.Term. Parameter DPair : A * f _xxx. Theorem : cic.Term univs.Type0 A."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nF3_ind. Soient $A1$ et $A2$ et $A3$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A2$ et des éléments $__2$ de $cic.Term$ de $univs.Type0$ et de $A3$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $P$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation3$ appliqué à $A1$ et $A2$ et $A3$. Soit $__$ une fonction des éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $__$ des éléments $a1$ de $cic.Term$ de $univs.Type0$ et de $A1$ et des éléments $a2$ de $cic.Term$ de $univs.Type0$ et de $A2$ et des éléments $a3$ de $cic.Term$ de $univs.Type0$ et de $A3$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $f$ appliqué à $a1$ et $a2$ et $a3$ et $n$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $a1$ et $a2$ et $a3$ et des éléments $a1$ de $cic.Term$ de $univs.Type0$ et de $A1$ et des éléments $a2$ de $cic.Term$ de $univs.Type0$ et de $A2$ et des éléments $a3$ de $cic.Term$ de $univs.Type0$ et de $A3$ et des éléments", "label": "axiom f3_ind (A1 A2 A3 : cic.Univ univs.Type0) (f : (__ : cic.Term univs.Type0 A1) -> (__1 : cic.Term univs.Type0 A2) -> (__2 : cic.Term univs.Type0 A3) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) (P : cic.Term univs.Type0 (matita_basics_relations.relation3 A1 A2 A3)) (__ : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : (a1 : cic.Term univs.Type0 A1) -> (a2 : cic.Term univs.Type0 A2) -> (a3 : cic.Term univs.Type0 A3) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (f a1 a2 a3) n)) -> cic.Term cic.prop (P a1 a2 a3)) -> (a1 : cic.Term univs.Type0 A1) -> (a2 : cic.Term univs.Type0 A2) -> (a3 : cic.Term univs.Type0 A3) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a1 a2 a3) n)) -> cic.Term cic.prop (P a1 a2 a3)) (a1 : cic.Term univs.Type0 A1) (a2 : cic.Term univs.Type0 A2) (a3 : cic.Term univs.Type0 A3) : cic.Term cic.prop (P a1 a2 a3)", "predict": " $a1$ de $cic.Term$ de $univs.Type0$ et de $A1$ et des éléments $a2$ de $cic.Term$ de $univs.Type0$ et de $A2$ et des éléments $a3$ de $cic.Term$ de $univs.Type0$ et de $A3$ et des éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $P$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation3$ appliqué à $A1$ et $A2$ et $A3$ et des éléments $a1$ de $cic.Term$ de $univs.Type0$ et de $A1$ et des éléments $a2$ de $cic.Term$ de $univs.Type0$ et de $A2$ et des éléments $a3$ de $cic.Term$ de $univs.Type0$ et de $A3$ et des éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $P$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation3$ appliqué à $A1$ et $A2$ et $A3$ et des éléments $a1$ de $cic.Term$ de $univs.Type0$ et de $A1$ et des éléments $a2$ de $cic.Term$ de $univs.Type0$ et de $A2$ et des éléments $a3$ de $cic.Term$ de $univs.Type0$ et de $A3$ et des éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $f$ appliqué à $a1$ et $a2$ et $a3$ et $n$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $a"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_list. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $return_sort$ vara ett element av $cic.Sort$. Låt $return_type$ vara en funktion från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$ till element av $cic.Univ$ av $return_sort$. Låt $case_nil$ vara ett element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $matita_basics_lists_list.nil$ applicerat på $_A$. Låt $case_cons$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $_A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $matita_basics_lists_list.cons$ applicerat på $_A$ och $__$ och $__1$. Låt $z$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$. Då håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.\nassistant\n", "label": "postulate match_list : (_A : cic.Univ univs.Type0) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ return_sort) -> (case_nil : cic.Term return_sort (return_type (matita_basics_lists_list.nil _A))) -> (case_cons : (__ : cic.Term univs.Type0 _A) -> (__1 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term return_sort (return_type (matita_basics_lists_list.cons _A __ __1))) -> (z : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term return_sort (return_type z)", "predict": "postulate Match_list : \n  {A : univs.Type0} \n  (return_sort : cic.Sort) \n  (return_type : (z : cic.Term univs.Type0) (lst : list A) → univs.Type0) \n  (case_nil : return_sort (return_type A matita_basics_lists_list.nil)) \n  (case_cons : (t : univs.Type0) (a : A) (lst : list A) → \n    return_sort (return_type a (matita_basics_lists_list.cons a t lst))) \n  → (z : cic.Term univs.Type0) (lst : list A) → return_sort (return_type z lst)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBigop_Strue. Låt $k$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $p$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Låt $op$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $B$. Då för alla funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $p$ applicerat på $k$ och $matita_basics_bool.true$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $matita_arithmetics_bigops.bigop$ applicerat på $matita_arithmetics_nat.S$ applicerat på $k$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $op$ applicerat på $f$ applicerat på $k$ och $matita_arithmetics_bigops.bigop$ applicerat på $k$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $B$ och $nil$ och $op$ och funktionen som", "label": "axiom bigop_Strue (k : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (B : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 B) (op : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p k) matita_basics_bool.true)) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S k) (λ i => p i) B nil op (λ i => f i)) (op (f k) (matita_arithmetics_bigops.bigop k (λ i => p i) B nil op (λ i => f i))))", "predict": " avbildar $i$ som $f$ applicerat på $i$ och $op$ applicerat på $f$ applicerat på $k$ och $matita_arithmetics_bigops.bigop$ applicerat på $k$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $op$ applicerat på $f$ applicerat på $k$ och $matita_arithmetics_bigops.bigop$ applicerat på $k$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $op$ applicerat på $f$ applicerat på $k$ och $matita_arithmetics_bigops.bigop$ applicerat på $k$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $op$ applicerat på $f$ applicerat på $k$ och $matita_arithmetics_bigops.bigop$ applicerat på $k$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $op$ applicerat på $f$ applicerat på $k$ och $matita_arithmetics_bigops.bigop$ applicerat på $k$ och funktionen som avbildar $i$ som $p$ applicerat på $i$ och $B$ och $nil$ och $op$ och funktionen som avbildar $i$ som $f$ applicerat på $i$ och $op$ applicerat på $f$ applicerat på $k$ och $matita_arithmetics_bigops.bigop$ applicerat på $k$ och funktionen"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLstar_ind_r_aux. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $R$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $B$. Let $b1$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Then for all elements $P$ of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation2$ applied to $matita_arithmetics_nat.nat$ and $B$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.O$ and $b1$, for all functions $__1$ from elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $b2$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $l$ and $b1$ and $b$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $R$ applied to $b$ and $b2$ and elements $__3$ of $cic.Term$ of $cic.prop$ and $P$ applied to $l$ and $b$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.plus$ applied to $l$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $b2$, for all elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $b$ and $b2$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $l$ and $b", "label": "lstar_ind_r_aux : B : cic.Univ univs.Type0 -> R : cic.Term univs.Type0 (matita_basics_relations.relation B) -> b1 : cic.Term univs.Type0 B -> P : cic.Term univs.Type0 (matita_basics_relations.relation2 matita_arithmetics_nat.nat B) -> __ : cic.Term cic.prop (P matita_arithmetics_nat.O b1) -> __1 : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b : cic.Term univs.Type0 B -> b2 : cic.Term univs.Type0 B -> __1 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b) -> __2 : cic.Term cic.prop (R b b2) -> __3 : cic.Term cic.prop (P l b) -> cic.Term cic.prop (P (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b2)) -> l : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b : cic.Term univs.Type0 B -> b2 : cic.Term univs.Type0 B -> __2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b b2) -> __3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) b b1) -> cic.Term cic.prop (P l b2) .", "predict": "$ and $b2$, for all elements $P$ of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation2$ applied to $matita_arithmetics_nat.nat$ and $B$, for all elements $b1$ of $cic.Term$ of $univs.Type0$ and $B$, there exists an element $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and an element $b$ of $cic.Term$ of $univs.Type0$ and $B$ and an element $b2$ of $cic.Term$ of $univs.Type0$ and $B$ such that for all elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $b$ and $b2$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $P$ of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation2$ applied to $matita_arithmetics_nat.nat$ and $B$, for all elements $b1$ of $cic.Term$ of $univs.Type0$ and $B$, there exists an element $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and an element $b$ of $cic.Term$ of $univs.Type0$ and $B$ and an element $b2$ of $cic.Term$ of $univs.Type0$ and $B$ such that for all elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $b$ and $b2$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $P$ of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation2$ applied to $matita_arithmetics_nat.nat$ and $B$, for all elements $b1$ of $cic.Term$ of $univs.Type0$ and $B$, there exists an element"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDiv_mod_spec_rect_Type5_body. For all elements $_n$ and $_m$ and $_q$ and $_r$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all functions $Q_$ from elements $_x_817$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$ to elements of $cic.Univ$ of $univs.Type5$, for all functions $_H_div_mod_spec_intro$ from elements $x_819$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $_r$ and $_m$ and elements $x_818$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $_n$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $_q$ and $_m$ and $_r$ to elements of $cic.Term$ of $univs.Type5$ and $Q_$ applied to $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_819$ and $x_818$, for all elements $x_817$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$, $cic.Term$ holds for $univs.Type5$ and $Q_$ applied to $x_817$.\nassistant\n", "label": "Axiom div_mod_spec_rect_Type5_body : forall _n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _q : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _r : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall Q_ : ((_x_817 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ univs.Type5), forall _H_div_mod_spec_intro : ((x_819 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_818 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term univs.Type5 (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_819 x_818))), forall x_817 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r), cic.Term univs.Type5 (Q_ x_817) .", "predict": "Axiom Div_mod_spec_rect_Type5_body : forall n m q r : Term univs.Type0, \n                                    (nat) -> (forall Q : Term (Prop) (div_mod_spec n m q r), \n                                    (forall x_817 : Term univs.Type5, \n                                    (nat.lt r m) -> (nat.eq (lift univs.Type0 univs.Type2 (nat) n) (nat.plus (nat.times q m) r)) -> \n                                    Prop x_817 (div_mod_spec_intro n m q r x_817))) -> \n                                    (forall x_817 : Term (Prop) (div_mod_spec n m q r), \n                                    Prop x_817) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $_xxx$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $nil$. Then $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $nil$.\nassistant\n", "label": "postulate aop_body : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (_xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A nil)) -> cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A nil)", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_rect_Type4. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Then for all functions $Q_$ from elements $_x_945$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type4$, for all functions $_H_mk_Dop$ from elements $sum$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and functions $prod$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $matita_arithmetics_big", "label": "postulate Dop_rect_Type4 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_945 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ univs.Type4) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_945 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term univs.Type4 (Q_ x_945)", "predict": "ops.plus$ applied to $b$ and $c$ and $prod$ applied to $a$ and $b$ and $c$ and elements $d$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $d$ and $matita_arithmetics_bigops.plus$ applied to $b$ and $c$ and $prod$ applied to $d$ and $b$ and $c$ and $prod$ applied to $a$ and $b$ and $c$ and $prod$ applied to $d$ and $b$ and $c$ and $prod$ applied to $a$ and $c$ and $prod$ applied to $d$ and $c$ and $prod$ applied to $a$ and $b$ and $d$ and $prod$ applied to $d$ and $b$ and $c$ and $prod$ applied to $a$ and $c$ and $d$ and $prod$ applied to $a$ and $b$ and $d$ and $prod$ applied to $d$ and $b$ and $c$ and $prod$ applied to $a$ and $c$ and $d$ and $prod$ applied to $a$ and $b$ and $c$ and $prod$ applied to $d$ and $b$ and $c$ and $prod$ applied to $a$ and $c$ and $d$ and $prod$ applied to $a$ and $b$ and $d$ and $prod$ applied to $d$ and $b$ and $c$ and $prod$ applied to $a$ and $c$ and $d$ and $prod$ applied to $a$ and $b$ and $c$ and $prod$ applied to $d$ and $b$ and $c$ and $prod$ applied to $a$ and $c$ and $d$ and $prod$ applied to $a$ and $b$ and $d$ and $prod$ applied to $d$ and $b$ and $c$ and $prod$ applied to $a$ and $c$ and"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1078. Let $a$ and $b$ and $q$ and $r$ and $q1$ and $r1$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $a$ and $b$ and $q$ and $r$. Let $ltrb$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $r$ and $b$. Let $spec$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $a$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $q$ and $b$ and $r$. Let $_clearme0$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $a$ and $b$ and $q1$ and $r1$. Let $ltr1b$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $r1$ and $b$. Let $spec1$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $a$ and $matita_arithmetics_nat.plus$ applied to", "label": "postulate let_clause_1078 : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (r1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q r)) -> (ltrb : cic.Term cic.prop (matita_arithmetics_nat.lt r b)) -> (spec : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q b) r))) -> (_clearme0 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q1 r1)) -> (ltr1b : cic.Term cic.prop (matita_arithmetics_nat.lt r1 b)) -> (spec1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q1 b) r1))) -> (leqq1 : cic.Term cic.prop (matita_arithmetics_nat.le q q1)) -> (ltqq1 : cic.Term cic.prop (matita_arithmetics_nat.lt q q1)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a (matita_arithmetics_nat.plus r (matita_arithmetics_nat.times b q)))", "predict": " $matita_arithmetics_nat.times$ applied to $q1$ and $b$ and $r1$. Let $spec1'1$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $a$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $q1$ and $b$ and $r1$. Let $spec1'2$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $a$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $q1$ and $b$ and $r1$. Let $spec1'3$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $a$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $q1$ and $b$ and $r1$. Let $spec1'4$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $a$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $q1$ and $b$ and $r1$. Let $spec1'5$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.n"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSplit_eq. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $matita_basics_lists_list.length$ appliqué à $A$ et $l$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $A$ et $l$ et $matita_basics_lists_list.append$ appliqué à $A$ et $matita_basics_types.fst$ appliqué à $matita_basics_lists_list.list$ appliqué à $A$ et $matita_basics_lists_list.list$ appliqué à $A$ et $matita_basics_lists_list.split$ appliqué à $A$ et $l$ et $n$ et $matita_basics_types.snd$ appliqué à $matita_basics_lists_list.list$ appliqué à $A$ et $matita_basics_lists_list.list$ appliqué à $A$ et $matita_basics_lists_list.split$ appliqué à $A$ et $l$ et $n$.\nassistant\n", "label": "Axiom split_eq : forall A : cic.Univ univs.Type0, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall l : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall __ : cic.Term cic.prop (matita_arithmetics_nat.le n (matita_basics_lists_list.length A l)), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l (matita_basics_lists_list.append A (matita_basics_types.fst (matita_basics_lists_list.list A) (matita_basics_lists_list.list A) (matita_basics_lists_list.split A l n)) (matita_basics_types.snd (matita_basics_lists_list.list A) (matita_basics_lists_list.list A) (matita_basics_lists_list.split A l n)))) .", "predict": "Axiom split_eq : forall (A : Univ) (n : Term nat) (l : list A) (x : Prop (length A l) (nat_le n (list_length A l))) (l1 : list A) (l2 : list A) (split : list A) (l3 : list A) (n1 : nat) (l4 : list A) (split1 : list A) (n2 : nat), lift Univ Univ2 (list A) (list A) (list A) (nat) (nat_le n1 (list_length A l3)) (list A) (list A) (list A) (nat) (nat_le n2 (list_length A l4)) (eq (lift Univ Univ2 (list A) (list A) (list A) (nat) (nat_le n1 (list_length A l3))) (lift Univ Univ2 (list A) (list A) (list A) (nat) (nat_le n2 (list_length A l4))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1545. Let $m$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $H$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $m$ and $n$ and $matita_arithmetics_nat.O$. Let $_clearme$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $matita_arithmetics_nat.O$ and $n$. Let $q1$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $H1$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.O$ and $q1$. Let $_clearme0$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $matita_arithmetics_nat.O$ and $m$. Let $q2$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $H2$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $m$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.O$ and $q2$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type", "label": "let_clause_1545 : m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd m n) matita_arithmetics_nat.O) -> _clearme : cic.Term cic.prop (matita_arithmetics_primes.divides matita_arithmetics_nat.O n) -> q1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> H1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.times matita_arithmetics_nat.O q1)) -> _clearme0 : cic.Term cic.prop (matita_arithmetics_primes.divides matita_arithmetics_nat.O m) -> q2 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> H2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times matita_arithmetics_nat.O q2)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m matita_arithmetics_nat.O) .", "predict": "0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.gcd$ applied to $m$ and $n$ and $matita_arithmetics_nat.O$. \nOutput: let_clause_1545 : (m : univs.Type0 -> matita_arithmetics_nat.nat) -> (n : univs.Type0 -> matita_arithmetics_nat.nat) -> (H : cic.Term -> cic.prop -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_gcd.gcd m n) matita_arithmetics_nat.O)) -> (let $_clearme$ : (cic.Term -> cic.prop -> matita_arithmetics_primes.divides (matita_arithmetics_nat.O) n) in (q1 : univs.Type0 -> matita_arithmetics_nat.nat) -> (H1 : cic.Term -> cic.prop -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n (matita_arithmetics_nat.times matita_arithmetics_nat.O q1))) -> (let $_clearme0$ : (cic.Term -> cic.prop -> matita_arithmetics_primes.divides (matita_arithmetics_nat.O) m) in (q2 : univs.Type0 -> matita_arithmetics_nat.nat) -> (H2 : cic.Term -> cic.prop -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat m (matita_arithmetics_nat.times matita_arithmetics_nat.O q2))) -> cic.Term (cic.prop -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_nat.gcd m n) matita_arithmetics_nat.O))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nUnique_filter. For all elements $S$ of $cic.Univ$ of $univs.Type0$, for all elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $S$, for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $S$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.unique$ applied to $S$ and $l$, $cic.Term$ holds for $cic.prop$ and $matita_basics_lists_list.unique$ applied to $S$ and $matita_basics_lists_list.filter$ applied to $S$ and $f$ and $l$.\nassistant\n", "label": "axiom unique_filter (S : cic.Univ univs.Type0) (l : cic.Term univs.Type0 (matita_basics_lists_list.list S)) (f : (__ : cic.Term univs.Type0 S) -> cic.Term univs.Type0 matita_basics_bool.bool) (__ : cic.Term cic.prop (matita_basics_lists_list.unique S l)) : cic.Term cic.prop (matita_basics_lists_list.unique S (matita_basics_lists_list.filter S f l))", "predict": "Output: \n```\naxiom unique_filter : \n    (forall S : univs.univ, \n    (forall l : matita_basics_lists_list.list S, \n    (forall (__) : univs.univ, \n    (forall (f : (__) -> (__) -> univs.univ), \n    (forall __ : univs.univ, \n    (forall (l' : matita_basics_lists_list.filter S (fun (_, _) => f (_, _) l) l), \n    (cic.term cic.prop) (matita_basics_lists_list.unique S l')))))))).\n```"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_m2. Pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, pour tous les éléments $n$ et $i$ et $b$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $univs.Type0$ et $matita_arithmetics_nat.nat$.\nassistant\n", "label": "Axiom let_m2 : forall f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term univs.Type0 matita_arithmetics_nat.nat .", "predict": "Axiom let_m2 : forall (f : cic.Term univs.Type0 (matita_arithmetics_nat.nat) -> cic.Term univs.Type0 (matita_arithmetics_nat.nat)), forall (n i b : cic.Term univs.Type0 (matita_arithmetics_nat.nat)), (cic.Term univs.Type0 (matita_arithmetics_nat.nat)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nList_rect_CProp3. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_761$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $_H_nil$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_lists_list.nil$ appliqué à $_A$, pour toutes les fonctions $_H_cons$ des éléments $x_763$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $x_762$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ et des éléments $_x_765$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $x_762$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_lists_list.cons$ appliqué à $_A$ et $x_763$ et $x_762$, pour tous les éléments $x_761$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_761$.\nassistant\n", "label": "postulate list_rect_CProp3 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_761 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ cic.prop) -> (_H_nil : cic.Term cic.prop (Q_ (matita_basics_lists_list.nil _A))) -> (_H_cons : (x_763 : cic.Term univs.Type0 _A) -> (x_762 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_765 : cic.Term cic.prop (Q_ x_762)) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.cons _A x_763 x_762))) -> (x_761 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term cic.prop (Q_ x_761)", "predict": "postulate List_rect_CProp3 : {A : Univ} -> (Q : (x : Term) -> (l : list (A -> prop)) -> (H_nil : Term -> prop) -> (H_cons : (x : Term) -> (A : Term) -> (l : list (A -> prop)) -> (H : prop) -> (Q (l cons x A H))) -> (x : Term) -> (l : list (A -> prop)) -> prop ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDistributive2. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$. Alors pour toutes les fonctions $_g$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$, $cic.Univ$ tient pour $cic.prop$.\nassistant\n", "label": "axiom distributive2 (A B : cic.Univ univs.Type0) (_f : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) (_g : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) : cic.Univ cic.prop", "predict": "Output: \naxiom distributive2 : forall (A B : univs.type0) (f : (cic.term) -> A -> (cic.term) -> B -> (cic.term)) (g : (cic.term) -> B -> (cic.term) -> B -> (cic.term)), (cic.univ) -> cic.prop."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFilter_And. Låt $_A$ och $_B$ vara element av $cic.Univ$ av $cic.prop$. Låt $return_sort$ vara ett element av $cic.Sort$. Då för alla funktioner $return_type$ från element $z$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $return_sort$, för alla funktioner $return$ från element $z$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $z$, för alla element $z$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.\nassistant\n", "label": "axiom filter_And (_A _B : cic.Univ cic.prop) (return_sort : cic.Sort) (return_type : (z : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ return_sort) (return : (z : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Term return_sort (return_type z)) (z : cic.Term cic.prop (matita_basics_logic.And _A _B)) : cic.Term return_sort (return_type z)", "predict": "Filter_And: \nAxiom Filter_And : forall (A B : cic.Univ) (return_sort : cic.Sort), (cic.prop -> cic.prop -> cic.Univ return_sort) -> (cic.prop -> cic.prop -> matita_basics_logic.And A B -> cic.Term return_sort) -> (cic.prop -> cic.prop -> matita_basics_logic.And A B -> cic.Term return_sort -> cic.Term return_sort) -> cic.Term return_sort (matita_basics_logic.And A B)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1033. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $len$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $p$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $lep$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_sqrt.sqrt$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $p$, för alla element $ltp$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $p$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $Hc$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat", "label": "postulate let_clause_1033 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (len : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))) n)) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (lep : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_sqrt.sqrt (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) p)) -> (ltp : cic.Term cic.prop (matita_arithmetics_nat.lt p (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)))) -> (Hc : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_nat.leb (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_ar", "predict": " på $n$ och $p$ och $matita_arithmetics_nat.eq$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $p$, har vi att $Hc$ är en valid hypotes för en bevisfunktion.\n\nOutput: Let_clause_1033: \n  import univs; \n  import matita_arithmetics_nat; \n  import matita_arithmetics_exp; \n  import matita_arithmetics_sqrt; \n  import matita_arithmetics_le; \n  import matita_arithmetics_lt; \n  import matita_basics_logic; \n  import cic;\n\n  let n: Term univs.Type0 matita_arithmetics_nat.nat = ... \n  let len: Term cic.prop (le matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O) n))))))) = ... \n\n  let p: Term univs.Type0 matita_arithmetics_nat.nat = ...\n\n  let l: forall (lep: Term cic.prop (le (matita_arithmetics_sqrt.sqrt (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O) n))))))))) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O) n))))))))) p) (Hc: Term cic.prop (eq n p) (eq (matita_arithmetics_nat.S (matita_arithmetics"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNot_eq_O_S. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.S$ applicerat på $n$.\nassistant\n", "label": "Axiom not_eq_O_S : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O (matita_arithmetics_nat.S n))) .", "predict": "Axiom Not_eq_O_S : \n  forall (n : Term univs.Type0 matita_arithmetics_nat.nat), \n  not (eq (lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n) matita_arithmetics_nat.O matita_arithmetics_nat.S n)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_SO_smallest_factor. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_primes.smallest_factor$ appliqué à $n$.\nassistant\n", "label": "axiom lt_SO_smallest_factor (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_primes.smallest_factor n))", "predict": "Axiom Lt_SO_smallest_factor : forall (n : matita_arithmetics_nat.nat), \n  forall (P : cic.Term cic.prop), \n  forall (L : cic.Term (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)), \n  P (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_primes.smallest_factor n))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_inv_rect_CProp1. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $x1$, pour toutes les fonctions $P$ des éléments $_z1092$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $x1$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $_z1093$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.option$ appliqué à $x1$ et $Hterm$ et $matita_basics_types.None$ appliqué à $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.None$ appliqué à $x1$, pour toutes les fonctions $_H2$ des éléments $x_631$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_z1093$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.option$ appliqué à $x1$ et $Hterm$ et $matita_basics_types.Some$ appliqué à $x1$ et $x_631$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.Some$ appliqué à $x1$ et $x_631$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "axiom option_inv_rect_CProp1 (x1 : cic.Univ univs.Type0) (Hterm : cic.Term univs.Type0 (matita_basics_types.option x1)) (P : (_z1092 : cic.Term univs.Type0 (matita_basics_types.option x1)) -> cic.Univ cic.prop) (_H1 : (_z1093 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.None x1))) -> cic.Term cic.prop (P (matita_basics_types.None x1))) (_H2 : (x_631 : cic.Term univs.Type0 x1) -> (_z1093 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.Some x1 x_631))) -> cic.Term cic.prop (P (matita_basics_types.Some x1 x_631))) : cic.Term cic.prop (P Hterm)", "predict": "Output: \nOption_inv_rect_CProp1 : forall (x1 : Univ) (Hterm : Term) (P : (option (Term x1)) -> prop) (H1 : (Term x1) -> prop) (H2 : (Term x1) -> prop) -> (forall (z1092 : Term x1) (z1093 : prop), P (option Some x1) z1092 z1093) -> (forall (x_631 : Term x1), P (option Some x1) x_631 z1093) -> (forall (x_631 : Term x1), P (option Some x1) x_631 (eq (lift (univs.Type0) (univs.Type2)) z1093))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBi_RC_reflexive. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $R$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.bi_relation$ appliqué à $A$ et $B$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_relations.bi_reflexive$ appliqué à $A$ et $B$ et $matita_basics_relations.bi_RC$ appliqué à $A$ et $B$ et $R$.\nassistant\n", "label": "postulate bi_RC_reflexive : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (R : cic.Term univs.Type0 (matita_basics_relations.bi_relation A B)) -> cic.Term cic.prop (matita_basics_relations.bi_reflexive A B (matita_basics_relations.bi_RC A B R))", "predict": "postulate Bi_RC_reflexive : forall (A B : cic.Univ) (R : cic.Term (univs.Type0) (matita_basics_relations.bi_relation A B)) -> cic.Term (cic.prop (univs.Type0)) (matita_basics_relations.bi_reflexive A B R)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_exp1. För alla element $n$ och $m$ och $a$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $a$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $n$ och $a$ och $matita_arithmetics_exp.exp$ applicerat på $m$ och $a$.\nassistant\n", "label": "le_exp1 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O a) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.le n m) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp n a) (matita_arithmetics_exp.exp m a)) .", "predict": "Axiom le_exp1 : forall (n m : cic.Term univs.Type0) (a : matita_arithmetics_nat.nat) (___ : cic.Term cic.prop) (___1 : matita_arithmetics_nat.lt matita_arithmetics_nat.O a) (___2 : cic.Term cic.prop) (___3 : matita_arithmetics_nat.le n m), le (exp n a) (exp m a)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_rect_CProp3. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type2$. Låt $_x$ vara ett element av $cic.Term$ av $univs.Type2$ och $A$. Låt $Q_$ vara en funktion från element $x_28$ av $cic.Term$ av $univs.Type2$ och $A$ och element $_x_29$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_28$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_refl$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $_x$ och $matita_basics_logic.refl$ applicerat på $A$ och $_x$. Låt $x_28$ vara ett element av $cic.Term$ av $univs.Type2$ och $A$. Låt $x_29$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_28$. Då håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_28$ och $x_29$.\nassistant\n", "label": "axiom eq_rect_CProp3 (A : cic.Univ univs.Type2) (_x : cic.Term univs.Type2 A) (Q_ : (x_28 : cic.Term univs.Type2 A) -> (_x_29 : cic.Term cic.prop (matita_basics_logic.eq A _x x_28)) -> cic.Univ cic.prop) (_H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x))) (x_28 : cic.Term univs.Type2 A) (x_29 : cic.Term cic.prop (matita_basics_logic.eq A _x x_28)) : cic.Term cic.prop (Q_ x_28 x_29)", "predict": "Axiom Eq_rect_CProp3 : forall (A : cic.Univ.univs.Type2) (_x : cic.Term.univs.Type2 A) (Q_ : (forall (x_28 : cic.Term.univs.Type2) (H : matita_basics_logic.eq.eq A _x x_28), cic.Univ.univ cic.prop) (x_28 A _x) (Q_ _x_29 _x)), (forall (x_28 : cic.Term.univs.Type2 A) (x_29 : cic.Term.cic.prop (matita_basics_logic.eq.eq A _x x_28)), Q_ x_28 x_29)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDistributive2. Let $A$ and $B$ be elements of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Let $_g$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Then $cic.Univ$ holds for $cic.prop$.\nassistant\n", "label": "distributive2 : A : cic.Univ univs.Type0 -> B : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 B -> cic.Term univs.Type0 B) -> _g : (__ : cic.Term univs.Type0 B -> __1 : cic.Term univs.Type0 B -> cic.Term univs.Type0 B) -> cic.Univ cic.prop .", "predict": "Output: \nlet Distributive2 : (A : univ.Univ) (B : univ.Univ) (f : term.Term univ.Type0 -> A -> term.Term univ.Type0 -> B -> term.Term univ.Type0) (g : term.Term univ.Type0 -> B -> term.Term univ.Type0 -> B -> term.Term univ.Type0) -> univ.Univ := fun (A : univ.Univ) (B : univ.Univ) (f : term.Term univ.Type0 -> A -> term.Term univ.Type0 -> B -> term.Term univ.Type0) (g : term.Term univ.Type0 -> B -> term.Term univ.Type0 -> B -> term.Term univ.Type0) => univ.Univ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAnd_inv_ind. Låt $x1$ och $x2$ vara element av $cic.Univ$ av $cic.prop$. Låt $Hterm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$. Då för alla funktioner $P$ från element $_z323$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $x_120$ av $cic.Term$ av $cic.prop$ och $x1$ och element $x_119$ av $cic.Term$ av $cic.prop$ och $x2$ och element $_z324$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_120$ och $x_119$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_120$ och $x_119$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "And_inv_ind : x1 : cic.Univ cic.prop -> x2 : cic.Univ cic.prop -> Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2) -> P : (_z323 : cic.Term cic.prop (matita_basics_logic.And x1 x2) -> cic.Univ cic.prop) -> _H1 : (x_120 : cic.Term cic.prop x1 -> x_119 : cic.Term cic.prop x2 -> _z324 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_120 x_119)) -> cic.Term cic.prop (P (matita_basics_logic.conj x1 x2 x_120 x_119))) -> cic.Term cic.prop (P Hterm) .", "predict": "Axiom And_inv_ind : ∀ (x1 x2 : cic.Univ) (Hterm : cic.Term cic.prop) (matita_basics_logic.And x1 x2) (P : ∀ (x : cic.Term cic.prop) (matita_basics_logic.And x1 x2) → cic.Univ cic.prop) (H1 : ∀ (x120 : cic.Term cic.prop) (x119 : cic.Term cic.prop) → matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2) Hterm (matita_basics_logic.conj x1 x2)) (matita_basics_logic.conj x1 x2 x120 x119)) → P Hterm."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOrd_rem_eq. För alla element $n$ och $p$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_ord.ord_rem$ applicerat på $n$ och $p$ och $matita_basics_types.snd$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_ord.p_ord$ applicerat på $n$ och $p$.\nassistant\n", "label": "postulate ord_rem_eq : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_ord.ord_rem n p) (matita_basics_types.snd matita_arithmetics_nat.nat matita_arithmetics_nat.nat (matita_arithmetics_ord.p_ord n p)))", "predict": "postulate ord_rem_eq : \n  forall (n p : cic.Term univs.Type0 matita_arithmetics_nat.nat), \n  (cic.Term cic.prop) (matita_basics_logic.eq) (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_ord.ord_rem n p) (matita_basics_types.snd matita_arithmetics_nat.nat matita_arithmetics_nat.nat matita_arithmetics_ord.p_ord n p)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBigop_diff. Låt $p$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Låt $op$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $B$ och $nil$. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $B$. Låt $i$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $p$ applicerat på $i$ och $matita_basics_bool.true$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $B$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $x$ som $p$ applicerat på $x$ och $B$ och $nil$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $B$ och $", "label": "axiom bigop_diff (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (B : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 B) (op : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil)) (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) (i n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i n)) (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p i) matita_basics_bool.true)) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop n (λ x => p x) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (λ x => f x)) (matita_arithmetics_bigops.aop__o__op B nil op (f i) (matita_arithmetics_bigops.bigop n (λ x => matita_basics_bool.andb (matita_basics_bool.notb (matita_arithmetics_nat.eqb i x)) (p x)) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (λ x => f x))))", "predict": "nil$ och $f$ applicerat på $i$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och $op$ och $f$ applicerat på $i$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och $op$ och $f$ applicerat på $i$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och $op$ och $f$ applicerat på $i$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och $op$ och $f$ applicerat på $i$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och $op$ och $f$ applicerat på $i$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och $op$ och $f$ applicerat på $i$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och $op$ och $f$ applicerat på $i$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och $op$ och $f$ applicerat på $i$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och $op$ och $f$ applicerat på $i$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och $op$ och $f$ applicerat på $i$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och $op$ och $f$ applicerat på $i$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och $op$ och $f$ applicerat på $i$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och $op$ och $f$ applicerat på $i$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och $op$ och $f$ applicer"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDivides_fact. Soient $n$ et $i$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $i$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $i$ et $n$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_primes.divides$ appliqué à $i$ et $matita_arithmetics_factorial.fact$ appliqué à $n$.\nassistant\n", "label": "Axiom divides_fact : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O i), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.le i n), cic.Term cic.prop (matita_arithmetics_primes.divides i (matita_arithmetics_factorial.fact n)) .", "predict": "Axiom divides_fact : forall (n i : matita_arithmetics_nat.nat), \n  (forall (__) : cic.Term univs.Type0, \n   __ = matita_arithmetics_nat.lt O i -> \n   forall (__1 : cic.Term univs.Type0), \n   __1 = matita_arithmetics_nat.le i n -> \n   cic.prop (matita_arithmetics_primes.divides i (matita_arithmetics_factorial.fact n)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBinomial_law. Let $a$ and $b$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_exp.exp$ applied to $matita_arithmetics_nat.plus$ applied to $a$ and $b$ and $n$ and $matita_arithmetics_bigops.bigop$ applied to $matita_arithmetics_nat.S$ applied to $n$ and the function that maps $k$ to $matita_basics_bool.true$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.plus$ and the function that maps $k$ to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_binomial.bc$ applied to $n$ and $k$ and $matita_arithmetics_exp.exp$ applied to $a$ and $matita_arithmetics_nat.minus$ applied to $n$ and $k$ and $matita_arithmetics_exp.exp$ applied to $b$ and $k$.\nassistant\n", "label": "Axiom binomial_law : forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_exp.exp (matita_arithmetics_nat.plus a b) n) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n) (fun k => matita_basics_bool.true) matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_nat.plus (fun k => matita_arithmetics_nat.times (matita_arithmetics_nat.times (matita_arithmetics_binomial.bc n k) (matita_arithmetics_exp.exp a (matita_arithmetics_nat.minus n k))) (matita_arithmetics_exp.exp b k)))) .", "predict": "Axiom Binomial_law : forall (a b : Term univs.Type0 matita_arithmetics_nat.nat) (n : matita_arithmetics_exp.exp matita_arithmetics_nat.plus a b n matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n) (fun k => true matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_nat.plus (fun k => matita_arithmetics_nat.times (matita_arithmetics_nat.times (matita_arithmetics_binomial.bc n k) (matita_arithmetics_exp.exp a (matita_arithmetics_nat.minus n k) (matita_arithmetics_exp.exp b k)))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDiv_mod_spec_rect_CProp3. Låt $_n$ och $_m$ och $_q$ och $_r$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Q_$ vara en funktion från element $_x_845$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_div_mod_spec_intro$ vara en funktion från element $x_847$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $_r$ och $_m$ och element $x_846$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $_n$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $_q$ och $_m$ och $_r$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ och $x_847$ och $x_846$. Låt $x_845$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$. Då håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_845$.\nassistant\n", "label": "postulate div_mod_spec_rect_CProp3 : (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_r : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Q_ : (_x_845 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ cic.prop) -> (_H_div_mod_spec_intro : (x_847 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_846 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term cic.prop (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_847 x_846))) -> (x_845 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Term cic.prop (Q_ x_845)", "predict": "postulate Div_mod_spec_rect_CProp3 : {n m q r : cic.Term univs.Type0} -> {Q : (x : cic.Term) -> matita_arithmetics_div_and_mod.div_mod_spec n m q r -> cic.Univ} -> {H_div_mod_spec_intro : (x : cic.Term) -> matita_arithmetics_nat.lt r m -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n) (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q m) r) -> Q (matita_arithmetics_div_and_mod.div_mod_spec_intro n m q r x (matita_arithmetics_nat.lt r m))) -> (x : cic.Term) -> matita_arithmetics_div_and_mod.div_mod_spec n m q r -> Q x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nCongruent_times. Låt $n$ och $m$ och $n1$ och $m1$ och $p$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $p$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_congruence.congruent$ applicerat på $n$ och $n1$ och $p$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_congruence.congruent$ applicerat på $m$ och $m1$ och $p$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_congruence.congruent$ applicerat på $matita_arithmetics_nat.times$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $n1$ och $m1$ och $p$.\nassistant\n", "label": "congruent_times : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p) -> __1 : cic.Term cic.prop (matita_arithmetics_congruence.congruent n n1 p) -> __2 : cic.Term cic.prop (matita_arithmetics_congruence.congruent m m1 p) -> cic.Term cic.prop (matita_arithmetics_congruence.congruent (matita_arithmetics_nat.times n m) (matita_arithmetics_nat.times n1 m1) p) .", "predict": "Output: Axiom Congruent_times : forall (n m n1 m1 p : cic.Term univs.Type0 matita_arithmetics_nat.nat) (___ : cic.Term cic.prop matita_arithmetics_nat.lt matita_arithmetics_nat.O p) (___1 : cic.Term cic.prop matita_arithmetics_congruence.congruent n n1 p) (___2 : cic.Term cic.prop matita_arithmetics_congruence.congruent m m1 p), cic.Term cic.prop matita_arithmetics_congruence.congruent (matita_arithmetics_nat.times n m) (matita_arithmetics_nat.times n1 m1) p."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_inv_rect_Type0. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $x2$ av $cic.Term$ av $univs.Type0$ och $x1$, för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1596$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type0$, för alla funktioner $_H1$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $matita_arithmetics_bigops.op$ applicerat på $x1$ och $x2$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $x1$ och $x2$ och $aop$ och $b$ och $a$ och element $_z1597$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_arithmetics_bigops.mk_ACop$ applicerat på $x1$ och $x2$ och $aop", "label": "Axiom ACop_inv_rect_Type0 : forall x1 : cic.Univ univs.Type0, forall x2 : cic.Term univs.Type0 x1, forall Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2), forall P : ((_z1596 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> cic.Univ univs.Type0), forall _H1 : ((aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (_comm : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (matita_arithmetics_bigops.op x1 x2 aop a b) (matita_arithmetics_bigops.op x1 x2 aop b a))) -> (_z1597 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop x1 x2)) Hterm (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) -> cic.Term univs.Type0 (P (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))), cic.Term univs.Type0 (P Hterm) .", "predict": "$ och $comm$ och $_z1596$ och $_H1$ och $_z1597$, det finns en funktionsbaserad relation $_rel$ från element $x1$ av $cic.Univ$ av $univs.Type0$ och element $x2$ av $cic.Term$ av $univs.Type0$ och element $Hterm$ av $cic.Term$ av $univs.Type0$ och element $P$ av $_z1596$ av $cic.Term$ av $univs.Type0$ och element $_H1$ av $aop$ av $cic.Term$ av $univs.Type0$ och element $comm$ av $a$ av $cic.Term$ av $univs.Type0$ och element $b$ av $x1$ och element $a$ av $cic.Term$ av $univs.Type0$ och element $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och element $_z1597$ av $cic.Term$ av $cic.prop$ och element $P$ av $_z1596$ av $cic.Term$ av $univs.Type0$ och element $Hterm$ av $cic.Term$ av $univs.Type0$ och element $P$ av $_z1597$ av $cic.Term$ av $univs.Type0$ och element $_H1$ av $aop$ av $cic.Term$ av $univs.Type0$ och element $comm$ av $a$ av $cic.Term$ av $univs.Type0$ och element $b$ av $x1$ och element $a$ av $cic.Term$ av $univs.Type0$ och element $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och element $P$ av $_z1596$ av $cic.Term$ av $univs.Type0$ och element $comm$ av $a$ av $cic.Term$ av $univs.Type0$ och element $b$ av $x1$ och element $a$ av $cic.Term$ av $univs.Type0$ och element $x1$ och"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_Type3. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Then for all functions $Q_$ from elements $_x_787$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type3$, for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $un", "label": "Aop_rect_Type3 : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_787 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil) -> cic.Univ univs.Type3) -> _H_mk_Aop : (op : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _nill : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> _nilr : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> _assoc : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type3 (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> x_787 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil) -> cic.Term univs.Type3 (Q_ x_787) .", "predict": "ivs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and $a$ and $b$ and $c$, $Q_$ satisfies the following property: $Q_$ applied to $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op$ applied to $A$ and $_nil$ and $A$ and $op"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBool_inv_rect_CProp2. For all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all functions $P$ from elements $_z635$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $_z636$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Hterm$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_bool.true$, for all functions $_H2$ from elements $_z636$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Hterm$ and $matita_basics_bool.false$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_bool.false$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "axiom bool_inv_rect_CProp2 (Hterm : cic.Term univs.Type0 matita_basics_bool.bool) (P : (_z635 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) (_H1 : (_z636 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.true)) -> cic.Term cic.prop (P matita_basics_bool.true)) (_H2 : (_z636 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.false)) -> cic.Term cic.prop (P matita_basics_bool.false)) : cic.Term cic.prop (P Hterm)", "predict": "Bool_inv_rect_CProp2 : \n  {Hterm : Term univs.Type0}\n  {matita_basics_bool.bool}\n  {P : ∀ _z635 : Term univs.Type0, matita_basics_bool.bool → Univ prop}\n  {H1 : ∀ _z636 : Term prop, Logic.eq (lift univs.Type0 univs.Type2 matita_basics_bool.bool Hterm true) (λ (x : prop), P x true)}\n  {H2 : ∀ _z636 : Term prop, Logic.eq (lift univs.Type0 univs.Type2 matita_basics_bool.bool Hterm false) (λ (x : prop), P x false)}\n  → Term prop (P Hterm)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSig_ind_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $_f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $Q_$ des éléments $_x_664$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_Sig$ des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $_f$ appliqué à $pi1$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $A$ et $_f$ et $pi1$ et $_pi2$, pour tous les éléments $x_664$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_664$.\nassistant\n", "label": "Sig_ind_body : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> Q_ : (_x_664 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) -> cic.Univ cic.prop) -> _H_mk_Sig : (pi1 : cic.Term univs.Type0 A -> _pi2 : cic.Term cic.prop (_f pi1) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> x_664 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) -> cic.Term cic.prop (Q_ x_664) .", "predict": "Output: \nAxiom Sig_ind_body : forall (A : Univ univs.Type0) (f : forall (x : Term univs.Type0) (A : Univ) (P : Prop), Prop) (Q : forall (x : Term univs.Type0) (matita_basics_types.Sig A f) (P : Prop), Prop) (H_mk_Sig : forall (pi1 : Term univs.Type0) (A : Univ) (f : Term univs.Type0) (pi2 : Prop) (P : Prop), Prop) (x_664 : Term univs.Type0) (matita_basics_types.Sig A f), Prop := fun x_664 : Term univs.Type0 (matita_basics_types.Sig A f) => Prop."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExists_mid. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $P$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $l1$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$, för alla element $x$ av $cic.Term$ av $univs.Type0$ och $A$, för alla element $l2$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $P$ applicerat på $x$, håller $cic.Term$ för $cic.prop$ och $matita_basics_lists_list.Exists$ applicerat på $A$ och $P$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l1$ och $matita_basics_lists_list.cons$ applicerat på $A$ och $x$ och $l2$.\nassistant\n", "label": "axiom Exists_mid (A : cic.Univ univs.Type0) (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) (x : cic.Term univs.Type0 A) (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) (__ : cic.Term cic.prop (P x)) : cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 (matita_basics_lists_list.cons A x l2)))", "predict": "Output: \nAxiom exists_mid : \n  forall (A : cic.Univ univs.Type0) (P : forall (t : cic.Term univs.Type0 A), cic.Univ cic.prop) (l1 : matita_basics_lists_list.list A) (x : cic.Term univs.Type0 A) (l2 : matita_basics_lists_list.list A), \n  forall (p : cic.Term cic.prop (P x)) (exist : matita_basics_lists_list.Exists A P l1) (append : matita_basics_lists_list.append A l1 (matita_basics_lists_list.cons A x l2)), \n  cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 (matita_basics_lists_list.cons A x l2)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nPi1. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $_xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $f$, $cic.Term$ tient pour $univs.Type0$ et $A$.\nassistant\n", "label": "pi1 : A : cic.Univ univs.Type0 -> f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> _xxx : cic.Term univs.Type0 (matita_basics_types.Sig A f) -> cic.Term univs.Type0 A .", "predict": "Axiom Pi1 : \n  forall (A : cic.Univ) (f : forall $__ : cic.Term, A -> cic.Univ -> cic.prop) (xxx : cic.Term), \n  (cic.Term : univs.Type0) -> (A : univs.Type0) -> (f : (forall $__ : cic.Term, A -> cic.Univ -> cic.prop)) -> \n  (xxx : (cic.Term : univs.Type0) -> (A : matita_basics_types.Sig)) -> \n  (univs.Type0) -> (cic.prop)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nCongruent_n_mod_times. Låt $n$ och $m$ och $p$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $p$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_congruence.congruent$ applicerat på $n$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $n$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $p$ och $p$.\nassistant\n", "label": "Axiom congruent_n_mod_times : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), cic.Term cic.prop (matita_arithmetics_congruence.congruent n (matita_arithmetics_div_and_mod.mod n (matita_arithmetics_nat.times m p)) p) .", "predict": "Axiom Congruent_n_mod_times : forall n m p : cic.Term univs.Type0, forall (n_le_p : matita_arithmetics_nat.lt O p) (m_le_p : matita_arithmetics_nat.lt O m), forall ___, forall __1, cic.prop (matita_arithmetics_congruence.congruent n (matita_arithmetics_nat.mod n (matita_arithmetics_nat.times m p) p))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAnd_inv_rect_CProp2. För alla element $x1$ och $x2$ av $cic.Univ$ av $cic.prop$, för alla element $Hterm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z371$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $x_160$ av $cic.Term$ av $cic.prop$ och $x1$ och element $x_159$ av $cic.Term$ av $cic.prop$ och $x2$ och element $_z372$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_basics_logic.And$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_160$ och $x_159$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_logic.conj$ applicerat på $x1$ och $x2$ och $x_160$ och $x_159$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "axiom And_inv_rect_CProp2 (x1 x2 : cic.Univ cic.prop) (Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2)) (P : (_z371 : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> cic.Univ cic.prop) (_H1 : (x_160 : cic.Term cic.prop x1) -> (x_159 : cic.Term cic.prop x2) -> (_z372 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_160 x_159))) -> cic.Term cic.prop (P (matita_basics_logic.conj x1 x2 x_160 x_159))) : cic.Term cic.prop (P Hterm)", "predict": "Output: Axiom And_inv_rect_CProp2 : \n  forall x1 x2 : cic.Univ, \n  forall Hterm : cic.Term cic.prop, \n  forall P : (x1 * x2 -> cic.Term cic.prop) -> (matita_basics_logic.And x1 x2 -> P (matita_basics_logic.conj x1 x2 (x1 x2) (matita_basics_logic.eq (cic.lift (cic.prop) univs.Type2 (matita_basics_logic.And x1 x2 Hterm (matita_basics_logic.conj x1 x2 (x1 x2) (x160 x159))))) (x160 x159)) -> cic.Univ cic.prop), \n  (x1 x2 -> P (matita_basics_logic.conj x1 x2 (x1 x2) (matita_basics_logic.eq (cic.lift (cic.prop) univs.Type2 (matita_basics_logic.And x1 x2 Hterm (matita_basics_logic.conj x1 x2 (x1 x2) (x160 x159))))) (x160 x159)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLstar_ind_body. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_R$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation$ appliqué à $B$. Soit $Q_$ une fonction des éléments $x_1233$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $x_1232$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $x_1231$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $_x_1234$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $_R$ et $x_1233$ et $x_1232$ et $x_1231$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $_H_lstar_O$ des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_nat.O$ et $b$ et $b$ et $matita_arithmetics_lstar.lstar_O$ appliqué à $B$ et $_R$ et $b$, pour toutes les fonctions $_H_lstar_S$ des éléments $b1$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $x_1236$ de $cic.Term$ de $cic.prop$ et de $_R$ appliqué à $b1$ et $b$ et des éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $b2$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $x_1235$ de $cic.Term$", "label": "Axiom lstar_ind_body : forall B : cic.Univ univs.Type0, forall _R : cic.Term univs.Type0 (matita_basics_relations.relation B), forall Q_ : ((x_1233 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_1232 : cic.Term univs.Type0 B) -> (x_1231 : cic.Term univs.Type0 B) -> (_x_1234 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B _R x_1233 x_1232 x_1231)) -> cic.Univ cic.prop), forall _H_lstar_O : ((b : cic.Term univs.Type0 B) -> cic.Term cic.prop (Q_ matita_arithmetics_nat.O b b (matita_arithmetics_lstar.lstar_O B _R b))), forall _H_lstar_S : ((b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (x_1236 : cic.Term cic.prop (_R b1 b)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b2 : cic.Term univs.Type0 B) -> (x_1235 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B _R l b b2)) -> (_x_1238 : cic.Term cic.prop (Q", "predict": " de $cic.prop$ et de $Q_$ appliqué à $l$ et $b$ et $b2$ et $_R$ appliqué à $b1$ et $b$ et $b1$ à des éléments de $cic.Univ$ de $cic.prop$, il existe des fonctions $_H_$ des éléments $x_1233$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $x_1233$ et $b$ et $b2$ et $_R$ appliqué à $b1$ et $b$ et $b1$ tel que $H_lstar_S$ appliqué à $b1$ et $b$ et $b2$ et $_R$ appliqué à $b1$ et $b$ et $b1$ et $H_$ appliqué à $x_1233$ et $b$ et $b2$ et $_R$ appliqué à $b1$ et $b$ et $b1$ est égal à $H_lstar_S$ appliqué à $b1$ et $b$ et $b2$ et $_R$ appliqué à $b1$ et $b$ et $b1$.\nOutput: \nInductive lstar_ind_body (B : Univ) (_R : relation B) (Q_ : Term -> nat -> Term -> Term -> lstar B _R) (H_lstar_O : Term -> prop -> Q_ matita_arithmetics_nat.O _) (H_lstar_S : Term -> Term -> Term -> (Term -> nat -> prop) -> prop) : Prop := \n  lstar_ind_body_body : \n    forall (H_lstar_O : Term -> prop -> Q_ matita_arithmetics_nat.O _) (H_lstar_S : Term -> Term -> Term -> (Term -> nat -> prop) -> prop) (b : Term) (b1 : Term) (l : nat) (b2 : Term) (x_1236 : prop) (x_1235 : prop) (x_1234 : prop) (x_1233 : Term) (x_1232 : Term) (x_1231 : Term),"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNot_inv_rect_CProp1. Let $x1$ be an element of $cic.Univ$ of $cic.prop$. Let $Hterm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $x1$. Let $P$ be a function from elements $_z311$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $x1$ to elements of $cic.Univ$ of $cic.prop$. Let $_H1$ be a function from functions $x_113$ from elements $__$ of $cic.Term$ of $cic.prop$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.False$ and elements $_z312$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_basics_logic.Not$ applied to $x1$ and $Hterm$ and $matita_basics_logic.nmk$ applied to $x1$ and $x_113$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_logic.nmk$ applied to $x1$ and $x_113$. Then $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "axiom Not_inv_rect_CProp1 (x1 : cic.Univ cic.prop) (Hterm : cic.Term cic.prop (matita_basics_logic.Not x1)) (P : (_z311 : cic.Term cic.prop (matita_basics_logic.Not x1)) -> cic.Univ cic.prop) (_H1 : (x_113 : (__ : cic.Term cic.prop x1) -> cic.Term cic.prop matita_basics_logic.False) -> (_z312 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.Not x1)) Hterm (matita_basics_logic.nmk x1 x_113))) -> cic.Term cic.prop (P (matita_basics_logic.nmk x1 x_113))) : cic.Term cic.prop (P Hterm)", "predict": "Not_inv_rect_CProp1 : ∀ x1 : cic.Univ, (Hterm : ∀ _, matita_basics_logic.Not x1) → (P : (∀ _, matita_basics_logic.Not x1) → cic.Univ) → (H1 : ∀ (x_113 : ∀ _, (matita_basics_logic.False) × _, P (matita_basics_logic.nmk x1 x_113)) → (z312 : ∀ _, matita_basics_logic.eq (cic.lift (cic.prop) univs.Type2) (matita_basics_logic.Not x1) Hterm (matita_basics_logic.nmk x1 x_113)) → cic.Term) (cic.prop) (P (matita_basics_logic.nmk x1 H1))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_inv_ind. For all elements $x1$ of $cic.Univ$ of $univs.Type0$, for all elements $x2$ of $cic.Term$ of $univs.Type0$ and $x1$, for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1698$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $sum$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ and functions $prod$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1", "label": "axiom Dop_inv_ind (x1 : cic.Univ univs.Type0) (x2 : cic.Term univs.Type0 x1) (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) (P : (_z1698 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> cic.Univ cic.prop) (_H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> (prod : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_null : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> (_distr : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> (_z1699 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) : cic.Term cic.prop (P Hterm)", "predict": "$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ of $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_eq_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $a$ and $b$ and $null$ applied to $x2$ and $x2$, $P$ is equivalent to $P$ applied to $x2$ and $x2$ and $Hterm$ and $H1$ and $term$ and $Hterm$ and $H1$ and $P$ applied to $x2$ and $x2$ and $Hterm$ and $H1$ and $term$ and $Hterm$ and $H1$ and $P$ applied to $x2$ and $x2$ and $Hterm$ and $H1$ and $term$ and $Hterm$ and $H1$ and $P$ applied to $x2$ and $x2$ and $Hterm$ and $H1$ and $term$ and $Hterm$ and $H1$ and $P$ applied to $x2$ and $x2$ and $Hterm$ and $H1$ and $term$ and $Hterm$ and $H1$ and $P$ applied to $x2$ and $x2$ and $Hterm$ and $H1$ and $term$ and $Hterm$ and $H1$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMonotonic_le_minus_l. För alla element $p$ och $q$ och $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $q$ och $p$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.minus$ applicerat på $q$ och $n$ och $matita_arithmetics_nat.minus$ applicerat på $p$ och $n$.\nassistant\n", "label": "Axiom monotonic_le_minus_l : forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall q : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.le q p), cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.minus q n) (matita_arithmetics_nat.minus p n)) .", "predict": "Axiom Monotonic_le_minus_l : forall (p q n : cic.Term univs.Type0), forall (_: matita_arithmetics_nat.le q p), forall (__: cic.Term cic.prop), forall (le: matita_arithmetics_nat.le (matita_arithmetics_nat.minus q n) (matita_arithmetics_nat.minus p n)), _ = le."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_rect_CProp1_body. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $_f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $univs.Type0$, för alla funktioner $Q_$ från element $_x_660$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_DPair$ från element $dpi1$ av $cic.Term$ av $univs.Type0$ och $A$ och element $_dpi2$ av $cic.Term$ av $univs.Type0$ och $_f$ applicerat på $dpi1$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.mk_DPair$ applicerat på $A$ och $_f$ och $dpi1$ och $_dpi2$, för alla element $x_660$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_660$.\nassistant\n", "label": "Axiom DPair_rect_CProp1_body : forall A : cic.Univ univs.Type0, forall _f : ((__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0), forall Q_ : ((_x_660 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop), forall _H_mk_DPair : ((dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))), forall x_660 : cic.Term univs.Type0 (matita_basics_types.DPair A _f), cic.Term cic.prop (Q_ x_660) .", "predict": "Axiom DPair_rect_CProp1_body : forall (A : cic.Univ) (univs : Type0), forall (f : Term -> Univ) (Q : Term -> DPair -> Prop), forall (H_mk_DPair : Term -> Univ -> Term -> Prop), forall (x_660 : Term) (dpair : DPair), TermProp (Q x_660 dpair)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nCongruent_exp_pred_SO. För alla element $p$ och $a$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $p$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_primes.divides$ applicerat på $p$ och $a$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_congruence.congruent$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $a$ och $matita_arithmetics_nat.pred$ applicerat på $p$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$.\nassistant\n", "label": "congruent_exp_pred_SO : p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_primes.prime p) -> __1 : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides p a)) -> cic.Term cic.prop (matita_arithmetics_congruence.congruent (matita_arithmetics_exp.exp a (matita_arithmetics_nat.pred p)) (matita_arithmetics_nat.S matita_arithmetics_nat.O) p) .", "predict": "Axiom Congruent_exp_pred_SO : \n  forall (p : Term univs.Type0) (a : Term matita_arithmetics_nat.nat) (p_ : prop) (p_1 : prop -> Not (divides p a)) (p_2 : prime p), \n  congruent (exp a (pred p) (S O)) (exp a p (S O)) (congruent_exp_pred_SO p a p_ p_1 p_2)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBool_to_decidable_eq. Pour tous les éléments $b1$ et $b2$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.decidable$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $b1$ et $b2$.\nassistant\n", "label": "Axiom bool_to_decidable_eq : forall b1 : cic.Term univs.Type0 matita_basics_bool.bool, forall b2 : cic.Term univs.Type0 matita_basics_bool.bool, cic.Term cic.prop (matita_basics_logic.decidable (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) b1 b2)) .", "predict": "Bool_to_decidable_eq. For all elements b1 and b2 of cic.Term of univs.Type0 and matita_basics_bool.bool, cic.Term holds for cic.prop and matita_basics_logic.decidable applied to matita_basics_logic.eq applied to cic.lift applied to univs.Type0 and univs.Type2 and matita_basics_bool.bool and b1 and b2."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLength_map. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $l$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_lists_list.length$ appliqué à $B$ et $matita_basics_lists_list.map$ appliqué à $A$ et $B$ et $f$ et $l$ et $matita_basics_lists_list.length$ appliqué à $A$ et $l$.\nassistant\n", "label": "Axiom length_map : forall A : cic.Univ univs.Type0, forall B : cic.Univ univs.Type0, forall l : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall f : ((__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length B (matita_basics_lists_list.map A B f l)) (matita_basics_lists_list.length A l)) .", "predict": "Axiom Length_map : forall (A B : Univ), Term -> Type0 -> list A -> (Term -> A -> Term) -> Prop -> eq (lift Type0 Type2 (nat (length B) (map B A f l))) (length A l)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNot_le_S_S_to_not_le. For all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.S$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $m$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_arithmetics_nat.le$ applied to $n$ and $m$.\nassistant\n", "label": "Axiom not_le_S_S_to_not_le : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m))), cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) .", "predict": "Axiom prop70 : odd 1 . \npostulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, $cic.Univ$ holds for $univs.Type0$.\nassistant\n", "label": "Axiom Dop : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, cic.Univ univs.Type0 .", "predict": "Output: Axiom dop : forall A : univs.Type0, forall _nil : cic.Term, cic.Univ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBigop_0. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $B$ of $cic.Univ$ of $univs.Type0$, for all elements $nil$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $op$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $B$ and $nil$, for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $B$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $matita_arithmetics_bigops.bigop$ applied to $matita_arithmetics_nat.S$ applied to $n$ and the function that maps $i$ to $matita_basics_bool.true$ and $B$ and $nil$ and $matita_arithmetics_bigops.op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ and $matita_arithmetics_bigops.op$ applied to $B$ and $nil$ and $op$ and $matita_arithmetics_bigops.bigop$ applied to $n$ and the function that maps $i$ to $matita_basics_bool.true$ and $B$ and $nil$ and $matita_arithmetics_bigops.op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $matita_arithmetics_nat.S$ applied to $i$ and $f$ applied to $matita_arithmetics_nat.O$.\nassistant\n", "label": "bigop_0 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> B : cic.Univ univs.Type0 -> nil : cic.Term univs.Type0 B -> op : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop B nil) -> f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 B) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S n) (i : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_basics_bool.true) B nil (matita_arithmetics_bigops.op B nil op) (i : cic.Term univs.Type0 matita_arithmetics_nat.nat => f i)) (matita_arithmetics_bigops.op B nil op (matita_arithmetics_bigops.bigop n (i : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_basics_bool.true) B nil (matita_arithmetics_bigops.op B nil op) (i : cic.Term univs.Type0 matita_arithmetics_nat.nat => f (matita_arithmetics_nat.S i))) (f matita_arithmetics_nat.O))) .", "predict": "Output: \nAxiom bigop_0 : forall (n : Term univs.Type0) (matita_arithmetics_nat:nat), forall (B : Univ univs.Type0) (nil : Term univs.Type0) (B) (op : Term univs.Type0) (matita_arithmetics_bigops:Aop), forall (f : (___ : Term univs.Type0) -> nat -> Term univs.Type0) (B) (nil) (matita_arithmetics_bigops:op), prop (cic.lift univs.Type0 univs.Type2 B (matita_arithmetics_bigops bigop (matita_arithmetics_nat S n) (fun i => true) B nil (matita_arithmetics_bigops op B nil op (fun i => f i) B nil op (matita_arithmetics_bigops bigop n (fun i => true) B nil (matita_arithmetics_bigops op B nil op (fun i => f (matita_arithmetics_nat S i)) B nil (matita_arithmetics_bigops op B nil op (fun i => f i)))))))) eq."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nUniv. Let $s$ be an element of $Sort$. Then $Univ$ holds for $succ$ applied to $s$.\nassistant\n", "label": "axiom univ (s : Sort) : Univ (succ s)", "predict": "Output: \npostulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_inv_rect_Type2. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $x2$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $univs.Type0$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1122$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type2$, pour toutes les fonctions $_H1$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $x2$ appliqué à $dpi1$ et des éléments $_z1123$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$ à des éléments de $cic.Term$ de $univs.Type2$ et de $P$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$, $cic.Term$ tient pour $univs.Type2$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "Axiom DPair_inv_rect_Type2 : forall x1 : cic.Univ univs.Type0, forall x2 : ((__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0), forall Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2), forall P : ((_z1122 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ univs.Type2), forall _H1 : ((dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1123 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type2 (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))), cic.Term univs.Type2 (P Hterm) .", "predict": "Axiom DPair_inv_rect_Type2 : forall x1 : cic.Univ, (forall x2 : cic.Term, x1 -> cic.Univ) -> (forall Hterm : cic.Term, DPair x1 x2) -> (forall _z1122 : cic.Term, DPair x1 x2 -> cic.Univ) -> (forall _H1 : cic.Term, x1 -> cic.Term) -> (forall _dpi2 : cic.Term, x2 -> cic.Term) -> (forall z1123 : cic.Term, cic.prop) -> (forall dpi2 : cic.Term, x2 -> cic.Term) -> (forall z1123 : cic.prop, eq univs.Type0 univs.Type2) -> (forall x1 x2 : cic.Term, DPair x1 x2) -> (forall dpi1 : cic.Term, x1 -> cic.Term) -> (forall _dpi2 : cic.Term, x2 -> cic.Term) -> (forall z1123 : cic.prop, eq univs.Type0 univs.Type2) -> (forall x1 x2 : cic.Term, DPair x1 x2) -> (forall dpi1 : cic.Term, x1 -> cic.Term) -> (forall dpi2 : cic.Term, x2 -> cic.Term) -> (forall z1123 : cic.prop, eq univs.Type0 univs.Type2) -> (forall x1 x2 : cic.Term, DPair x1 x2) -> (forall dpi1 : cic.Term, x1 -> cic.Term) -> (forall _dpi2 : cic.Term, x2 -> cic.Term) -> (forall z1123 : cic.prop, eq univs.Type0 univs.Type2) -> (forall x1 x2 : cic.Term, DPair x1 x2) -> (forall dpi1 : cic.Term, x1 -> cic.Term) -> (forall dpi2 : cic.Term, x2 -> cic.Term) -> (forall z1123 : cic.prop, eq univs.Type0 univs.Type2) -> (forall x1 x2 : cic.Term, DPair x1 x2) -> (forall dpi1 : cic.Term, x1 -> cic.Term) -> (forall dpi2 : cic.Term, x2 -> cic.Term) -> (forall z1123 : cic.prop, eq univ"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_ind. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_586$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_None$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.None$ appliqué à $_A$. Alors pour toutes les fonctions $_H_Some$ des éléments $x_587$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.Some$ appliqué à $_A$ et $x_587$, pour tous les éléments $x_586$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_586$.\nassistant\n", "label": "Axiom option_ind : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_586 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop), forall _H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A)), forall _H_Some : ((x_587 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_587))), forall x_586 : cic.Term univs.Type0 (matita_basics_types.option _A), cic.Term cic.prop (Q_ x_586) .", "predict": "Axiom option_ind : forall (A : cic.Univ) (Q : forall x : cic.Term, univs.Type0 -> matita_basics_types.option -> cic.prop) (H_None : cic.Term (cic.prop) (Q x A (matita_basics_types.None A))) (H_Some : forall (x : cic.Term) (A : univs.Type0) (a : A), cic.Term (cic.prop) (Q x A (matita_basics_types.Some A x))), forall (x : cic.Term) (A : univs.Type0) (o : matita_basics_types.option A), cic.Term (cic.prop) (Q x A o)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNot_rect_Type3. Let $_A$ be an element of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_88$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type3$. Let $_H_nmk$ be a function from functions $x_89$ from elements $__$ of $cic.Term$ of $cic.prop$ and $_A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.False$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_logic.nmk$ applied to $_A$ and $x_89$. Then for all elements $x_88$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $_A$, $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_88$.\nassistant\n", "label": "Not_rect_Type3 : _A : cic.Univ cic.prop -> Q_ : (_x_88 : cic.Term cic.prop (matita_basics_logic.Not _A) -> cic.Univ univs.Type3) -> _H_nmk : (x_89 : (__ : cic.Term cic.prop _A -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term univs.Type3 (Q_ (matita_basics_logic.nmk _A x_89))) -> x_88 : cic.Term cic.prop (matita_basics_logic.Not _A) -> cic.Term univs.Type3 (Q_ x_88) .", "predict": "Output: \nAxiom Not_rect_Type3 : \nforall (A : Univ) (Q : (x : Term) -> Not A -> Univ) (H_nmk : (x y : Term) -> Not A -> Prop -> Term) -> \nforall (x : Term) -> Not A -> Type3."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDivides_to_congruent. Låt $n$ och $m$ och $p$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $p$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $m$ och $n$. Låt $__2$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $p$ och $matita_arithmetics_nat.minus$ applicerat på $n$ och $m$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_congruence.congruent$ applicerat på $n$ och $m$ och $p$.\nassistant\n", "label": "postulate divides_to_congruent : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le m n)) -> (__2 : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.minus n m))) -> cic.Term cic.prop (matita_arithmetics_congruence.congruent n m p)", "predict": "postulate Divides_to_congruent : (n m p : cic.Term univs.Type0) -> (n /= m) -> (p : matita_arithmetics_nat.nat) -> (lt p matita_arithmetics_nat.O) -> (le m n) -> (le n m) -> (divides p (minus n m)) -> (congruent n m p)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTimes_body. För alla element $__$ och $__1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $univs.Type0$ och $matita_arithmetics_nat.nat$.\nassistant\n", "label": "times_body : __ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_arithmetics_nat.nat .", "predict": "Axiom times_body : forall (x : Term univs.Type0) (y : nat), Term univs.Type0 nat."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDecidable_mem_nat. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.decidable$ appliqué à $matita_basics_lists_list.mem$ appliqué à $matita_arithmetics_nat.nat$ et $n$ et $l$.\nassistant\n", "label": "postulate decidable_mem_nat : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) -> cic.Term cic.prop (matita_basics_logic.decidable (matita_basics_lists_list.mem matita_arithmetics_nat.nat n l))", "predict": "postulate Decidable_mem_nat : {n : matita_arithmetics_nat.nat} -> (l : matita_basics_lists_list.list (matita_arithmetics_nat.nat)) -> cic.Term univs.Type0 (matita_basics_logic.decidable (matita_basics_lists_list.mem n l))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEqb_n_n. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_nat.eqb$ appliqué à $n$ et $n$ et $matita_basics_bool.true$.\nassistant\n", "label": "axiom eqb_n_n (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_nat.eqb n n) matita_basics_bool.true)", "predict": "Axiom Eqb_n_n : forall (n : cic.Term univs.Type0 matita_arithmetics_nat.nat), cic.Term (cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool (matita_arithmetics_nat.eqb n n)) matita_basics_bool.true))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNat_inv_rect_Type0. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $P$ be a function from elements $_z683$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Univ$ of $univs.Type0$. Let $_H1$ be a function from elements $_z684$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $Hterm$ and $matita_arithmetics_nat.O$ to elements of $cic.Term$ of $univs.Type0$ and $P$ applied to $matita_arithmetics_nat.O$. Let $_H2$ be a function from elements $x_390$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_x_392$ from elements $_z684$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $Hterm$ and $x_390$ to elements of $cic.Term$ of $univs.Type0$ and $P$ applied to $x_390$ and elements $_z684$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $Hterm$ and $matita_arithmetics_nat.S$ applied to $x_390$ to elements of $cic.Term$ of $univs.Type0$ and $P$ applied to $matita_arithmetics_nat.S$ applied to $x_390$. Then $cic.Term$ holds for $univs.Type0$ and $P$ applied to $Hterm$.\nassistant\n", "label": "nat_inv_rect_Type0 : Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat -> P : (_z683 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Univ univs.Type0) -> _H1 : (_z684 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm matita_arithmetics_nat.O) -> cic.Term univs.Type0 (P matita_arithmetics_nat.O)) -> _H2 : (x_390 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _x_392 : (_z684 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm x_390) -> cic.Term univs.Type0 (P x_390)) -> _z684 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm (matita_arithmetics_nat.S x_390)) -> cic.Term univs.Type0 (P (matita_arithmetics_nat.S x_390))) -> cic.Term univs.Type0 (P Hterm) .", "predict": "Output: \nNat_inv_rect_Type0. Axiom Hterm : Term of univs.Type0. Axiom matita_arithmetics_nat : module nat. Function P : (Term of univs.Type0) -> nat -> Univ of univs.Type0. Function H1 : (Term of cic.prop) -> eq (lift univs.Type0 univs.Type2 (nat Hterm matita_arithmetics_nat.O)) (Term of univs.Type0) -> Term of univs.Type0 -> P matita_arithmetics_nat.O. Function H2 : (Term of univs.Type0) -> nat -> (Term of cic.prop) -> eq (lift univs.Type0 univs.Type2 (nat (Hterm (matita_arithmetics_nat.S x_390))) (nat Hterm x_390)) (Term of univs.Type0) -> P x_390 -> P (matita_arithmetics_nat.S x_390). Then Term holds for univs.Type0 and P Hterm."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLeq_sqrt_n. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_sqrt.sqrt$ appliqué à $n$ et $matita_arithmetics_sqrt.sqrt$ appliqué à $n$ et $n$.\nassistant\n", "label": "postulate leq_sqrt_n : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times (matita_arithmetics_sqrt.sqrt n) (matita_arithmetics_sqrt.sqrt n)) n)", "predict": "postulate Leq_sqrt_n : (n : matita_arithmetics_nat.nat) -> (matita_arithmetics_nat.times (matita_arithmetics_sqrt.sqrt n) (matita_arithmetics_sqrt.sqrt n)) = n"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLstar_r_inv_lstar. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $R$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $B$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $b1$ och $b2$ av $cic.Term$ av $univs.Type0$ och $B$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar_r$ applicerat på $B$ och $R$ och $l$ och $b1$ och $b2$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $R$ och $l$ och $b1$ och $b2$.\nassistant\n", "label": "postulate lstar_r_inv_lstar : (B : cic.Univ univs.Type0) -> (R : cic.Term univs.Type0 (matita_basics_relations.relation B)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b2 : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B R l b1 b2)) -> cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b2)", "predict": "postulate lstar_r_inv_lstar : \n  ∀ {univs : Type} {B : univs.Type0} (R : univs.Type0) (l : univs.Type0) (b1 b2 : univs.Type0) →\n  B ∈ cic.Univ →\n  relation B R →\n  nat l →\n  (lstar_r B R l b1 b2) ∈ cic.prop →\n  lstar B R l b1 b2."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTrue_inv_rect_CProp3. Låt $Hterm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$. Låt $P$ vara en funktion från element $_z167$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H1$ från element $_z168$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_basics_logic.True$ och $Hterm$ och $matita_basics_logic.I$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_logic.I$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "True_inv_rect_CProp3 : Hterm : cic.Term cic.prop matita_basics_logic.True -> P : (_z167 : cic.Term cic.prop matita_basics_logic.True -> cic.Univ cic.prop) -> _H1 : (_z168 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 matita_basics_logic.True) Hterm matita_basics_logic.I) -> cic.Term cic.prop (P matita_basics_logic.I)) -> cic.Term cic.prop (P Hterm) .", "predict": "Output: Axiom True_inv_rect_CProp3 : forall (Hterm : Term prop) (P : forall _z167 : Term prop -> True, Univ prop), (forall _H1 : Term prop -> eq prop -> lift prop (prop, univs.Type2, True) Hterm I, Term prop -> P (I _H1)) Hterm P."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFst. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $_xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $A$ et $B$, $cic.Term$ tient pour $univs.Type0$ et $A$.\nassistant\n", "label": "postulate fst : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (_xxx : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> cic.Term univs.Type0 A", "predict": "postulate Fst : forall (A B : cic.Univ), forall (_xxx : cic.Term), forall (_ : Prod A B), _xxx _ _ == A"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDiv_mod_spec_ind_body. Låt $_n$ och $_m$ och $_q$ och $_r$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Q_$ vara en funktion från element $_x_809$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_div_mod_spec_intro$ vara en funktion från element $x_811$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $_r$ och $_m$ och element $x_810$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $_n$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $_q$ och $_m$ och $_r$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ och $x_811$ och $x_810$. Då för alla element $x_809$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_809$.\nassistant\n", "label": "div_mod_spec_ind_body : _n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _q : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _r : cic.Term univs.Type0 matita_arithmetics_nat.nat -> Q_ : (_x_809 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r) -> cic.Univ cic.prop) -> _H_div_mod_spec_intro : (x_811 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m) -> x_810 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r)) -> cic.Term cic.prop (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_811 x_810))) -> x_809 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r) -> cic.Term cic.prop (Q_ x_809) .", "predict": "Axiom Div_mod_spec_ind_body : \n  (n : Term (univs.Type0))\n  (m : Term (univs.Type0))\n  (q : Term (univs.Type0))\n  (r : Term (univs.Type0))\n  (Q : Term (prop))\n  (H_div_mod_spec_intro : Term (prop))\n  -> (r < m -> n = q * m + r -> Q) -> \n  (forall (x : Term (prop)) (dms : div_mod_spec n m q r),\n  Q dms -> H_div_mod_spec_intro r m x -> Q x)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_rect_CProp5. For all elements $_A$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_931$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_range$ from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_931$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_931$.\nassistant\n", "label": "axiom range_rect_CProp5 (_A : cic.Univ univs.Type0) (Q_ : (_x_931 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ cic.prop) (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) (x_931 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) : cic.Term cic.prop (Q_ x_931)", "predict": "Range_rect_CProp5: \nforall A : Univ, \n(forall x_931 : Term, \n(range A) -> \n Univ -> prop -> \n (enum x -> nat -> Term A) -> \n (nat -> Term A) -> \n (nat -> Term A) -> \n (x -> nat -> bool -> Term A) -> \n (mk_range A) (enum x_931) (upto) (filter) -> \n (Term -> prop) -> \n (Term x_931) \nholds."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBigop_I_gen. Soient $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $p$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Soit $nil$ un élément de $cic.Term$ de $univs.Type0$ et de $B$. Alors pour tous les éléments $op$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $B$ et $nil$, pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $a$ et $b$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $B$ et $matita_arithmetics_bigops.bigop$ appliqué à $matita_arithmetics_nat.minus$ appliqué à $b$ et $a$ et la fonction qui envoie $i$ à la fonction qui envoie $i0$ à $p$ appliqué à $i0$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $i$ et $a$ et $B$ et $nil$ et $matita_arithmetics_bigops.op$ appliqué à $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à la fonction qui envoie $i0$ à $f$ appliqué à $i0$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $i$ et $a$ et $matita_arithmetics_bigops.bigop$ appliqué à $b$ et la fonction qui envoie", "label": "axiom bigop_I_gen (a b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (B : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 B) (op : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop B nil)) (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) (__ : cic.Term cic.prop (matita_arithmetics_nat.le a b)) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.minus b a) (λ i => (λ i0 => p i0) (matita_arithmetics_nat.plus i a)) B nil (matita_arithmetics_bigops.op B nil op) (λ i => (λ i0 => f i0) (matita_arithmetics_nat.plus i a))) (matita_arithmetics_bigops.bigop b (λ i => matita_basics_bool.andb (matita_arithmetics_nat.leb a i) (p i)) B nil (matita_arithmetics_bigops.op B nil op) (λ i => f i)))", "predict": " $i$ à la fonction qui envoie $i0$ à $p$ appliqué à $i0$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $i$ et $b$ et $B$ et $nil$ et $matita_arithmetics_bigops.op$ appliqué à $B$ et $nil$ et $op$ et la fonction qui envoie $i$ à la fonction qui envoie $i0$ à $f$ appliqué à $i0$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $i$ et $b$ et $B$ et $nil$ et $matita_arithmetics_bigops.op$ appliqué à $B$ et $nil$ et $op$ et $matita_arithmetics_bigops.Aop$ appliqué à $B$ et $nil$ et $op$ et $B$ et $nil$ et $matita_arithmetics_bigops.op$ appliqué à $B$ et $nil$ et $op$ et $matita_arithmetics_bigops.Aop$ appliqué à $B$ et $nil$ et $op$ et $B$ et $nil$ et $matita_arithmetics_bigops.op$ appliqué à $B$ et $nil$ et $op$ et $matita_arithmetics_bigops.Aop$ appliqué à $B$ et $nil$ et $op$ et $B$ et $nil$ et $matita_arithmetics_bigops.op$ appliqué à $B$ et $nil$ et $op$ et $matita_arithmetics_bigops.Aop$ appliqué à $B$ et $nil$ et $op$ et $B$ et $nil$ et $matita_arithmetics_bigops.op$ appliqué à $B$ et $nil$ et $op$ et $matita_arithmetics_bigops.Aop$ appliqué à $B$ et $nil$ et $op$ et $B$ et $nil$ et $matita_arithmetics_bigops.op$ appliqué à $B$ et $nil$ et $op$ et $matita_arithmetics_bigops.Aop$ appliqué à $B$ et $nil$ et $op$ et $B$ et $nil$ et $matita_arithmetics_bigops.op$ appliqué à $B$ et $"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1033. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $len$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $p$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $lep$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_sqrt.sqrt$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $p$, pour tous les éléments $ltp$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $p$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $Hc$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $", "label": "postulate let_clause_1033 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (len : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))) n)) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (lep : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_sqrt.sqrt (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) p)) -> (ltp : cic.Term cic.prop (matita_arithmetics_nat.lt p (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)))) -> (Hc : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_nat.leb (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_chebyshev_ber", "predict": "matita_arithmetics_nat.eq$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$, nous avons $Hc$.\n\nOutput: \n```\nlet_clause_1033 : \n  (∀ (n : cic.Term univs.Type0 matita_arithmetics_nat.nat)\n  → (∀ (len : cic.Term cic.prop matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O)))))))))))) n))\n  → (∀ (p : cic.Term univs.Type0 matita_arithmetics_nat.nat)\n  → (∀ (lep : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O))))))))))))))\n    n)\n  → (∀ (ltp : cic.Term cic.prop (matita_arithmetics_nat.lt p (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFlatten_to_mem. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $l1$ et $l2$ et $a$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour toutes les fonctions $__1$ des éléments $x$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.mem$ appliqué à $matita_basics_lists_list.list$ appliqué à $A$ et $x$ et $l$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_lists_list.length$ appliqué à $A$ et $x$ et $n$, pour tous les", "label": "Axiom flatten_to_mem : forall A : cic.Univ univs.Type0, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall l : cic.Term univs.Type0 (matita_basics_lists_list.list (matita_basics_lists_list.list A)), forall l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall a : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall __1 : ((x : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__1 : cic.Term cic.prop (matita_basics_lists_list.mem (matita_basics_lists_list.list A) x l)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A x) n)), forall __2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A a) n), forall __3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.flatten A l) (matita_basics_lists_list.append A l1 (matita_basics_lists_list.append A a l2))), forall __4 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (fun q => matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l1) (matita_arithmetics_nat.times n q))), cic.Term cic.prop (matita_basics_lists_list.mem (matita_basics_lists_list.list A) a l) .", "predict": " éléments $x$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, nous pouvons démontrer que $A$ est mem de $l$ et que $x$ est eq à $A$ et $l$ et que $l$ est mem de $l1$ et que $l$ est mem de $l2$ et que $l$ est eq à $A$ et $l$ et que $l$ est eq à $A$ et $l$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est eq à $A$ et que $l$ est"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSig_inv_rect_CProp1. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Univ$ of $cic.prop$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $x1$ and $x2$. Then for all functions $P$ from elements $_z1224$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $x2$ applied to $pi1$ and elements $_z1225$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Sig$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.mk_Sig$ applied to $x1$ and $x2$ and $pi1$ and $_pi2$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.mk_Sig$ applied to $x1$ and $x2$ and $pi1$ and $_pi2$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "axiom Sig_inv_rect_CProp1 (x1 : cic.Univ univs.Type0) (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ cic.prop) (Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) (P : (_z1224 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> cic.Univ cic.prop) (_H1 : (pi1 : cic.Term univs.Type0 x1) -> (_pi2 : cic.Term cic.prop (x2 pi1)) -> (_z1225 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2)) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) : cic.Term cic.prop (P Hterm)", "predict": "sig_inv_rect_CProp1 : \n  x1 : cic.Univ \n  x2 : (cic.Term) univs.Type0 -> x1 -> cic.Univ \n  univs.Type0 \n  Hterm : (cic.Term) univs.Type0 (matita_basics_types.Sig x1 x2) \n  (P : (cic.Term) univs.Type0 (matita_basics_types.Sig x1 x2) -> cic.Univ cic.prop) \n  (H1 : (pi1 : cic.Term) univs.Type0 x1 (pi2 : cic.prop) (x2 pi1) -> \n    (z1224 : cic.Term) univs.Type0 (matita_basics_logic.eq) (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 pi2)) \n    (z1225 : cic.prop) (matita_basics_logic.eq) (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 pi2)) \n    (P (matita_basics_types.mk_Sig x1 x2 pi1 pi2)) \n    -> cic.Term cic.prop (P Hterm)) \n  -> cic.Term cic.prop (P Hterm)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLstar_ind_l_aux. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Soit $R$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour tous les éléments $b2$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $P$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation2$ appliqué à $matita_arithmetics_nat.nat$ et $B$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_nat.O$ et $b2$, pour toutes les fonctions $__1$ des éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $b1$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $R$ appliqué à $b1$ et $b$ et des éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $R$ et $l$ et $b$ et $b2$ et des éléments $__3$ de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $l$ et $b$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $l$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $b1$, pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics", "label": "lstar_ind_l_aux : B : cic.Univ univs.Type0 -> R : (__ : cic.Term univs.Type0 B -> __1 : cic.Term univs.Type0 B -> cic.Univ cic.prop) -> b2 : cic.Term univs.Type0 B -> P : cic.Term univs.Type0 (matita_basics_relations.relation2 matita_arithmetics_nat.nat B) -> __ : cic.Term cic.prop (P matita_arithmetics_nat.O b2) -> __1 : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b1 : cic.Term univs.Type0 B -> b : cic.Term univs.Type0 B -> __1 : cic.Term cic.prop (R b1 b) -> __2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b b2) -> __3 : cic.Term cic.prop (P l b) -> cic.Term cic.prop (P (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1)) -> l : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b1 : cic.Term univs.Type0 B -> b : cic.Term univs.Type0 B -> __2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b) -> __3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) b b2) -> cic.Term cic.prop (P l b1) .", "predict": "_nat.nat$ et pour tous les éléments $b$ de $cic.Term$ de $univs.Type0$ et de $B$ et pour tous les éléments $b1$ de $cic.Term$ de $univs.Type0$ et de $B$, il y a une application de $cic.prop$ à $l$, $b$, $b1$ et $P$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $l$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $b$ et $b2$ qui est équivalente à $R$ appliqué à $l$, $b$, $b1$, $P$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $l$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $b1$.\n\nOutput: \nAxiom Lstar_ind_l_aux : forall (B : Univ) (R : Term -> B -> Term -> B -> Prop) (b2 : Term) (P : Term -> relation2 nat B) (l : Term) (b : Term) (b1 : Term) (l1 : Term) (b11 : Term) (l2 : Term) (b22 : Term) (P1 : Prop) (P2 : Prop) (P3 : Prop) (P4 : Prop) (P5 : Prop) (P6 : Prop) (P7 : Prop) (P8 : Prop) (P9 : Prop) (P10 : Prop) (P11 : Prop) (P12 : Prop) (P13 : Prop) (P14 : Prop) (P15 : Prop) (P16 : Prop) (P17 : Prop) (P18 : Prop) (P19 : Prop) (P20 : Prop) (P21 : Prop) (P22 : Prop) (P23 : Prop) (P24 : Prop) (P25 : Prop) (P26 : Prop) (P27 : Prop) (P28 : Prop) (P29 : Prop) (P30 : Prop) (P31 : Prop) (P32 : Prop) (P"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_rect_CProp0_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_939$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $_H_mk_range$ from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_939$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_939$.\nassistant\n", "label": "range_rect_CProp0_body : _A : cic.Univ univs.Type0 -> Q_ : (_x_939 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Univ cic.prop) -> _H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 _A) -> _upto : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> x_939 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Term cic.prop (Q_ x_939) .", "predict": "Range_rect_CProp0_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_939$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $_H_mk_range$ from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_939$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_939$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLstar_inv_S. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $R$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $B$. Let $l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $b1$ and $b2$ be elements of $cic.Term$ of $univs.Type0$ and $B$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $l$ and $b1$ and $b2$, for all elements $l0$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.plus$ applied to $l0$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $l$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.ex2$ applied to $B$ and the function that maps $b$ to $R$ applied to $b1$ and $b$ and the function that maps $b$ to $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $l0$ and $b$ and $b2$.\nassistant\n", "label": "lstar_inv_S : B : cic.Univ univs.Type0 -> R : cic.Term univs.Type0 (matita_basics_relations.relation B) -> l : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b1 : cic.Term univs.Type0 B -> b2 : cic.Term univs.Type0 B -> __ : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b2) -> l0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.plus l0 (matita_arithmetics_nat.S matita_arithmetics_nat.O)) l) -> cic.Term cic.prop (matita_basics_logic.ex2 B (b : cic.Term univs.Type0 B => R b1 b) (b : cic.Term univs.Type0 B => matita_arithmetics_lstar.lstar B R l0 b b2)) .", "predict": "Axiom Lstar_inv_S : \n  forall (B : Univ),\n  (Term B : Type0),\n  (R : relation B : Type0),\n  (l : Term : Type0),\n  (b1 b2 : Term B : Type0),\n  (P : prop : Type),\n  (lstar : lstar B R l b1 b2),\n  (l0 : nat : Type0),\n  (P1 : prop : Type),\n  (eq : eq (lift Type0 Type2 nat (plus l0 (S O) l)) : Type),\n  Term P (ex2 B (\\(b : B) -> R b b1 b) (\\(b : B) -> lstar B R l0 b b b2)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_rect_CProp0_body. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Let $_x$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $Q_$ be a function from elements $x_37$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $_x_38$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_37$ to elements of $cic.Univ$ of $cic.prop$. Then for all elements $_H_refl$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $_x$ and $matita_basics_logic.refl$ applied to $A$ and $_x$, for all elements $x_37$ of $cic.Term$ of $univs.Type2$ and $A$, for all elements $x_38$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_37$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_37$ and $x_38$.\nassistant\n", "label": "axiom eq_rect_CProp0_body (A : cic.Univ univs.Type2) (_x : cic.Term univs.Type2 A) (Q_ : (x_37 : cic.Term univs.Type2 A) -> (_x_38 : cic.Term cic.prop (matita_basics_logic.eq A _x x_37)) -> cic.Univ cic.prop) (_H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x))) (x_37 : cic.Term univs.Type2 A) (x_38 : cic.Term cic.prop (matita_basics_logic.eq A _x x_37)) : cic.Term cic.prop (Q_ x_37 x_38)", "predict": "Output: \npostulate Eq_rect_CProp0_body : \n    {A : univs.Type2} -> \n    {x : cic.Term} -> \n    {A : univs.Type2} -> \n    (Q_ : (x_37 : cic.Term) -> A -> (x_38 : cic.Term) -> matita_basics_logic.eq A x x_37) -> \n    (H_refl : cic.Term) -> \n    (Q_ x matita_basics_logic.refl A x) -> \n    (x_37 : univs.Type2) -> \n    (A : univs.Type2) -> \n    (x_38 : cic.Term) -> \n    (matita_basics_logic.eq A x x_37) -> \n    (cic.Term) -> \n    (cic.prop) -> \n    Q_ x_37 x_38."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_plus_a. Soient $a$ et $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $n$ et $matita_arithmetics_nat.plus$ appliqué à $a$ et $m$.\nassistant\n", "label": "axiom le_plus_a (a n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.le n m)) : cic.Term cic.prop (matita_arithmetics_nat.le n (matita_arithmetics_nat.plus a m))", "predict": "Axiom le_plus_a : forall (a : cic.Term univs.Type0) (n m : matita_arithmetics_nat.nat), forall (P : cic.Term cic.prop) (le : matita_arithmetics_nat.le n m), cic.Term P (matita_arithmetics_nat.le n (matita_arithmetics_nat.plus a m))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_rect_CProp3_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_907$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_ACop$ vara en funktion från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$. Då för alla element $x_907$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_907$.\nassistant\n", "label": "axiom ACop_rect_CProp3_body (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_907 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop) (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) (x_907 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) : cic.Term cic.prop (Q_ x_907)", "predict": "Axiom propACop_rect_CProp3_body : forall A : univs.Type0, A : univs.Type0, Q_ : (forall x : univs.Type0, (cic.Term x -> matita_arithmetics_bigops.ACop A (cic.Term x)) -> univs.Type0), postulate (H_mk_ACop : forall aop : univs.Type0, (matita_arithmetics_bigops.Aop A (cic.Term x)) -> (forall a : univs.Type0, (cic.Term a) -> forall b : univs.Type0, (cic.Term b) -> (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A (cic.Term x)) (matita_arithmetics_bigops.op A (cic.Term x)) (matita_arithmetics_bigops.op A (cic.Term x)) a b)) -> (matita_arithmetics_bigops.mk_ACop A (cic.Term x) aop (H_comm a b))) -> (forall x : univs.Type0, (cic.Term x) -> matita_arithmetics_bigops.ACop A (cic.Term x)) -> univs.Type0."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_priml. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_log.log$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_chebyshev_chebyshev_psi.prim$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$.\nassistant\n", "label": "postulate le_priml : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_log.log (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) (matita_arithmetics_nat.S (matita_arithmetics_chebyshev_chebyshev_psi.prim (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)))))", "predict": "postulate le_priml : \n  (n : matita_arithmetics_nat.nat) -> \n  (x : matita_arithmetics_nat.lt (matita_arithmetics_nat.O n)) -> \n  (prop : matita_arithmetics_nat.le (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_log.log (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) n) -> \n  (cic.Term : cic.prop (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_log.log (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_log.log (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_chebyshev_chebyshev_psi.prim (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) n)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOr_ind. Let $_A$ and $_B$ be elements of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_170$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $_H_or_introl$ from elements $x_171$ of $cic.Term$ of $cic.prop$ and $_A$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_logic.or_introl$ applied to $_A$ and $_B$ and $x_171$, for all functions $_H_or_intror$ from elements $x_172$ of $cic.Term$ of $cic.prop$ and $_B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_logic.or_intror$ applied to $_A$ and $_B$ and $x_172$, for all elements $x_170$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $_A$ and $_B$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_170$.\nassistant\n", "label": "Axiom Or_ind : forall _A : cic.Univ cic.prop, forall _B : cic.Univ cic.prop, forall Q_ : ((_x_170 : cic.Term cic.prop (matita_basics_logic.Or _A _B)) -> cic.Univ cic.prop), forall _H_or_introl : ((x_171 : cic.Term cic.prop _A) -> cic.Term cic.prop (Q_ (matita_basics_logic.or_introl _A _B x_171))), forall _H_or_intror : ((x_172 : cic.Term cic.prop _B) -> cic.Term cic.prop (Q_ (matita_basics_logic.or_intror _A _B x_172))), forall x_170 : cic.Term cic.prop (matita_basics_logic.Or _A _B), cic.Term cic.prop (Q_ x_170) .", "predict": "Axiom prop80 : even 2 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nR3. Soit $T0$ un élément de $cic.Univ$ de $univs.Type0$. Soit $a0$ un élément de $cic.Term$ de $univs.Type0$ et de $T0$. Soit $T1$ une fonction des éléments $x0$ de $cic.Term$ de $univs.Type0$ et de $T0$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $x0$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $a1$ un élément de $cic.Term$ de $univs.Type0$ et de $T1$ appliqué à $a0$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$. Soit $T2$ une fonction des éléments $x0$ de $cic.Term$ de $univs.Type0$ et de $T0$ et des éléments $p0$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $x0$ et des éléments $x1$ de $cic.Term$ de $univs.Type0$ et de $T1$ appliqué à $x0$ et $p0$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T1$ appliqué à $x0$ et $p0$ et $matita_basics_logic.R1$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $T1$ et $a1$ et $x0$ et $p0$ et $", "label": "Axiom R3 : forall T0 : cic.Univ univs.Type0, forall a0 : cic.Term univs.Type0 T0, forall T1 : ((x0 : cic.Term univs.Type0 T0) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> cic.Univ univs.Type0), forall a1 : cic.Term univs.Type0 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0)), forall T2 : ((x0 : cic.Term univs.Type0 T0) -> (p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> (x1 : cic.Term univs.Type0 (T1 x0 p0)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T1 x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 T0) a0 T1 a1 x0 p0) x1)) -> cic.Univ univs.Type0), forall a2 : cic.Term univs.Type0 (T2 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2", "predict": "x1$ à des éléments de $cic.Univ$ de $univs.Type0$. Prop90. Il existe une fonction $f$ de $T0$ à $T1$ telle que pour tout $x0$ de $T0$, $f(x0)$ est égal à $a1$ appliqué à $x0$ et $p0$ appliqué à $x0$ et $x1$ appliqué à $f(x0)$ et $x0$ appliqué à $f(x0)$ et $x1$ appliqué à $f(x0)$.\n\nOutput: \nAxiom prop90 : \nexists (f : T0 -> T1), \nforall (x0 : T0), \nf x0 = a1 x0 (p0 x0) (x1 (f x0) x0 (f x0) x1 (f x0)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFalse_rect_CProp2. Soit $Q_$ une fonction des éléments $_x_76$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour tous les éléments $x_76$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_76$.\nassistant\n", "label": "False_rect_CProp2 : Q_ : (_x_76 : cic.Term cic.prop matita_basics_logic.False -> cic.Univ cic.prop) -> x_76 : cic.Term cic.prop matita_basics_logic.False -> cic.Term cic.prop (Q_ x_76) .", "predict": "False_rect_CProp2 : ∀ (Q : ∀ (x_76 : cic.Term) (False : matita_basics_logic.False), cic.prop) -> ∀ (x_76 : cic.Term), cic.prop (Q x_76 False)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDivides_fact_to_le. Let $p$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.prime$ applied to $p$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $p$ and $matita_arithmetics_factorial.fact$ applied to $n$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $p$ and $n$.\nassistant\n", "label": "Axiom divides_fact_to_le : forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_primes.prime p), forall __1 : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_factorial.fact n)), cic.Term cic.prop (matita_arithmetics_nat.le p n) .", "predict": "Output: \nDefinition divides_fact_to_le (p n : univs.Type0) (p_prime : matita_arithmetics_primes.prime p) (p_divides_factn : matita_arithmetics_primes.divides p (matita_arithmetics_factorial.fact n)) : cic.Term (cic.prop × matita_arithmetics_nat.le p n) := \n  (* Your Coq proof goes here *)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_to_bijn. Låt $f$ och $g$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara en funktion från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $i$ och $n$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $f$ applicerat på $i$ och $g$ applicerat på $i$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_permutation.bijn$ applicerat på $f$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_permutation.bijn$ applicerat på $g$ och $n$.\nassistant\n", "label": "postulate eq_to_bijn : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (g : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le i n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f i) (g i))) -> (__1 : cic.Term cic.prop (matita_arithmetics_permutation.bijn f n)) -> cic.Term cic.prop (matita_arithmetics_permutation.bijn g n)", "predict": "postulate Eq_to_bijn : {univs : Type} {Type0 : univs} {nat : Type0} {cic : Universe} {prop : Universe} {matita_arithmetics_nat : Universe} {matita_basics_logic : Universe} {univs_Type2 : Universe} (f g : (i : Type0 -> nat) -> (Term : prop -> (i : Type0 -> nat) -> (univs_Type2 -> Type0) -> (univs_Type2 -> nat) -> Term) -> Term) (n : Type0 -> nat) (i : Type0 -> nat) -> ((Term : prop -> (i : Type0 -> nat) -> (univs_Type2 -> Type0) -> (univs_Type2 -> nat) -> Term) -> Term) -> ((Term : prop -> (i : Type0 -> nat) -> (univs_Type2 -> Type0) -> (univs_Type2 -> nat) -> Term) -> Term) -> (forall (_1 : prop -> (i : Type0 -> nat) -> (univs_Type2 -> Type0) -> (univs_Type2 -> nat) -> bijn) -> (Term : prop -> (i : Type0 -> nat) -> (univs_Type2 -> Type0) -> (univs_Type2 -> nat) -> Term) -> Term) -> ((Term : prop -> (i : Type0 -> nat) -> (univs_Type2 -> Type0) -> (univs_Type2 -> nat) -> Term) -> Term) -> ((Term : prop -> (i : Type0 -> nat) -> (univs_Type2 -> Type0) -> (univs_Type2 -> nat) -> Term) -> Term) -> (forall (_1 : prop -> (i : Type0 -> nat) -> (univs_Type2 -> Type0) -> (univs_Type2 -> nat) -> bijn) -> (Term : prop -> (i : Type0 -> nat) -> (univs_Type2 -> Type0) -> (univs_Type2 -> nat) -> Term) -> Term) -> (forall (_1 : prop -> (i : Type0 -> nat) -> (univs_Type2 -> Type0) -> (univs_Type2 -> nat) -> bijn) -> (Term : prop -> ("}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAll_below. Let $_l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $matita_arithmetics_nat.nat$. Then for all elements $_n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Univ$ holds for $cic.prop$.\nassistant\n", "label": "postulate all_below : (_l : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) -> (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop", "predict": "postulate All_below : (l : Term univs.Type0) -> (matita_basics_lists_list.list (matita_arithmetics_nat.nat) l) -> (n : Term univs.Type0) -> (m : matita_arithmetics_nat.nat) -> Univ (prop n m)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSig_rect_CProp1_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $Q_$ des éléments $_x_686$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_Sig$ des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $_f$ appliqué à $pi1$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $A$ et $_f$ et $pi1$ et $_pi2$, pour tous les éléments $x_686$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_686$.\nassistant\n", "label": "Sig_rect_CProp1_body : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> Q_ : (_x_686 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) -> cic.Univ cic.prop) -> _H_mk_Sig : (pi1 : cic.Term univs.Type0 A -> _pi2 : cic.Term cic.prop (_f pi1) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> x_686 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) -> cic.Term cic.prop (Q_ x_686) .", "predict": "Sig_rect_CProp1_body : univers A : universType0 -> (term -> A -> univers) -> (term -> prop -> univers -> prop -> prop) -> (term -> Sig A f -> prop -> prop) -> (term -> A -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f -> term -> prop -> prop) -> (term -> Sig A f"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAnd_ind_body. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $Q_$ des éléments $_x_118$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_conj$ des éléments $x_120$ de $cic.Term$ de $cic.prop$ et de $_A$ et des éléments $x_119$ de $cic.Term$ de $cic.prop$ et de $_B$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_logic.conj$ appliqué à $_A$ et $_B$ et $x_120$ et $x_119$, pour tous les éléments $x_118$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_118$.\nassistant\n", "label": "Axiom And_ind_body : forall _A : cic.Univ cic.prop, forall _B : cic.Univ cic.prop, forall Q_ : ((_x_118 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ cic.prop), forall _H_conj : ((x_120 : cic.Term cic.prop _A) -> (x_119 : cic.Term cic.prop _B) -> cic.Term cic.prop (Q_ (matita_basics_logic.conj _A _B x_120 x_119))), forall x_118 : cic.Term cic.prop (matita_basics_logic.And _A _B), cic.Term cic.prop (Q_ x_118) .", "predict": "Axiom soient_A_B : Univ -> prop -> Prop. \nDefinition And_ind_body := fun (A B : Univ) (prop : A -> B -> prop) (Q : forall x : Term, And A B -> prop) (H_conj : forall x1 : Term, A -> B -> x1 -> x1) (x119 : Term) (x118 : Term) => prop x118 (And A B)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_pi. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $p$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $g1$ och $g2$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara en funktion från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $p$ applicerat på $i$ och $matita_basics_bool.true$ till element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $g1$ applicerat på $i$ och $g2$ applicerat på $i$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $p", "label": "postulate le_pi : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (g1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (g2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_arithmetics_nat.le (g1 i) (g2 i))) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> g1 i)) (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> g2 i)))", "predict": "(i)$, $i$ som $matita_arithmetics_nat.add$ applicerat på $i$ och $n$, och $i$ som $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ till element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $g1$ applicerat på $i$ och $g2$ applicerat på $i$ fastigheten.\n\nOutput: \npostulate Le_pi : \n  {n : cic.Term univs.Type0 (matita_arithmetics_nat.nat)} \n  (p : {__ : cic.Term univs.Type0 (matita_arithmetics_nat.nat)} -> cic.Term univs.Type0 (matita_basics_bool.bool)) \n  (g1 g2 : {__ : cic.Term univs.Type0 (matita_arithmetics_nat.nat)} -> cic.Term univs.Type0 (matita_arithmetics_nat.nat)) \n  (i : cic.Term univs.Type0 (matita_arithmetics_nat.nat)) \n  (eqn : cic.Term (cic.prop, matita_arithmetics_nat.lt) i n) \n  (eqn1 : cic.Term (cic.prop, matita_basics_logic.eq) (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) p i matita_basics_bool.true) \n  -> \n  cic.Term (cic.prop, matita_arithmetics_nat.le) (matita_arithmetics_bigops.bigop n) \n  (fun i -> p i, matita_arithmetics_nat.add i n, cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool i) \n  (g1 i, g2 i) \n  eqn eqn1."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_inv_rect_Type4. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be an element of $cic.Term$ of $univs.Type0$ and $x1$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $x1$ and $x2$. Then for all functions $P$ from elements $_z1704$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type4$, for all functions $_H1$ from elements $sum$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ and functions $prod$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $prod$ applied to $a$ and $x2$ and $x2$ and functions $_distr$ from elements $a$ of $cic.Term$ of", "label": "Dop_inv_rect_Type4 : x1 : cic.Univ univs.Type0 -> x2 : cic.Term univs.Type0 x1 -> Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2) -> P : (_z1704 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2) -> cic.Univ univs.Type4) -> _H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2) -> prod : (__ : cic.Term univs.Type0 x1 -> __1 : cic.Term univs.Type0 x1 -> cic.Term univs.Type0 x1) -> _null : (a : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> _distr : (a : cic.Term univs.Type0 x1 -> b : cic.Term univs.Type0 x1 -> c : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> _z1705 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr)) -> cic.Term univs.Type4 (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term univs.Type4 (P Hterm) .", "predict": " $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$, $P$ applied to $Hterm$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $prod$ applied to $x2$ and $x2$ and $"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDivides_plus. För alla element $n$ och $p$ och $q$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $p$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $q$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $matita_arithmetics_nat.plus$ applicerat på $p$ och $q$.\nassistant\n", "label": "axiom divides_plus (n p q : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_primes.divides n p)) (__1 : cic.Term cic.prop (matita_arithmetics_primes.divides n q)) : cic.Term cic.prop (matita_arithmetics_primes.divides n (matita_arithmetics_nat.plus p q))", "predict": "postulate Divides_plus : forall (n p q : cic.Term univs.Type0) (matita_arithmetics_nat:nat) (divides_n_p : cic.Term cic.prop matita_arithmetics_primes.divides n p) (divides_n_q : cic.Term cic.prop matita_arithmetics_primes.divides n q), divides_n_matita_arithmetics_nat_plus p q."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLstar_ind_r_aux. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $R$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $B$. Let $b1$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $P$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation2$ applied to $matita_arithmetics_nat.nat$ and $B$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.O$ and $b1$. Let $__1$ be a function from elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $b2$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $l$ and $b1$ and $b$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $R$ applied to $b$ and $b2$ and elements $__3$ of $cic.Term$ of $cic.prop$ and $P$ applied to $l$ and $b$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.plus$ applied to $l$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $b2$. Let $l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $b$ and $b2$ be elements of $cic.Term$ of $univs.Type0$ and $B$. Then for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$", "label": "Axiom lstar_ind_r_aux : forall B : cic.Univ univs.Type0, forall R : cic.Term univs.Type0 (matita_basics_relations.relation B), forall b1 : cic.Term univs.Type0 B, forall P : cic.Term univs.Type0 (matita_basics_relations.relation2 matita_arithmetics_nat.nat B), forall __ : cic.Term cic.prop (P matita_arithmetics_nat.O b1), forall __1 : ((l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 B) -> (b2 : cic.Term univs.Type0 B) -> (__1 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b)) -> (__2 : cic.Term cic.prop (R b b2)) -> (__3 : cic.Term cic.prop (P l b)) -> cic.Term cic.prop (P (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b2)), forall l : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 B, forall b2 : cic.Term univs.Type0 B, forall __2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b b2), forall __3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) b b1), cic.Term cic.prop (P l b2) .", "predict": " applied to $B$ and $R$ and $l$ and $b1$ and $b$ and elements $__3$ of $cic.Term$ of $cic.prop$ and $P$ applied to $l$ and $b$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.plus$ applied to $l$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $b2$, there exists an element of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.plus$ applied to $l$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $b2$ and elements of $cic.Term$ of $cic.prop$ and $P$ applied to $l$ and $b$ such that $($__2$ and $($__3$ implies $($__4$ and $($__5$ and $($__6$ implies $($__7$ and $($__8$ and $($__9$ and $($__10$ implies $($__11$ and $($__12$ and $($__13$ and $($__14$ implies $($__15$ and $($__16$ and $($__17$ and $($__18$ and $($__19$ and $($__20$ and $($__21$ and $($__22$ and $($__23$ and $($__24$ and $($__25$ and $($__26$ and $($__27$ and $($__28$ and $($__29$ and $($__30$ and $($__31$ and $($__32$ and $($__33$ and $($__34$ and $($__35$ and $($__36$ and $($__37$ and $($__38$ and $($__39$ and $($__40$ and $($__41$ and $($__42$ and $($__43$ and $($__44$ and $($__45$ and $($__46$ and $($__47$ and $($__48$ and $($__49$ and $($__50$ and $($__51$ and $($__52$ and $($__53$ and $($__54$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_rect_CProp5_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $_x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $Q_$ une fonction des éléments $x_25$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $_x_26$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_25$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_refl$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$. Soit $x_25$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $x_26$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_25$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_25$ et $x_26$.\nassistant\n", "label": "Axiom eq_rect_CProp5_body : forall A : cic.Univ univs.Type2, forall _x : cic.Term univs.Type2 A, forall Q_ : ((x_25 : cic.Term univs.Type2 A) -> (_x_26 : cic.Term cic.prop (matita_basics_logic.eq A _x x_25)) -> cic.Univ cic.prop), forall _H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x)), forall x_25 : cic.Term univs.Type2 A, forall x_26 : cic.Term cic.prop (matita_basics_logic.eq A _x x_25), cic.Term cic.prop (Q_ x_25 x_26) .", "predict": "Axiom Eq_rect_CProp5_body : forall (A : Univ), Term A -> A -> (forall x25 : Term A, Prop -> eq A x x25 -> Prop) -> (forall x25 : Term A, eq A x x25 -> Prop) -> Prop."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDiv_mod_spec_rect_Type2_body. Soient $_n$ et $_m$ et $_q$ et $_r$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $Q_$ une fonction des éléments $_x_825$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $_n$ et $_m$ et $_q$ et $_r$ à des éléments de $cic.Univ$ de $univs.Type2$. Alors pour toutes les fonctions $_H_div_mod_spec_intro$ des éléments $x_827$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $_r$ et $_m$ et des éléments $x_826$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $_n$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $_q$ et $_m$ et $_r$ à des éléments de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_arithmetics_div_and_mod.div_mod_spec_intro$ appliqué à $_n$ et $_m$ et $_q$ et $_r$ et $x_827$ et $x_826$, pour tous les éléments $x_825$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $_n$ et $_m$ et $_q$ et $_r$, $cic.Term$ tient pour $univs.Type2$ et $Q_$ appliqué à $x_825$.\nassistant\n", "label": "div_mod_spec_rect_Type2_body : _n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _q : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _r : cic.Term univs.Type0 matita_arithmetics_nat.nat -> Q_ : (_x_825 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r) -> cic.Univ univs.Type2) -> _H_div_mod_spec_intro : (x_827 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m) -> x_826 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r)) -> cic.Term univs.Type2 (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_827 x_826))) -> x_825 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r) -> cic.Term univs.Type2 (Q_ x_825) .", "predict": "Output: Axiom Div_mod_spec_rect_Type2_body : forall (n : Term univs.Type0) (m : Term univs.Type0) (q : Term univs.Type0) (r : Term univs.Type0) (Q : (forall (x825 : Term univs.Type2), Prop) -> div_mod_spec n m q r -> (forall (x827 : Term univs.Type2), Prop) -> (forall (x826 : Term univs.Type2), Prop) -> (forall (x825 : Term univs.Type2), Prop) -> Q (div_mod_spec_intro n m q r x827 x826) -> (forall (x825 : Term univs.Type2), div_mod_spec n m q r -> Q x825)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd_inv_ind. Låt $x1$ och $x2$ vara element av $cic.Univ$ av $univs.Type0$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $x1$ och $x2$. Då för alla funktioner $P$ från element $_z1236$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $_fst$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_snd$ av $cic.Term$ av $univs.Type0$ och $x2$ och element $_z1237$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_Prod$ applicerat på $x1$ och $x2$ och $_fst$ och $_snd$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $x1$ och $x2$ och $_fst$ och $_snd$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "Axiom Prod_inv_ind : forall x1 : cic.Univ univs.Type0, forall x2 : cic.Univ univs.Type0, forall Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2), forall P : ((_z1236 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2)) -> cic.Univ cic.prop), forall _H1 : ((_fst : cic.Term univs.Type0 x1) -> (_snd : cic.Term univs.Type0 x2) -> (_z1237 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod x1 x2)) Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term cic.prop (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))), cic.Term cic.prop (P Hterm) .", "predict": "Axiom Prod_inv_ind : forall (univs : Type) (x1 x2 : univs.Univ) (Hterm : univs.Term) (Prod : x1 -> x2 -> cic.Term) (P : forall (z1236 : univs.Term) (pair : Prod x1 x2), univs.Univ -> cic.prop), (forall (fst : univs.Term) (snd : univs.Term) (z1237 : cic.Term) (eq : matita_basics_logic.eq (univs.Type0) (univs.Type2) (Prod x1 x2) (matita_basics_types.mk_Prod x1 x2 (fst snd))) (H1 : univs.Term) (H2 : cic.prop), P (matita_basics_types.mk_Prod x1 x2 (fst snd)) (cic.lift (univs.Type0) (univs.Type2) Prod Hterm H1 H2) -> P Hterm (H1 z1237 eq H2))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTrue_rect_Type3. Pour toutes les fonctions $Q_$ des éléments $_x_46$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$ à des éléments de $cic.Univ$ de $univs.Type3$, pour tous les éléments $_H_I$ de $cic.Term$ de $univs.Type3$ et de $Q_$ appliqué à $matita_basics_logic.I$, pour tous les éléments $x_46$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$, $cic.Term$ tient pour $univs.Type3$ et $Q_$ appliqué à $x_46$.\nassistant\n", "label": "Axiom True_rect_Type3 : forall Q_ : ((_x_46 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ univs.Type3), forall _H_I : cic.Term univs.Type3 (Q_ matita_basics_logic.I), forall x_46 : cic.Term cic.prop matita_basics_logic.True, cic.Term univs.Type3 (Q_ x_46) .", "predict": "Axiom True_rect_Type3 : forall (Q_ : cic.Term cic.Univ cic.prop matita_basics_logic.True) (H_I : cic.Term univs.Type3 Q_ (matita_basics_logic.I)) (x_46 : cic.Term cic.prop matita_basics_logic.True), (cic.Term univs.Type3) Q_ x_46."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTimes_div_le. Soient $a$ et $b$ et $c$ et $d$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $b$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $d$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_div_and_mod.div$ appliqué à $a$ et $b$ et $matita_arithmetics_div_and_mod.div$ appliqué à $c$ et $d$ et $matita_arithmetics_div_and_mod.div$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $c$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $d$.\nassistant\n", "label": "postulate times_div_le : (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O b)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O d)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div a b) (matita_arithmetics_div_and_mod.div c d)) (matita_arithmetics_div_and_mod.div (matita_arithmetics_nat.times a c) (matita_arithmetics_nat.times b d)))", "predict": "postulate times_div_le : forall (a b c d : matita_arithmetics_nat.nat), \n   (forall (e : cic.Term cic.prop) (f : matita_arithmetics_nat.lt matita_arithmetics_nat.O b) (g : cic.Term cic.prop) (h : matita_arithmetics_nat.lt matita_arithmetics_nat.O d), \n   (cic.Term) (cic.prop) (matita_arithmetics_nat.le (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div a b) (matita_arithmetics_div_and_mod.div c d)) (matita_arithmetics_nat.times a c) (matita_arithmetics_nat.times b d))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_ind_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all functions $Q_$ from elements $_x_861$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied", "label": "Axiom Aop_ind_body : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_861 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop), forall _H_mk_Aop : ((op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))), forall x_861 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil), cic.Term cic.prop (Q_ x_861) .", "predict": " to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and elements of $cic.Univ$ of $cic.prop$, the proposition $Q_$ holds. \n\nOutput: \nAxiom Aop_ind_body : forall (A : cic.Univ) (univs.Type0) (Q_ : forall (_nil : cic.Term) (univs.Type0) (A : Aop A) (Q_mk_Aop : forall (op : matita_arithmetics_bigops.Aop) (A : A) (B : A) -> cic.Term (univs.Type0) A) (Q_nill : forall (a : cic.Term) (univs.Type0) (A : A) -> cic.Term (cic.prop) (univs.Type0)) (Q_eq : forall (A : A) (op : matita_arithmetics_bigops.Aop) (a : cic.Term) (univs.Type0) (A : A) -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a a) (op a _nil a)) (Q_assoc : forall (a : cic.Term) (univs.Type0) (A : A) (b : cic.Term) (univs.Type0) (A : A) (c : cic.Term) (univs.Type0) (A : A) -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op (op a b) c) (op a (op b c))) -> Q_ A (Aop A) (Q_mk_Aop op A (Aop A)) (Q_nill a A) (Q_eq A op a A) (Q_assoc a A b A c A) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_rect_Type4. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_917$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type4$. Soit $_H_mk_range$ une fonction des fonctions $_enum$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_upto$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_filter$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_range$ appliqué à $_A$ et $_enum$ et $_upto$ et $_filter$. Soit $x_917$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$. Alors $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_917$.\nassistant\n", "label": "Axiom range_rect_Type4 : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_917 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type4), forall _H_mk_range : ((_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))), forall x_917 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A), cic.Term univs.Type4 (Q_ x_917) .", "predict": "Axiom Range_rect_Type4 : forall (A : Univ), (forall (x : Term) (R : range A), (forall (x' : Univ) (upto : Term) (filter : (forall (x'' : Term) (n : nat), Term) -> bool) -> (forall (x''' : Term) (n : nat), Term) -> Q_ x R x' upto filter x''' n) -> Term) -> (forall (x : Term) (R : range A), Q_ x R A (enum R) (upto R) (filter R x))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_rect_CProp4. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Let $_x$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $Q_$ be a function from elements $x_22$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $_x_23$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_22$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_refl$ be an element of $cic.Term$ of $cic.prop$ and $Q_$ applied to $_x$ and $matita_basics_logic.refl$ applied to $A$ and $_x$. Let $x_22$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Then for all elements $x_23$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_22$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_22$ and $x_23$.\nassistant\n", "label": "eq_rect_CProp4 : A : cic.Univ univs.Type2 -> _x : cic.Term univs.Type2 A -> Q_ : (x_22 : cic.Term univs.Type2 A -> _x_23 : cic.Term cic.prop (matita_basics_logic.eq A _x x_22) -> cic.Univ cic.prop) -> _H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x)) -> x_22 : cic.Term univs.Type2 A -> x_23 : cic.Term cic.prop (matita_basics_logic.eq A _x x_22) -> cic.Term cic.prop (Q_ x_22 x_23) .", "predict": "Eq_rect_CProp4 : \n  ∀ (A : univers.univ univers.Type2) (_x : term.univ univers.Type2 A) (Q_ : ∀ (x_22 : term.univ univers.Type2 A) (x_23 : prop.term A _x) (e : prop.eq A _x x_22), univers.univ prop → univers.univ prop) (_H_refl : prop.term A _x prop.eq.refl A _x) (x_22 : term.univ univers.Type2 A), \n  (∀ (x_23 : prop.term A _x) (e : prop.eq A _x x_22), univers.term prop (Q_ x_22 x_23 e))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_rect_CProp3. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_907$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_ACop$ vara en funktion från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$. Då för alla element $x_907$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_907$.\nassistant\n", "label": "axiom ACop_rect_CProp3 (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_907 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop) (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) (x_907 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) : cic.Term cic.prop (Q_ x_907)", "predict": "Output: \naxiom acop_rect_cprop3 : \n  forall (univ : univs.type0) (term : univs.type0 * univ) (q : (forall (term : univs.type0) (acop : matita_arithmetics_bigops.acop) -> univ) term) (hmk_acop : forall (aop : univs.type0) (comm : (forall (a : univs.type0) (b : univs.type0) -> univ) a b) -> (forall (a : univs.type0) (b : univs.type0) -> univ) a b (matita_basics_logic.eq (cic.lift univs.type0 univs.type2 univ (matita_arithmetics_bigops.op univ univs.nil aop) (matita_arithmetics_bigops.op univ univs.nil aop))) (q (matita_arithmetics_bigops.mk_acop univ aop comm)) (q (matita_arithmetics_bigops.mk_acop univ aop comm))) -> (forall (x : univs.type0) (acop : matita_arithmetics_bigops.acop) -> univ) (univ, term) q."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMk_Aop. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $op$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$. Let $_nill$ be a function from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $nil$ and $a$ and $a$. Let $_nilr$ be a function from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $nil$ and $a$. Then for all functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$, $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $nil$.\nassistant\n", "label": "mk_Aop : A : cic.Univ univs.Type0 -> nil : cic.Term univs.Type0 A -> op : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _nill : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op nil a) a)) -> _nilr : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a nil) a)) -> _assoc : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A nil) .", "predict": "Output: Axiom Mk_Aop : \n  forall (A : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 A) (op : (__) -> (__) -> cic.Term univs.Type0 A) (_nill : (a : cic.Term univs.Type0 A) -> cic.Term univs.Type0 (cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op nil a a)))) (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term univs.Type0 (cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a nil a)))) (_assoc : (a : cic.Term univs.Type0 A) (b : cic.Term univs.Type0 A) (c : cic.Term univs.Type0 A) -> cic.Term (cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c) (op (op a b) c))))) -> cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A nil)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_lstar. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_R$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $B$. Då för alla element $return_sort$ av $cic.Sort$, för alla funktioner $return_type$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__2$ av $cic.Term$ av $univs.Type0$ och $B$ och element $z$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $_R$ och $__$ och $__1$ och $__2$ till element av $cic.Univ$ av $return_sort$, för alla funktioner $case_lstar_O$ från element $b$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $matita_arithmetics_nat.O$ och $b$ och $b$ och $matita_arithmetics_lstar.lstar_O$ applicerat på $B$ och $_R$ och $b$, för alla funktioner $case_lstar_S$ från element $b1$ av $cic.Term$ av $univs.Type0$ och $B$ och element $b$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__$ av $cic.Term$ av $cic.prop$ och $_R$ applicerat på $b1$ och $b$ och element $l$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics", "label": "Axiom match_lstar : forall B : cic.Univ univs.Type0, forall _R : cic.Term univs.Type0 (matita_basics_relations.relation B), forall return_sort : cic.Sort, forall return_type : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 B) -> (__2 : cic.Term univs.Type0 B) -> (z : cic.Term cic.prop (matita_arithmetics_lstar.lstar B _R __ __1 __2)) -> cic.Univ return_sort), forall case_lstar_O : ((b : cic.Term univs.Type0 B) -> cic.Term return_sort (return_type matita_arithmetics_nat.O b b (matita_arithmetics_lstar.lstar_O B _R b))), forall case_lstar_S : ((b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (_R b1 b)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b2 : cic.Term univs.Type0 B) -> (__1 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B _R l b b2)) -> cic.Term return_sort (return_type (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2 (matita_arithmetics_lstar.lstar_S B _R b1 b __ l b2 __1))), forall __ : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __1 : cic.Term univs.Type0 B, forall __2 : cic.Term univs.Type0 B, forall z : cic.Term cic.prop (matita_arithmetics_lstar.lstar B _R __ __1 __2), cic.Term return_sort (return_type __ __1 __2 z) .", "predict": "_lstar.lstar_S$ applicerat på $B$ och $_R$ och $b1$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $matita_arithmetics_nat.S$ och $l$ och $l$ och $matita_arithmetics_lstar.lstar_S$ applicerat på $B$ och $_R$ och $l$ och $l$.\n\nOutput: \nAxiom Match_lstar : \n  forall (univs : Type) (B : cic.Univ univs) (R : cic.Term univs) (return_sort : cic.Sort) (return_type : forall (x : cic.Term univs), nat -> nat -> x -> x -> prop -> lstar B R x x -> cic.Term return_sort) (z : cic.Term univs) (lstar_B_R_x_x : forall (x1 : cic.Term univs) (x2 : cic.Term univs), B -> relation R x1 x2 -> nat -> nat -> x1 -> x2 -> prop -> lstar B R x1 x2 -> cic.Term univs), \n  forall (case_lstar_O : forall (b : cic.Term univs) (B : cic.Univ univs), b -> cic.Term return_sort) (case_lstar_S : forall (b1 : cic.Term univs) (b : cic.Term univs) (x : cic.Term univs) (R : cic.Term univs) (l : cic.Term univs), relation R b1 b -> nat -> nat -> x -> x -> prop -> lstar B R b1 b -> cic.Term return_sort), \n  forall (B : cic.Univ univs) (R : cic.Term univs) (return_sort : cic.Sort) (return_type : forall (x : cic.Term univs), nat -> nat -> x -> x -> prop -> lstar B R x x -> cic.Term return_sort) (z : cic.Term univs) (lstar_B_R_x_x : forall (x1 : cic.Term univs) (x2 : cic.Term univs), B -> relation R x1 x2 -> nat -> nat -> x1 -> x2 -> prop -> lstar B R x1 x2 -> cic.Term univs), \n  forall (case"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_rect_CProp5_body. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $_nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour toutes les fonctions $Q_$ des éléments $_x_959$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_Dop$ des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $_nil$ et $_nil$ et des fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $", "label": "Dop_rect_CProp5_body : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_959 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil) -> cic.Univ cic.prop) -> _H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> prod : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _null : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> _distr : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> x_959 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil) -> cic.Term cic.prop (Q_ x_959) .", "predict": "prod$ appliqué à $a$ et $b$ et $c$ et des fonctions $_distr'$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et $c$ et des fonctions $_null'$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $a$ et des fonctions $_plus$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et des fonctions $_times$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd_rect_Type1. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_700$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type1$. Soit $_H_mk_Prod$ une fonction des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $_A$ et $_B$ et $_fst$ et $_snd$. Soit $x_700$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$. Alors $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_700$.\nassistant\n", "label": "axiom Prod_rect_Type1 (_A _B : cic.Univ univs.Type0) (Q_ : (_x_700 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ univs.Type1) (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term univs.Type1 (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) (x_700 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) : cic.Term univs.Type1 (Q_ x_700)", "predict": "Output: Axiom Prod_rect_Type1 : \n    forall (A : cic.Univ -> univs.Type0), \n    forall (B : cic.Univ -> univs.Type0), \n    forall (Q_ : forall (x_700 : cic.Term -> univs.Type0) -> Prod A B (cic.Univ -> univs.Type1) -> univs.Type1), \n    forall (H_mk_Prod : forall (fst : cic.Term -> univs.Type0) -> A -> forall (snd : cic.Term -> univs.Type0) -> B -> cic.Term -> univs.Type1 -> Q_ (mk_Prod A B fst snd)), \n    forall (x_700 : cic.Term -> univs.Type0 -> Prod A B (cic.Univ -> univs.Type1)), \n    cic.Term -> univs.Type1 -> Q_ x_700."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTransitive_divides. $cic.Term$ håller för $cic.prop$ och $matita_basics_relations.transitive$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_primes.divides$.\nassistant\n", "label": "axiom transitive_divides : cic.Term cic.prop (matita_basics_relations.transitive matita_arithmetics_nat.nat matita_arithmetics_primes.divides)", "predict": "postulate Transitive_divides : $cic.Term$ -> $cic.prop$ -> $matita_basics_relations.transitive$ -> $matita_arithmetics_nat.nat$ -> $matita_arithmetics_primes.divides$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMonotonic_le_times_r. Pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_relations.monotonic$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.le$ et la fonction qui envoie $m$ à $matita_arithmetics_nat.times$ appliqué à $n$ et $m$.\nassistant\n", "label": "axiom monotonic_le_times_r (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_relations.monotonic matita_arithmetics_nat.nat matita_arithmetics_nat.le (λ m => matita_arithmetics_nat.times n m))", "predict": "Axiom Monotonic_le_times_r : forall (n : matita_arithmetics_nat.nat), monotonic (matita_basics_relations.monotonic (matita_arithmetics_nat.nat, matita_arithmetics_nat.le (fun m => matita_arithmetics_nat.times n m)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLstar_r_inv_lstar. Pour tous les éléments $B$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $R$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation$ appliqué à $B$, pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $b1$ et $b2$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar_r$ appliqué à $B$ et $R$ et $l$ et $b1$ et $b2$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $R$ et $l$ et $b1$ et $b2$.\nassistant\n", "label": "lstar_r_inv_lstar : B : cic.Univ univs.Type0 -> R : cic.Term univs.Type0 (matita_basics_relations.relation B) -> l : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b1 : cic.Term univs.Type0 B -> b2 : cic.Term univs.Type0 B -> __ : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B R l b1 b2) -> cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b2) .", "predict": "Output: \n∀ B : univs.Type0 × cic.Univ, ∀ R : relation B, ∀ l : nat × cic.Term, ∀ b1, b2 : cic.Term × B, ∀ __ : lstar_r B R l b1 b2, cic.Term lstar B R l b1 b2."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nPermut_transpose. Pour tous les éléments $i$ et $j$ et $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $i$ et $n$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $j$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_permutation.permut$ appliqué à $matita_arithmetics_permutation.transpose$ appliqué à $i$ et $j$ et $n$.\nassistant\n", "label": "axiom permut_transpose (i j n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.le i n)) (__1 : cic.Term cic.prop (matita_arithmetics_nat.le j n)) : cic.Term cic.prop (matita_arithmetics_permutation.permut (matita_arithmetics_permutation.transpose i j) n)", "predict": "Output: \nAxiom Permut_transpose : \nforall (i j n : cic.Term univs.Type0) (i_le n : matita_arithmetics_nat.le i n) (j_le n : matita_arithmetics_nat.le j n), \nforall (c : cic.prop) (le_i n : matita_arithmetics_nat.le i n) (c_le_j n : matita_arithmetics_nat.le j n), \ncic.Term (cic.prop) (matita_arithmetics_permutation.permut (matita_arithmetics_permutation.transpose i j n) c (le_i n) (c_le_j n))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nR3. Soit $T0$ un élément de $cic.Univ$ de $univs.Type0$. Soit $a0$ un élément de $cic.Term$ de $univs.Type0$ et de $T0$. Soit $T1$ une fonction des éléments $x0$ de $cic.Term$ de $univs.Type0$ et de $T0$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $x0$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $a1$ un élément de $cic.Term$ de $univs.Type0$ et de $T1$ appliqué à $a0$ et $matita_basics_logic.refl$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$. Soit $T2$ une fonction des éléments $x0$ de $cic.Term$ de $univs.Type0$ et de $T0$ et des éléments $p0$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $x0$ et des éléments $x1$ de $cic.Term$ de $univs.Type0$ et de $T1$ appliqué à $x0$ et $p0$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T1$ appliqué à $x0$ et $p0$ et $matita_basics_logic.R1$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T0$ et $a0$ et $T1$ et $a1$ et $x0$ et $p0$ et $x1", "label": "axiom R3 (T0 : cic.Univ univs.Type0) (a0 : cic.Term univs.Type0 T0) (T1 : (x0 : cic.Term univs.Type0 T0) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> cic.Univ univs.Type0) (a1 : cic.Term univs.Type0 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0))) (T2 : (x0 : cic.Term univs.Type0 T0) -> (p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0)) -> (x1 : cic.Term univs.Type0 (T1 x0 p0)) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T1 x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 T0) a0 T1 a1 x0 p0) x1)) -> cic.Univ univs.Type0) (a2 : cic.Term univs.Type0 (T2 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T", "predict": "$ et des éléments $x2$ de $cic.Term$ de $univs.Type0$ et de $T1$ appliqué à $x0$ et $p0$ et $x1$ et des éléments $q0$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T1$ appliqué à $x0$ et $p0$ et $x1$ et $x2$ et des éléments $x3$ de $cic.Term$ de $univs.Type0$ et de $T1$ appliqué à $x0$ et $p0$ et $x1$ et $x2$ et des éléments $p1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T1$ appliqué à $x0$ et $p0$ et $x1$ et $x2$ et $x3$ et des éléments $x4$ de $cic.Term$ de $univs.Type0$ et de $T1$ appliqué à $x0$ et $p0$ et $x1$ et $x2$ et $x3$ et des éléments $q1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $T1$ appliqué à $x0$ et $p0$ et $x1$ et $x2$ et $x3$ et $x4$ et des éléments $x5$ de $cic.Term$ de $univs.Type0$ et de $T1$ appliqué à $x0$ et $p0$ et $x1$ et $x2$ et $x3$ et $x4$ et des éléments $p2$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_rect_CProp0_body. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_634$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $_H_None$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$, för alla funktioner $_H_Some$ från element $x_635$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_635$, för alla element $x_634$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_634$.\nassistant\n", "label": "option_rect_CProp0_body : _A : cic.Univ univs.Type0 -> Q_ : (_x_634 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Univ cic.prop) -> _H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A)) -> _H_Some : (x_635 : cic.Term univs.Type0 _A -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_635))) -> x_634 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Term cic.prop (Q_ x_634) .", "predict": "Output: Axiom option_rect_CProp0_body : forall (A : univers) (univs : Type0) (cic : Prop0) (Q : (x : Term) -> option A -> univers) (H_None : Term) (Q_None : Q None A) (H_Some : (x : Term) -> A -> Term) (Q_Some : (x : Term) -> option A -> univers) (x : Term) -> prop."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAll_nth. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $P$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.All$ appliqué à $A$ et $P$ et $l$, pour tous les éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.option$ appliqué à $A$ et $matita_basics_lists_list.nth_opt$ appliqué à $A$ et $n$ et $l$ et $matita_basics_types.Some$ appliqué à $A$ et $a$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $a$.\nassistant\n", "label": "Axiom All_nth : forall A : cic.Univ univs.Type0, forall P : ((__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop), forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall l : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall __ : cic.Term cic.prop (matita_basics_lists_list.All A P l), forall a : cic.Term univs.Type0 A, forall __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option A)) (matita_basics_lists_list.nth_opt A n l) (matita_basics_types.Some A a)), cic.Term cic.prop (P a) .", "predict": "Axiom All_nth : forall A : Univ, (forall __ : Term, (forall A : Univ, Prop) -> n : Term -> nat -> (forall l : list A, (forall __ : Prop, All (A -> Prop) -> list (A -> Prop)) -> (forall a : Term, A -> Prop -> eq (lift (univs.Type0) (univs.Type2) (option A)) -> nth_opt (A -> Prop) n l (Some A a) -> Prop)) -> Prop) -> Prop."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1", "label": "Dop_discr : a1 : cic.Univ univs.Type0 -> a2 : cic.Term univs.Type0 a1 -> x : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop a1 a2) -> y : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop a1 a2) -> _e : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop a1 a2)) x y) -> cic.Term univs.Type2 (matita_arithmetics_bigops.match_Dop a1 a2 (cic.succ univs.Type2) (__ : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop a1 a2) => cic.univ univs.Type2) (t0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) => t1 : (__ : cic.Term univs.Type0 a1 -> __1 : cic.Term univs.Type0 a1 -> cic.Term univs.Type0 a1) => t2 : (a : cic.Term univs.Type0 a1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (t1 a a2) a2)) => t3 : (a : cic.Term univs.Type0 a1 -> b : cic.Term univs.Type0 a1 -> c : cic.Term univs.Type0 a1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (t1 a (matita_arithmetics_bigops.aop__o__op a1 a2 t0 b c)) (matita_arithmetics_bigops.aop__o__op a1 a2 t0 (t1 a b) (t1 a c)))) => matita_arithmetics_bigops.match_Dop a1 a2 (cic.succ univs.Type2) (__ : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop a1 a2) => cic.univ univs.Type2) (u0 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop a1 a2) => u1 : (__ : cic.Term univs.Type0 a1 -> __1 : cic.Term univs.Type0 a1 -> cic.Term univs.Type0 a1) => u2 : (a : cic.Term univs.Type0 a1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (u1 a a2) a2)) => u3 : (a : cic.Term univs.Type0 a1 -> b : cic.Term univs.Type0 a1 -> c : cic.Term univs.Type0 a1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (u1 a (matita_arithmetics_bigops.aop__o__op a1 a2 u0 b c)) (matita_arithmetics_bigops.aop__o__op a1 a2 u0 (u1 a b) (u1 a c)))) => cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (P : cic.Univ univs.Type1 => cic.prod univs.Type1 univs.Type1 (cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_bigops.ACop a1 a2) t0) u0) (e0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop a1 a2)) (matita_basics_logic.R0 (matita_arithmetics_big", "predict": "+1 = 2$.\nOutput: Prop70. Notation \"1+1 = 2\" is a theorem.\n\nExample2: \nInput: Translate the following Swedish statement into Dedukti. Prop71. För alla x, y och z, om x+y = z och z+y = x, då x = y.\nOutput: Prop71. ∀x y z: nat, (x + y = z ∧ z + y = x) → x = y.\n\nExample3:\nInput: Translate the following Swedish statement into Dedukti. Prop72. Existerar det ett heltal x så att x^2 = 4.\nOutput: Prop72. ∃x: nat, x^2 = 4.\n\nExample4:\nInput: Translate the following Swedish statement into Dedukti. Prop73. Det finns ett unikt heltal n så att n^2 = 1.\nOutput: Prop73. ∃!n: nat, n^2 = 1.\n\nExample5:\nInput: Translate the following Swedish statement into Dedukti. Prop74. Det finns en enda noll i mängden av heltal.\nOutput: Prop74. ∃!n: nat, n = 0.\nOutput:"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAll_append. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $P$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$. Låt $l1$ och $l2$ vara element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.All$ applicerat på $A$ och $P$ och $l1$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.All$ applicerat på $A$ och $P$ och $l2$, håller $cic.Term$ för $cic.prop$ och $matita_basics_lists_list.All$ applicerat på $A$ och $P$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l1$ och $l2$.\nassistant\n", "label": "Axiom All_append : forall A : cic.Univ univs.Type0, forall P : ((__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop), forall l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall __ : cic.Term cic.prop (matita_basics_lists_list.All A P l1), forall __1 : cic.Term cic.prop (matita_basics_lists_list.All A P l2), cic.Term cic.prop (matita_basics_lists_list.All A P (matita_basics_lists_list.append A l1 l2)) .", "predict": "Axiom All_append : forall (univs : Type0) (A : univs) (cic : Universe) (prop : Prop) (P : Term univs Type0 -> A -> Term cic Prop) (l1 l2 : list A) (cic_prop : Term cic Prop) (All : list (Term cic Prop) -> Prop), (forall l2 : list A, All (P l1 A l2)) -> forall l2 : list A, All (P (append A l1 l2) A l2)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFilter_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $_xxx$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $A$, för alla element $_x_941$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_bool.bool$.\nassistant\n", "label": "filter_body : A : cic.Univ univs.Type0 -> _xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.range A) -> _x_941 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool .", "predict": "Axiom filter_body : forall (A : univs.Type0), (cic.Term (cic.Univ)) -> forall (_xxx : cic.Term (cic.Univ)), (matita_arithmetics_bigops.range A) -> forall (_x_941 : cic.Term (cic.Univ)), (matita_arithmetics_nat.nat) -> (cic.Term (univs.Type0)) -> (matita_basics_bool.bool)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nPair_elim2. Låt $A$ och $B$ och $C$ och $C'$ vara element av $cic.Univ$ av $univs.Type0$. Låt $T$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $C$. Låt $T'$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $C'$. Låt $p$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$. Då för alla funktioner $P$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $C$ och element $__2$ av $cic.Term$ av $univs.Type0$ och $C'$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $__$ från element $lft$ av $cic.Term$ av $univs.Type0$ och $A$ och element $rgt$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod", "label": "Axiom pair_elim2 : forall A : cic.Univ univs.Type0, forall B : cic.Univ univs.Type0, forall C : cic.Univ univs.Type0, forall C' : cic.Univ univs.Type0, forall T : ((__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 C), forall T' : ((__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 C'), forall p : cic.Term univs.Type0 (matita_basics_types.Prod A B), forall P : ((__ : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> (__1 : cic.Term univs.Type0 C) -> (__2 : cic.Term univs.Type0 C') -> cic.Univ cic.prop), forall __ : ((lft : cic.Term univs.Type0 A) -> (rgt : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B)) p (matita_basics_types.mk_Prod A B lft rgt))) -> cic.Term cic.prop (P (matita_basics_types.mk_Prod A B lft rgt) (T lft rgt) (T' lft rgt))), cic.Term cic.prop (P p (matita_basics_types.match_Prod A B univs.Type0 (fun _0 => C) (fun lft => fun rgt => T lft rgt) p) (matita_basics_types.match_Prod A B univs.Type0 (fun _0 => C') (fun lft => fun rgt => T' lft rgt) p)) .", "predict": "$ applicerat på $lft$ och $rgt$ till element av $cic.Univ$ av $cic.prop$, gäller att $P$ är en relation mellan $p$ och $p'$.\nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMin_exists. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soient $t$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $m$ et $t$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $m$ et $matita_basics_bool.true$. Soient $k$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $b$ et $m$, pour toutes les fonctions $__3$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__3$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $b$ et $i$ et des éléments $__4$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $m$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univ", "label": "Axiom min_exists : forall f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall t : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt m t), forall __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.true), forall k : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __2 : cic.Term cic.prop (matita_arithmetics_nat.le b m), forall __3 : ((i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.le b i)) -> (__4 : cic.Term cic.prop (matita_arithmetics_nat.lt i m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)), forall __4 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) t (matita_arithmetics_nat.plus k b)), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.min k b f) m) .", "predict": "s.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $i$ et $matita_basics_bool.true$, si $b \\leq m$ et $i \\leq t$, alors $k \\leq m$ et $b \\leq m$ impliquent $k \\leq t$ et $b \\leq t$. \nOutput: \nAxiom min_exists : forall (f : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool), \n  (t : cic.Term univs.Type0 matita_arithmetics_nat.nat), \n  (m : matita_arithmetics_nat.nat), \n  (p : cic.Term cic.prop matita_arithmetics_nat.lt m t), \n  (p1 : cic.Term cic.prop matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) f m matita_basics_bool.true), \n  (k : matita_arithmetics_nat.nat), \n  (b : matita_arithmetics_nat.nat), \n  (forall (q : cic.Term cic.prop matita_arithmetics_nat.le b m), \n    (forall (g : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop matita_arithmetics_nat.le b i -> cic.Term cic.prop matita_arithmetics_nat.lt i m), \n      (forall (q1 : cic.Term cic.prop matita_arithmetics_nat.lt i m), \n        (b <= m /\\ i <= t -> k <= m /\\ b <= m -> k <= t /\\ b <= t)) \n      i q q1)) -> \n    (k <= m /\\ b <= m -> k <= t /\\ b <= t)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_16003. Låt $m$ och $n$ och $a$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $posm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Låt $pnm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $c$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic", "label": "let_clause_16003 : m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) -> c : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (d : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arith", "predict": ".lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_basics_logic.not$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_basics_logic.NotEq$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ . \n\nOutput: \nLet_clause_16003 : univs.Type0 -> matita_arithmetics_nat.nat -> univs.Type0 -> matita_arithmetics_nat.nat -> matita_arithmetics_nat.lt -> matita_arithmetics_nat.lt -> matita_basics_logic.eq -> matita_basics_logic.eq -> matita_basics_logic.eq -> matita_arithmetics_nat.nat -> matita_basics_logic.ex -> matita_basics_logic.Or -> matita_basics_logic.eq -> matita_arithmetics_nat.minus -> matita_arithmetics_nat.times -> matita_basics_logic.not -> matita_basics_logic.NotEq -> univs.Type0 -> matita_arithmetics_nat.nat -> matita_arithmetics_nat.nat -> matita_basics_logic.eq -> matita_basics_logic.eq -> matita_basics_logic.eq -> matita_arithmetics_nat.lt -> matita_arithmetics_nat.lt -> matita_basics_logic.eq -> matita_basics_logic.eq -> matita_basics_logic.eq -> matita_basics_logic.eq -> matita_basics_logic.eq -> matita_basics_logic.eq -> matita_basics_logic.eq -> matita_basics_logic.eq -> matita_basics_logic.eq -> matita_basics_logic.eq -> matita_basics_logic.eq -> matita_basics_logic.eq -> matita_basics_logic.eq -> matita_basics_logic.eq -> matita_basics_logic.eq -> matita_basics_logic.eq -> mat"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_div_S_div. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_exp.exp$ applied to $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_div_and_mod.div$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $m$ and $matita_arithmetics_div_and_mod.div$ applied to $n$ and $m$.\nassistant\n", "label": "axiom lt_div_S_div (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) (__1 : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp m (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))) n)) : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_div_and_mod.div n (matita_arithmetics_nat.S m)) (matita_arithmetics_div_and_mod.div n m))", "predict": "Output: \nDefinition Lt_div_S_div : forall (n m : univs.Type0), matita_arithmetics_nat.lt matita_arithmetics_nat.O m -> forall (n1 n2 : cic.prop), matita_arithmetics_nat.le (matita_arithmetics_exp.exp m) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n -> cic.Term (cic.prop) (matita_arithmetics_nat.lt (matita_arithmetics_div_and_mod.div n (matita_arithmetics_nat.S m)) (matita_arithmetics_div_and_mod.div n m))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSym_not_eq. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Alors pour tous les éléments $x$ et $y$ de $cic.Term$ de $univs.Type2$ et de $A$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $matita_basics_logic.eq$ appliqué à $A$ et $x$ et $y$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.Not$ appliqué à $matita_basics_logic.eq$ appliqué à $A$ et $y$ et $x$.\nassistant\n", "label": "axiom sym_not_eq (A : cic.Univ univs.Type2) (x y : cic.Term univs.Type2 A) (__ : cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq A x y))) : cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq A y x))", "predict": "Axiom Sym_not_eq : forall (A : cic.Univ) (univs.Type2), forall (x y : cic.Term) (univs.Type2) (A), forall($__ : cic.Term) (cic.prop), forall(matita_basics_logic.Not (matita_basics_logic.eq A x y)), cic.Term (matita_basics_logic.Not (matita_basics_logic.eq A y x))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_rect_Type4. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Då för alla funktioner $Q_$ från element $_x_945$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type4$, för alla funktioner $_H_mk_Dop$ från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $_nil$ och $_nil$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type", "label": "Axiom Dop_rect_Type4 : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_945 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ univs.Type4), forall _H_mk_Dop : ((sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))), forall x_945 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil), cic.Term univs.Type4 (Q_ x_945) .", "predict": "2$ och $A$ och $prod$ applicerat på $a$ och $b$ och $c$ och $prod$ applicerat på $a$ och $prod$ applicerat på $b$ och $c$ och $_null$ applicerat på $a$ och $b$ och $c$ och $prod$ applicerat på $a$ och $b$ och $c$ och $prod$ applicerat på $b$ och $c$ och $prod$ applicerat på $a$ och $c$ och $_null$ applicerat på $a$ och $b$ och $c$ och $prod$ applicerat på $a$ och $c$ och $prod$ applicerat på $b$ och $c$ och $prod$ applicerat på $a$ och $prod$ applicerat på $b$ och $c$ och $_null$ applicerat på $a$ och $b$ och $c$ till element av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $b$ och $c$ och $prod$ applicerat på $b$ och $c$ och $prod$ applicerat på $a$ och $c$ och $prod$ applicerat på $a$ och $b$ och $c$ och $prod$ applicerat på $a$ och $prod$ applicerat på $b$ och $c$ och $prod$ applicerat på $b$ och $c$ och $prod$ applicerat på $a$ och $c$ och $prod$ applicerat på $a$ och $b$ och $c$ och $prod$ applicerat på $a$ och $b$ och $c$ och $prod$ applicerat på $a$ och $prod$ applicerat på $b$ och $c$ och $prod$ applicerat på $b$ och $c$ och $prod$ applicerat på $a$ och $c$ och $prod$ applicerat på $a$ och $b$ och $c$ till element av $cic.prop$ och $matita_b"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBool_rect_CProp1. Let $Q_$ be a function from elements $_x_359$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $cic.prop$. Then for all elements $_H_true$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_bool.true$, for all elements $_H_false$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_bool.false$, for all elements $x_359$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_359$.\nassistant\n", "label": "Axiom bool_rect_CProp1 : forall Q_ : ((_x_359 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop), forall _H_true : cic.Term cic.prop (Q_ matita_basics_bool.true), forall _H_false : cic.Term cic.prop (Q_ matita_basics_bool.false), forall x_359 : cic.Term univs.Type0 matita_basics_bool.bool, cic.Term cic.prop (Q_ x_359) .", "predict": "Bool_rect_CProp1 : forall (Q : forall (x_359 : Term univs.Type0) (b : bool), Univ), \nforall (H_true : Term prop) (Q_true : Q true), \nforall (H_false : Term prop) (Q_false : Q false), \nforall (x_359 : Term univs.Type0), \nTerm prop (Q x_359) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_ex2. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $_P$ and $_Q$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$, for all elements $return_sort$ of $cic.Sort$, for all functions $return_type$ from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex2$ applied to $A$ and $_P$ and $_Q$ to elements of $cic.Univ$ of $return_sort$, for all functions $case_ex2_intro$ from elements $x$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__$ of $cic.Term$ of $cic.prop$ and $_P$ applied to $x$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $_Q$ applied to $x$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_basics_logic.ex2_intro$ applied to $A$ and $_P$ and $_Q$ and $x$ and $__$ and $__1$, for all elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex2$ applied to $A$ and $_P$ and $_Q$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.\nassistant\n", "label": "postulate match_ex2 : (A : cic.Univ univs.Type0) -> (_P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (_Q : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term cic.prop (matita_basics_logic.ex2 A _P _Q)) -> cic.Univ return_sort) -> (case_ex2_intro : (x : cic.Term univs.Type0 A) -> (__ : cic.Term cic.prop (_P x)) -> (__1 : cic.Term cic.prop (_Q x)) -> cic.Term return_sort (return_type (matita_basics_logic.ex2_intro A _P _Q x __ __1))) -> (z : cic.Term cic.prop (matita_basics_logic.ex2 A _P _Q)) -> cic.Term return_sort (return_type z)", "predict": "postulate Match_ex2 : (A : Univ univs.Type0) -> (P Q : Term univs.Type0 -> Univ prop) -> (return_sort : Sort) -> (return_type : Term prop -> Univ return_sort) -> (case_ex2_intro : Term univs.Type0 -> A -> Term prop -> P -> Term prop -> Q -> Term return_sort -> return_type -> Term (ex2 A P Q)) -> (z : Term prop) -> (ex2 : Term univs.Type0 -> P -> Q) -> Term return_sort (return_type z)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_lstar. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_R$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation$ appliqué à $B$. Soit $return_sort$ un élément de $cic.Sort$. Soit $return_type$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__2$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $_R$ et $__$ et $__1$ et $__2$ à des éléments de $cic.Univ$ de $return_sort$. Soit $case_lstar_O$ une fonction des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $B$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_arithmetics_nat.O$ et $b$ et $b$ et $matita_arithmetics_lstar.lstar_O$ appliqué à $B$ et $_R$ et $b$. Soit $case_lstar_S$ une fonction des éléments $b1$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $B$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $_R$ appliqué à $b1$ et $b$ et des éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et", "label": "axiom match_lstar (B : cic.Univ univs.Type0) (_R : cic.Term univs.Type0 (matita_basics_relations.relation B)) (return_sort : cic.Sort) (return_type : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 B) -> (__2 : cic.Term univs.Type0 B) -> (z : cic.Term cic.prop (matita_arithmetics_lstar.lstar B _R __ __1 __2)) -> cic.Univ return_sort) (case_lstar_O : (b : cic.Term univs.Type0 B) -> cic.Term return_sort (return_type matita_arithmetics_nat.O b b (matita_arithmetics_lstar.lstar_O B _R b))) (case_lstar_S : (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (_R b1 b)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b2 : cic.Term univs.Type0 B) -> (__1 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B _R l b b2)) -> cic.Term return_sort (return_type (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2 (matita_arithmetics_lstar.lstar_S B _R b1 b __ l b2 __1))) (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__1 __2 : cic.Term univs.Type0 B) (z : cic.Term cic.prop (matita_arithmetics_lstar.lstar B _R __ __1 __2)) : cic.Term return_sort (return_type __ __1 __2 z)", "predict": " de $return_sort$ et de $return_type$ appliqué à $l$ et $b$ et $b$ et $l$ et $matita_arithmetics_lstar.lstar_S$ appliqué à $B$ et $_R$ et $b1$ et $b$ et $l$ à des éléments de $cic.Univ$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $l$ et $b$ et $b$ et $l$ et $matita_arithmetics_lstar.lstar_S$ appliqué à $B$ et $_R$ et $b1$ et $b$ et $l$. \n\nOutput: \nmatch_lstar : ∀ B : univs.Type0 → cic.Univ, ∀ _R : relation B, ∀ return_sort : cic.Sort, ∀ return_type : (___ : cic.Term univs.Type0) → nat → (___1 : cic.Term univs.Type0) → B → (___2 : cic.Term univs.Type0) → B → (z : cic.Term cic.prop) → lstar B _R ___ z → (b : cic.Term univs.Type0) → B → (case_lstar_O : return_sort → return_type matita_arithmetics_nat.O b b (lstar_O B _R b) : return_sort), ∀ b1 : cic.Term univs.Type0 → B, ∀ b : cic.Term univs.Type0 → B, ∀ ___ : cic.Term cic.prop → _R b1 b, ∀ l : cic.Term univs.Type0 → nat → return_sort → return_type l b b l (lstar_S B _R b1 b l) → return_sort → return_type l b b l (lstar_S B _R b1 b l) → return_sort."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFalse_rect_Type3. Låt $Q_$ vara en funktion från element $_x_69$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Univ$ av $univs.Type3$. Då för alla element $x_69$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$, håller $cic.Term$ för $univs.Type3$ och $Q_$ applicerat på $x_69$.\nassistant\n", "label": "False_rect_Type3 : Q_ : (_x_69 : cic.Term cic.prop matita_basics_logic.False -> cic.Univ univs.Type3) -> x_69 : cic.Term cic.prop matita_basics_logic.False -> cic.Term univs.Type3 (Q_ x_69) .", "predict": "False_rect_Type3 : ∀ (Q : ∀ (x_69 : Term prop False), Univ Type3), (∀ (x_69 : Term prop False), Term (univs Type3) (Q x_69))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_min. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soient $n$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $i$ à $matita_basics_logic.And$ appliqué à $matita_basics_logic.And$ appliqué à $matita_arithmetics_nat.le$ appliqué à $b$ et $i$ et $matita_arithmetics_nat.lt$ appliqué à $i$ et $matita_arithmetics_nat.plus$ appliqué à $n$ et $b$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $f$ appliqué à $i$ et $matita_basics_bool.true$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_minimization.min$ appliqué à $n$ et $b$ et $f$ et $matita_arithmetics_nat.plus$ appliqué à $n$ et $b$.\nassistant\n", "label": "postulate lt_min : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.And (matita_basics_logic.And (matita_arithmetics_nat.le b i) (matita_arithmetics_nat.lt i (matita_arithmetics_nat.plus n b))) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.true)))) -> cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_minimization.min n b f) (matita_arithmetics_nat.plus n b))", "predict": "postulate Lt_min : {A : Type} {B : A -> Type} {C : B a -> Type} {D : Type} {E : D -> Type} {F : A -> B a -> E (F a b)} -> (n b : A) -> (P : C (F n b)) -> (Q : D) -> (f : (i : B i) -> E (F i (F n b))) -> C (F n b) -> C (min (F n b) (F n (F n b)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_rect_Type5_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type2$. Låt $_x$ vara ett element av $cic.Term$ av $univs.Type2$ och $A$. Låt $Q_$ vara en funktion från element $x_7$ av $cic.Term$ av $univs.Type2$ och $A$ och element $_x_8$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_7$ till element av $cic.Univ$ av $univs.Type5$. Låt $_H_refl$ vara ett element av $cic.Term$ av $univs.Type5$ och $Q_$ applicerat på $_x$ och $matita_basics_logic.refl$ applicerat på $A$ och $_x$. Låt $x_7$ vara ett element av $cic.Term$ av $univs.Type2$ och $A$. Då för alla element $x_8$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_7$, håller $cic.Term$ för $univs.Type5$ och $Q_$ applicerat på $x_7$ och $x_8$.\nassistant\n", "label": "eq_rect_Type5_body : A : cic.Univ univs.Type2 -> _x : cic.Term univs.Type2 A -> Q_ : (x_7 : cic.Term univs.Type2 A -> _x_8 : cic.Term cic.prop (matita_basics_logic.eq A _x x_7) -> cic.Univ univs.Type5) -> _H_refl : cic.Term univs.Type5 (Q_ _x (matita_basics_logic.refl A _x)) -> x_7 : cic.Term univs.Type2 A -> x_8 : cic.Term cic.prop (matita_basics_logic.eq A _x x_7) -> cic.Term univs.Type5 (Q_ x_7 x_8) .", "predict": "Output: \nAxiom Eq_rect_Type5_body : \nlet A : cic.Univ := univs.Type2 \nlet _x : cic.Term := univs.Type2 A \nlet Q_ : (x_7 : cic.Term) -> A -> (x_8 : cic.Term) -> matita_basics_logic.eq A _x x_7 -> univs.Type5 := \nfun x_7 A x_8 eq => \nlet _H_refl : (x_7 : cic.Term) -> Q_ x_7 A (matita_basics_logic.refl A x_7) := \nfun x_7 => \nlet x_7 : cic.Term := univs.Type2 A in \nforall x_8 : cic.Term -> matita_basics_logic.eq A _x x_8 -> univs.Type5."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nPermut_S_mod. Pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_permutation.permut$ appliqué à $matita_arithmetics_congruence.S_mod$ appliqué à $matita_arithmetics_nat.S$ appliqué à $n$ et $n$.\nassistant\n", "label": "axiom permut_S_mod (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_arithmetics_permutation.permut (matita_arithmetics_congruence.S_mod (matita_arithmetics_nat.S n)) n)", "predict": "postulate Permut_S_mod : forall (n : matita_arithmetics_nat.nat), matita_arithmetics_permutation.permut (matita_arithmetics_congruence.S_mod (matita_arithmetics_nat.S n) n)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_S_S_to_lt. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $n$ och $matita_arithmetics_nat.S$ applicerat på $m$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $n$ och $m$.\nassistant\n", "label": "lt_S_S_to_lt : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m)) -> cic.Term cic.prop (matita_arithmetics_nat.lt n m) .", "predict": "Axiom Prop90 : odd 2 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLhd_nil. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $A$ et $matita_basics_lists_list.lhd$ appliqué à $A$ et $matita_basics_lists_list.nil$ appliqué à $A$ et $n$ et $matita_basics_lists_list.nil$ appliqué à $A$.\nassistant\n", "label": "lhd_nil : A : cic.Univ univs.Type0 -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.lhd A (matita_basics_lists_list.nil A) n) (matita_basics_lists_list.nil A)) .", "predict": "Output: \naxiom Lhd_nil : \n    forall (A : cic.Univ) (n : cic.Term nat) (univs : Type0), \n    cic.Term (cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_lists_list.list A (matita_basics_lists_list.lhd A (matita_basics_lists_list.nil A n (matita_basics_lists_list.nil A)))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSig_rect_Type5. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $_f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $Q_$ des éléments $_x_668$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $univs.Type5$, pour toutes les fonctions $_H_mk_Sig$ des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $_f$ appliqué à $pi1$ à des éléments de $cic.Term$ de $univs.Type5$ et de $Q_$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $A$ et $_f$ et $pi1$ et $_pi2$, pour tous les éléments $x_668$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $univs.Type5$ et $Q_$ appliqué à $x_668$.\nassistant\n", "label": "Axiom Sig_rect_Type5 : forall A : cic.Univ univs.Type0, forall _f : ((__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop), forall Q_ : ((_x_668 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ univs.Type5), forall _H_mk_Sig : ((pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term univs.Type5 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))), forall x_668 : cic.Term univs.Type0 (matita_basics_types.Sig A _f), cic.Term univs.Type5 (Q_ x_668) .", "predict": "Sig_rect_Type5 : \n  forall A : cic.Univ, \n  (forall x : cic.Term, A -> cic.Univ -> cic.prop) -> \n  (forall x_668 : cic.Term, matita_basics_types.Sig A f -> cic.Univ) -> \n  (forall pi1 : cic.Term, A -> cic.Term -> cic.prop) -> \n  (forall pi1 : cic.Term, A -> cic.Term -> cic.prop) -> \n  (forall x_668 : cic.Term, matita_basics_types.Sig A f -> cic.Term -> cic.prop) -> \n  (forall x_668 : cic.Term, matita_basics_types.Sig A f -> cic.Term -> cic.prop) -> \n  (forall x_668 : cic.Term, matita_basics_types.Sig A f -> cic.Term -> cic.prop) -> \n  (forall x_668 : cic.Term, matita_basics_types.Sig A f -> cic.Term -> cic.prop) -> \n  (forall x_668 : cic.Term, matita_basics_types.Sig A f -> cic.Term -> cic.prop) -> \n  (forall x_668 : cic.Term, matita_basics_types.Sig A f -> cic.Term -> cic.prop) -> \n  (forall x_668 : cic.Term, matita_basics_types.Sig A f -> cic.Term -> cic.prop) -> \n  (forall x_668 : cic.Term, matita_basics_types.Sig A f -> cic.Term -> cic.prop) -> \n  (forall x_668 : cic.Term, matita_basics_types.Sig A f -> cic.Term -> cic.prop) -> \n  (forall x_668 : cic.Term, matita_basics_types.Sig A f -> cic.Term -> cic.prop) -> \n  (forall x_668 : cic.Term, matita_basics_types.Sig A f -> cic.Term -> cic.prop) -> \n  (forall x_668 : cic.Term, matita_basics_types.Sig A f -> cic.Term -> cic.prop) -> \n  (forall x_668 : cic.Term, matita_basics_types.Sig A f -> cic.Term -> cic.prop) -> \n  (forall x_668 : cic.Term, matita_basics_types.Sig A f ->"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd_rect_CProp5_body. För alla element $_A$ och $_B$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $Q_$ från element $_x_706$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_Prod$ från element $_fst$ av $cic.Term$ av $univs.Type0$ och $_A$ och element $_snd$ av $cic.Term$ av $univs.Type0$ och $_B$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $_A$ och $_B$ och $_fst$ och $_snd$, för alla element $x_706$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_706$.\nassistant\n", "label": "Axiom Prod_rect_CProp5_body : forall _A : cic.Univ univs.Type0, forall _B : cic.Univ univs.Type0, forall Q_ : ((_x_706 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ cic.prop), forall _H_mk_Prod : ((_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))), forall x_706 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B), cic.Term cic.prop (Q_ x_706) .", "predict": "Axiom Prod_rect_CProp5_body : forall A B : cic.Univ, forall Q : forall x : cic.Term, univs.Type0 -> Prod A B (cic.Univ) -> (forall fst : A, forall snd : B, Q (mk_Prod A B fst snd)), forall x : cic.Term, univs.Type0, Prod A B x -> cic.Term (cic.prop) -> Q x."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nCommutative2. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $B$. Alors $cic.Univ$ tient pour $cic.prop$.\nassistant\n", "label": "Axiom commutative2 : forall A : cic.Univ univs.Type0, forall B : cic.Univ univs.Type0, forall _f : ((__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B), cic.Univ cic.prop .", "predict": "Axiom Commutative2 : forall (A B : Univ) (f : forall _, _, Term) (_f : forall _, _, Term), prop."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_rect_CProp3. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_656$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_DPair$ be a function from elements $dpi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_dpi2$ of $cic.Term$ of $univs.Type0$ and $_f$ applied to $dpi1$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_DPair$ applied to $A$ and $_f$ and $dpi1$ and $_dpi2$. Let $x_656$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_656$.\nassistant\n", "label": "axiom DPair_rect_CProp3 (A : cic.Univ univs.Type0) (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) (Q_ : (_x_656 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop) (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) (x_656 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) : cic.Term cic.prop (Q_ x_656)", "predict": "Output: \nvariable A : univs.univ.\nvariable _f : (univs.univ -> univs.univ) -> (cic.term -> univs.univ).\nvariable Q_ : (cic.term -> univs.univ) -> (cic.term -> matita_basics_types.DPair A _f) -> univs.prop.\nvariable _H_mk_DPair : (cic.term -> univs.univ) -> (univs.univ -> A) -> (cic.term -> univs.univ) -> (cic.term -> univs.univ) -> (cic.term -> univs.prop) -> (cic.term -> matita_basics_types.mk_DPair A _f) -> (cic.term -> univs.prop) -> (cic.term -> univs.prop) -> (cic.term -> univs.prop).\nvariable x_656 : (cic.term -> univs.univ) -> (matita_basics_types.DPair A _f).\n(cic.term x_656) holds for (cic.prop Q_ x_656)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_rect_CProp2_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_909$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_ACop$ be a function from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$. Then for all elements $x_909$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_909$.\nassistant\n", "label": "postulate ACop_rect_CProp2_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_909 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (x_909 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term cic.prop (Q_ x_909)", "predict": "postulate ACop_rect_CProp2_body : \n  (A : cic.Univ) -> \n  (nil : cic.Term) -> \n  (A : cic.Term) -> \n  (Q_ : (x : cic.Term) -> matita_arithmetics_bigops.ACop A nil -> cic.Univ -> cic.prop) -> \n  (H_mk_ACop : (aop : cic.Term) -> matita_arithmetics_bigops.Aop A nil aop -> \n                 (comm : (a : cic.Term) -> A -> (b : cic.Term) -> A -> cic.Term -> cic.prop) -> \n                 (lift : univs.Type0 -> univs.Type2 -> A -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A nil aop a b)) -> \n                 (mk_ACop : matita_arithmetics_bigops.mk_ACop A nil aop) -> \n                 (Q_ (matita_arithmetics_bigops.mk_ACop A nil aop) (comm a A b))) -> \n  (forall (x : cic.Term) -> \n    (matita_arithmetics_bigops.ACop A nil : cic.Term) -> \n    (cic.Term -> cic.prop) -> \n    (Q_ x))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_rect_CProp1. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_911$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_ACop$ be a function from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$. Let $x_911$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_911$.\nassistant\n", "label": "Axiom ACop_rect_CProp1 : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_911 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop), forall _H_mk_ACop : ((aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))), forall x_911 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil), cic.Term cic.prop (Q_ x_911) .", "predict": "Output: \nVariable A : univs.Type0.\nVariable _nil : univs.Type0 A.\nDefinition Q_ (x : univs.Type0) (aop : univs.Type0 A) : cic.Univ (cic.prop) := (* Define Q_ function here *)\nDefinition _H_mk_ACop (aop : univs.Type0) (comm : (fun a b : univs.Type0 => cic.Term (cic.prop) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A (matita_arithmetics_bigops.op A _nil aop) (matita_arithmetics_bigops.op A _nil aop) a))) := (* Define _H_mk_ACop function here *)\nDefinition x_911 : univs.Type0 (matita_arithmetics_bigops.ACop A _nil) := (* Define x_911 here *)\nLemma ACop_rect_CProp1 : (forall x, Q_ x (matita_arithmetics_bigops.mk_ACop A _nil aop comm)) -> cic.Term (cic.prop) (Q_ x_911). (* State and prove the lemma here *)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMem_filter_true. Låt $S$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $S$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $a$ vara ett element av $cic.Term$ av $univs.Type0$ och $S$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $S$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.mem$ applicerat på $S$ och $a$ och $matita_basics_lists_list.filter$ applicerat på $S$ och $f$ och $l$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $a$ och $matita_basics_bool.true$.\nassistant\n", "label": "postulate mem_filter_true : (S : cic.Univ univs.Type0) -> (f : (__ : cic.Term univs.Type0 S) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (a : cic.Term univs.Type0 S) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list S)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.mem S a (matita_basics_lists_list.filter S f l))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f a) matita_basics_bool.true)", "predict": "postulate Mem_filter_true : {univs : Type} {cic : Universe} {Term : univs -> Type} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {univs : Universe} {"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nPair_elim2. Låt $A$ och $B$ och $C$ och $C'$ vara element av $cic.Univ$ av $univs.Type0$. Låt $T$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $C$. Då för alla funktioner $T'$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $C'$, för alla element $p$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$, för alla funktioner $P$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $C$ och element $__2$ av $cic.Term$ av $univs.Type0$ och $C'$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $__$ från element $lft$ av $cic.Term$ av $univs.Type0$ och $A$ och element $rgt$ av $cic.Term$ av $un", "label": "postulate pair_elim2 : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (C : cic.Univ univs.Type0) -> (C' : cic.Univ univs.Type0) -> (T : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 C) -> (T' : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 C') -> (p : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> (P : (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B)) -> (__1 : cic.Term univs.Type0 C) -> (__2 : cic.Term univs.Type0 C') -> cic.Univ cic.prop) -> (__ : (lft : cic.Term univs.Type0 A) -> (rgt : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B)) p (matita_basics_types.mk_Prod A B lft rgt))) -> cic.Term cic.prop (P (matita_basics_types.mk_Prod A B lft rgt) (T lft rgt) (T' lft rgt))) -> cic.Term cic.prop (P p (matita_basics_types.match_Prod A B univs.Type0 (\\ _0 : cic.Term univs.Type0 (matita_basics_types.Prod A B) -> C) (\\ lft : cic.Term univs.Type0 A -> \\ rgt : cic.Term univs.Type0 B -> T lft rgt) p) (matita_basics_types.match_Prod A B univs.Type0 (\\ _0 : cic.Term univs.Type0 (matita_basics_types.Prod A B) -> C') (\\ lft : cic.Term univs.Type0 A -> \\ rgt : cic.Term univs.Type0 B -> T' lft rgt) p))", "predict": "ivs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $C$, för alla element $f$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$ och element $g$ av $cic.Term$ av $univs.Type0$ och $C$ och element $h$ av $cic.Term$ av $univs.Type0$ och $C'$ till element av $cic.Univ$ av $cic.prop$, för alla element $x$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$ och element $y$ av $cic.Term$ av $univs.Type0$ och $C$ och element $z$ av $cic.Term$ av $univs.Type0$ och $C'$ till element av $cic.Univ$ av $cic.prop$, för alla element $u$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$ och element $v$ av $cic.Term$ av $univs.Type0$ och $C$ och element $w$ av $cic.Term$ av $univs.Type0$ och $C'$ till element av $cic.Univ$ av $cic.prop$, det är giltigt att utföra följande agda kod:\n\nAssistant: Pair_elim2 : \n  let A, B, C, C' : univs.Type0 = univs.Type0 in \n  let T : (__, A, B) -> (C) = \\(_, _1, _2) -> C in \n  forall T' : (__, A, B) -> (C') -> (univs.Type0) -> (C), \n  forall p : (univs.Type0) -> (matita_basics_types.Prod A B), \n  forall P : (__, p, C, _1, C') -> (cic.prop) -> (univs.Type0), \n  forall _ : (lft, A, rgt, B) -> (C) -> ("}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNat_rect_CProp4_body. Let $Q_$ be a function from elements $_x_393$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_O$ be an element of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_nat.O$. Let $_H_S$ be a function from elements $x_394$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $_x_396$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $x_394$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_nat.S$ applied to $x_394$. Let $x_393$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_393$.\nassistant\n", "label": "nat_rect_CProp4_body : Q_ : (_x_393 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Univ cic.prop) -> _H_O : cic.Term cic.prop (Q_ matita_arithmetics_nat.O) -> _H_S : (x_394 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _x_396 : cic.Term cic.prop (Q_ x_394) -> cic.Term cic.prop (Q_ (matita_arithmetics_nat.S x_394))) -> x_393 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (Q_ x_393) .", "predict": "Output: \nAxiom Nat_rect_CProp4_body : \n  forall (Q : forall (x_393 : Term univs.Type0) (n : nat), Univ) \n  (H_O : Term prop) (H_S : forall (x_394 : Term univs.Type0) (n : nat) (H_O_ : prop) (Q_x_394 : prop), prop) \n  (x_393 : Term univs.Type0) (nat), prop."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1575. För alla element $m$ och $n$ och $a$ och $b$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $posn$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $posm$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla element $pnm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $c$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $un", "label": "postulate let_clause_1575 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 mat", "predict": "ivs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $pos$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $c$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $c$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nUnit_inv_rect_Type1. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$. Soit $P$ une fonction des éléments $_z930$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $univs.Type1$. Alors pour toutes les fonctions $_H1$ des éléments $_z931$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.unit$ et $Hterm$ et $matita_basics_types.it$ à des éléments de $cic.Term$ de $univs.Type1$ et de $P$ appliqué à $matita_basics_types.it$, $cic.Term$ tient pour $univs.Type1$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "unit_inv_rect_Type1 : Hterm : cic.Term univs.Type0 matita_basics_types.unit -> P : (_z930 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Univ univs.Type1) -> _H1 : (_z931 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm matita_basics_types.it) -> cic.Term univs.Type1 (P matita_basics_types.it)) -> cic.Term univs.Type1 (P Hterm) .", "predict": "Output: Axiom Unit_inv_rect_Type1 : forall (Hterm : Term univs.Type0 matita_basics_types.unit) (P : forall _z930 : Term univs.Type0 matita_basics_types.unit, Univ univs.Type1), (forall _H1 : Prop univs.Type1, (forall _z931 : Term univs.Type1, Prop univs.Type2) -> (forall _z932 : Term univs.Type1, P _z932) -> Term univs.Type1) -> (forall _z933 : Term univs.Type1, P _z933) -> Term univs.Type1."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFilter_ex2. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_P$ and $_Q$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $return_sort$ be an element of $cic.Sort$. Then for all functions $return_type$ from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex2$ applied to $A$ and $_P$ and $_Q$ to elements of $cic.Univ$ of $return_sort$, for all functions $return$ from elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex2$ applied to $A$ and $_P$ and $_Q$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $z$, for all elements $z$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex2$ applied to $A$ and $_P$ and $_Q$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.\nassistant\n", "label": "postulate filter_ex2 : (A : cic.Univ univs.Type0) -> (_P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (_Q : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term cic.prop (matita_basics_logic.ex2 A _P _Q)) -> cic.Univ return_sort) -> (return : (z : cic.Term cic.prop (matita_basics_logic.ex2 A _P _Q)) -> cic.Term return_sort (return_type z)) -> (z : cic.Term cic.prop (matita_basics_logic.ex2 A _P _Q)) -> cic.Term return_sort (return_type z)", "predict": "postulate Filter_ex2 : {A : cic.Univ} {univs : Type0} {P Q : (x : cic.Term) -> A -> Univ} {return_sort : Sort} -> (return_type : (z : prop) -> (ex2 A P Q) -> Univ) -> (return : (z : prop) -> (ex2 A P Q) -> (return_sort z) -> (return_type z)) -> (z : prop) -> (ex2 A P Q) -> (return_sort z)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd_rect_CProp2_body. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_710$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_Prod$ une fonction des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $_A$ et $_B$ et $_fst$ et $_snd$. Soit $x_710$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_710$.\nassistant\n", "label": "postulate Prod_rect_CProp2_body : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_710 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ cic.prop) -> (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) -> (x_710 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Term cic.prop (Q_ x_710)", "predict": "postulate Prod_rect_CProp2_body : \n  ∀ (A B : cic.Univ) (Q : (x : cic.Term) → Prod A B (cic.Univ) → cic.prop → (fst x → A) → (snd x → B) → cic.Term)\n  → (∀ (fst : cic.Term) (A : cic.Univ) (snd : cic.Term) (B : cic.Univ) → Q (matita_basics_types.mk_Prod A B) (A, B) (matita_basics_types.mk_Prod A B fst snd) A B fst snd → \n   (∀ (x : cic.Term) → Prod A B (cic.Univ) → cic.prop → (fst x → A) → (snd x → B) → cic.Term) x (matita_basics_types.mk_Prod A B) (Q (matita_basics_types.mk_Prod A B) (A, B) (matita_basics_types.mk_Prod A B fst snd) A B fst snd))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_inv_rect_CProp3. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Då för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1542$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $", "label": "axiom Aop_inv_rect_CProp3 (x1 : cic.Univ univs.Type0) (x2 : cic.Term univs.Type0 x1) (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) (P : (_z1542 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> cic.Univ cic.prop) (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1543 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) : cic.Term cic.prop (P Hterm)", "predict": "matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$ och $_H1$ applicerat på $x2$ och $x1$ och $_H1$ applicerat på $x2$ och $x1$ och $_H1$ applicerat på $x2$ och $x1$ och $_H1$ applicerat på $x2$ och $x1$ och $_H1$ applicerat på $x2$ och $x1$ och $_H1$ applicerat på $x2$ och $x1$ och $_H1$ applicerat på $x2$ och $x1$ och $_H1$ applicerat på $x2$ och $x1$ och $_H1$ applicerat på $x2$ och $x1$ och $_H1$ applicerat på $x2$ och $x1$ och $_H1$ applicerat på $x2$ och $x1$ och $_H1$ applicerat på $x2$ och $x1$ och $_H1$ applicerat på $x2$ och $x1$ och $_H1$ applicerat på $x2$ och $x1$ och $_H1$ applicerat på $x2$ och $x1$ och $_H1$ applicerat på $x2$ och $x1$ och $_H1$ applicerat på $x2$ och $x1$ och $_H1$ applicerat på $x2$ och $x1$ och $_H1$ applicerat på $x2$ och $x1$ och $_H1$ applicerat på $x2$ och $x1$ och $_H1$ applicerat på $x2$ och $x1$ och $_H1$ applicerat på $x2$ och $x1$ och $_H1$ applicerat på $x2$ och $x1$ och $_H1$ applicerat på $x2$ och $x1$ och $_H1$ applicerat på $x2$ och $x1$ och $_"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nS. Assume that $Nat$. Then $Nat$.\nassistant\n", "label": "axiom s (x : Nat) : Nat", "predict": "Output: Axiom S : Nat -> Nat ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOr_inv_ind. Let $x1$ and $x2$ be elements of $cic.Univ$ of $cic.prop$. Let $Hterm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z389$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$. Let $_H1$ be a function from elements $x_171$ of $cic.Term$ of $cic.prop$ and $x1$ and elements $_z390$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_basics_logic.Or$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_logic.or_introl$ applied to $x1$ and $x2$ and $x_171$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_logic.or_introl$ applied to $x1$ and $x2$ and $x_171$. Let $_H2$ be a function from elements $x_172$ of $cic.Term$ of $cic.prop$ and $x2$ and elements $_z390$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_basics_logic.Or$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_logic.or_intror$ applied to $x1$ and $x2$ and $x_172$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_logic.or_intror$ applied to $x1$ and $x2$ and $x_172$. Then $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "Axiom Or_inv_ind : forall x1 : cic.Univ cic.prop, forall x2 : cic.Univ cic.prop, forall Hterm : cic.Term cic.prop (matita_basics_logic.Or x1 x2), forall P : ((_z389 : cic.Term cic.prop (matita_basics_logic.Or x1 x2)) -> cic.Univ cic.prop), forall _H1 : ((x_171 : cic.Term cic.prop x1) -> (_z390 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.Or x1 x2)) Hterm (matita_basics_logic.or_introl x1 x2 x_171))) -> cic.Term cic.prop (P (matita_basics_logic.or_introl x1 x2 x_171))), forall _H2 : ((x_172 : cic.Term cic.prop x2) -> (_z390 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.Or x1 x2)) Hterm (matita_basics_logic.or_intror x1 x2 x_172))) -> cic.Term cic.prop (P (matita_basics_logic.or_intror x1 x2 x_172))), cic.Term cic.prop (P Hterm) .", "predict": "Axiom or_inv_ind : forall (x1 x2 : Univ) (Hterm : Or x1 x2) (P : forall z389 : Term, Or x1 x2 -> Univ), (forall x171 : Term, prop -> eq (lift prop) Type2 (Or x1 x2) (or_introl x1 x2 x171) -> Term -> Univ) -> (forall x172 : Term, prop -> eq (lift prop) Type2 (Or x1 x2) (or_intror x1 x2 x172) -> Term -> Univ) -> Term (prop) (P Hterm)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMk_Aop. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Då för alla funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $nil$ och $a$ och $a$, för alla funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $nil$ och $a$, för alla funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $op$ applicerat på $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $nil$.\nassistant\n", "label": "axiom mk_Aop (A : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 A) (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op nil a) a)) (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a nil) a)) (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) : cic.Term univs.Type0 (matita_basics_lists_list.Aop A nil)", "predict": "Axiom Lkat_LkAop : forall (univs : Univ), exists (cic : Term univs), (forall (A : univs), (forall (nil : Term univs A), (forall (op : Term univs A -> Term univs A -> Term univs A), (forall (a : Term univs A), (forall (_nill : (a -> Prop univs (cic.prop) (matita_basics_logic.eq (cic.lift univs univs.Type0 univs.Type2 A) (op (Term univs nil a) a)) -> Prop univs (cic.prop) (matita_basics_logic.eq (cic.lift univs univs.Type0 univs.Type2 A) (op (Term univs a nil) a)))), (forall (_assoc : (a -> b -> c -> Prop univs (cic.prop) (matita_basics_logic.eq (cic.lift univs univs.Type0 univs.Type2 A) (op (op (Term univs a b) c) (op (Term univs a b) c))))), (forall (cic : Term univs), (Term univs univs.Type0 (cic.Term univs univs.univs (matita_basics_lists_list.Aop univs A (Term univs nil))))) = (Term univs univs.Type0 (cic.Term univs univs.univs (matita_basics_lists_list.Aop univs A (Term univs (Term univs nil)))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nCompose. För alla element $A$ och $B$ och $C$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $_f$ från element $__$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $C$, för alla funktioner $_g$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $B$, för alla element $_x$ av $cic.Term$ av $univs.Type0$ och $A$, håller $cic.Term$ för $univs.Type0$ och $C$.\nassistant\n", "label": "compose : A : cic.Univ univs.Type0 -> B : cic.Univ univs.Type0 -> C : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 B -> cic.Term univs.Type0 C) -> _g : (__ : cic.Term univs.Type0 A -> cic.Term univs.Type0 B) -> _x : cic.Term univs.Type0 A -> cic.Term univs.Type0 C .", "predict": "Axiom Compose : forall (univs: Univ), forall (A B C: univs.Type0), (forall (f: Term univs.Type0 B -> Term univs.Type0 C), (forall (g: Term univs.Type0 A -> Term univs.Type0 B), (forall (x: Term univs.Type0 A), Term univs.Type0 C))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_inv_rect_Type0. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $x1$. Soit $P$ une fonction des éléments $_z1068$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $x1$ à des éléments de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $_H1$ des éléments $_z1069$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.option$ appliqué à $x1$ et $Hterm$ et $matita_basics_types.None$ appliqué à $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $P$ appliqué à $matita_basics_types.None$ appliqué à $x1$, pour toutes les fonctions $_H2$ des éléments $x_611$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_z1069$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.option$ appliqué à $x1$ et $Hterm$ et $matita_basics_types.Some$ appliqué à $x1$ et $x_611$ à des éléments de $cic.Term$ de $univs.Type0$ et de $P$ appliqué à $matita_basics_types.Some$ appliqué à $x1$ et $x_611$, $cic.Term$ tient pour $univs.Type0$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "axiom option_inv_rect_Type0 (x1 : cic.Univ univs.Type0) (Hterm : cic.Term univs.Type0 (matita_basics_types.option x1)) (P : (_z1068 : cic.Term univs.Type0 (matita_basics_types.option x1)) -> cic.Univ univs.Type0) (_H1 : (_z1069 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.None x1))) -> cic.Term univs.Type0 (P (matita_basics_types.None x1))) (_H2 : (x_611 : cic.Term univs.Type0 x1) -> (_z1069 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.Some x1 x_611))) -> cic.Term univs.Type0 (P (matita_basics_types.Some x1 x_611))) : cic.Term univs.Type0 (P Hterm)", "predict": "Output: \nAxiom Option_inv_rect_Type0 : \nforall (x1 : cic.Univ) (Hterm : matita_basics_types.option x1) (P : forall (_z1068 : cic.Term) (option_x1 : matita_basics_types.option x1), cic.Univ), \nforall (H1 : forall (_z1069 : cic.Term) (cic_prop : cic.prop) (eq_cic_lift : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_types.option x1 Hterm matita_basics_types.None x1)) (term : cic.Term), \nforall (H2 : forall (x_611 : cic.Term) (univs_Type0 : univs.Type0) (univs_Type2 : univs.Type2), \n(cic.Term univs.Type0) P (matita_basics_types.None x1) (cic.Term univs.Type0) (P (matita_basics_types.Some x1 x_611)) (cic.Term univs.Type0)), \n(cic.Term univs.Type0) P Hterm."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_CProp1_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Then for all functions $Q_$ from elements $_x_883$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied", "label": "Axiom Aop_rect_CProp1_body : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_883 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop), forall _H_mk_Aop : ((op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))), forall x_883 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil), cic.Term cic.prop (Q_ x_883) .", "predict": " to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and $a$ and $b$ and $c$ and functions $_assocr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and $a$ and $b$ and $c$, the following holds: $Q_$ applied to $A$ and $op$ applied to $_nil$ and $a$ and $a$ and $_H_mk_Aop$ applied to $op$ applied to $a$ and $_nil$ and $a$ and $_assoc$ applied to $a$ and $b$ and $c$ and $a$ and $b$ and $c$ and $_assocr$ applied to $a$ and $b$ and $c$ and $a$ and $b$ and $c$ and $Q_$ applied to $A$ and $op$ applied to $a$ and $_nil$ and $a$ and $_H_mk_Aop$ applied to $op$ applied to $a$ and $_nil$ and $a$ and $_assoc$ applied to $a$ and $b$ and $c$ and $a$ and $b$ and $c$ and $_assocr$ applied to $a$ and $b$ and $c$ and $a$ and $b$ and $c$ and $Q_$ applied to $A$ and $op$ applied to $a$ and $b$ and $c$ and $a$ and $b$ and $c$ and $_H_mk_Aop$ applied to $op$ applied to $a$ and $b$ and $c$ and $a$ and"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_rect_Type2. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_602$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type2$. Let $_H_None$ be an element of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_basics_types.None$ applied to $_A$. Then for all functions $_H_Some$ from elements $x_603$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_basics_types.Some$ applied to $_A$ and $x_603$, for all elements $x_602$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$, $cic.Term$ holds for $univs.Type2$ and $Q_$ applied to $x_602$.\nassistant\n", "label": "postulate option_rect_Type2 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_602 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ univs.Type2) -> (_H_None : cic.Term univs.Type2 (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_603 : cic.Term univs.Type0 _A) -> cic.Term univs.Type2 (Q_ (matita_basics_types.Some _A x_603))) -> (x_602 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term univs.Type2 (Q_ x_602)", "predict": "postulate Option_rect_Type2 : \n  {A : Univ} -> \n  A -> \n  (x : Term) -> \n  (option A) -> \n  Univ -> \n  (H_None : Term) -> \n  (H_Some : (x' : Term) -> A -> Term -> Univ) -> \n  (H : (x : option A) -> Term) -> \n  (forall (x : Term) -> \n   (option A) -> \n   Univ -> \n   (H_None : Term) -> \n   (H_Some : (x' : Term) -> A -> Term -> Univ) -> \n   (forall (x' : option A) -> \n    Term) -> \n   Term)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nIncreasing_to_injective. For all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.increasing$ applied to $f$, $cic.Term$ holds for $cic.prop$ and $matita_basics_relations.injective$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $f$.\nassistant\n", "label": "postulate increasing_to_injective : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.increasing f)) -> cic.Term cic.prop (matita_basics_relations.injective matita_arithmetics_nat.nat matita_arithmetics_nat.nat f)", "predict": "postulate Increasing_to_injective : {A B : univs.Type0} {f : (cic.Term A) -> (cic.Term B)} {inc : matita_arithmetics_nat.nat -> (cic.Term A)} {rel : matita_basics_relations.injective (matita_arithmetics_nat.nat) (matita_arithmetics_nat.nat) f} -> cic.Term A."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBi_symmetric. Soient $A$ et $B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $_R$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.bi_relation$ appliqué à $A$ et $B$. Alors $cic.Univ$ tient pour $cic.prop$.\nassistant\n", "label": "Axiom bi_symmetric : forall A : cic.Univ univs.Type0, forall B : cic.Univ univs.Type0, forall _R : cic.Term univs.Type0 (matita_basics_relations.bi_relation A B), cic.Univ cic.prop .", "predict": "Axiom Bi_symmetric : forall (A B : Univ) (R : Term Univ -> Prop -> bi_relation A B), Univ -> prop."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_1_fact. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_factorial.fact$ applicerat på $n$.\nassistant\n", "label": "postulate le_1_fact : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_factorial.fact n))", "predict": "postulate le_1_fact : \\forall n : univs.Type0 -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) (matita_arithmetics_nat.O)) (matita_arithmetics_factorial.fact n)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLstar_r_inv_lstar. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $R$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $B$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $b1$ och $b2$ vara element av $cic.Term$ av $univs.Type0$ och $B$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar_r$ applicerat på $B$ och $R$ och $l$ och $b1$ och $b2$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $R$ och $l$ och $b1$ och $b2$.\nassistant\n", "label": "postulate lstar_r_inv_lstar : (B : cic.Univ univs.Type0) -> (R : cic.Term univs.Type0 (matita_basics_relations.relation B)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b2 : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B R l b1 b2)) -> cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b2)", "predict": "postulate lstar_r_inv_lstar : \n  {univs : Universe}\n  {B : univs.Type0}\n  {R : univs.Type0 -> matita_basics_relations.relation B}\n  {l : univs.Type0 -> matita_arithmetics_nat.nat}\n  {b1 b2 : univs.Type0 -> B}\n  -> forall (p : cic.Term -> cic.prop) (pr : cic.Term -> B -> R) (bl : B -> l) (bb1 : B -> b1) (bb2 : B -> b2), \n  p (cic.Term (cic.prop) (matita_arithmetics_lstar.lstar_r B R l b1 b2)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_inv_rect_CProp4. För alla element $x1$ av $cic.Univ$ av $univs.Type0$, för alla element $x2$ av $cic.Term$ av $univs.Type0$ och $x1$, för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1602$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $matita_arithmetics_bigops.op$ applicerat på $x1$ och $x2$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $x1$ och $x2$ och $aop$ och $b$ och $a$ och element $_z1603$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_arithmetics_bigops.mk_ACop$ applicerat på $x1$ och $x2$ och $aop$ och $_comm$ till element av $cic.Term$ av", "label": "Axiom ACop_inv_rect_CProp4 : forall x1 : cic.Univ univs.Type0, forall x2 : cic.Term univs.Type0 x1, forall Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2), forall P : ((_z1602 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> cic.Univ cic.prop), forall _H1 : ((aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (_comm : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (matita_arithmetics_bigops.op x1 x2 aop a b) (matita_arithmetics_bigops.op x1 x2 aop b a))) -> (_z1603 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop x1 x2)) Hterm (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))), cic.Term cic.prop (P Hterm) .", "predict": " $cic.prop$, det existe $x3$ de $cic.Term$ de $univs.Type0$ tel que $P$ applicé à $x1$, $x2$, $Hterm$, $matita_arithmetics_bigops.mk_ACop$ applicé à $x1$, $x2$, $aop$, $_comm$, $x3$ est égal à $x1$.\n\nOutput: \n```coq\nParameter ACop_inv_rect_CProp4 : forall (x1 : Univ) (x2 : Term) (Hterm : Term) (P : (forall (z1602 : Term) (aop : Term) (comm : (a : Term) (b : Term) -> (a + b) = (b + a)), (aop (x1 x2) (x1 x2) (comm a b)) -> prop)) (aop : Term) (comm : (a : Term) (b : Term) -> (a + b) = (b + a)), (forall (z1603 : prop), (P (x1 x2) (aop (x1 x2) (x1 x2) (comm a b)) (mk_ACop (x1 x2) aop comm) z1603) -> x1 = x1).\n```"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSig_rect_CProp4_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $Q_$ une fonction des éléments $_x_678$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_Sig$ une fonction des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $_f$ appliqué à $pi1$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $A$ et $_f$ et $pi1$ et $_pi2$. Soit $x_678$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_678$.\nassistant\n", "label": "postulate Sig_rect_CProp4_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_678 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ cic.prop) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_678 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term cic.prop (Q_ x_678)", "predict": "postulate Sig_rect_CProp4_body : \n  ∀ (A : cic.Univ) -> (∀ (_f : (__) -> A -> cic.Univ) -> (∀ (x_678 : cic.Term) -> (matita_basics_types.Sig A _f) -> (∀ (pi1 : cic.Term) -> (A) -> (∀ (pi2 : cic.Term) -> (cic.prop) -> (∀ (_f : (__) -> A -> cic.prop) -> (pi1) -> (pi2) -> (cic.prop))) -> (cic.prop))) -> (cic.Term (matita_basics_types.Sig A _f) -> cic.prop) -> (cic.prop) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAnd_inv_ind. Soient $x1$ et $x2$ des éléments de $cic.Univ$ de $cic.prop$. Soit $Hterm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $x1$ et $x2$. Soit $P$ une fonction des éléments $_z323$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H1$ une fonction des éléments $x_120$ de $cic.Term$ de $cic.prop$ et de $x1$ et des éléments $x_119$ de $cic.Term$ de $cic.prop$ et de $x2$ et des éléments $_z324$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $cic.prop$ et $univs.Type2$ et $matita_basics_logic.And$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_logic.conj$ appliqué à $x1$ et $x2$ et $x_120$ et $x_119$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_logic.conj$ appliqué à $x1$ et $x2$ et $x_120$ et $x_119$. Alors $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "axiom And_inv_ind (x1 x2 : cic.Univ cic.prop) (Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2)) (P : (_z323 : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> cic.Univ cic.prop) (_H1 : (x_120 : cic.Term cic.prop x1) -> (x_119 : cic.Term cic.prop x2) -> (_z324 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_120 x_119))) -> cic.Term cic.prop (P (matita_basics_logic.conj x1 x2 x_120 x_119))) : cic.Term cic.prop (P Hterm)", "predict": "Axiom And_inv_ind : forall (x1 x2 : Univ) (Hterm : Term prop and x1 x2) (P : (z323 : Term prop and x1 x2) -> Univ -> prop) (H1 : (x120 : Term prop) -> x1 -> (x119 : Term prop) -> x2 -> (z324 : Term prop) -> eq (lift prop univs.Type2 (and x1 x2 Hterm conj x1 x2 x120 x119)) -> Term prop and x1 x2 -> P (conj x1 x2 x120 x119)), P Hterm."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSum_rect_Type3_body. For all elements $_A$ and $_B$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_536$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $univs.Type3$, for all functions $_H_inl$ from elements $x_537$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_types.inl$ applied to $_A$ and $_B$ and $x_537$, for all functions $_H_inr$ from elements $x_538$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_types.inr$ applied to $_A$ and $_B$ and $x_538$, for all elements $x_536$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$, $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_536$.\nassistant\n", "label": "postulate Sum_rect_Type3_body : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_536 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ univs.Type3) -> (_H_inl : (x_537 : cic.Term univs.Type0 _A) -> cic.Term univs.Type3 (Q_ (matita_basics_types.inl _A _B x_537))) -> (_H_inr : (x_538 : cic.Term univs.Type0 _B) -> cic.Term univs.Type3 (Q_ (matita_basics_types.inr _A _B x_538))) -> (x_536 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Term univs.Type3 (Q_ x_536)", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_rect_Type1_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_648$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $univs.Type1$. Soit $_H_mk_DPair$ une fonction des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $_f$ appliqué à $dpi1$ à des éléments de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $A$ et $_f$ et $dpi1$ et $_dpi2$. Soit $x_648$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$. Alors $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_648$.\nassistant\n", "label": "DPair_rect_Type1_body : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) -> Q_ : (_x_648 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Univ univs.Type1) -> _H_mk_DPair : (dpi1 : cic.Term univs.Type0 A -> _dpi2 : cic.Term univs.Type0 (_f dpi1) -> cic.Term univs.Type1 (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> x_648 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Term univs.Type1 (Q_ x_648) .", "predict": "DPair_rect_Type1_body : Axiom. Soit A : cic.Univ -> univs.Type0. Soit f : (x : cic.Term -> univs.Type0) -> A -> cic.Univ -> univs.Type0. Soit Q : (x : cic.Term -> univs.Type0) -> DPair A f -> cic.Univ -> univs.Type1. Soit H_mk_DPair : (dpi1 : cic.Term -> univs.Type0) -> A -> (dpi2 : cic.Term -> univs.Type0) -> (f dpi1) -> cic.Term -> univs.Type1 -> Q (matita_basics_types.mk_DPair A f dpi1) dpi2. Soit x_648 : cic.Term -> DPair A f. Alors cic.Term tient pour univs.Type1 et Q x_648."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nIff_trans. For all elements $A$ and $B$ and $C$ of $cic.Univ$ of $cic.prop$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.iff$ applied to $A$ and $B$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.iff$ applied to $B$ and $C$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.iff$ applied to $A$ and $C$.\nassistant\n", "label": "postulate iff_trans : (A : cic.Univ cic.prop) -> (B : cic.Univ cic.prop) -> (C : cic.Univ cic.prop) -> (__ : cic.Term cic.prop (matita_basics_logic.iff A B)) -> (__1 : cic.Term cic.prop (matita_basics_logic.iff B C)) -> cic.Term cic.prop (matita_basics_logic.iff A C)", "predict": "postulate Iff_trans : {A B C : cic.Univ} -> (A -> B) -> (B -> C) -> (A -> C)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_rect_Type3. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type2$. Låt $_x$ vara ett element av $cic.Term$ av $univs.Type2$ och $A$. Då för alla funktioner $Q_$ från element $x_10$ av $cic.Term$ av $univs.Type2$ och $A$ och element $_x_11$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_10$ till element av $cic.Univ$ av $univs.Type3$, för alla element $_H_refl$ av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $_x$ och $matita_basics_logic.refl$ applicerat på $A$ och $_x$, för alla element $x_10$ av $cic.Term$ av $univs.Type2$ och $A$, för alla element $x_11$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_10$, håller $cic.Term$ för $univs.Type3$ och $Q_$ applicerat på $x_10$ och $x_11$.\nassistant\n", "label": "Axiom eq_rect_Type3 : forall A : cic.Univ univs.Type2, forall _x : cic.Term univs.Type2 A, forall Q_ : ((x_10 : cic.Term univs.Type2 A) -> (_x_11 : cic.Term cic.prop (matita_basics_logic.eq A _x x_10)) -> cic.Univ univs.Type3), forall _H_refl : cic.Term univs.Type3 (Q_ _x (matita_basics_logic.refl A _x)), forall x_10 : cic.Term univs.Type2 A, forall x_11 : cic.Term cic.prop (matita_basics_logic.eq A _x x_10), cic.Term univs.Type3 (Q_ x_10 x_11) .", "predict": "Axiom Eq_rect_Type3 : forall (univs : Universe), (A : univs.univ), (x : univs.term A), (Q : forall (x10 : univs.term A), (x11 : univs.prop), (eq : matita_basics_logic.eq A x x10), (H_refl : univs.term A x10), (x11_refl : matita_basics_logic.refl A x10), (x10_eq_refl : matita_basics_logic.eq A x x10)), (forall (x10 : univs.term A), (x11 : univs.prop), (eq : matita_basics_logic.eq A x x10), (Q x10 x11 eq H_refl x11_refl)), (forall (x10 : univs.term A), (x11 : univs.prop), (eq : matita_basics_logic.eq A x x10)), (Q x10 x11 eq), (forall (x10 : univs.term A), (x11 : univs.prop), (eq : matita_basics_logic.eq A x x10)), (Q x10 x11 eq)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_Type3. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_787$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type3$. Då för alla funktioner $_H_mk_Aop$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs", "label": "postulate Aop_rect_Type3 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_787 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ univs.Type3) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type3 (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_787 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term univs.Type3 (Q_ x_787)", "predict": ".Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och element $d$ av $cic.Term$ av $univs.Type0$ och $A$ och element $e$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ så är $_H_mk_Aop$ en inductive function.\n\nOutput: \nAop_rect_Type3 : {univs : Universe} -> {cic : Context} -> {Term : univs.Type0} -> (A : univs.Type) -> (Q : (x : Term) -> A op x nil -> univs.Type3) -> (H_mk_Aop : (op : (x : Term) -> (a : Term) -> Term) -> (nill : (a : Term) -> Prop) -> (nilr : (a : Term) -> Prop) -> (assoc : (a : Term) -> (b : Term) -> (c : Term) -> (d : Term) -> (e : Term) -> Term) -> Term) -> (forall (x : Term) -> (a : Term) -> (b : Term) -> (c : Term) -> (d : Term) -> (e : Term) -> (f : Term) -> (g : Term) -> (h : Term) -> (i : Term) -> (j : Term) -> (k : Term) -> (l : Term) -> (m : Term) -> (n : Term) -> (o : Term) -> (p : Term) -> (q : Term) -> (r : Term) -> (s : Term) -> (t : Term) -> (u : Term) -> (v : Term) -> (w : Term) -> (x : Term) -> (y : Term) -> (z : Term) -> (A : Term) -> (op : (x : Term) -> (a : Term) -> Term) -> (nil : (a : Term) -> Prop) -> (assoc : (a : Term) -> (b : Term) -> (c : Term) -> (d : Term) -> (e : Term) ->"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMin_spec_ind. Let $_n$ and $_b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $Q_$ be a function from elements $x_1075$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $_x_1076$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_minimization.min_spec$ applied to $_n$ and $_b$ and $_f$ and $x_1075$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_found_min_spec$ be a function from elements $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $x_1080$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $_b$ and $m$ and elements $x_1079$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $matita_arithmetics_nat.plus$ applied to $_n$ and $_b$ and elements $x_1078$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $_f$ applied to $m$ and $matita_basics_bool.true$ and functions $x_1077$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $_b$ and $i$ and elements $__1$", "label": "Axiom min_spec_ind : forall _n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall Q_ : ((x_1075 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_1076 : cic.Term cic.prop (matita_arithmetics_minimization.min_spec _n _b _f x_1075)) -> cic.Univ cic.prop), forall _H_found_min_spec : ((m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_1080 : cic.Term cic.prop (matita_arithmetics_nat.le _b m)) -> (x_1079 : cic.Term cic.prop (matita_arithmetics_nat.lt m (matita_arithmetics_nat.plus _n _b))) -> (x_1078 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f m) matita_basics_bool.true)) -> (x_1077 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le _b i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i m)) -> cic.Term cic.prop (matita", "predict": " of $cic.Term$ of $cic.prop$ and $matita_arithmetics_minimization.min_spec$ applied to $_n$ and $_b$ and $_f$ and $i$ and $x_1076$ and elements $x_1074$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $matita_arithmetics_nat.plus$ applied to $_n$ and $_b$ and elements $x_1073$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $_f$ applied to $i$ and $matita_basics_bool.false$ and elements $x_1072$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_minimization.min_spec$ applied to $_n$ and $_b$ and $_f$ and $i$ and $x_1076$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_used_min_spec$ be a function from elements $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $x_1080$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $_b$ and $m$ and elements $x_1079$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $matita_arithmetics_nat.plus$ applied to $_n$ and $_b$ and elements $x_1078$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $_f$ applied to $m$ and $matita_basics_bool.true$ and functions $x_1077$ from elements $i$ of $cic.Term$ of $univs.Type0$ and"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd_ind. Let $_A$ and $_B$ be elements of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_690$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_Prod$ be a function from elements $_fst$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_snd$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_Prod$ applied to $_A$ and $_B$ and $_fst$ and $_snd$. Then for all elements $x_690$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_690$.\nassistant\n", "label": "axiom Prod_ind (_A _B : cic.Univ univs.Type0) (Q_ : (_x_690 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ cic.prop) (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) (x_690 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) : cic.Term cic.prop (Q_ x_690)", "predict": "prod_ind : ∀ (A B : univ.univ) (Q : ∀ x : univ.univ × univ.univ → univ.univ) (H_mk_Prod : ∀ (fst : univ.univ) (A : univ.univ) (snd : univ.univ) (B : univ.univ) → univ.univ → univ.prop × Q (matita_basics_types.mk_Prod A B fst snd)) → ∀ (x : univ.univ) → univ.univ × univ.univ → univ.prop × Q x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNotb. För alla element $__$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_bool.bool$.\nassistant\n", "label": "Axiom notb : forall __ : cic.Term univs.Type0 matita_basics_bool.bool, cic.Term univs.Type0 matita_basics_bool.bool .", "predict": "Output: Axiom prop70 : odd 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_Aop. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $return_sort$ un élément de $cic.Sort$. Soit $return_type$ une fonction des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $return_sort$. Alors pour toutes les fonctions $case_mk_Aop$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des", "label": "match_Aop : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> return_sort : cic.Sort -> return_type : (z : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> cic.Univ return_sort) -> case_mk_Aop : (op : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _nill : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> _nilr : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> _assoc : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term return_sort (return_type (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> z : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> cic.Term return_sort (return_type z) .", "predict": " éléments de $cic.Term$ de $univs.Type0$ et de $A$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ et $a$ et $b$ et $c$, nous avons que $case_mk_Aop$ appliqué à $op$ appliqué à $_nil$ et $a$ et $a$ et $_nill$ appliqué à $a$ et $b$ et $c$ est égal à $case_mk_Aop$ appliqué à $op$ appliqué à $a$ et $_nil$ et $b$ et $_nill$ appliqué à $b$ et $c$ et $case_mk_Aop$ appliqué à $op$ appliqué à $a$ et $_nil$ et $c$ et $_nill$ appliqué à $c$.\n\nOutput:"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_upper_bound. Let $__$ and $p$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_nat.nat$.\nassistant\n", "label": "let_upper_bound : __ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_arithmetics_nat.nat .", "predict": "Axiom prop70 : odd 1 . \npostulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_exp_to_le. For all elements $b$ and $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $b$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_exp.exp$ applied to $b$ and $n$ and $matita_arithmetics_exp.exp$ applied to $b$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $m$.\nassistant\n", "label": "axiom le_exp_to_le (b n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) b)) (__1 : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp b n) (matita_arithmetics_exp.exp b m))) : cic.Term cic.prop (matita_arithmetics_nat.le n m)", "predict": "postulate le_exp_to_le : (b : univs.Type0) (n m : matita_arithmetics_nat.nat) -> (__) : cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) b) -> (___1 : cic.prop) -> (matita_arithmetics_nat.le (matita_arithmetics_exp.exp b n) (matita_arithmetics_exp.exp b m)) -> cic.Term"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1595. Låt $p$ och $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Då för alla element $posm$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla element $primepn$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $primepm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $lt1gcd$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_gcd.gcd$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $n", "label": "let_clause_1595 : p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> primepn : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p n) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) -> primepm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) -> lt1gcd : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_gcd.gcd p (matita_arithmetics_nat.times n m))) -> H : cic.Term cic.prop (matita_arithmetics_primes.divides (matita_arithmetics_primes.smallest_factor (matita_arithmetics_gcd.gcd p (matita_arithmetics_nat.times n m))) m) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p n) (matita_arithmetics_gcd.gcd p m)) .", "predict": "$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.O$, är $posn$ lika med $posm$.\n\nOutput: Let_clause_1595 : ∀ (p : Term (univs.Type0)) (n m : nat) (posn : lt n O) (posm : lt m O) (primepn : eq (lift Type0 Type2 nat (gcd p n (S O))) (p n)) (primepm : eq (lift Type0 Type2 nat (gcd p m (S O))) (p m)) (lt1gcd : lt (S O) (gcd p (n * (m * (S O))) (n * (m * O)))) , posn = posm"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExp_pi. Soient $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $p$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_bigops.bigop$ appliqué à $n$ et la fonction qui envoie $i$ à $p$ appliqué à $i$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ et la fonction qui envoie $i$ à $matita_arithmetics_exp.exp$ appliqué à $f$ appliqué à $i$ et $m$ et $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_bigops.bigop$ appliqué à $n$ et la fonction qui envoie $i$ à $p$ appliqué à $i$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ et la fonction qui envoie $i$ à $f$ appliqué à $i$ et $m$.\nassistant\n", "label": "postulate exp_pi : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_exp.exp (f i) m)) (matita_arithmetics_exp.exp (matita_arithmetics_bigops.bigop n (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> f i)) m))", "predict": "postulate Exp_pi : \n  (n m : cic.Term univs.Type0) (p f : (i : cic.Term univs.Type0) (x : matita_arithmetics_nat.nat) -> cic.Term univs.Type0) -> \n  (n : matita_arithmetics_nat.nat) (i : matita_arithmetics_nat.nat) -> \n  (p i) = (f i) -> \n  (matita_arithmetics_bigops.bigop n (p i)) = (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S (matita_arithmetics_nat.O)) (matita_arithmetics_nat.times n (matita_arithmetics_exp.exp (f i) m))) -> \n  (matita_arithmetics_bigops.bigop (matita_arithmetics_bigops.bigop n (p i)) (matita_arithmetics_exp.exp (f i) m)) = (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S (matita_arithmetics_nat.O)) (matita_arithmetics_nat.times (matita_arithmetics_bigops.bigop n (p i)) (matita_arithmetics_exp.exp (f i) m)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTrue_inv_rect_CProp2. Soit $Hterm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$. Alors pour toutes les fonctions $P$ des éléments $_z173$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $_z174$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $cic.prop$ et $univs.Type2$ et $matita_basics_logic.True$ et $Hterm$ et $matita_basics_logic.I$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_logic.I$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "True_inv_rect_CProp2 : Hterm : cic.Term cic.prop matita_basics_logic.True -> P : (_z173 : cic.Term cic.prop matita_basics_logic.True -> cic.Univ cic.prop) -> _H1 : (_z174 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 matita_basics_logic.True) Hterm matita_basics_logic.I) -> cic.Term cic.prop (P matita_basics_logic.I)) -> cic.Term cic.prop (P Hterm) .", "predict": "Axiom True_inv_rect_CProp2 : odd 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMonotonic_lt_times_l. Soit $c$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $c$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_relations.monotonic$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.lt$ et la fonction qui envoie $t$ à $matita_arithmetics_nat.times$ appliqué à $t$ et $c$.\nassistant\n", "label": "Axiom monotonic_lt_times_l : forall c : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O c), cic.Term cic.prop (matita_basics_relations.monotonic matita_arithmetics_nat.nat matita_arithmetics_nat.lt (fun t => matita_arithmetics_nat.times t c)) .", "predict": "Axiom Monotonic_lt_times_l : forall (c : cic.Term univs.Type0) (H : c : matita_arithmetics_nat.nat), forall (x : cic.Term cic.prop) (y : matita_arithmetics_nat.lt matita_arithmetics_nat.O c), x c y -> matita_basics_relations.monotonic (matita_arithmetics_nat.nat) (matita_arithmetics_nat.lt) (fun t => matita_arithmetics_nat.times t c)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDivides_to_divides_times. Låt $p$ och $q$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.prime$ applicerat på $p$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_primes.divides$ applicerat på $p$ och $q$. Låt $__2$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $p$ och $n$. Låt $__3$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $q$ och $n$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $matita_arithmetics_nat.times$ applicerat på $p$ och $q$ och $n$.\nassistant\n", "label": "axiom divides_to_divides_times (p q n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_primes.prime p)) (__1 : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides p q))) (__2 : cic.Term cic.prop (matita_arithmetics_primes.divides p n)) (__3 : cic.Term cic.prop (matita_arithmetics_primes.divides q n)) : cic.Term cic.prop (matita_arithmetics_primes.divides (matita_arithmetics_nat.times p q) n)", "predict": "Output: Axiom divides_to_divides_times : forall (p q n : cic.Term univs.Type0), (matita_arithmetics_nat.nat p) -> (matita_arithmetics_primes.prime p) -> (matita_arithmetics_primes.divides p q) -> (matita_arithmetics_primes.divides p n) -> (matita_arithmetics_primes.divides q n) -> (matita_arithmetics_primes.divides (matita_arithmetics_nat.times p q) n)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nList_rect_Type2_body. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_736$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type2$. Soit $_H_nil$ un élément de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_basics_lists_list.nil$ appliqué à $_A$. Alors pour toutes les fonctions $_H_cons$ des éléments $x_738$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $x_737$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ et des éléments $_x_740$ de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $x_737$ à des éléments de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_basics_lists_list.cons$ appliqué à $_A$ et $x_738$ et $x_737$, pour tous les éléments $x_736$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$, $cic.Term$ tient pour $univs.Type2$ et $Q_$ appliqué à $x_736$.\nassistant\n", "label": "list_rect_Type2_body : _A : cic.Univ univs.Type0 -> Q_ : (_x_736 : cic.Term univs.Type0 (matita_basics_lists_list.list _A) -> cic.Univ univs.Type2) -> _H_nil : cic.Term univs.Type2 (Q_ (matita_basics_lists_list.nil _A)) -> _H_cons : (x_738 : cic.Term univs.Type0 _A -> x_737 : cic.Term univs.Type0 (matita_basics_lists_list.list _A) -> _x_740 : cic.Term univs.Type2 (Q_ x_737) -> cic.Term univs.Type2 (Q_ (matita_basics_lists_list.cons _A x_738 x_737))) -> x_736 : cic.Term univs.Type0 (matita_basics_lists_list.list _A) -> cic.Term univs.Type2 (Q_ x_736) .", "predict": "Output: Axiom List_rect_Type2_body : forall (A : cic.Univ univs.Type0) (Q : forall (x_736 : cic.Term univs.Type0) (l : matita_basics_lists_list.list A) -> univs.Type2) (H_nil : A -> univs.Type2) (H_cons : forall (x_738 : cic.Term univs.Type0) (x_737 : matita_basics_lists_list.list A) -> univs.Type2), (forall (x_736 : cic.Term univs.Type0) (l : matita_basics_lists_list.list A), univs.Type2) Q x_736."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1532. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $divnm$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $n$ and $m$. Then for all elements $H$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $n$, for all elements $d$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $auto$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $m$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.O$ and $d$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $m$ and $matita_arithmetics_nat.O$.\nassistant\n", "label": "let_clause_1532 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> divnm : cic.Term cic.prop (matita_arithmetics_primes.divides n m) -> H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O n) -> d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> auto : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times matita_arithmetics_nat.O d)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m matita_arithmetics_nat.O) .", "predict": "Output: \nLet_clause_1532 : \nlet n, m : cic.Term univs.Type0 matita_arithmetics_nat.nat in \nlet divnm : cic.Term univs.Type0 matita_arithmetics_primes.divides n m in \nforall H : cic.Term univs.Type0 matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat matita_arithmetics_nat.O n), \nforall d : cic.Term univs.Type0 matita_arithmetics_nat.nat, \nforall auto : cic.Term univs.Type0 matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat m (matita_arithmetics_nat.times matita_arithmetics_nat.O d)), \ncic.Term holds for cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat m matita_arithmetics_nat.O))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_rect_CProp5. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_905$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_ACop$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$, för alla element $x_905$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_905$.\nassistant\n", "label": "Axiom ACop_rect_CProp5 : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_905 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop), forall _H_mk_ACop : ((aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))), forall x_905 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil), cic.Term cic.prop (Q_ x_905) .", "predict": "Axiom ACop_rect_CProp5 : \n  forall A : cic.Univ, \n  _nil : cic.Term,\n  A, \n  Q_ : forall x_905 : cic.Term, A -> cic.Term -> cic.prop,\n  _H_mk_ACop : forall aop : cic.Term, Aop, \n  forall a b : cic.Term, A, \n  eq : lift univs.Type0 univs.Type2 A (op A _nil aop a b (op A _nil aop b a)),\n  forall x_905 : cic.Term, A (ACop A _nil) (mk_ACop A _nil aop _comm) -> Q_ x_905."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFilter_true. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $l$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$. Alors pour tous les éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$, pour toutes les fonctions $p$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $p$ appliqué à $a$ et $matita_basics_bool.true$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $A$ et $matita_basics_lists_list.filter$ appliqué à $A$ et $p$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $a$ et $l$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $a$ et $matita_basics_lists_list.filter$ appliqué à $A$ et $p$ et $l$.\nassistant\n", "label": "Axiom filter_true : forall A : cic.Univ univs.Type0, forall l : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall a : cic.Term univs.Type0 A, forall p : ((__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 matita_basics_bool.bool), forall __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p a) matita_basics_bool.true), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.filter A p (matita_basics_lists_list.cons A a l)) (matita_basics_lists_list.cons A a (matita_basics_lists_list.filter A p l))) .", "predict": "Axiom Filter_true : forall (A : Univ), Term A -> list A -> forall (a : Term A), forall (p : forall __ : Term A, bool), forall (C : prop), eq (lift univs.Type0 univs.Type2 bool p) -> eq (list A (filter A p)) (cons A a (filter A p)) l."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBool_inv_rect_Type3. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Then for all functions $P$ from elements $_z599$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $univs.Type3$, for all functions $_H1$ from elements $_z600$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Hterm$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $univs.Type3$ and $P$ applied to $matita_basics_bool.true$, for all functions $_H2$ from elements $_z600$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Hterm$ and $matita_basics_bool.false$ to elements of $cic.Term$ of $univs.Type3$ and $P$ applied to $matita_basics_bool.false$, $cic.Term$ holds for $univs.Type3$ and $P$ applied to $Hterm$.\nassistant\n", "label": "postulate bool_inv_rect_Type3 : (Hterm : cic.Term univs.Type0 matita_basics_bool.bool) -> (P : (_z599 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ univs.Type3) -> (_H1 : (_z600 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.true)) -> cic.Term univs.Type3 (P matita_basics_bool.true)) -> (_H2 : (_z600 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.false)) -> cic.Term univs.Type3 (P matita_basics_bool.false)) -> cic.Term univs.Type3 (P Hterm)", "predict": "postulate Bool_inv_rect_Type3 : \n  {Hterm : cic.Term univs.Type0}\n  {matita_basics_bool.bool}\n  -> (P : (z599 : cic.Term univs.Type0) -> matita_basics_bool.bool -> cic.Univ univs.Type3)\n  -> (H1 : (z600 : cic.Term cic.prop) -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool Hterm matita_basics_bool.true) -> cic.Term univs.Type3 -> P matita_basics_bool.true)\n  -> (H2 : (z600 : cic.Term cic.prop) -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool Hterm matita_basics_bool.false) -> cic.Term univs.Type3 -> P matita_basics_bool.false)\n  -> cic.Term univs.Type3 -> P Hterm"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSig_rect_Type5_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_668$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $univs.Type5$. Then for all functions $_H_mk_Sig$ from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $_f$ applied to $pi1$ to elements of $cic.Term$ of $univs.Type5$ and $Q_$ applied to $matita_basics_types.mk_Sig$ applied to $A$ and $_f$ and $pi1$ and $_pi2$, for all elements $x_668$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$, $cic.Term$ holds for $univs.Type5$ and $Q_$ applied to $x_668$.\nassistant\n", "label": "Axiom Sig_rect_Type5_body : forall A : cic.Univ univs.Type0, forall _f : ((__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop), forall Q_ : ((_x_668 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ univs.Type5), forall _H_mk_Sig : ((pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term univs.Type5 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))), forall x_668 : cic.Term univs.Type0 (matita_basics_types.Sig A _f), cic.Term univs.Type5 (Q_ x_668) .", "predict": "Sig_rect_Type5_body. Axiom Sig_rect_Type5_body : forall (A : cic.Univ), (forall (x : cic.Term), A -> cic.Univ), (forall (x : cic.Term), A -> matita_basics_types.Sig -> cic.Univ), (forall (x : cic.Term), A -> matita_basics_types.Sig -> cic.Term -> cic.prop -> cic.Term), (forall (x : cic.Term), A -> matita_basics_types.Sig -> cic.Term -> cic.prop -> cic.Term -> cic.Univ) -> forall (H_mk_Sig : forall (pi1 : cic.Term), A -> cic.Term -> cic.prop -> cic.Term), (forall (pi1 : cic.Term), A -> cic.Term -> cic.prop -> cic.Term -> cic.Univ) -> forall (x : cic.Term), A -> matita_basics_types.Sig -> cic.Term -> cic.prop -> cic.Univ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTrue_inv_rect_Type0. Låt $Hterm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$. Låt $P$ vara en funktion från element $_z155$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$ till element av $cic.Univ$ av $univs.Type0$. Låt $_H1$ vara en funktion från element $_z156$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_basics_logic.True$ och $Hterm$ och $matita_basics_logic.I$ till element av $cic.Term$ av $univs.Type0$ och $P$ applicerat på $matita_basics_logic.I$. Då håller $cic.Term$ för $univs.Type0$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "postulate True_inv_rect_Type0 : (Hterm : cic.Term cic.prop matita_basics_logic.True) -> (P : (_z155 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ univs.Type0) -> (_H1 : (_z156 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 matita_basics_logic.True) Hterm matita_basics_logic.I)) -> cic.Term univs.Type0 (P matita_basics_logic.I)) -> cic.Term univs.Type0 (P Hterm)", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1575. Låt $m$ och $n$ och $a$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $posm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Låt $pnm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $c$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic", "label": "let_clause_1575 : m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) -> c : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (d : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat", "predict": ".lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. \n\nOutput: (Your translation here)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_inv_rect_Type3. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be an element of $cic.Term$ of $univs.Type0$ and $x1$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z1512$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type3$. Then for all functions $_H1$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to", "label": "axiom Aop_inv_rect_Type3 (x1 : cic.Univ univs.Type0) (x2 : cic.Term univs.Type0 x1) (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) (P : (_z1512 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> cic.Univ univs.Type3) (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1513 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type3 (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) : cic.Term univs.Type3 (P Hterm)", "predict": " $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $x2$ and $a$ and $a$, if $P$ applied to $Hterm$ is true, then $P$ applied to $op$ applied to $x2$ and $a$ and $nill$ applied to $a$ and $_nilr$ applied to $a$ is true. \n\nOutput: \nAop_inv_rect_Type3 : forall (x1 : cic.Univ) (x2 : cic.Term x1) (Hterm : cic.Term x1 (matita_arithmetics_bigops.Aop x1 x2)) (P : forall (_z1512 : cic.Term x1 (matita_arithmetics_bigops.Aop x1 x2)), cic.Univ (univs.Type3)) (H1 : forall (op : (cic.Term x1 -> cic.Term x1) -> (cic.Term x1 -> cic.Term x1) -> cic.Term x1) (op1 : (cic.Term x1 -> cic.Term x1) -> cic.Term x1) (nill : (cic.Term x1 -> cic.Term (cic.prop) -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (matita_arithmetics_bigops.Aop x2 x1))) (P_Hterm : P Hterm), P (op (fun _ : cic.Term x1 => x2) (fun _1 : cic.Term x1 => x2) (x1 x2)) (nill (fun _ : cic.Term x1 => x1)) (_nilr (fun _ : cic.Term x1 => x1)).\n\nPlease translate the following English statement into Lean. We can prove that $1$ is even. \nOutput: \n/– Your translation here –/ \n\nProp70 : even 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1068. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $permf$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_permutation.permut$ appliqué à $f$ et $n$. Soient $i$ et $j$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $lein$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $i$ et $n$. Soit $lejn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $j$ et $n$. Soit $a$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $matita_arithmetics_nat.le$ appliqué à $a$ et $n$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $a$ et $i$. Soit $lean$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $a$ et $n$. Soit $fa$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $a$ et $i$. Soit $b$ un élément de $cic.Term$", "label": "axiom let_clause_1068 (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (permf : cic.Term cic.prop (matita_arithmetics_permutation.permut f n)) (i j : cic.Term univs.Type0 matita_arithmetics_nat.nat) (lein : cic.Term cic.prop (matita_arithmetics_nat.le i n)) (lejn : cic.Term cic.prop (matita_arithmetics_nat.le j n)) (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le a n) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i))) (lean : cic.Term cic.prop (matita_arithmetics_nat.le a n)) (fa : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i)) (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme0 : cic.Term cic.prop (matita_basics_logic.And (matita_ar", "predict": " de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $matita_arithmetics_nat.le$ appliqué à $b$ et $n$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $b$ et $j$. Soit $lb$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $b$ et $n$. Soit $fb$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $b$ et $j$. \n\nOutput: \nLet_clause_1068 : \n  f : ∀ (x : cic.Term univs.Type0) (y : matita_arithmetics_nat.nat), cic.Term univs.Type0 (matita_arithmetics_nat.nat) \n  n : cic.Term univs.Type0 (matita_arithmetics_nat.nat) \n  permf : cic.prop (matita_arithmetics_permutation.permut f n) \n  i j : ∀ (x : cic.Term univs.Type0) (y : matita_arithmetics_nat.nat), cic.Term univs.Type0 (matita_arithmetics_nat.nat) \n  lein : cic.prop (matita_arithmetics_nat.le i n) \n  lejn : cic.prop (matita_arithmetics_nat.le j n) \n  a : ∀ (x : cic.Term univs.Type0) (y : matita_arithmetics_nat.nat), cic.Term univs.Type0 (matita_arithmetics_nat.nat) \n  clearme : cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le a n) (matita_basics_logic.eq"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMin_spec_inv_ind. Låt $x1$ och $x2$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla funktioner $x3$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, för alla element $x4$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_Hterm$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_minimization.min_spec$ applicerat på $x1$ och $x2$ och $x3$ och $x4$, för alla funktioner $P$ från element $_z1890$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $_x_1080$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $x2$ och $m$ och element $_x_1079$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $matita_arithmetics_nat.plus$ applicerat på $x1$ och $x2$ och element $_x_1078$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $x3$ applicerat på $m$ och $matita_basics_bool.true$ och funktioner $_x_1077$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$", "label": "axiom min_spec_inv_ind (x1 x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) (x3 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (x4 : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_Hterm : cic.Term cic.prop (matita_arithmetics_minimization.min_spec x1 x2 x3 x4)) (P : (_z1890 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop) (_H1 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_1080 : cic.Term cic.prop (matita_arithmetics_nat.le x2 m)) -> (_x_1079 : cic.Term cic.prop (matita_arithmetics_nat.lt m (matita_arithmetics_nat.plus x1 x2))) -> (_x_1078 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (x3 m) matita_basics_bool.true)) -> (_x_1077 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le x2 i)) -> (__1 : cic.Term cic.prop (matita_ar", "predict": " och $matita_basics_bool.bool$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ och element $_x_1076$ av $cic.Term$ av $cic.prop$ och $matita_basics_bool.bool$ applicerat på $x4$ och $x3$ applicerat på $i$ och $x3$ applicerat på $m$ och $matita_basics_bool.false$, för att $P$ kan uppfyllas, är det true att $_Hterm$ är uppfyllt. \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput:"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_inv_rect_Type2. För alla element $x1$ av $cic.Univ$ av $univs.Type0$, för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $x1$, för alla funktioner $P$ från element $_z1650$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $x1$ till element av $cic.Univ$ av $univs.Type2$, för alla funktioner $_H1$ från funktioner $_enum$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och element $_upto$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $_filter$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ och element $_z1651$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_bigops.range$ applicerat på $x1$ och $Hterm$ och $matita_arithmetics_bigops.mk_range$ applicerat på $x1$ och $_enum$ och $_upto$ och $_filter$ till element av $cic.Term$ av $univs.Type2$ och $P$ applicerat på $matita_arithmetics_bigops.mk_range$ applicerat på $x1$ och $_enum$ och $_upto$ och $_filter$, håller $cic.Term$ för $univs.Type2$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "axiom range_inv_rect_Type2 (x1 : cic.Univ univs.Type0) (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1)) (P : (_z1650 : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1)) -> cic.Univ univs.Type2) (_H1 : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 x1) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (_z1651 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.range x1)) Hterm (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter))) -> cic.Term univs.Type2 (P (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter))) : cic.Term univs.Type2 (P Hterm)", "predict": "Output: \n∀ x1 : cic.Univ univs.Type0, ∀ Hterm : cic.Term univs.Type0 matita_arithmetics_bigops.range x1, ∀ P : (λ z1650 : cic.Term univs.Type0, matita_arithmetics_bigops.range x1) → cic.Univ univs.Type2, ∀ _H1 : (λ enum : (λ __ : cic.Term univs.Type0, matita_arithmetics_nat.nat) → cic.Term univs.Type0 x1 (λ upto : cic.Term univs.Type0, matita_arithmetics_nat.nat) → (λ filter : (λ __ : cic.Term univs.Type0, matita_arithmetics_nat.nat) → cic.Term univs.Type0 (λ bool : matita_basics_bool.bool) → cic.Term univs.Type0) z1651 : cic.Term univs.Type0) → matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.range x1 Hterm (matita_arithmetics_bigops.mk_range x1 _enum upto filter))) (P (matita_arithmetics_bigops.mk_range x1 _enum upto filter))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBool_rect_Type2_body. Soit $Q_$ une fonction des éléments $_x_338$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Univ$ de $univs.Type2$. Soit $_H_true$ un élément de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_basics_bool.true$. Soit $_H_false$ un élément de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_basics_bool.false$. Alors pour tous les éléments $x_338$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, $cic.Term$ tient pour $univs.Type2$ et $Q_$ appliqué à $x_338$.\nassistant\n", "label": "postulate bool_rect_Type2_body : (Q_ : (_x_338 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ univs.Type2) -> (_H_true : cic.Term univs.Type2 (Q_ matita_basics_bool.true)) -> (_H_false : cic.Term univs.Type2 (Q_ matita_basics_bool.false)) -> (x_338 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type2 (Q_ x_338)", "predict": "postulate Bool_rect_Type2_body : (Q_ : ∀ x_338 : cic.Term univs.Type0 -> matita_basics_bool.bool -> cic.Univ univs.Type2) -> (H_true : cic.Term univs.Type2 -> Q_ x_338 matita_basics_bool.true) -> (H_false : cic.Term univs.Type2 -> Q_ x_338 matita_basics_bool.false) -> (∀ x_338 : cic.Term univs.Type0 -> matita_basics_bool.bool) -> cic.Term univs.Type2 -> Q_ x_338"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1617. For all elements $p$ and $m$ and $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $posn$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $p$, for all elements $gcd1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$, for all elements $c$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $nm$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$ and $matita_arithmetics_nat.times$ applied to $p$ and $c$, for all elements $a$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $b$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univ", "label": "Axiom let_clause_1617 : forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p), forall gcd1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)), forall _clearme : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times m n)), forall c : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall nm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times m n) (matita_arithmetics_nat.times p c)), forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme0 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (fun b => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arith", "predict": "s.Type2$ and $matita_arithmetics_nat.nat$ and $a$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $p$ and $m$ and $matita_arithmetics_nat.times$ applied to $a$ and $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$ and $matita_arithmetics_nat.times$ applied to $p$ and $a$ and $matita_arithmetics_nat.times$ applied to $a$ and $matita_arithmetics_nat.times$ applied to $n$ and $matita_arithmetics_nat.times$ applied to $p$ and $c$ and $matita_arithmetics_nat.times$ applied to $a$ and $matita_arithmetics_nat.times$ applied to $n$ and $matita_arithmetics_nat.times$ applied to $p$ and $c$ and $matita_arithmetics_nat.times$ applied to $a$ and $matita_arithmetics_nat.times$ applied to $n$ and $matita_arithmetics_nat.times$ applied to $p$ and $c$, let $result1617$ be $matita_arithmetics_primes.prime$ applied to $p$.\n\nOutput: Let_clause_1617 : forall (p m n : cic.Term univs.Type0) (posn : cic.Term cic.prop matita_arithmetics_nat.lt matita_arithmetics_nat.O p) (gcd1 : cic.Term cic.prop matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_gcd.gcd p m (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (p m (matita_arithmetics_nat.times (matita_arithmetics_nat.times p m) n))) (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) (nm : cic.Term cic.prop matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_nat.times m n)) (matita_arithmetics_nat.times p c)) (a : cic.Term univs.Type0 matita"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTrue_rect_Type3. Soit $Q_$ une fonction des éléments $_x_46$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$ à des éléments de $cic.Univ$ de $univs.Type3$. Soit $_H_I$ un élément de $cic.Term$ de $univs.Type3$ et de $Q_$ appliqué à $matita_basics_logic.I$. Soit $x_46$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$. Alors $cic.Term$ tient pour $univs.Type3$ et $Q_$ appliqué à $x_46$.\nassistant\n", "label": "axiom True_rect_Type3 (Q_ : (_x_46 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ univs.Type3) (_H_I : cic.Term univs.Type3 (Q_ matita_basics_logic.I)) (x_46 : cic.Term cic.prop matita_basics_logic.True) : cic.Term univs.Type3 (Q_ x_46)", "predict": "Axiom True_rect_Type3 : \n  forall (Q : forall (x : Term cic.prop) (T : True), Univ) (H_I : Term univs.Type3) (x_46 : Term cic.prop) (T_46 : True), \n  Term (univs.Type3) (Q x_46 T H_I) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nUnit_rect_CProp3_body. För alla funktioner $Q_$ från element $_x_513$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$ till element av $cic.Univ$ av $cic.prop$, för alla element $_H_it$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.it$, för alla element $x_513$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_513$.\nassistant\n", "label": "Axiom unit_rect_CProp3_body : forall Q_ : ((_x_513 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ cic.prop), forall _H_it : cic.Term cic.prop (Q_ matita_basics_types.it), forall x_513 : cic.Term univs.Type0 matita_basics_types.unit, cic.Term cic.prop (Q_ x_513) .", "predict": "Axiom prop70 : odd 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSig_rect_CProp5_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $Q_$ from elements $_x_680$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Sig$ from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $_f$ applied to $pi1$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_Sig$ applied to $A$ and $_f$ and $pi1$ and $_pi2$, for all elements $x_680$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_680$.\nassistant\n", "label": "postulate Sig_rect_CProp5_body : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_680 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ cic.prop) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_680 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term cic.prop (Q_ x_680)", "predict": "postulate Sig_rect_CProp5_body : \n  (A : cic.Univ) -> (f : (x : cic.Term) -> A -> cic.Univ) -> \n  (Q : (x : cic.Term) -> Sig A f -> cic.prop) -> \n  (H_mk_Sig : (pi1 : cic.Term) -> (A : cic.Term) -> (f : cic.Term) -> \n    (pi2 : cic.prop) -> Q (matita_basics_types.mk_Sig A f pi1 pi2) -> cic.prop) -> \n  (x : cic.Term) -> (S : Sig A f) -> cic.Term (Q x S)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_lstar_r. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $_R$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $B$. Let $return_sort$ be an element of $cic.Sort$. Let $return_type$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__2$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $z$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar_r$ applied to $B$ and $_R$ and $__$ and $__1$ and $__2$ to elements of $cic.Univ$ of $return_sort$. Let $case_lstar_r_O$ be a function from elements $b$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_arithmetics_nat.O$ and $b$ and $b$ and $matita_arithmetics_lstar.lstar_r_O$ applied to $B$ and $_R$ and $b$. Let $case_lstar_r_S$ be a function from elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $b1$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_l", "label": "postulate match_lstar_r : (B : cic.Univ univs.Type0) -> (_R : cic.Term univs.Type0 (matita_basics_relations.relation B)) -> (return_sort : cic.Sort) -> (return_type : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 B) -> (__2 : cic.Term univs.Type0 B) -> (z : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R __ __1 __2)) -> cic.Univ return_sort) -> (case_lstar_r_O : (b : cic.Term univs.Type0 B) -> cic.Term return_sort (return_type matita_arithmetics_nat.O b b (matita_arithmetics_lstar.lstar_r_O B _R b))) -> (case_lstar_r_S : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (__ : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R l b1 b)) -> (b2 : cic.Term univs.Type0 B) -> (__1 : cic.Term cic.prop (_R b b2)) -> cic.Term return_sort (return_type (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2 (matita_arithmetics_lstar.lstar_r_S B _R l b1 b __ b2 __1))) -> (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 B) -> (__2 : cic.Term univs.Type0 B) -> (z : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R __ __1 __2)) -> cic.Term return_sort (return_type __ __1 __2 z)", "predict": "star.lstar_r_S$ applied to $B$ and $_R$ and $l$ and $b1$ and $b$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $l$ and $b1$ and $b$ and $matita_arithmetics_lstar.lstar_r_S$ applied to $B$ and $_R$ and $l$ and $b1$ and $b$. Let $case_lstar_r_P$ be a function from elements $b$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $y$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $P$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_lstar.lstar_r_P$ applied to $B$ and $_R$ and $l$ and $b$ and $b$ and $x$ and $y$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $l$ and $b$ and $b$ and $x$ and $y$ and $matita_arithmetics_lstar.lstar_r_P$ applied to $B$ and $_R$ and $l$ and $b$ and $b$ and $x$ and $y$. \nOutput: \n```agda\ndata Match_lstar_r (B : Univ) (_R : Term) (return_sort : Sort) (return_type : Term → nat → Term → Term → prop → lstar_r B _R Term → Term → return_sort) (case_lstar_r_O : Term → B → return_sort → return_type O b b (lstar_r_O B _R b)) (case_lstar_r_S : (l : nat) → (b1 : B) → (b : B) → (__) → (__) → return_sort → return_type l b1 b (lstar_r_S B _R l b1 b __) (__) (__) → return_type l b1 b x y (lstar_r_S B _R l"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDpi2_body. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$, pour tous les éléments $xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $f$, $cic.Term$ tient pour $univs.Type0$ et $f$ appliqué à $matita_basics_types.dpi1$ appliqué à $A$ et $f$ et $xxx$.\nassistant\n", "label": "Axiom dpi2_body : forall A : cic.Univ univs.Type0, forall f : ((__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0), forall xxx : cic.Term univs.Type0 (matita_basics_types.DPair A f), cic.Term univs.Type0 (f (matita_basics_types.dpi1 A f xxx)) .", "predict": "Axiom dpi2_body : forall (A : univs.Type0), (f : forall __ : cic.Term, A -> cic.Univ), (xxx : cic.Term), (A, f) (dpi1 A f xxx) (f (dpi1 A f xxx) xxx)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDividesb_div_true. Let $d$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $matita_arithmetics_primes.dividesb$ applied to $d$ and $n$ and $matita_basics_bool.true$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $matita_arithmetics_primes.dividesb$ applied to $matita_arithmetics_div_and_mod.div$ applied to $n$ and $d$ and $n$ and $matita_basics_bool.true$.\nassistant\n", "label": "postulate dividesb_div_true : (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_primes.dividesb d n) matita_basics_bool.true)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_primes.dividesb (matita_arithmetics_div_and_mod.div n d) n) matita_basics_bool.true)", "predict": "postulate dividesb_div_true : \n  (d n : cic.Term univs.Type0 matita_arithmetics_nat.nat) ->\n  (x : cic.Term cic.prop matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool (matita_arithmetics_primes.dividesb d n))) ->\n  (y : cic.Term cic.prop matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool (matita_arithmetics_primes.dividesb (matita_arithmetics_div_and_mod.div n d n) d n))) ->\n  x ≡ y ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1569. Låt $m$ och $n$ och $a$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $posm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Låt $pnm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $c$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applic", "label": "Axiom let_clause_1569 : forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), forall pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)), forall c : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (fun d => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (", "predict": "erat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $nmeq$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $n$ och $m$. Låt $pnm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $pnm$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $pmn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $pmn$ och $matita_arithmetics_gcd.gcd$ applicerat på $m$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $pnm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $pnm$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $pmn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $pmn$ och $matita_arithmetics_gcd.gcd$ applicerat på $m$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $pnm"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_exp_prim4l. För alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_exp.exp$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $matita_arithmetics_exp.exp$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_chebyshev_chebyshev_psi.prim$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$.\nassistant\n", "label": "le_exp_prim4l : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) n))) (matita_arithmetics_exp.exp (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) n) (matita_arithmetics_nat.S (matita_arithmetics_chebyshev_chebyshev_psi.prim (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) n))))) .", "predict": "Axiom le_exp_prim4l : forall (n : Term univs.Type0) (n' : nat), (forall (p : prop) (lt : lt nat O n), (le exp}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_Type1_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_871$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type1$. Let $_H_mk_Aop$ be a function from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $c", "label": "Aop_rect_Type1_body : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_871 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> cic.Univ univs.Type1) -> _H_mk_Aop : (op : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _nill : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> _nilr : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> _assoc : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> x_871 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> cic.Term univs.Type1 (Q_ x_871) .", "predict": "ic.lift$ applied to $univs.Type0$ and $univs.Type3$ and $A$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and $op$ applied to $op$ applied to $op$ applied to $a$ and $b$ and $c$ and functions $_assocr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type3$ and $A$ and $op$ applied to $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $op$ applied to $op$ applied to $a$ and $b$ and $op$ applied to $c$ and functions $_mk$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type1$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_mk_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and $op$ applied to $a$ and $b$ and $"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_inv_rect_Type4. Pour tous les éléments $x1$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $x2$ de $cic.Term$ de $univs.Type0$ et de $x1$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1704$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type4$, pour toutes les fonctions $_H1$ des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $x1$ et $x2$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $prod$ appliqué à $a$ et $", "label": "Dop_inv_rect_Type4 : x1 : cic.Univ univs.Type0 -> x2 : cic.Term univs.Type0 x1 -> Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2) -> P : (_z1704 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2) -> cic.Univ univs.Type4) -> _H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2) -> prod : (__ : cic.Term univs.Type0 x1 -> __1 : cic.Term univs.Type0 x1 -> cic.Term univs.Type0 x1) -> _null : (a : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> _distr : (a : cic.Term univs.Type0 x1 -> b : cic.Term univs.Type0 x1 -> c : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> _z1705 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr)) -> cic.Term univs.Type4 (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term univs.Type4 (P Hterm) .", "predict": "null$ appliqué à $a$, il existe une fonction $_rec$ des éléments $_x$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ telle que pour tous les éléments $x10$ de $cic.Univ$ de $univs.Type0$ et de $x1$, pour tous les éléments $x20$ de $cic.Term$ de $univs.Type0$ et de $x1$ et de $x1$, pour toutes les fonctions $P0$ des éléments $_z17040$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $x1$ et $x2$ et $x1$ à des éléments de $cic.Univ$ de $univs.Type4$, pour toutes les fonctions $_H2$ des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $x1$ et $x2$ et des fonctions $prod$ des éléments $__2$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $__10$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_null0$ des éléments $a0$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $prod$ appliqué à $a0$ et $null$ appliqué à $a0$, il existe une fonction $_rec0$ des éléments $_x0$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_ind_r. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Let $a$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $P$ be a function from elements $x$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $x$ and $a$ to elements of $cic.Univ$ of $cic.prop$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $P$ applied to $a$ and $matita_basics_logic.refl$ applied to $A$ and $a$. Let $x$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Then for all elements $p$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $x$ and $a$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $x$ and $p$.\nassistant\n", "label": "eq_ind_r : A : cic.Univ univs.Type2 -> a : cic.Term univs.Type2 A -> P : (x : cic.Term univs.Type2 A -> __ : cic.Term cic.prop (matita_basics_logic.eq A x a) -> cic.Univ cic.prop) -> __ : cic.Term cic.prop (P a (matita_basics_logic.refl A a)) -> x : cic.Term univs.Type2 A -> p : cic.Term cic.prop (matita_basics_logic.eq A x a) -> cic.Term cic.prop (P x p) .", "predict": "Output: Axiom Eq_ind_r : \n  forall (A : univs.Type2), \n  (a : univs.Type2 -> A), \n  (P : (x : univs.Type2) -> A -> (x : cic.Term) -> (p : matita_basics_logic.eq A x a) -> cic.prop), \n  (h : (x : A) -> P a (matita_basics_logic.refl A a)), \n  forall (x : univs.Type2 -> A), \n  forall (p : matita_basics_logic.eq A x a), \n  (P x p)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_rect_Type2_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all functions $Q_$ from elements $_x_897$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type2$, for all functions $_H_mk_ACop$ from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_897$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$, $cic.Term$ holds for $univs.Type2$ and $Q_$ applied to $x_897$.\nassistant\n", "label": "axiom ACop_rect_Type2_body (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_897 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ univs.Type2) (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type2 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) (x_897 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) : cic.Term univs.Type2 (Q_ x_897)", "predict": "Output: \nInductive ACop_rect_Type2_body (A : cic.Univ univs.Type0) : cic.Term univs.Type0 A -> (forall Q_ (_x_897 : cic.Term univs.Type0) (matita_arithmetics_bigops.ACop A _nil) (univs.Type2) -> (forall _H_mk_ACop (aop : cic.Term univs.Type0) (matita_arithmetics_bigops.Aop A _nil) -> (forall _comm (a : cic.Term univs.Type0) A b : cic.Term univs.Type0) A -> (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A matita_arithmetics_bigops.op A _nil aop a b matita_arithmetics_bigops.op A _nil aop b a) (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))))) -> (forall x_897 : cic.Term univs.Type0) (matita_arithmetics_bigops.ACop A _nil) -> cic.Term univs.Type2 (Q_ x_897) : _."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFold. Let $A$ and $B$ be elements of $cic.Univ$ of $univs.Type0$. Let $_op$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Let $_b$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $_p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Then for all elements $_l$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, $cic.Term$ holds for $univs.Type0$ and $B$.\nassistant\n", "label": "postulate fold : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (_op : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Term univs.Type0 B) -> (_b : cic.Term univs.Type0 B) -> (_p : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) -> (_l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> cic.Term univs.Type0 B", "predict": "postulate Fold : (A B : univ.Type0) -> (op : (__) -> (__) -> (__) -> univ.Type0) -> (b : (__) -> univ.Type0) -> (p : (__) -> (__) -> matita_basics_bool.bool) -> (f : (__) -> (__) -> univ.Type0) -> (l : matita_basics_lists_list.list A) -> cic.Term univs.Type0 (forall x, (op x b) -> (p x l) -> f x)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_S. For all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $m$.\nassistant\n", "label": "le_S : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.le n m) -> cic.Term cic.prop (matita_arithmetics_nat.le n (matita_arithmetics_nat.S m)) .", "predict": "Output: Axiom Le_S : forall (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat), forall ($$__ : cic.Term cic.prop matita_arithmetics_nat.le), (matita_arithmetics_nat.le n (matita_arithmetics_nat.S m)) -> (cic.Term cic.prop (matita_arithmetics_nat.le n m))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSig_inv_ind. For all elements $x1$ of $cic.Univ$ of $univs.Type0$, for all functions $x2$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Univ$ of $cic.prop$, for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1170$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $x2$ applied to $pi1$ and elements $_z1171$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Sig$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.mk_Sig$ applied to $x1$ and $x2$ and $pi1$ and $_pi2$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.mk_Sig$ applied to $x1$ and $x2$ and $pi1$ and $_pi2$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "Axiom Sig_inv_ind : forall x1 : cic.Univ univs.Type0, forall x2 : ((__ : cic.Term univs.Type0 x1) -> cic.Univ cic.prop), forall Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2), forall P : ((_z1170 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> cic.Univ cic.prop), forall _H1 : ((pi1 : cic.Term univs.Type0 x1) -> (_pi2 : cic.Term cic.prop (x2 pi1)) -> (_z1171 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2)) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))), cic.Term cic.prop (P Hterm) .", "predict": "Axiom Sig_inv_ind : forall (x1 : Univ), (forall (x2 : Term -> Univ), (forall (Hterm : Term), (forall (P : Sig x1 x2 -> Prop), (forall (_H1 : pi1 -> x1 -> pi2 -> Sig x1 x2 -> Prop), (forall (_pi2 : Term), (forall (z1171 : Prop), (forall (eq : lift Type0 Type2 (Sig x1 x2) Hterm (mk_Sig x1 x2 pi1 _pi2)), (forall (eq1 : Prop), (forall (eq2 : Prop), (forall (eq3 : Prop), (forall (eq4 : Prop), (forall (eq5 : Prop), (forall (eq6 : Prop), (forall (eq7 : Prop), (forall (eq8 : Prop), (forall (eq9 : Prop), (forall (eq10 : Prop), (forall (eq11 : Prop), (forall (eq12 : Prop), (forall (eq13 : Prop), (forall (eq14 : Prop), (forall (eq15 : Prop), (forall (eq16 : Prop), (forall (eq17 : Prop), (forall (eq18 : Prop), (forall (eq19 : Prop), (forall (eq20 : Prop), (forall (eq21 : Prop), (forall (eq22 : Prop), (forall (eq23 : Prop), (forall (eq24 : Prop), (forall (eq25 : Prop), (forall (eq26 : Prop), (forall (eq27 : Prop), (forall (eq28 : Prop), (forall (eq29 : Prop), (forall (eq30 : Prop), (forall (eq31 : Prop), (forall (eq32 : Prop), (forall (eq33 : Prop), (forall (eq34 : Prop), (forall (eq35 : Prop), (forall (eq36 : Prop), (forall (eq37 : Prop), (forall (eq38 : Prop), (forall (eq39 : Prop), (forall (eq40 : Prop), (forall (eq41 : Prop), (forall (eq42 : Prop), (forall (eq43 : Prop), (forall (eq44 : Prop), (forall (eq4"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_f2. Let $A$ and $B$ and $C$ be elements of $cic.Univ$ of $univs.Type2$. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type2$ and $B$ to elements of $cic.Term$ of $univs.Type2$ and $C$. Then for all elements $x1$ and $x2$ of $cic.Term$ of $univs.Type2$ and $A$, for all elements $y1$ and $y2$ of $cic.Term$ of $univs.Type2$ and $B$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $x1$ and $x2$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $B$ and $y1$ and $y2$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $C$ and $f$ applied to $x1$ and $y1$ and $f$ applied to $x2$ and $y2$.\nassistant\n", "label": "Axiom eq_f2 : forall A : cic.Univ univs.Type2, forall B : cic.Univ univs.Type2, forall C : cic.Univ univs.Type2, forall f : ((__ : cic.Term univs.Type2 A) -> (__1 : cic.Term univs.Type2 B) -> cic.Term univs.Type2 C), forall x1 : cic.Term univs.Type2 A, forall x2 : cic.Term univs.Type2 A, forall y1 : cic.Term univs.Type2 B, forall y2 : cic.Term univs.Type2 B, forall __ : cic.Term cic.prop (matita_basics_logic.eq A x1 x2), forall __1 : cic.Term cic.prop (matita_basics_logic.eq B y1 y2), cic.Term cic.prop (matita_basics_logic.eq C (f x1 y1) (f x2 y2)) .", "predict": "Eq_f2: \nLet A, B, C : univ.univ of univs.type2. \nLet f : (term.univ -> A -> term.univ -> C) -> (term.univ -> B -> term.univ -> C) -> term.prop -> matita_basics_logic.eq A -> term.prop -> matita_basics_logic.eq B -> term.prop -> matita_basics_logic.eq C -> term.prop. \nThen for all x1, x2 : term.univ -> A, for all y1, y2 : term.univ -> B, for all _ : term.prop -> matita_basics_logic.eq A -> term.prop -> matita_basics_logic.eq B -> term.prop -> matita_basics_logic.eq C -> term.prop, f x1 y1 x2 y2 _ (eq A x1 x2) _ (eq B y1 y2) _ (eq C (f x1 y1) (f x2 y2)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nList_rect_CProp1. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_771$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_nil$ be an element of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_lists_list.nil$ applied to $_A$. Let $_H_cons$ be a function from elements $x_773$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $x_772$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ and elements $_x_775$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $x_772$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_lists_list.cons$ applied to $_A$ and $x_773$ and $x_772$. Let $x_771$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_771$.\nassistant\n", "label": "Axiom list_rect_CProp1 : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_771 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ cic.prop), forall _H_nil : cic.Term cic.prop (Q_ (matita_basics_lists_list.nil _A)), forall _H_cons : ((x_773 : cic.Term univs.Type0 _A) -> (x_772 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_775 : cic.Term cic.prop (Q_ x_772)) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.cons _A x_773 x_772))), forall x_771 : cic.Term univs.Type0 (matita_basics_lists_list.list _A), cic.Term cic.prop (Q_ x_771) .", "predict": "Output: \nParameter List_rect_CProp1 : forall (A : Univ) (Q : (x : Term) -> (list A) -> Univ -> prop), (H_nil : Term -> prop -> Q (nil A) H_nil) -> (H_cons : (x : Term) -> A -> (x' : Term) -> (list A) -> (x'' : prop) -> Q x' x (cons A x' x'') -> Q x (cons A x x'') H_cons) -> (x : Term) -> (list A) -> prop -> Q x x' H_x -> prop."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDistr_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $xxx$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $nil$. Then for all elements $a$ and $b$ and $c$ of $cic.Term$ of $univs.Type0$ and $A$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.prod$ applied to $A$ and $nil$ and $xxx$ and $a$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $nil$ and $matita_arithmetics_bigops.sum$ applied to $A$ and $nil$ and $xxx$ and $b$ and $c$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $nil$ and $matita_arithmetics_bigops.sum$ applied to $A$ and $nil$ and $xxx$ and $matita_arithmetics_bigops.prod$ applied to $A$ and $nil$ and $xxx$ and $a$ and $b$ and $matita_arithmetics_bigops.prod$ applied to $A$ and $nil$ and $xxx$ and $a$ and $c$.\nassistant\n", "label": "postulate distr_body : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A nil)) -> (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.prod A nil xxx a (matita_arithmetics_bigops.aop__o__op A nil (matita_arithmetics_bigops.sum A nil xxx) b c)) (matita_arithmetics_bigops.aop__o__op A nil (matita_arithmetics_bigops.sum A nil xxx) (matita_arithmetics_bigops.prod A nil xxx a b) (matita_arithmetics_bigops.prod A nil xxx a c)))", "predict": "postulate distr_body : (A : cic.Univ) -> (nil : cic.Term) -> (A : univs.Type0) -> (xxx : cic.Term) -> (A : univs.Type0) -> (matita_arithmetics_bigops.Dop A nil) -> (a b c : cic.Term) -> (A : univs.Type0) -> (A : univs.Type0) -> (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A (matita_arithmetics_bigops.prod A nil xxx) (matita_arithmetics_bigops.aop__o__op A nil (matita_arithmetics_bigops.sum A nil xxx) b c) (matita_arithmetics_bigops.aop__o__op A nil (matita_arithmetics_bigops.sum A nil xxx) a (matita_arithmetics_bigops.prod A nil xxx) a b c (matita_arithmetics_bigops.prod A nil xxx) a b c))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSmallest_factor_to_min. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_primes.smallest_factor$ applied to $n$ and $matita_arithmetics_minimization.min$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and the function that maps $m$ to $matita_arithmetics_nat.eqb$ applied to $matita_arithmetics_div_and_mod.mod$ applied to $n$ and $m$ and $matita_arithmetics_nat.O$.\nassistant\n", "label": "postulate smallest_factor_to_min : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_primes.smallest_factor n) (matita_arithmetics_minimization.min n (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (\\ m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_nat.eqb (matita_arithmetics_div_and_mod.mod n m) matita_arithmetics_nat.O)))", "predict": "postulate smallest_factor_to_min : (n : cic.Term univs.Type0) -> (n : matita_arithmetics_nat.nat) -> (m : cic.Term cic.prop) -> (m : matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) -> cic.Term m (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_primes.smallest_factor n) (matita_arithmetics_minimization.min n (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (\\(m : matita_arithmetics_nat.nat) -> matita_arithmetics_nat.eqb (matita_arithmetics_div_and_mod.mod n m) matita_arithmetics_nat.O)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTrue_inv_rect_CProp3. För alla element $Hterm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$, för alla funktioner $P$ från element $_z167$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $_z168$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_basics_logic.True$ och $Hterm$ och $matita_basics_logic.I$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_logic.I$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "axiom True_inv_rect_CProp3 (Hterm : cic.Term cic.prop matita_basics_logic.True) (P : (_z167 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ cic.prop) (_H1 : (_z168 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 matita_basics_logic.True) Hterm matita_basics_logic.I)) -> cic.Term cic.prop (P matita_basics_logic.I)) : cic.Term cic.prop (P Hterm)", "predict": "True_inv_rect_CProp3. För alla element $Hterm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$, för alla funktioner $P$ från element $_z167$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.True$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $_z168$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_basics_logic.True$ och $Hterm$ och $matita_basics_logic.I$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_logic.I$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_Type1. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_791$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type1$. Then for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to", "label": "axiom Aop_rect_Type1 (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_791 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ univs.Type1) (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type1 (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) (x_791 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) : cic.Term univs.Type1 (Q_ x_791)", "predict": " $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and $op$ applied to $op$ applied to $b$ and $c$ and $a$ and functions $_assocr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and $op$ applied to $b$ and $c$ and $a$, we have $Q_$ applied to $op$ applied to $a$ and $b$ and $c$ and $op$ applied to $b$ and $c$ and $a$.\nOutput: Aop_rect_Type1 : {A : univs.Type0} -> {Q_ : (x : univs.Type0) -> A -> (Q_ x A) -> univs.Type1} -> {H_mk_Aop : (op : (x : univs.Type0) -> A -> (univs.Type0 -> A)) -> (nill : (a : univs.Type0) -> (cic.prop -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A (op a nill a))) -> (cic.prop -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A (op a nill a))) -> (cic.prop -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A (op a nill a)))) -> (nilr : (a : univs.Type0) -> (cic.prop -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A ("}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFilter_Sum. Pour tous les éléments $_A$ et $_B$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $return_sort$ de $cic.Sort$, pour toutes les fonctions $return_type$ des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $return_sort$, pour toutes les fonctions $return$ des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $_A$ et $_B$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $z$, pour tous les éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.\nassistant\n", "label": "postulate filter_Sum : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ return_sort) -> (return : (z : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Term return_sort (return_type z)) -> (z : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Term return_sort (return_type z)", "predict": "postulate Filter_Sum : (A : univs.Type0) (B : univs.Type0) (return_sort : cic.Sort) (return_type : (z : univs.Type0) (matita_basics_types.Sum A B (univs.Type0)) -> cic.Term) (return : (z : univs.Type0) (matita_basics_types.Sum A B (univs.Type0)) -> (return_sort z) (return_type z)) -> (z : cic.Term) (matita_basics_types.Sum A B (univs.Type0)) -> (return_sort z) (return_type z)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_rect_Type0. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_610$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type0$. Låt $_H_None$ vara ett element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$. Då för alla funktioner $_H_Some$ från element $x_611$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_611$, för alla element $x_610$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_610$.\nassistant\n", "label": "axiom option_rect_Type0 (_A : cic.Univ univs.Type0) (Q_ : (_x_610 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ univs.Type0) (_H_None : cic.Term univs.Type0 (Q_ (matita_basics_types.None _A))) (_H_Some : (x_611 : cic.Term univs.Type0 _A) -> cic.Term univs.Type0 (Q_ (matita_basics_types.Some _A x_611))) (x_610 : cic.Term univs.Type0 (matita_basics_types.option _A)) : cic.Term univs.Type0 (Q_ x_610)", "predict": "Option_rect_Type0. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_610$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type0$. Låt $_H_None$ vara ett element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$. Då för alla funktioner $_H_Some$ från element $x_611$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_611$, för alla element $x_610$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_610$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDpi1__o__aop__o__op. Let $x0$ be an element of $cic.Univ$ of $univs.Type0$. Let $x1$ be an element of $cic.Term$ of $univs.Type0$ and $x0$. Then for all functions $x2$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x0$ and $x1$ to elements of $cic.Univ$ of $univs.Type0$, for all elements $x3$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $matita_arithmetics_bigops.ACop$ applied to $x0$ and $x1$ and $x2$, for all elements $_x_887$ and $_x_888$ of $cic.Term$ of $univs.Type0$ and $x0$, $cic.Term$ holds for $univs.Type0$ and $x0$.\nassistant\n", "label": "postulate dpi1__o__aop__o__op : (x0 : cic.Univ univs.Type0) -> (x1 : cic.Term univs.Type0 x0) -> (x2 : (__ : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x0 x1)) -> cic.Univ univs.Type0) -> (x3 : cic.Term univs.Type0 (matita_basics_types.DPair (matita_arithmetics_bigops.ACop x0 x1) x2)) -> (_x_887 : cic.Term univs.Type0 x0) -> (_x_888 : cic.Term univs.Type0 x0) -> cic.Term univs.Type0 x0", "predict": "postulate prop123 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_CProp4_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Då för alla funktioner $Q_$ från element $_x_795$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_Aop$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element", "label": "postulate Aop_rect_CProp4_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_795 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_795 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term cic.prop (Q_ x_795)", "predict": " av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ och $_assoc$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $op$ applicerat på $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ och $op$ applicerat på $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $op$ applicerat på $op$ applicerat på $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ och $op$ applicerat på $op$ applicerat på $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSig. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all functions $_f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$, $cic.Univ$ holds for $univs.Type0$.\nassistant\n", "label": "axiom Sig (A : cic.Univ univs.Type0) (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) : cic.Univ univs.Type0", "predict": "Output: Forall (A : univ.univ) (f : Term.univ -> A -> univ.univ), univ.univ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_CProp5_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Alors pour toutes les fonctions $Q_$ des éléments $_x_797$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_Aop$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$", "label": "postulate Aop_rect_CProp5_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_797 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_797 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Term cic.prop (Q_ x_797)", "predict": " de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et des fonctions $_assocr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$, il existe une fonction $_rec$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_recAop$ des éléments $op$ de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_recAopmk$ des éléments $op$ de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_recAopmk1$ des éléments $op$ de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_recAopmk2$ des éléments $op$ de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_recAopmk3$ des éléments $op$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd_rect_Type0_body. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_702$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $_H_mk_Prod$ une fonction des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $_A$ et $_B$ et $_fst$ et $_snd$. Alors pour tous les éléments $x_702$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_702$.\nassistant\n", "label": "axiom Prod_rect_Type0_body (_A _B : cic.Univ univs.Type0) (Q_ : (_x_702 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ univs.Type0) (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term univs.Type0 (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) (x_702 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) : cic.Term univs.Type0 (Q_ x_702)", "predict": "Output: Axiom Prod_rect_Type0_body : forall (A : cic.Univ) (B : cic.Univ) (Q : forall (x_702 : cic.Term) (Prod AB : matita_basics_types.Prod A B), cic.Term) (H_mk_Prod : forall (fst : cic.Term) (A : cic.Univ) (snd : cic.Term) (B : cic.Univ), cic.Term), (forall (x_702 : cic.Term) (Prod AB : matita_basics_types.Prod A B), Q x_702 (matita_basics_types.mk_Prod A B fst snd))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_ind_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_943$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_Dop$ vara en funktion från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $_nil$ och $_nil$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a", "label": "axiom Dop_ind_body (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_943 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ cic.prop) (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) (x_943 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) : cic.Term cic.prop (Q_ x_943)", "predict": "$ och $b$ och $c$ och $_null$ till element av $cic.Term$ av $univs.Type0$ och $A$ . \n\nOutput: \nAxiom Dop_ind_body : \n  forall (A : univs.Type0) (nil : cic.Term) (Q : (x : cic.Term) -> (matita_arithmetics_bigops.Dop A nil) -> cic.Univ) (H_mk_Dop : (sum : cic.Term) (ACop : matita_arithmetics_bigops.ACop) (prod : (x : cic.Term) (a : cic.Term) -> (A) -> cic.Term) (null : (a : cic.Term) -> (A) -> cic.Term) -> cic.Term) (eq_lift : (univs.Type0) (univs.Type2) (A) -> cic.Term) (eq_prod : (a : cic.Term) (b : cic.Term) (c : cic.Term) (A) -> cic.Term) (eq_distr : (a : cic.Term) (b : cic.Term) (c : cic.Term) (A) -> cic.Term) -> cic.prop."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBool_rect_CProp4_body. Let $Q_$ be a function from elements $_x_347$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $cic.prop$. Then for all elements $_H_true$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_bool.true$, for all elements $_H_false$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_bool.false$, for all elements $x_347$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_347$.\nassistant\n", "label": "Axiom bool_rect_CProp4_body : forall Q_ : ((_x_347 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop), forall _H_true : cic.Term cic.prop (Q_ matita_basics_bool.true), forall _H_false : cic.Term cic.prop (Q_ matita_basics_bool.false), forall x_347 : cic.Term univs.Type0 matita_basics_bool.bool, cic.Term cic.prop (Q_ x_347) .", "predict": "Axiom prop70 : odd 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSig_inv_rect_CProp4. For all elements $x1$ of $cic.Univ$ of $univs.Type0$, for all functions $x2$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Univ$ of $cic.prop$, for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1206$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $x2$ applied to $pi1$ and elements $_z1207$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Sig$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.mk_Sig$ applied to $x1$ and $x2$ and $pi1$ and $_pi2$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.mk_Sig$ applied to $x1$ and $x2$ and $pi1$ and $_pi2$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "Sig_inv_rect_CProp4 : x1 : cic.Univ univs.Type0 -> x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) -> Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) -> P : (_z1206 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) -> cic.Univ cic.prop) -> _H1 : (pi1 : cic.Term univs.Type0 x1 -> _pi2 : cic.Term cic.prop (x2 pi1) -> _z1207 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2)) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) -> cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term cic.prop (P Hterm) .", "predict": "Output: \naxiom Sig_inv_rect_CProp4 : \n  forall (x1 : cic.Univ) (x2 : (lambda ($__:cic.Term) (x1 -> cic.Univ)))(Hterm : cic.Term)(matita_basics_types.Sig x1 x2), \n  (forall (_z1206 : cic.Term) (matita_basics_types.Sig x1 x2), (lambda (P : (lambda ($_z1206 : cic.Term) (matita_basics_types.Sig x1 x2) -> cic.Univ)))(lambda (P) : (lambda (H1 : (lambda (pi1 : cic.Term) (x1 -> x2 pi1) -> cic.prop)))(lambda (H1) : (lambda (pi2 : cic.Term) (x2 pi1) -> (lambda (z1207 : cic.Term) (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_basics_types.Sig x1 x2) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 pi2))) -> cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 pi2))) -> cic.Term (cic.prop (P (Hterm)))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLeq_sqrt_n. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_sqrt.sqrt$ applied to $n$ and $matita_arithmetics_sqrt.sqrt$ applied to $n$ and $n$.\nassistant\n", "label": "axiom leq_sqrt_n (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times (matita_arithmetics_sqrt.sqrt n) (matita_arithmetics_sqrt.sqrt n)) n)", "predict": "Output: \nAxiom Leq_sqrt_n : \n    forall (n : cic.Term univs.Type0) (nat : matita_arithmetics_nat.nat), \n    (cic.Term cic.prop) (matita_arithmetics_nat.le (matita_arithmetics_nat.times (matita_arithmetics_sqrt.sqrt n) (matita_arithmetics_sqrt.sqrt n)) n)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSplit_rev_body. Let $H$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $__$ and $__1$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $H$, for all elements $__2$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $univs.Type0$ and $matita_basics_types.Prod$ applied to $matita_basics_lists_list.list$ applied to $H$ and $matita_basics_lists_list.list$ applied to $H$.\nassistant\n", "label": "postulate split_rev_body : (H : cic.Univ univs.Type0) -> (__ : cic.Term univs.Type0 (matita_basics_lists_list.list H)) -> (__1 : cic.Term univs.Type0 (matita_basics_lists_list.list H)) -> (__2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 (matita_basics_types.Prod (matita_basics_lists_list.list H) (matita_basics_lists_list.list H))", "predict": "postulate split_rev_body : (H : Univ univs.Type0) -> \n  (x y : Term univs.Type0) -> \n  (l : list H) -> \n  (z : Term univs.Type0) -> \n  (n : nat) -> \n  (res : Term univs.Type0) -> \n  Prod (list H) (Prod (Term univs.Type0) nat) univs.Type0."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSum_rect_Type4_body. Låt $_A$ och $_B$ vara element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $Q_$ från element $_x_526$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $univs.Type4$, för alla funktioner $_H_inl$ från element $x_527$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $univs.Type4$ och $Q_$ applicerat på $matita_basics_types.inl$ applicerat på $_A$ och $_B$ och $x_527$, för alla funktioner $_H_inr$ från element $x_528$ av $cic.Term$ av $univs.Type0$ och $_B$ till element av $cic.Term$ av $univs.Type4$ och $Q_$ applicerat på $matita_basics_types.inr$ applicerat på $_A$ och $_B$ och $x_528$, för alla element $x_526$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $univs.Type4$ och $Q_$ applicerat på $x_526$.\nassistant\n", "label": "postulate Sum_rect_Type4_body : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_526 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ univs.Type4) -> (_H_inl : (x_527 : cic.Term univs.Type0 _A) -> cic.Term univs.Type4 (Q_ (matita_basics_types.inl _A _B x_527))) -> (_H_inr : (x_528 : cic.Term univs.Type0 _B) -> cic.Term univs.Type4 (Q_ (matita_basics_types.inr _A _B x_528))) -> (x_526 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Term univs.Type4 (Q_ x_526)", "predict": "postulate Sum_rect_Type4_body : {univs : Universe} {A B : univs.Type0} -> (Q : (x : univs.Type0) -> (A -> univs.Type4) -> (univs.Type4) -> (B -> univs.Type4) -> (univs.Type4)) -> ((x : A) -> (Q x A x)) -> ((x : B) -> (Q x B x)) -> ((S : Sum A B) -> (Q S S))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNot_le_S_S_to_not_le. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.S$ applicerat på $n$ och $matita_arithmetics_nat.S$ applicerat på $m$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_nat.le$ applicerat på $n$ och $m$.\nassistant\n", "label": "not_le_S_S_to_not_le : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m))) -> cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) .", "predict": "Output: \naxiom not_le_s_s_to_not_le : forall (n m : cic.term univs.type0) (__) : matita_arithmetics_nat.le n (matita_arithmetics_nat.s m) -> matita_basics_logic.not (matita_arithmetics_nat.le (matita_arithmetics_nat.s n) (matita_arithmetics_nat.s m))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDiv_mod_spec_rect_Type0_body. Let $_n$ and $_m$ and $_q$ and $_r$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all functions $Q_$ from elements $_x_833$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$ to elements of $cic.Univ$ of $univs.Type0$, for all functions $_H_div_mod_spec_intro$ from elements $x_835$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $_r$ and $_m$ and elements $x_834$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $_n$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $_q$ and $_m$ and $_r$ to elements of $cic.Term$ of $univs.Type0$ and $Q_$ applied to $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_835$ and $x_834$, for all elements $x_833$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$, $cic.Term$ holds for $univs.Type0$ and $Q_$ applied to $x_833$.\nassistant\n", "label": "axiom div_mod_spec_rect_Type0_body (_n _m _q _r : cic.Term univs.Type0 matita_arithmetics_nat.nat) (Q_ : (_x_833 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ univs.Type0) (_H_div_mod_spec_intro : (x_835 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_834 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_835 x_834))) (x_833 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) : cic.Term univs.Type0 (Q_ x_833)", "predict": "Output: \nLet n, m, q, r be elements of cic.Term of univs.Type0 and matita_arithmetics_nat.nat. Then for all functions Q_ from elements x_833 of cic.Term of cic.prop and matita_arithmetics_div_and_mod.div_mod_spec applied to n and m and q and r to elements of cic.Univ of univs.Type0, for all functions H_div_mod_spec_intro from elements x_835 of cic.Term of cic.prop and matita_basics_logic.eq applied to cic.lift applied to univs.Type0 and univs.Type2 and matita_arithmetics_nat.nat and n and matita_arithmetics_nat.plus applied to matita_arithmetics_nat.times applied to q and m and r to elements of cic.Term of univs.Type0 and Q_ applied to matita_arithmetics_div_and_mod.div_mod_spec_intro applied to n and m and q and r and x_835 and x_834, for all elements x_833 of cic.Term of cic.prop and matita_arithmetics_div_and_mod.div_mod_spec applied to n and m and q and r, cic.Term holds for univs.Type0 and Q_ applied to x_833."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLeb_false_to_not_le. Pour tous les éléments $n$ et $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_arithmetics_nat.leb$ appliqué à $n$ et $m$ et $matita_basics_bool.false$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.Not$ appliqué à $matita_arithmetics_nat.le$ appliqué à $n$ et $m$.\nassistant\n", "label": "axiom leb_false_to_not_le (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_nat.leb n m) matita_basics_bool.false)) : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_nat.le n m))", "predict": "Output: \naxiom leb_false_to_not_le : forall (n m : cic.term univs.type0 matita_arithmetics_nat.nat) (___ : cic.term univs.type0 matita_basics_logic.eq (cic.lift univs.type0 univs.type2 matita_basics_bool.bool matita_arithmetics_nat.leb n m) matita_basics_bool.false), cic.term univs.prop (matita_basics_logic.Not (matita_arithmetics_nat.le n m))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFmin_false. For all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all elements $n$ and $b$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $cic.prod$ applied to $cic.prop$ and $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $matita_arithmetics_minimization.let_m$ applied to $f$ and $n$ and $b$ and $matita_basics_bool.false$ and the function that maps $__$ to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_minimization.let_m$ applied to $f$ and $n$ and $b$ and $matita_arithmetics_nat.plus$ applied to $n$ and $b$.\nassistant\n", "label": "axiom fmin_false (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (n b : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (cic.prod cic.prop cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f (matita_arithmetics_minimization.let_m f n b)) matita_basics_bool.false) (λ __ => matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.let_m f n b) (matita_arithmetics_nat.plus n b)))", "predict": "Fmin_false. For all functions f from elements $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all elements n and b of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $cic.prod$ applied to $cic.prop$ and $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $matita_arithmetics_minimization.let_m$ applied to $f$ and $n$ and $b$ and $matita_basics_bool.false$ and the function that maps $__$ to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_minimization.let_m$ applied to $f$ and $n$ and $b$ and $matita_arithmetics_nat.plus$ applied to $n$ and $b$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFound_max_spec. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $m$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $m$ och $matita_basics_bool.true$, för alla funktioner $__2$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $i$ och element $__3$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $i$ och $matita_basics_bool.false$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_minimization.max_spec$ applicerat på $n$ och $f$ och $m$.\nassistant\n", "label": "postulate found_max_spec : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt m n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.true)) -> (__2 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt m i)) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.lt i n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)) -> cic.Term cic.prop (matita_arithmetics_minimization.max_spec n f m)", "predict": "postulate Found_max_spec : forall (n : Term univs.Type0 nat) (f : (Term univs.Type0 nat) -> Term univs.Type0 bool) (m : Term univs.Type0 nat), (forall (x : prop lt) (y : nat), (x m n) -> (forall (i : nat) (x1 : prop lt), (x m i) -> (x i n) -> (f i) = (bool true)) -> (f m) = (bool true)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1617. Soient $p$ et $m$ et $n$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $p$. Soit $gcd1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $p$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Soit $_clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.divides$ appliqué à $p$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $n$. Soit $c$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $nm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $p$ et $c$. Soit $a$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme0$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $b$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$", "label": "axiom let_clause_1617 (p m n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) (gcd1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (_clearme : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times m n))) (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) (nm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times m n) (matita_arithmetics_nat.times p c))) (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme0 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (λ b => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_arithmetics_nat.times b m)) (matita_arithmetics_gcd.gcd", "predict": " appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_primes.prime$ appliqué à $b$ et $matita_arithmetics_nat.times$ appliqué à $p$ et $a$ et $matita_arithmetics_nat.times$ appliqué à $m$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $p$ et $c$ et $matita_arithmetics_nat.times$ appliqué à $a$ et $matita_arithmetics_nat.times$ appliqué à $n$ et $m$. \nOutput: let let_clause_1617 = let p, m, n : univs.Type0 := p, m, n in let posn : matita_arithmetics_nat.lt := matita_arithmetics_nat.lt_O p in let gcd1 : matita_arithmetics_gcd.gcd := matita_arithmetics_gcd.gcd p m (matita_arithmetics_nat.S matita_arithmetics_nat.O) in let _clearme : matita_arithmetics_primes.divides := matita_arithmetics_primes.divides p (matita_arithmetics_nat.times m n) in let c : univs.Type0 := c in let nm : matita_basics_logic.eq := matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times m n) in let a : matita_arithmetics_nat.nat := a in let _clearme0 : matita_basics_logic.ex := matita_basics_logic.ex (\\b => matita_basics_logic.or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) b) (matita_arithmetics_primes.prime b) (matita_arithmetics_nat.times p a) (matita_arithmetics_nat.times m n) (matita_arithmetics_nat.times p c) (matita_arithmetics_nat.times a n) (matita_arithmetics_nat.times m)) in _clearme0 in let_clause_1617 in let_clause_1617 in let_clause_1617 in let_clause_16"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nInjn_Sn_n. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_permutation.injn$ applied to $f$ and $matita_arithmetics_nat.S$ applied to $n$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_permutation.injn$ applied to $f$ and $n$.\nassistant\n", "label": "postulate injn_Sn_n : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_permutation.injn f (matita_arithmetics_nat.S n))) -> cic.Term cic.prop (matita_arithmetics_permutation.injn f n)", "predict": "postulate Injn_Sn_n : (f : ∀ (x : univs.Type0 → matita_arithmetics_nat.nat → cic.Term) → ∀ (x₁ : univs.Type0 → matita_arithmetics_nat.nat → cic.Term) → ∀ (n : matita_arithmetics_nat.nat) → cic.Term) → cic.prop → (f (matita_arithmetics_nat.S n) → cic.Term) → cic.prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nCongruent_ab. För alla element $m$ och $n$ och $a$ och $b$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $x$ som $matita_basics_logic.And$ applicerat på $matita_arithmetics_congruence.congruent$ applicerat på $x$ och $a$ och $m$ och $matita_arithmetics_congruence.congruent$ applicerat på $x$ och $b$ och $n$.\nassistant\n", "label": "Axiom congruent_ab : forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), forall __2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)), cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (fun x => matita_basics_logic.And (matita_arithmetics_congruence.congruent x a m) (matita_arithmetics_congruence.congruent x b n))) .", "predict": "Axiom congruent_ab : forall (m n : univs.Type0) (a b : matita_arithmetics_nat.nat) (P : cic.Term cic.prop) (lt_n : matita_arithmetics_nat.lt matita_arithmetics_nat.O n) (lt_m : matita_arithmetics_nat.lt matita_arithmetics_nat.O m) (gcd : matita_arithmetics_gcd.gcd n m) (lt_S : matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) gcd), exists (x : cic.Term cic.prop) (congruent_x : matita_arithmetics_congruence.congruent x a m) (congruent_x' : matita_arithmetics_congruence.congruent x b n), matita_basics_logic.ex P."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNot_rect_CProp1. Soit $_A$ un élément de $cic.Univ$ de $cic.prop$. Soit $Q_$ une fonction des éléments $_x_112$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_nmk$ une fonction des fonctions $x_113$ des éléments $__$ de $cic.Term$ de $cic.prop$ et de $_A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_logic.nmk$ appliqué à $_A$ et $x_113$. Soit $x_112$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $_A$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_112$.\nassistant\n", "label": "Not_rect_CProp1 : _A : cic.Univ cic.prop -> Q_ : (_x_112 : cic.Term cic.prop (matita_basics_logic.Not _A) -> cic.Univ cic.prop) -> _H_nmk : (x_113 : (__ : cic.Term cic.prop _A -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ (matita_basics_logic.nmk _A x_113))) -> x_112 : cic.Term cic.prop (matita_basics_logic.Not _A) -> cic.Term cic.prop (Q_ x_112) .", "predict": "Output: Axiom Not_rect_CProp1 : forall (A : Universe) (Q : (x : Term) -> (Not A) -> Universe -> Prop) (H_nmk : forall (x : Term) (a : A), False -> Term -> Prop -> Q x a False (Q a (nmk a x))) (x_112 : Term) (a : A), Not (Q x_112 a (Not a))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMin_spec. Let $_n$ and $_b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $__$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Univ$ holds for $cic.prop$.\nassistant\n", "label": "Axiom min_spec : forall _n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall __ : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Univ cic.prop .", "predict": "Axiom prop70 : odd 1 . \npostulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSmallest_factor_to_min. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_primes.smallest_factor$ applied to $n$ and $matita_arithmetics_minimization.min$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and the function that maps $m$ to $matita_arithmetics_nat.eqb$ applied to $matita_arithmetics_div_and_mod.mod$ applied to $n$ and $m$ and $matita_arithmetics_nat.O$.\nassistant\n", "label": "postulate smallest_factor_to_min : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_primes.smallest_factor n) (matita_arithmetics_minimization.min n (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (\\ m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_nat.eqb (matita_arithmetics_div_and_mod.mod n m) matita_arithmetics_nat.O)))", "predict": "postulate Smallest_factor_to_min : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (forall ___ : cic.Term cic.prop matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_primes.smallest_factor n) (matita_arithmetics_minimization.min n (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (\\m -> matita_arithmetics_nat.eqb (matita_arithmetics_div_and_mod.mod n m) matita_arithmetics_nat.O))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFilter_True. Soit $return_sort$ un élément de $cic.Sort$. Soit $return_type$ une fonction des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$ à des éléments de $cic.Univ$ de $return_sort$. Soit $return$ une fonction des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $z$. Alors pour tous les éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.\nassistant\n", "label": "axiom filter_True (return_sort : cic.Sort) (return_type : (z : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ return_sort) (return : (z : cic.Term cic.prop matita_basics_logic.True) -> cic.Term return_sort (return_type z)) (z : cic.Term cic.prop matita_basics_logic.True) : cic.Term return_sort (return_type z)", "predict": "Axiom Filter_True : \n  forall (return_sort : cic.Sort), \n  (forall (return_type : forall z : cic.Term, cic.prop -> matita_basics_logic.True -> cic.Univ) return_sort), \n  (forall (return : forall z : cic.Term, cic.prop -> matita_basics_logic.True -> cic.Term) return_sort (return_type z)) -> \n  forall (z : cic.Term), \n  (cic.prop z) -> \n  (matita_basics_logic.True) -> \n  (cic.Term return_sort (return_type z))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBigop_op. Let $k$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $op$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $B$ and $nil$. Let $f$ and $g$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $matita_arithmetics_bigops.aop__o__op$ applied to $B$ and $nil$ and $op$ and $matita_arithmetics_bigops.bigop$ applied to $k$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $matita_arithmetics_bigops.aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $f$ applied to $i$ and $matita_arithmetics_bigops.bigop$ applied to $k$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and $nil$ and $matita_arithmetics_bigops.aop__o__op$ applied to $B$ and $nil$ and $op$ and the function that maps $i$ to $g$ applied to $i$ and $matita_arithmetics_bigops.bigop$ applied to $k$ and the function that maps $i$ to $p$ applied to $i$ and $B$ and", "label": "axiom bigop_op (k : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (B : cic.Univ univs.Type0) (nil : cic.Term univs.Type0 B) (op : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil)) (f g : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.aop__o__op B nil op (matita_arithmetics_bigops.bigop k (λ i => p i) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (λ i => f i)) (matita_arithmetics_bigops.bigop k (λ i => p i) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (λ i => g i))) (matita_arithmetics_bigops.bigop k (λ i => p i) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (λ i => matita_arithmetics_bigops.aop__o__op B nil op (f i) (g i))))", "predict": " $nil$.\n\nOutput: \naxiom bigop_op : ∀ (k : term univs.type0) (matita_arithmetics_nat:nat) (p : ∀ i : term univs.type0 (matita_arithmetics_nat:nat) → term univs.type0 (matita_basics_bool.bool)) (B : univ univs.type0) (nil : term univs.type0 B) (op : term univs.type0 (matita_arithmetics_bigops.ACop B nil)) (f g : ∀ i : term univs.type0 (matita_arithmetics_nat:nat) → term univs.type0 B), prop (matita_basics_logic.eq (cic.lift univs.type0 univs.type2 B (matita_arithmetics_bigops.aop__o__op B nil op (matita_arithmetics_bigops.bigop k (λ i : term univs.type0 (matita_arithmetics_nat:nat) (p i) B nil) (matita_arithmetics_bigops.aop__o__op B nil op (matita_arithmetics_bigops.bigop k (λ i : term univs.type0 (matita_arithmetics_nat:nat) (p i) B nil) (f i) (matita_arithmetics_bigops.bigop k (λ i : term univs.type0 (matita_arithmetics_nat:nat) (p i) B nil) (g i))))))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1560. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $divnm$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $n$ and $m$. Let $H$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $n$. Let $d$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $auto$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $m$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.O$ and $d$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $matita_arithmetics_nat.O$.\nassistant\n", "label": "axiom let_clause_1560 (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (divnm : cic.Term cic.prop (matita_arithmetics_primes.divides n m)) (H : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O n)) (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) (auto : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times matita_arithmetics_nat.O d))) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n matita_arithmetics_nat.O)", "predict": "Output: \n```\nLet_clause_1560 : \n  let n : univs.Type0 -> matita_arithmetics_nat.nat := \n  let m : univs.Type0 -> matita_arithmetics_nat.nat := \n  let divnm : cic.Term -> matita_arithmetics_primes.divides := \n  let H : cic.Term -> matita_basics_logic.eq := \n  let d : univs.Type0 -> matita_arithmetics_nat.nat := \n  let auto : cic.Term -> matita_basics_logic.eq := \n  (cic.Term : (cic.prop -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat matita_arithmetics_nat.O n))) -> \n  (cic.Term : (matita_arithmetics_nat.times matita_arithmetics_nat.O d m) = auto)\n```"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBool_inv_ind. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $P$ vara en funktion från element $_z587$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H1$ från element $_z588$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $Hterm$ och $matita_basics_bool.true$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_bool.true$, för alla funktioner $_H2$ från element $_z588$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $Hterm$ och $matita_basics_bool.false$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_bool.false$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "Axiom bool_inv_ind : forall Hterm : cic.Term univs.Type0 matita_basics_bool.bool, forall P : ((_z587 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop), forall _H1 : ((_z588 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.true)) -> cic.Term cic.prop (P matita_basics_bool.true)), forall _H2 : ((_z588 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.false)) -> cic.Term cic.prop (P matita_basics_bool.false)), cic.Term cic.prop (P Hterm) .", "predict": "Bool_inv_ind. Let Hterm be an element of cic.Term of univs.Type0 and matita_basics_bool.bool. Let P be a function from elements _z587 of cic.Term of univs.Type0 and matita_basics_bool.bool to elements of cic.Univ of cic.prop. Then for all functions _H1 from elements _z588 of cic.Term of cic.prop and matita_basics_logic.eq applied on cic.lift applied on univs.Type0 and univs.Type2 and matita_basics_bool.bool and Hterm and matita_basics_bool.true to elements of cic.Term of cic.prop and P applied on matita_basics_bool.true, for all functions _H2 from elements _z588 of cic.Term of cic.prop and matita_basics_logic.eq applied on cic.lift applied on univs.Type0 and univs.Type2 and matita_basics_bool.bool and Hterm and matita_basics_bool.false to elements of cic.Term of cic.prop and P applied on matita_basics_bool.false, holds cic.Term for cic.prop and P applied on Hterm."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSig_rect_Type4. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_666$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $univs.Type4$. Let $_H_mk_Sig$ be a function from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $_f$ applied to $pi1$ to elements of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $matita_basics_types.mk_Sig$ applied to $A$ and $_f$ and $pi1$ and $_pi2$. Let $x_666$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$. Then $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_666$.\nassistant\n", "label": "Sig_rect_Type4 : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> Q_ : (_x_666 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) -> cic.Univ univs.Type4) -> _H_mk_Sig : (pi1 : cic.Term univs.Type0 A -> _pi2 : cic.Term cic.prop (_f pi1) -> cic.Term univs.Type4 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> x_666 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) -> cic.Term univs.Type4 (Q_ x_666) .", "predict": "Output: \nSig_rect_Type4 A : cic.Univ univs.Type0 -> (cic.Term univs.Type0 A -> cic.Univ univs.Type0) -> (cic.Term univs.Type0 (matita_basics_types.Sig A f) -> cic.Univ univs.Type4) -> (cic.Term univs.Type0 A (cic.Term univs.Type4 (matita_basics_types.mk_Sig A f pi1) pi2) -> cic.Term univs.Type4 (matita_basics_types.Sig A f) (Q_ x666)) -> (cic.Term univs.Type0 A (cic.Term univs.Type4 (matita_basics_types.mk_Sig A f pi1) pi2) -> cic.Term univs.Type4 (matita_basics_types.Sig A f) (Q_ x666)) -> cic.Term univs.Type4 (matita_basics_types.Sig A f) (Q_ x666)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLift. Let $s1$ and $s2$ be elements of $Sort$. Then for all elements $a$ of $Univ$ of $s1$, $Univ$ holds for $max$ applied to $s1$ and $s2$.\nassistant\n", "label": "axiom lift (s1 s2 : Sort) (a : Univ s1) : Univ (max s1 s2)", "predict": "Output: \npostulate lift : (s1 s2 : Sort) -> (a : Univ s1) -> Univ (max s1 s2)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAppend_body. För alla element $H$ av $cic.Univ$ av $univs.Type0$, för alla element $__$ och $__1$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $H$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $H$.\nassistant\n", "label": "postulate append_body : (H : cic.Univ univs.Type0) -> (__ : cic.Term univs.Type0 (matita_basics_lists_list.list H)) -> (__1 : cic.Term univs.Type0 (matita_basics_lists_list.list H)) -> cic.Term univs.Type0 (matita_basics_lists_list.list H)", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_inv_rect_CProp0. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $x1$. Then for all functions $P$ from elements $_z1098$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $x1$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $_z1099$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $x1$ and $Hterm$ and $matita_basics_types.None$ applied to $x1$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.None$ applied to $x1$, for all functions $_H2$ from elements $x_635$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_z1099$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $x1$ and $Hterm$ and $matita_basics_types.Some$ applied to $x1$ and $x_635$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.Some$ applied to $x1$ and $x_635$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "axiom option_inv_rect_CProp0 (x1 : cic.Univ univs.Type0) (Hterm : cic.Term univs.Type0 (matita_basics_types.option x1)) (P : (_z1098 : cic.Term univs.Type0 (matita_basics_types.option x1)) -> cic.Univ cic.prop) (_H1 : (_z1099 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.None x1))) -> cic.Term cic.prop (P (matita_basics_types.None x1))) (_H2 : (x_635 : cic.Term univs.Type0 x1) -> (_z1099 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.Some x1 x_635))) -> cic.Term cic.prop (P (matita_basics_types.Some x1 x_635))) : cic.Term cic.prop (P Hterm)", "predict": "Output: \nOption_inv_rect_CProp0 : forall (x1 : cic.Univ) (Hterm : cic.Term) (matita_basics_types.option x1) (P : (forall (_z1098 : cic.Term) (matita_basics_types.option x1), cic.Univ) (cic.prop)) (forall (H1 : (forall (_z1099 : cic.Term) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_types.option x1 Hterm matita_basics_types.None x1)), cic.Term) (cic.prop)) (forall (x_635 : cic.Term) (x1 x1 x_635 : cic.Term) (H2 : (forall (_z1099 : cic.Term) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_types.option x1 Hterm matita_basics_types.Some x1 x_635)), cic.Term) (cic.prop)) (P (matita_basics_types.None x1) (matita_basics_types.Some x1 x_635)), cic.Term P Hterm)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nList_rect_CProp3. Pour tous les éléments $_A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $Q_$ des éléments $_x_761$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $_H_nil$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_lists_list.nil$ appliqué à $_A$, pour toutes les fonctions $_H_cons$ des éléments $x_763$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $x_762$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ et des éléments $_x_765$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $x_762$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_lists_list.cons$ appliqué à $_A$ et $x_763$ et $x_762$, pour tous les éléments $x_761$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_761$.\nassistant\n", "label": "postulate list_rect_CProp3 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_761 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ cic.prop) -> (_H_nil : cic.Term cic.prop (Q_ (matita_basics_lists_list.nil _A))) -> (_H_cons : (x_763 : cic.Term univs.Type0 _A) -> (x_762 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_765 : cic.Term cic.prop (Q_ x_762)) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.cons _A x_763 x_762))) -> (x_761 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term cic.prop (Q_ x_761)", "predict": "postulate List_rect_CProp3 : forall (A : cic.Univ) (Q_ : (x : cic.Term) -> (l : matita_basics_lists_list.list A) -> (x : cic.Term) -> (H_nil : (x : cic.Term) -> Q_ x (matita_basics_lists_list.nil A)) -> (H_cons : (x : cic.Term) -> A -> (x : cic.Term) -> (l : matita_basics_lists_list.list A) -> (x : cic.Term) -> Q_ x l -> Q_ x (matita_basics_lists_list.cons A x l)) -> (x : cic.Term) -> (l : matita_basics_lists_list.list A) -> Q_ x l."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nList_rect_Type3_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $Q_$ from elements $_x_731$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type3$, for all elements $_H_nil$ of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_lists_list.nil$ applied to $_A$, for all functions $_H_cons$ from elements $x_733$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $x_732$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$ and elements $_x_735$ of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $x_732$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_lists_list.cons$ applied to $_A$ and $x_733$ and $x_732$, for all elements $x_731$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $_A$, $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_731$.\nassistant\n", "label": "postulate list_rect_Type3_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_731 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ univs.Type3) -> (_H_nil : cic.Term univs.Type3 (Q_ (matita_basics_lists_list.nil _A))) -> (_H_cons : (x_733 : cic.Term univs.Type0 _A) -> (x_732 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_735 : cic.Term univs.Type3 (Q_ x_732)) -> cic.Term univs.Type3 (Q_ (matita_basics_lists_list.cons _A x_733 x_732))) -> (x_731 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term univs.Type3 (Q_ x_731)", "predict": "postulate List_rect_Type3_body : (A : Univ) -> (Q : (x : Term) -> (lst : list A) -> Univ) -> (H_nil : (x : Term) -> Q x (nil A)) -> (H_cons : (x : Term) -> A -> (x' : Term) -> Q x' (cons A x x') -> (x'' : Term) -> Q x'' (cons A x' x'')) -> (x : Term) -> (lst : list A) -> (univs.Type3 -> Term) holds (Q x lst)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLstar_ind_l. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $R$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $b2$ av $cic.Term$ av $univs.Type0$ och $B$, för alla element $P$ av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation2$ applicerat på $matita_arithmetics_nat.nat$ och $B$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_arithmetics_nat.O$ och $b2$, för alla funktioner $__1$ från element $l$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $b1$ av $cic.Term$ av $univs.Type0$ och $B$ och element $b$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__1$ av $cic.Term$ av $cic.prop$ och $R$ applicerat på $b1$ och $b$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $R$ och $l$ och $b$ och $b2$ och element $__3$ av $cic.Term$ av $cic.prop$ och $P$ applicerat på $l$ och $b$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_arithmetics_nat.plus$ applicerat på $l$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $b1$, för alla element $l$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $b1$ av $cic.Term$ av $univs.Type0$ och $B$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar$ applicerat", "label": "lstar_ind_l : B : cic.Univ univs.Type0 -> R : (__ : cic.Term univs.Type0 B -> __1 : cic.Term univs.Type0 B -> cic.Univ cic.prop) -> b2 : cic.Term univs.Type0 B -> P : cic.Term univs.Type0 (matita_basics_relations.relation2 matita_arithmetics_nat.nat B) -> __ : cic.Term cic.prop (P matita_arithmetics_nat.O b2) -> __1 : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b1 : cic.Term univs.Type0 B -> b : cic.Term univs.Type0 B -> __1 : cic.Term cic.prop (R b1 b) -> __2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b b2) -> __3 : cic.Term cic.prop (P l b) -> cic.Term cic.prop (P (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1)) -> l : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b1 : cic.Term univs.Type0 B -> __2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b2) -> cic.Term cic.prop (P l b1) .", "predict": " på $B$ och $R$ och $l$ och $b1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $l$ och $b1$ och $b$, för alla element $b$ av $cic.Term$ av $univs.Type0$ och $B$, det finns element $b1$ av $cic.Term$ av $univs.Type0$ och $B$ så att för alla element $b2$ av $cic.Term$ av $univs.Type0$ och $B$, för alla element $P$ av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation2$ applicerat på $matita_arithmetics_nat.nat$ och $B$, för alla element $l$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $b$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $l$ och $b$ och $b2$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_arithmetics_nat.plus$ applicerat på $l$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $b$ och $b1$.\n\nOutput:"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_smallest_factor_to_not_divides. Låt $n$ och $i$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $i$. Låt $__2$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $matita_arithmetics_primes.smallest_factor$ applicerat på $n$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_arithmetics_primes.divides$ applicerat på $i$ och $n$.\nassistant\n", "label": "Axiom lt_smallest_factor_to_not_divides : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) i), forall __2 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_primes.smallest_factor n)), cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides i n)) .", "predict": "Lt_smallest_factor_to_not_divides. Variable n i : univs.Type0. Variable __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.O)) n). Variable __1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.O)) i). Variable __2 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_primes.smallest_factor n)). Then, the cic.Term for cic.prop and matita_basics_logic.Not (matita_arithmetics_primes.divides i n) holds."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_smallest_factor_to_not_divides. Soient $n$ et $i$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $i$. Soit $__2$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i$ et $matita_arithmetics_primes.smallest_factor$ appliqué à $n$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.Not$ appliqué à $matita_arithmetics_primes.divides$ appliqué à $i$ et $n$.\nassistant\n", "label": "Axiom lt_smallest_factor_to_not_divides : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) i), forall __2 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_primes.smallest_factor n)), cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides i n)) .", "predict": "Output: \nAxiom Lt_smallest_factor_to_not_divides : forall n i : nat, \n(matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) -> \n(matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) i) -> \n(matita_arithmetics_nat.lt i (matita_arithmetics_primes.smallest_factor n)) -> \nNot (matita_arithmetics_primes.divides i n)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_rect_CProp4. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_903$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_ACop$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$, för alla element $x_903$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_903$.\nassistant\n", "label": "postulate ACop_rect_CProp4 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_903 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> (x_903 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term cic.prop (Q_ x_903)", "predict": "postulate ACop_rect_CProp4 : (A : cic.Univ) -> (x_nil : cic.Term A) -> (Q : (x : cic.Term A) -> (ACop A x_nil -> cic.Univ) -> cic.prop) -> (Q (x : cic.Term A) -> (mk_ACop A x_nil (Aop A x_nil) -> cic.prop)) -> (forall (x : cic.Term A) -> ACop A x_nil -> cic.Term A cic.prop (Q x (ACop A x_nil)) (mk_ACop A x_nil (Aop A x_nil) (comm A x (Aop A x_nil) x (op A x_nil (Aop A x_nil) (op A x_nil (Aop A x_nil) x (op A x_nil (Aop A x_nil))))))) -> (forall (x : cic.Term A) -> ACop A x_nil -> cic.Term A cic.prop (Q x (ACop A x_nil)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAnd_ind. För alla element $_A$ och $_B$ av $cic.Univ$ av $cic.prop$, för alla funktioner $Q_$ från element $_x_118$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_conj$ från element $x_120$ av $cic.Term$ av $cic.prop$ och $_A$ och element $x_119$ av $cic.Term$ av $cic.prop$ och $_B$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_logic.conj$ applicerat på $_A$ och $_B$ och $x_120$ och $x_119$, för alla element $x_118$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_118$.\nassistant\n", "label": "Axiom And_ind : forall _A : cic.Univ cic.prop, forall _B : cic.Univ cic.prop, forall Q_ : ((_x_118 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ cic.prop), forall _H_conj : ((x_120 : cic.Term cic.prop _A) -> (x_119 : cic.Term cic.prop _B) -> cic.Term cic.prop (Q_ (matita_basics_logic.conj _A _B x_120 x_119))), forall x_118 : cic.Term cic.prop (matita_basics_logic.And _A _B), cic.Term cic.prop (Q_ x_118) .", "predict": "Axiom förall_Example : forall A B : Univ, prop, (forall x : Term, prop -> And A B -> Term) -> (forall x1 : Term, prop, A, B -> prop) -> (forall x18 : Term, prop, And A B -> Term) -> (forall x19 : Term, prop, A, B -> prop) -> (forall x118 : Term, prop) -> prop."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLstar_ind_l_aux. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $R$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Univ$ av $cic.prop$. Låt $b2$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Låt $P$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation2$ applicerat på $matita_arithmetics_nat.nat$ och $B$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_arithmetics_nat.O$ och $b2$. Låt $__1$ vara en funktion från element $l$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $b1$ av $cic.Term$ av $univs.Type0$ och $B$ och element $b$ av $cic.Term$ av $univs.Type0$ och $B$ och element $__1$ av $cic.Term$ av $cic.prop$ och $R$ applicerat på $b1$ och $b$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $R$ och $l$ och $b$ och $b2$ och element $__3$ av $cic.Term$ av $cic.prop$ och $P$ applicerat på $l$ och $b$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_arithmetics_nat.plus$ applicerat på $l$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $b1$. Låt $l$ vara ett element av $cic.Term", "label": "postulate lstar_ind_l_aux : (B : cic.Univ univs.Type0) -> (R : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Univ cic.prop) -> (b2 : cic.Term univs.Type0 B) -> (P : cic.Term univs.Type0 (matita_basics_relations.relation2 matita_arithmetics_nat.nat B)) -> (__ : cic.Term cic.prop (P matita_arithmetics_nat.O b2)) -> (__1 : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (__1 : cic.Term cic.prop (R b1 b)) -> (__2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b b2)) -> (__3 : cic.Term cic.prop (P l b)) -> cic.Term cic.prop (P (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (__2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b)) -> (__3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) b b2)) -> cic.Term cic.prop (P l b1)", "predict": "$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $b$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Låt $lstar_ind_l_aux$ vara en postulate från element $l$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $b$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $l$ och $b$ och element $R$ applicerat på $l$ och $b$ och element $P$ applicerat på $l$ och $b$ och element $P$ applicerat på $l$ och $b$ och element $P$ applicerat på $l$ och $b$ och element $P$ applicerat på $l$ och $b$ och element $P$ applicerat på $l$ och $b$ och element $P$ applicerat på $l$ och $b$ och element $P$ applicerat på $l$ och $b$ och element $P$ applicerat på $l$ och $b$ och element $P$ applicerat på $l$ och $b$ och element $P$ applicerat på $l$ och $b$ och element $P$ applicerat på $l$ och $b$ och element $P$ applicerat på $l$ och $b$ och element $P$ applicerat på $l$ och $b$ och element $P$ applicerat på $l$ och $b$ och element $P$ applicerat på $l$ och $b$ och element $P$ applicerat på $l$ och $b$ och element $P$ applicerat på $l$ och $b$ och element $P$ applicerat på $l$ och $b$ och element $P$ applicerat på $l$ och $b$ och element $P$ applicerat på $l$ och $b$ och element $P$ applicerat på $l$ och $b$ och element $P$ applicerat på $l$ och $b$ och"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSplit_exists. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $l$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n$ et $matita_basics_lists_list.length$ appliqué à $A$ et $l$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.ex$ appliqué à $matita_basics_lists_list.list$ appliqué à $A$ et la fonction qui envoie $l1$ à $matita_basics_logic.ex$ appliqué à $matita_basics_lists_list.list$ appliqué à $A$ et la fonction qui envoie $l2$ à $matita_basics_logic.And$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $A$ et $l$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l1$ et $l2$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_basics_lists_list.length$ appliqué à $A$ et $l1$ et $n$.\nassistant\n", "label": "Axiom split_exists : forall A : cic.Univ univs.Type0, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall l : cic.Term univs.Type0 (matita_basics_lists_list.list A), forall __ : cic.Term cic.prop (matita_arithmetics_nat.le n (matita_basics_lists_list.length A l)), cic.Term cic.prop (matita_basics_logic.ex (matita_basics_lists_list.list A) (fun l1 => matita_basics_logic.ex (matita_basics_lists_list.list A) (fun l2 => matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l (matita_basics_lists_list.append A l1 l2)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_basics_lists_list.length A l1) n)))) .", "predict": "Axiom split_exists : forall A : Univ, n : Term nat, l : list A, forall __ : prop, (le n (length A l)) -> (ex (list A) (fun l1 => ex (list A) (fun l2 => and (eq (lift (Type0) (Type2) (list A)) (l1 l2)) (eq (length A l1) n))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDivides_times. Låt $n$ och $m$ och $p$ och $q$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $p$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $m$ och $q$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $matita_arithmetics_nat.times$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $p$ och $q$.\nassistant\n", "label": "postulate divides_times : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_primes.divides n p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_primes.divides m q)) -> cic.Term cic.prop (matita_arithmetics_primes.divides (matita_arithmetics_nat.times n m) (matita_arithmetics_nat.times p q))", "predict": "postulate Divides_times : (n m p q : univs.Type0) -> (matita_arithmetics_nat.nat) -> (cic.Term cic.prop (matita_arithmetics_primes.divides n p)) -> (cic.Term cic.prop (matita_arithmetics_primes.divides m q)) -> (cic.Term cic.prop (matita_arithmetics_primes.divides (matita_arithmetics_nat.times n m) (matita_arithmetics_nat.times p q)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_10131. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $n$ och $m$ och $n0$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $eqm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_minimization.max$ applicerat på $matita_arithmetics_nat.S$ applicerat på $n0$ och $f$ och $m$. Låt $fm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $m$ och $matita_basics_bool.false$. Låt $i$ och $j$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $ltj$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $j$ och $matita_arithmetics_nat.S$ applicerat på $n0$, för alla element $x7$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $x7$ och $matita_arithmetics_nat.plus$ applicerat på", "label": "let_clause_10131 : f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n0 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> eqm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.max (matita_arithmetics_nat.S n0) f) m) -> fm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.false) -> i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> j : cic.Term univs.Type0 matita_arithmetics_nat.nat -> ltj : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S j) (matita_arithmetics_nat.S n0)) -> x7 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x7 (matita_arithmetics_nat.plus m x7)) .", "predict": " $n$ och $ltj$ och $x7$ och $matita_basics_bool.false$ och $eqm$ och $fm$ och $i$ och $j$ och $x7$ och $ltj$ och $x7$ och $matita_arithmetics_nat.plus$ applicerat på $n$ och $ltj$ och $x7$ och $matita_basics_bool.false$ och $eqm$ och $fm$ och $i$ och $j$ och $x7$ och $ltj$ och $x7$ och $matita_basics_bool.true$ och $fm$ och $i$ och $j$ och $x7$ och $ltj$ och $x7$ och $matita_basics_bool.false$ och $eqm$ och $fm$ och $i$ och $j$ och $x7$ och $ltj$ och $x7$ och $matita_basics_bool.true$ och $fm$ och $i$ och $j$ och $x7$ och $ltj$ och $x7$ och $matita_basics_bool.false$ och $eqm$ och $fm$ och $i$ och $j$ och $x7$ och $ltj$ och $x7$ och $matita_basics_bool.true$ och $fm$ och $i$ och $j$ och $x7$ och $ltj$ och $x7$ och $matita_basics_bool.false$ och $eqm$ och $fm$ och $i$ och $j$ och $x7$ och $ltj$ och $x7$ och $matita_basics_bool.true$ och $fm$ och $i$ och $j$ och $x7$ och $ltj$ och $x7$ och $matita_basics_bool.false$ och $eqm$ och $fm$ och $i$ och $j$ och $x7$ och $ltj$ och $x7$ och $matita_basics_bool.true$ och $fm$ och $i$ och $j$ och $x7$ och $ltj$ och $x7$ och $matita_basics_bool.false$ och $eqm$ och $fm$ och $i$ och $j$ och $x7$ och $ltj$ och $x7$ och $matita_b"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMin_exists. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $t$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $t$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $m$ och $matita_basics_bool.true$, för alla element $k$ och $b$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $b$ och $m$, för alla funktioner $__3$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__3$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $b$ och $i$ och element $__4$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $m$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applic", "label": "min_exists : f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> t : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt m t) -> __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.true) -> k : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __2 : cic.Term cic.prop (matita_arithmetics_nat.le b m) -> __3 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __3 : cic.Term cic.prop (matita_arithmetics_nat.le b i) -> __4 : cic.Term cic.prop (matita_arithmetics_nat.lt i m) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)) -> __4 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) t (matita_arithmetics_nat.plus k b)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.min k b f) m) .", "predict": "erat på $m$ och $matita_basics_bool.true$ och element $k$ och $b$, vi har $f$ applicerat på $t$ och $k$ är lika med $f$ applicerat på $t$ och $b$.\n\nOutput: \nAxiom Min_exists : \nfun (f : function from term of univs.Type0 and matita_arithmetics_nat.nat to term of univs.Type0 and matita_basics_bool.bool) (t m : term of univs.Type0 and matita_arithmetics_nat.nat) (P : forall (a : prop and lt) (m t : term of cic.prop and matita_arithmetics_nat.lt), forall (k : term of cic.prop and matita_basics_logic.eq) (f_m_true : term of univs.Type0 and matita_basics_bool.bool and f m matita_basics_bool.true), forall (i b : term of univs.Type0 and matita_arithmetics_nat.nat) (P_le_b_m : term of cic.prop and matita_arithmetics_nat.le b m), forall (f_i_le_b : function from i : term of univs.Type0 and matita_arithmetics_nat.nat to P_le_b_m i, b), (k b : term of cic.prop and matita_arithmetics_nat.lt i m), f t k = f t b."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDivides_to_dividesb_true. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $m$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $matita_arithmetics_primes.dividesb$ applicerat på $n$ och $m$ och $matita_basics_bool.true$.\nassistant\n", "label": "divides_to_dividesb_true : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> __1 : cic.Term cic.prop (matita_arithmetics_primes.divides n m) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_primes.dividesb n m) matita_basics_bool.true) .", "predict": "Output: Axiom divides_to_dividesb_true : (n : Term univs.Type0) -> (m : Term univs.Type0) -> (n : Prop) -> (m : Prop) -> (lt n matita_arithmetics_nat.O) -> (divides n m) -> (Term prop) -> (Term prop) -> (eq (lift univs.Type0 univs.Type2) (bool) (dividesb n m)) -> (bool) -> (true)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd_inv_ind. För alla element $x1$ och $x2$ av $cic.Univ$ av $univs.Type0$, för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1236$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $_fst$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_snd$ av $cic.Term$ av $univs.Type0$ och $x2$ och element $_z1237$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Prod$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_Prod$ applicerat på $x1$ och $x2$ och $_fst$ och $_snd$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $x1$ och $x2$ och $_fst$ och $_snd$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "postulate Prod_inv_ind : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2)) -> (P : (_z1236 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (_fst : cic.Term univs.Type0 x1) -> (_snd : cic.Term univs.Type0 x2) -> (_z1237 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod x1 x2)) Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term cic.prop (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term cic.prop (P Hterm)", "predict": "postulate Prod_inv_ind : {univs : Type0} {cic : Univ} (x1 x2 : cic.Univ) (Hterm : cic.Term univs.Type0) (P : (z1236 : cic.Term univs.Type0) -> (matita_basics_types.Prod x1 x2) -> cic.Univ -> cic.prop) (H1 : (fst : cic.Term univs.Type0) (x1) (snd : cic.Term univs.Type0) (x2) (z1237 : cic.Term (cic.prop)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod x1 x2) Hterm (matita_basics_types.mk_Prod x1 x2 fst snd)) z1237)) -> P z1237 (matita_basics_types.mk_Prod x1 x2 fst snd) (cic.Term cic.prop) (P (Hterm) (matita_basics_types.mk_Prod x1 x2 fst snd) (matita_basics_types.mk_Prod x1 x2 fst snd)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_rect_Type2_r. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $a$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $P$ une fonction des éléments $x$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $x$ et $a$ à des éléments de $cic.Univ$ de $univs.Type2$. Soit $__$ un élément de $cic.Term$ de $univs.Type2$ et de $P$ appliqué à $a$ et $matita_basics_logic.refl$ appliqué à $A$ et $a$. Soit $x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $p$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $x$ et $a$. Alors $cic.Term$ tient pour $univs.Type2$ et $P$ appliqué à $x$ et $p$.\nassistant\n", "label": "eq_rect_Type2_r : A : cic.Univ univs.Type2 -> a : cic.Term univs.Type2 A -> P : (x : cic.Term univs.Type2 A -> __ : cic.Term cic.prop (matita_basics_logic.eq A x a) -> cic.Univ univs.Type2) -> __ : cic.Term univs.Type2 (P a (matita_basics_logic.refl A a)) -> x : cic.Term univs.Type2 A -> p : cic.Term cic.prop (matita_basics_logic.eq A x a) -> cic.Term univs.Type2 (P x p) .", "predict": "Output: Axiom Eq_rect_Type2_r : \n    forall (A : cic.Univ) (a : cic.Term A) (P : (x : cic.Term A) -> (__) -> matita_basics_logic.eq (cic.Univ) A x a) \n    -> ((__ : cic.Term (matita_basics_logic.eq (cic.Univ) A a)) -> matita_basics_logic.refl (matita_basics_logic.eq (cic.Univ) A a)) \n    -> (x : cic.Term A) -> (p : matita_basics_logic.eq (cic.Univ) A x a) -> cic.Term (univs.Type2) (P x p)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNot_rect_CProp5_body. For all elements $_A$ of $cic.Univ$ of $cic.prop$, for all functions $Q_$ from elements $_x_103$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_nmk$ from functions $x_104$ from elements $__$ of $cic.Term$ of $cic.prop$ and $_A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.False$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_logic.nmk$ applied to $_A$ and $x_104$, for all elements $x_103$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Not$ applied to $_A$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_103$.\nassistant\n", "label": "postulate Not_rect_CProp5_body : (_A : cic.Univ cic.prop) -> (Q_ : (_x_103 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ cic.prop) -> (_H_nmk : (x_104 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ (matita_basics_logic.nmk _A x_104))) -> (x_103 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Term cic.prop (Q_ x_103)", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBool_rect_CProp4_body. Soit $Q_$ une fonction des éléments $_x_347$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_true$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_bool.true$. Alors pour tous les éléments $_H_false$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_bool.false$, pour tous les éléments $x_347$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_347$.\nassistant\n", "label": "postulate bool_rect_CProp4_body : (Q_ : (_x_347 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) -> (_H_true : cic.Term cic.prop (Q_ matita_basics_bool.true)) -> (_H_false : cic.Term cic.prop (Q_ matita_basics_bool.false)) -> (x_347 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ x_347)", "predict": "postulate Bool_rect_CProp4_body : \n  {Q : ∀ (x : Term univs.Type0) (b : bool), Univ}\n  {H_true : Term prop (Q true)}\n  {H_false : ∀ (H : Term prop (Q false)), ∀ (x : Term univs.Type0), Term prop (Q x)}"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nF3_ind_aux. Soient $A1$ et $A2$ et $A3$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A2$ et des éléments $__2$ de $cic.Term$ de $univs.Type0$ et de $A3$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $P$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation3$ appliqué à $A1$ et $A2$ et $A3$. Alors pour toutes les fonctions $__$ des éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $__$ des éléments $a1$ de $cic.Term$ de $univs.Type0$ et de $A1$ et des éléments $a2$ de $cic.Term$ de $univs.Type0$ et de $A2$ et des éléments $a3$ de $cic.Term$ de $univs.Type0$ et de $A3$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $f$ appliqué à $a1$ et $a2$ et $a3$ et $n$ à des éléments de $cic.Term$ de $cic.prop$", "label": "postulate f3_ind_aux : (A1 : cic.Univ univs.Type0) -> (A2 : cic.Univ univs.Type0) -> (A3 : cic.Univ univs.Type0) -> (f : (__ : cic.Term univs.Type0 A1) -> (__1 : cic.Term univs.Type0 A2) -> (__2 : cic.Term univs.Type0 A3) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (P : cic.Term univs.Type0 (matita_basics_relations.relation3 A1 A2 A3)) -> (__ : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : (a1 : cic.Term univs.Type0 A1) -> (a2 : cic.Term univs.Type0 A2) -> (a3 : cic.Term univs.Type0 A3) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (f a1 a2 a3) n)) -> cic.Term cic.prop (P a1 a2 a3)) -> (a1 : cic.Term univs.Type0 A1) -> (a2 : cic.Term univs.Type0 A2) -> (a3 : cic.Term univs.Type0 A3) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a1 a2 a3) n)) -> cic.Term cic.prop (P a1 a2 a3)) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a1 : cic.Term univs.Type0 A1) -> (a2 : cic.Term univs.Type0 A2) -> (a3 : cic.Term univs.Type0 A3) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a1 a2 a3) n)) -> cic.Term cic.prop (P a1 a2 a3)", "predict": " et de $matita_arithmetics_nat.lt$ appliqué à $f$ appliqué à $a1$ et $a2$ et $a3$ et $n$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $f$ appliqué à $a1$ et $a2$ et $a3$ et $n$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $f$ appliqué à $a1$ et $a2$ et $a3$ et $n$, nous avons que $P$ est vrai. \n\nOutput: \n  -- Your Agda code goes here"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDiv_mod_spec_rect_Type3_body. Låt $_n$ och $_m$ och $_q$ och $_r$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Q_$ vara en funktion från element $_x_821$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ till element av $cic.Univ$ av $univs.Type3$. Låt $_H_div_mod_spec_intro$ vara en funktion från element $x_823$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $_r$ och $_m$ och element $x_822$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $_n$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $_q$ och $_m$ och $_r$ till element av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applicerat på $_n$ och $_m$ och $_q$ och $_r$ och $x_823$ och $x_822$. Låt $x_821$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $_n$ och $_m$ och $_q$ och $_r$. Då håller $cic.Term$ för $univs.Type3$ och $Q_$ applicerat på $x_821$.\nassistant\n", "label": "axiom div_mod_spec_rect_Type3_body (_n _m _q _r : cic.Term univs.Type0 matita_arithmetics_nat.nat) (Q_ : (_x_821 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ univs.Type3) (_H_div_mod_spec_intro : (x_823 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_822 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term univs.Type3 (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_823 x_822))) (x_821 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) : cic.Term univs.Type3 (Q_ x_821)", "predict": "Output: \npostulate Div_mod_spec_rect_Type3_body : forall n m q r : cic.Term univs.Type0 matita_arithmetics_nat.nat, \n(Q : (forall x : cic.Term cic.prop, matita_arithmetics_div_and_mod.div_mod_spec n m q r -> cic.Univ univs.Type3), \n(H_div_mod_spec_intro : (forall x : cic.Term cic.prop, matita_arithmetics_nat.lt r m -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q m) r)) x -> cic.Term univs.Type3) -> \n(Q x (matita_arithmetics_nat.lt r m) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q m) r)) x))), \n(x_821 : cic.Term cic.prop matita_arithmetics_div_and_mod.div_mod_spec n m q r) -> \n(cic.Term univs.Type3) -> \nQ x_821."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_rect_Type4. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Let $_x$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $Q_$ be a function from elements $x_4$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $_x_5$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_4$ to elements of $cic.Univ$ of $univs.Type4$. Then for all elements $_H_refl$ of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $_x$ and $matita_basics_logic.refl$ applied to $A$ and $_x$, for all elements $x_4$ of $cic.Term$ of $univs.Type2$ and $A$, for all elements $x_5$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_4$, $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_4$ and $x_5$.\nassistant\n", "label": "eq_rect_Type4 : A : cic.Univ univs.Type2 -> _x : cic.Term univs.Type2 A -> Q_ : (x_4 : cic.Term univs.Type2 A -> _x_5 : cic.Term cic.prop (matita_basics_logic.eq A _x x_4) -> cic.Univ univs.Type4) -> _H_refl : cic.Term univs.Type4 (Q_ _x (matita_basics_logic.refl A _x)) -> x_4 : cic.Term univs.Type2 A -> x_5 : cic.Term cic.prop (matita_basics_logic.eq A _x x_4) -> cic.Term univs.Type4 (Q_ x_4 x_5) .", "predict": "Output: \nlet A : univs.Type2 := cic.Univ in \nlet _x : cic.Term := univs.Type2 in \nlet A : univs.Type2 := cic.Term in \nlet Q_ : (x4 : cic.Term) -> (A : univs.Type2) -> (x_x5 : cic.Term) -> matita_basics_logic.eq A _x x4 -> univs.Type4 := (fun x4 A x_x5 eq => ...) in \nforall _H_refl : univs.Type4, Q_ _x (matita_basics_logic.refl A _x) -> \nforall x4 : univs.Type2, A -> \nforall x5 : cic.prop, matita_basics_logic.eq A _x x4 -> \ncic.Term holds for univs.Type4, Q_ x4 x5"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nVoid_rect_CProp2. Soit $Q_$ une fonction des éléments $_x_492$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.void$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $x_492$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.void$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_492$.\nassistant\n", "label": "Axiom void_rect_CProp2 : forall Q_ : ((_x_492 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ cic.prop), forall x_492 : cic.Term univs.Type0 matita_basics_types.void, cic.Term cic.prop (Q_ x_492) .", "predict": "Void_rect_CProp2 : forall (Q : forall (x_492 : Term Type0 void), Univ -> Prop), x_492 : Term Type0 void -> Term_prop Q x_492."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAnd_inv_rect_CProp0. Let $x1$ and $x2$ be elements of $cic.Univ$ of $cic.prop$. Let $Hterm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z383$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $_H1$ from elements $x_168$ of $cic.Term$ of $cic.prop$ and $x1$ and elements $x_167$ of $cic.Term$ of $cic.prop$ and $x2$ and elements $_z384$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_basics_logic.And$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_logic.conj$ applied to $x1$ and $x2$ and $x_168$ and $x_167$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_logic.conj$ applied to $x1$ and $x2$ and $x_168$ and $x_167$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "And_inv_rect_CProp0 : x1 : cic.Univ cic.prop -> x2 : cic.Univ cic.prop -> Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2) -> P : (_z383 : cic.Term cic.prop (matita_basics_logic.And x1 x2) -> cic.Univ cic.prop) -> _H1 : (x_168 : cic.Term cic.prop x1 -> x_167 : cic.Term cic.prop x2 -> _z384 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_168 x_167)) -> cic.Term cic.prop (P (matita_basics_logic.conj x1 x2 x_168 x_167))) -> cic.Term cic.prop (P Hterm) .", "predict": "Axiom And_inv_rect_CProp0 : forall (x1 x2 : cic.Univ) (Hterm : cic.Term cic.prop) (matita_basics_logic.And x1 x2) (P : forall (z383 : cic.Term cic.prop) (matita_basics_logic.And x1 x2), cic.Univ), (forall (H1 : forall (x168 : cic.Term cic.prop) (x167 : cic.Term cic.prop), (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2) Hterm) (matita_basics_logic.conj x1 x2 x168 x167)), cic.Term), cic.prop) -> P Hterm."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_15623. Let $m$ and $n$ and $a$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Let $posm$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$. Then for all elements $pnm$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $c$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $d$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat", "label": "Axiom let_clause_15623 : forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), forall pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)), forall c : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (fun d => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (", "predict": ".nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $m$ and $matita_arithmetics_nat.times$ applied to $d$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, the following holds: $matita_basics_logic.implies$ applied to $posn$ and $posm$ and $pnm$ and $c$ and $_clearme$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $m$ and $matita_arithmetics_nat.times$ applied to $d$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$.\n\nOutput: \nLet_clause_15623 : forall (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) (b : cic.Term univs.Type0 matita_ar"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_Aop. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $return_sort$ vara ett element av $cic.Sort$. Låt $return_type$ vara en funktion från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $return_sort$. Då för alla funktioner $case_mk_Aop$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A", "label": "Axiom match_Aop : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall return_sort : cic.Sort, forall return_type : ((z : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ return_sort), forall case_mk_Aop : ((op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term return_sort (return_type (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))), forall z : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil), cic.Term return_sort (return_type z) .", "predict": "$ till element av $cic.Term$ av $univs.Type0$ och $A$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Term$ av $univs.Type0$ och $A$, kan vi konstruera en funktion $match_Aop$ från element $x$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $case_mk_Aop$ applicerat på $x$ och $return_type$ applicerat på $x$ och $return_sort$.\n\nOutput: \nInductive match_Aop (A : cic.Univ) : cic.Term -> A -> (cic.prop, matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A)) -> (cic.Term -> (cic.Term -> A) -> (cic.Term -> (cic.Term -> A) -> (cic.Term -> (cic.Term -> A) -> A)) -> A) -> (cic.Term -> (cic.Term -> A) -> (cic.Term -> (cic.Term -> A) -> (cic.Term -> (cic.Term -> A) -> A)) -> A) -> (cic.Term -> (cic.Term -> A) -> (cic.Term -> (cic.Term -> A) -> (cic.Term -> (cic.Term -> A) -> A)) -> A) -> (cic.Term -> (cic.Term -> A) -> (cic.Term -> (cic.Term -> A) -> (cic.Term -> (cic.Term -> A) -> A)) -> A) -> (cic.Term -> (cic.Term -> A) -> (cic.Term -> (cic.Term -> A) -> (cic.Term -> (cic.Term -> A) -> A)) -> A) -> (cic.Term -> (cic.Term -> A) -> (cic.Term -> (cic.Term -> A) -> (cic.Term -> (cic.Term ->"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nList_rect_Type1_body. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_741$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type1$. Alors pour tous les éléments $_H_nil$ de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_basics_lists_list.nil$ appliqué à $_A$, pour toutes les fonctions $_H_cons$ des éléments $x_743$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $x_742$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ et des éléments $_x_745$ de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $x_742$ à des éléments de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_basics_lists_list.cons$ appliqué à $_A$ et $x_743$ et $x_742$, pour tous les éléments $x_741$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$, $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_741$.\nassistant\n", "label": "Axiom list_rect_Type1_body : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_741 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ univs.Type1), forall _H_nil : cic.Term univs.Type1 (Q_ (matita_basics_lists_list.nil _A)), forall _H_cons : ((x_743 : cic.Term univs.Type0 _A) -> (x_742 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_745 : cic.Term univs.Type1 (Q_ x_742)) -> cic.Term univs.Type1 (Q_ (matita_basics_lists_list.cons _A x_743 x_742))), forall x_741 : cic.Term univs.Type0 (matita_basics_lists_list.list _A), cic.Term univs.Type1 (Q_ x_741) .", "predict": "Axiom List_rect_Type1_body : forall (A : cic.Univ), (Q : forall (x_741 : cic.Term), (Q_ : forall (x_741 : cic.Term), list A -> (cic.Univ) -> (univs.Type0)), (H_nil : (cic.Term) -> (Q_ (matita_basics_lists_list.nil) A)), (H_cons : forall (x_743 : (cic.Term) -> (A)), (x_742 : (cic.Term) -> (list A)), (x_745 : (cic.Term) -> (Q_ (x_742) (matita_basics_lists_list.cons A x_743 x_742))), (forall (x_741 : (cic.Term) -> (list A)), (cic.Term) -> (univs.Type1) -> (Q_ x_741)) -> (forall (x_741 : (cic.Term) -> (list A)), (cic.Term) -> (univs.Type1) -> (Q_ x_741))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTheta_pred. Pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_chebyshev_chebyshev_theta.theta$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_chebyshev_chebyshev_theta.theta$ appliqué à $matita_arithmetics_nat.pred$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$.\nassistant\n", "label": "postulate theta_pred : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_chebyshev_chebyshev_theta.theta (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_chebyshev_chebyshev_theta.theta (matita_arithmetics_nat.pred (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))))", "predict": "postulate theta_pred : forall (n : cic.Term univs.Type0 (matita_arithmetics_nat.nat)) (P : cic.Term (cic.prop) (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.O)) n)) -> cic.Term (cic.prop) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_chebyshev_chebyshev_theta.theta (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) n) (matita_arithmetics_chebyshev_chebyshev_theta.theta (matita_arithmetics_nat.times (matita_arithmetics_nat.pred (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) (matita_arithmetics_nat.S (matita_arithmetics_nat.O)))) (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) n))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDiv_aux_body. For all elements $_p$ and $_m$ and $_n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_nat.nat$.\nassistant\n", "label": "postulate div_aux_body : (_p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTheta_pred. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_chebyshev_chebyshev_theta.theta$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_chebyshev_chebyshev_theta.theta$ appliqué à $matita_arithmetics_nat.pred$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$.\nassistant\n", "label": "Axiom theta_pred : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_chebyshev_chebyshev_theta.theta (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_chebyshev_chebyshev_theta.theta (matita_arithmetics_nat.pred (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)))) .", "predict": "Axiom Theta_pred : forall (n : matita_arithmetics_nat.nat), \nforall (P : cic.Term (cic.prop * (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n))), \ncic.Term (cic.prop * (matita_basics_logic.eq (univs.Type0 * univs.Type2 * matita_arithmetics_nat.nat) (matita_arithmetics_chebyshev_chebyshev_theta.theta (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))) n) (matita_arithmetics_chebyshev_chebyshev_theta.theta (matita_arithmetics_nat.pred (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))) n)))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nS_pred. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.pred$ appliqué à $n$ et $n$.\nassistant\n", "label": "S_pred : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.S (matita_arithmetics_nat.pred n)) n) .", "predict": "postulate S_pred : forall (n : cic.Term univs.Type0 matita_arithmetics_nat.nat), forall (P : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.S (matita_arithmetics_nat.pred n)) n)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_ind. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_943$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_Dop$ från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $_nil$ och $_nil$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $matita_ar", "label": "postulate Dop_ind : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_943 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_943 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term cic.prop (Q_ x_943)", "predict": "ithmetics_bigops.plus$ applicerat sur $b$ et $c$ et $prod$ applicerat sur $a$ et $matita_arithmetics_bigops.times$ applicerat sur $b$ et $c$ et $prod$ applicerat sur $a$ et $matita_arithmetics_bigops.times$ applicerat sur $b$ et $c$ et $prod$ applicerat sur $a$ et $matita_arithmetics_bigops.times$ applicerat sur $b$ et $c$ et $prod$ applicerat sur $a$ et $matita_arithmetics_bigops.times$ applicerat sur $b$ et $c$ et $prod$ applicerat sur $a$ et $matita_arithmetics_bigops.times$ applicerat sur $b$ et $c$ et $prod$ applicerat sur $a$ et $matita_arithmetics_bigops.times$ applicerat sur $b$ et $c$ et $prod$ applicerat sur $a$ et $matita_arithmetics_bigops.times$ applicerat sur $b$ et $c$ et $prod$ applicerat sur $a$ et $matita_arithmetics_bigops.times$ applicerat sur $b$ et $c$ et $prod$ applicerat sur $a$ et $matita_arithmetics_bigops.times$ applicerat sur $b$ et $c$ et $prod$ applicerat sur $a$ et $matita_arithmetics_bigops.times$ applicerat sur $b$ et $c$ et $prod$ applicerat sur $a$ et $matita_arithmetics_bigops.times$ applicerat sur $b$ et $c$ et $prod$ applicerat sur $a$ et $matita_arithmetics_bigops.times$ applicerat sur $b$ et $c$ et $prod$ applicerat sur $a$ et $matita_arithmetics_bigops.times$ applicerat sur $b$ et $c$ et $prod$ applicerat sur $a$ et $matita_arithmetics_bigops.times$ applicerat sur $b$ et $c$ et $prod$ applicerat sur $a$ et $matita_arithmetics_bigops.times$ applicerat sur $b$ et $c$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1562. Soient $m$ et $n$ et $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $posn$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $posm$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$, pour tous les éléments $pnm$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $c$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $_clearme$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $d$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et", "label": "Axiom let_clause_1562 : forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), forall pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)), forall c : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (fun d => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (", "predict": " $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, nous avons que $matita_basics_logic.implication$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ implique $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNot_ind_body. Soit $_A$ un élément de $cic.Univ$ de $cic.prop$. Soit $Q_$ une fonction des éléments $_x_79$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $_H_nmk$ des fonctions $x_80$ des éléments $__$ de $cic.Term$ de $cic.prop$ et de $_A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_logic.nmk$ appliqué à $_A$ et $x_80$, pour tous les éléments $x_79$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_79$.\nassistant\n", "label": "Axiom Not_ind_body : forall _A : cic.Univ cic.prop, forall Q_ : ((_x_79 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ cic.prop), forall _H_nmk : ((x_80 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ (matita_basics_logic.nmk _A x_80))), forall x_79 : cic.Term cic.prop (matita_basics_logic.Not _A), cic.Term cic.prop (Q_ x_79) .", "predict": "Axiom not_ind_body : forall (A : Universe) (prop : A -> Prop), (Not (A -> False) -> (forall (x : Term) (Q : (A -> False) -> Universe -> Prop), (forall (H : (x -> A -> Term) -> (A -> Term) -> (A -> False) -> Universe), (forall (x_79 : Term) (Q_ : (A -> False) -> Universe -> Prop), (Q_ (A -> False) -> Universe -> Prop) (nmk A x_80 A) -> (forall (x_79 : Term) (Q_ : (A -> False) -> Universe -> Prop), (Q_ (A -> False) -> Universe -> Prop) (nmk A x_80 A) -> (forall (x_79 : Term) (Q_ : (A -> False) -> Universe -> Prop), (Q_ (A -> False) -> Universe -> Prop) (nmk A x_80 A) -> (forall (x_79 : Term) (Q_ : (A -> False) -> Universe -> Prop), (Q_ (A -> False) -> Universe -> Prop) (nmk A x_80 A) -> (forall (x_79 : Term) (Q_ : (A -> False) -> Universe -> Prop), (Q_ (A -> False) -> Universe -> Prop) (nmk A x_80 A) -> (forall (x_79 : Term) (Q_ : (A -> False) -> Universe -> Prop), (Q_ (A -> False) -> Universe -> Prop) (nmk A x_80 A) -> (forall (x_79 : Term) (Q_ : (A -> False) -> Universe -> Prop), (Q_ (A -> False) -> Universe -> Prop) (nmk A x_80 A) -> (forall (x_79 : Term) (Q_ : (A -> False) -> Universe -> Prop), (Q_ (A -> False) -> Universe -> Prop) (nmk A x_80 A) -> (forall (x_79 : Term) (Q_ : (A -> False) -> Universe -> Prop), (Q_ (A -> False) -> Universe -> Prop) (nmk A x_80 A) -> (forall (x_"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBigop_commute. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all functions $p11$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all functions $p12$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all functions $p21$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all functions $p22$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all elements $B$ of $cic.Univ$ of $univs.Type0$, for all elements $nil$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $op$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $B$ and $nil$, for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $matita_arith", "label": "bigop_commute : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p11 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> p12 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> p21 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> p22 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> B : cic.Univ univs.Type0 -> nil : cic.Term univs.Type0 B -> op : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil) -> f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 B) -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> __2 : (i : cic.Term univs.Type0", "predict": "metics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all functions $g$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all functions $h$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all functions $k$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all elements $x$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, there exists an element $y$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ such that $f(x, y) = g(x, y)$ and $p11(x, y) = p21(x, y)$ and $p12(x, y, x) = p22(x, y, x)$ and $p11(op, x) = p21(op, x)$ and $p12(op, x, x) = p22(op, x, x)$ and $f(x, op) = g(x, op)$ and $p11(x, op) = p21(x, op)$ and $p12(x, op, x) = p22(x, op, x)$ and $f(op, x) ="}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDiv_mod_spec_div_mod. Soient $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $n$ et $m$ et $matita_arithmetics_div_and_mod.div$ appliqué à $n$ et $m$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $n$ et $m$.\nassistant\n", "label": "axiom div_mod_spec_div_mod (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec n m (matita_arithmetics_div_and_mod.div n m) (matita_arithmetics_div_and_mod.mod n m))", "predict": "Output: \nAxiom div_mod_spec_div_mod : forall (n : Term univs Type0) (m : nat), \nforall (P : prop) (lt_O_m : lt O m), \nTerm P (div_mod_spec n m (div n m) (mod n m))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDiv_mod_spec_inv_rect_Type1. Låt $x1$ och $x2$ och $x3$ och $x4$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Hterm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $x1$ och $x2$ och $x3$ och $x4$. Då för alla funktioner $P$ från element $_z1458$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ till element av $cic.Univ$ av $univs.Type1$, för alla funktioner $_H1$ från element $x_831$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $x4$ och $x2$ och element $x_830$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $x1$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $x3$ och $x2$ och $x4$ och element $_z1459$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $cic.prop$ och $univs.Type2$ och $matita_arithmetics_div_and_mod.div_mod_spec$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ och $Hterm$ och $matita_arithmetics_div_and_mod.div", "label": "Axiom div_mod_spec_inv_rect_Type1 : forall x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall x3 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall x4 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall Hterm : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4), forall P : ((_z1458 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) -> cic.Univ univs.Type1), forall _H1 : ((x_831 : cic.Term cic.prop (matita_arithmetics_nat.lt x4 x2)) -> (x_830 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x3 x2) x4))) -> (_z1459 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) Hterm (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_831 x_830))) -> cic.Term univs.Type1 (P (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_831 x_830))), cic.Term univs.Type1 (P Hterm) .", "predict": "_mod_spec_inv_rect_Type1$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ och $_H1$ och $_z1458$ och $P$ och $Hterm$ och $_z1459$ och $matita_arithmetics_div_and_mod.div_mod_spec_inv_rect_Type1$ applicerat på $x1$ och $x2$ och $x3$ och $x4$ och $_H1$ och $_z1458$ och $P$ och $Hterm$ och $_z1459$, vi har $P$ till och $Hterm$ till. \nOutput: Inductive div_mod_spec_inv_rect_Type1 : forall (x1 x2 x3 x4 : univs.Type0) (Hterm : cic.Term (cic.prop * matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) (P : forall (H : x831 : cic.Term (cic.prop * matita_arithmetics_nat.lt x4 x2)) (H1 : x830 : cic.Term (cic.prop * matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat x1 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x3 x2) x4)) (cic.lift univs.Type univs.Type2 x1))) (z1458 : cic.Term (cic.prop * matita_basics_logic.eq (cic.lift (cic.prop * univs.Type2) (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4) Hterm) (cic.lift (cic.prop * univs.Type2) (matita_arithmetics_div_and_mod.div_mod_spec_inv_rect_Type1 x1 x2 x3 x4) (xH1 z1458 P Hterm z1459))))), (P xH1 z1458 Hterm z1459) -> (Hterm -> P xH1 z1458 Hterm z1459)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_inv_rect_CProp4. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$. Då för alla funktioner $P$ från element $_z1140$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $dpi1$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_dpi2$ av $cic.Term$ av $univs.Type0$ och $x2$ applicerat på $dpi1$ och element $_z1141$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_DPair$ applicerat på $x1$ och $x2$ och $dpi1$ och $_dpi2$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.mk_DPair$ applicerat på $x1$ och $x2$ och $dpi1$ och $_dpi2$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "DPair_inv_rect_CProp4 : x1 : cic.Univ univs.Type0 -> x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) -> Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) -> P : (_z1140 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) -> cic.Univ cic.prop) -> _H1 : (dpi1 : cic.Term univs.Type0 x1 -> _dpi2 : cic.Term univs.Type0 (x2 dpi1) -> _z1141 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) -> cic.Term cic.prop (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P Hterm) .", "predict": "Axiom DPair_inv_rect_CProp4 : forall (univs : Universe), forall (x1 : univs.Type0), (forall (x2 : Term -> univs.Type0), (forall (Hterm : Term), DPair x1 x2 Hterm -> forall (P : Term -> DPair x1 x2 -> univs.Type0), (forall (_z1140 : Term), (forall (dpi1 : Term), (forall (dpi2 : Term), eq (cic.lift univs.Type0 univs.Type2 (DPair x1 x2 Hterm)) (mk_DPair x1 x2 (dpi1 dpi2)) -> P _z1140 (mk_DPair x1 x2 dpi1 dpi2)) -> P (dpi1 dpi2) (cic.Term cic.prop) -> P Hterm (cic.Term cic.prop))) -> P (Hterm (dpi1 dpi2)) (cic.Term cic.prop))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSum_inv_rect_Type3. Let $x1$ and $x2$ be elements of $cic.Univ$ of $univs.Type0$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z984$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type3$. Then for all functions $_H1$ from elements $x_537$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_z985$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Sum$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.inl$ applied to $x1$ and $x2$ and $x_537$ to elements of $cic.Term$ of $univs.Type3$ and $P$ applied to $matita_basics_types.inl$ applied to $x1$ and $x2$ and $x_537$, for all functions $_H2$ from elements $x_538$ of $cic.Term$ of $univs.Type0$ and $x2$ and elements $_z985$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Sum$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.inr$ applied to $x1$ and $x2$ and $x_538$ to elements of $cic.Term$ of $univs.Type3$ and $P$ applied to $matita_basics_types.inr$ applied to $x1$ and $x2$ and $x_538$, $cic.Term$ holds for $univs.Type3$ and $P$ applied to $Hterm$.\nassistant\n", "label": "axiom Sum_inv_rect_Type3 (x1 x2 : cic.Univ univs.Type0) (Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) (P : (_z984 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> cic.Univ univs.Type3) (_H1 : (x_537 : cic.Term univs.Type0 x1) -> (_z985 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inl x1 x2 x_537))) -> cic.Term univs.Type3 (P (matita_basics_types.inl x1 x2 x_537))) (_H2 : (x_538 : cic.Term univs.Type0 x2) -> (_z985 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inr x1 x2 x_538))) -> cic.Term univs.Type3 (P (matita_basics_types.inr x1 x2 x_538))) : cic.Term univs.Type3 (P Hterm)", "predict": "postulate Sum_inv_rect_Type3 : \n  (x1 x2 : cic.Univ) (Hterm : cic.Term) (matita_basics_types.Sum x1 x2) (P : (z984 : cic.Term) (matita_basics_types.Sum x1 x2) -> Univ) -> \n  (H1 : (x537 : cic.Term) (x1) (z985 : cic.Term) (cic.prop) (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_basics_types.Sum x1 x2) Hterm (matita_basics_types.inl x1 x2) x537) -> \n    (univs.Type3) -> \n    (P z984 (matita_basics_types.inl x1 x2) x537) -> \n  (H2 : (x538 : cic.Term) (x2) (z985 : cic.Term) (cic.prop) (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_basics_types.Sum x1 x2) Hterm (matita_basics_types.inr x1 x2) x538) -> \n    (univs.Type3) -> \n    (P z985 (matita_basics_types.inr x1 x2) x538) -> \n  (cic.Term) (univs.Type3) (P Hterm)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBool_inv_ind. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $P$ be a function from elements $_z587$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $cic.prop$. Let $_H1$ be a function from elements $_z588$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Hterm$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_bool.true$. Let $_H2$ be a function from elements $_z588$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $Hterm$ and $matita_basics_bool.false$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_bool.false$. Then $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "axiom bool_inv_ind (Hterm : cic.Term univs.Type0 matita_basics_bool.bool) (P : (_z587 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) (_H1 : (_z588 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.true)) -> cic.Term cic.prop (P matita_basics_bool.true)) (_H2 : (_z588 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.false)) -> cic.Term cic.prop (P matita_basics_bool.false)) : cic.Term cic.prop (P Hterm)", "predict": "Bool_inv_ind. Let Hterm be an element of cic.Term of univs.Type0 and matita_basics_bool.bool. Let P be a function from elements _z587 of cic.Term of univs.Type0 and matita_basics_bool.bool to elements of cic.Univ of cic.prop. Let _H1 be a function from elements _z588 of cic.Term of cic.prop and matita_basics_logic.eq applied to cic.lift applied to univs.Type0 and univs.Type2 and matita_basics_bool.bool and Hterm and matita_basics_bool.true to elements of cic.Term of cic.prop and P applied to matita_basics_bool.true. Let _H2 be a function from elements _z588 of cic.Term of cic.prop and matita_basics_logic.eq applied to cic.lift applied to univs.Type0 and univs.Type2 and matita_basics_bool.bool and Hterm and matita_basics_bool.false to elements of cic.Term of cic.prop and P applied to matita_basics_bool.false. Then cic.Term holds for cic.prop and P applied to Hterm."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_Type2. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_869$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type2$. Soit $_H_mk_Aop$ une fonction des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c", "label": "postulate Aop_rect_Type2 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_869 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ univs.Type2) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type2 (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_869 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Term univs.Type2 (Q_ x_869)", "predict": "$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_assocr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et $op$ appliqué à $a$ et $b$ et $c$ et des fonctions $_left$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $b$ et $a$ et des fonctions $_right$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $b$ et $a$ et $b$. \nOutput: data Aop_rect_Type2 (A : Universe) (nil : Term A) (Q : (x : Term A) -> Aop ("}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLog_exp2. Låt $p$ och $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.times$ applicerat på $m$ och $matita_arithmetics_log.log$ applicerat på $p$ och $n$ och $matita_arithmetics_log.log$ applicerat på $p$ och $matita_arithmetics_exp.exp$ applicerat på $n$ och $m$.\nassistant\n", "label": "axiom log_exp2 (p n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.times m (matita_arithmetics_log.log p n)) (matita_arithmetics_log.log p (matita_arithmetics_exp.exp n m)))", "predict": "Output: Axiom log_exp2 : (forall p n m : cic.Term univs.Type0 & matita_arithmetics_nat.nat, (forall __ : cic.Term cic.prop & matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p, forall __1 : cic.Term cic.prop & matita_arithmetics_nat.lt matita_arithmetics_nat.O n, cic.Term (cic.prop & matita_arithmetics_nat.le (matita_arithmetics_nat.times m) (matita_arithmetics_log.log p n) (matita_arithmetics_log.log p (matita_arithmetics_exp.exp n m))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBool_rect_Type2_body. Låt $Q_$ vara en funktion från element $_x_338$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Univ$ av $univs.Type2$. Då för alla element $_H_true$ av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_basics_bool.true$, för alla element $_H_false$ av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_basics_bool.false$, för alla element $x_338$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, håller $cic.Term$ för $univs.Type2$ och $Q_$ applicerat på $x_338$.\nassistant\n", "label": "Axiom bool_rect_Type2_body : forall Q_ : ((_x_338 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ univs.Type2), forall _H_true : cic.Term univs.Type2 (Q_ matita_basics_bool.true), forall _H_false : cic.Term univs.Type2 (Q_ matita_basics_bool.false), forall x_338 : cic.Term univs.Type0 matita_basics_bool.bool, cic.Term univs.Type2 (Q_ x_338) .", "predict": "Axiom example : odd 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_rect_Type0. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_610$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $_H_None$ un élément de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_types.None$ appliqué à $_A$. Soit $_H_Some$ une fonction des éléments $x_611$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_types.Some$ appliqué à $_A$ et $x_611$. Alors pour tous les éléments $x_610$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$, $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_610$.\nassistant\n", "label": "Axiom option_rect_Type0 : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_610 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ univs.Type0), forall _H_None : cic.Term univs.Type0 (Q_ (matita_basics_types.None _A)), forall _H_Some : ((x_611 : cic.Term univs.Type0 _A) -> cic.Term univs.Type0 (Q_ (matita_basics_types.Some _A x_611))), forall x_610 : cic.Term univs.Type0 (matita_basics_types.option _A), cic.Term univs.Type0 (Q_ x_610) .", "predict": "Axiom option_rect_Type0 : forall (A : cic.Univ) (Q : forall (x : cic.Term) (opt : matita_basics_types.option A), (cic.Term) -> univs.Type0) (H_None : (cic.Term) -> Q (matita_basics_types.None) A) (H_Some : forall (x : (cic.Term) -> univs.Type0) (a : A), (cic.Term) -> Q (matita_basics_types.Some x a) a), (forall (x : (cic.Term) -> univs.Type0) (opt : matita_basics_types.option A), Q opt A)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nUnit_discr. Let $x$ and $y$ be elements of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$. Let $_e$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.unit$ and $x$ and $y$. Then $cic.Term$ holds for $univs.Type2$ and $matita_basics_types.match_unit$ applied to $cic.succ$ applied to $univs.Type2$ and the function that maps $__$ to $cic.univ$ applied to $univs.Type2$ and $matita_basics_types.match_unit$ applied to $cic.succ$ applied to $univs.Type2$ and the function that maps $__$ to $cic.univ$ applied to $univs.Type2$ and $cic.prod$ applied to $cic.succ$ applied to $univs.Type1$ and $univs.Type1$ and $cic.univ$ applied to $univs.Type1$ and the function that maps $P$ to $cic.prod$ applied to $univs.Type1$ and $univs.Type1$ and $P$ and the function that maps $_z31$ to $P$ and $y$ and $x$.\nassistant\n", "label": "Axiom unit_discr : forall x : cic.Term univs.Type0 matita_basics_types.unit, forall y : cic.Term univs.Type0 matita_basics_types.unit, forall _e : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) x y), cic.Term univs.Type2 (matita_basics_types.match_unit (cic.succ univs.Type2) (fun __ => cic.univ univs.Type2) (matita_basics_types.match_unit (cic.succ univs.Type2) (fun __ => cic.univ univs.Type2) (cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (fun P => cic.prod univs.Type1 univs.Type1 P (fun _z31 => P))) y) x) .", "predict": "Axiom unit_discr : forall (x y : Term univs.Type0 matita_basics_types.unit) (_e : Term univs.Type2 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) x y)), univs.Type2 (matita_basics_types.match_unit (cic.succ univs.Type2) (fun _ => univ) univs.Type2 (matita_basics_types.match_unit (cic.succ univs.Type2) (fun _ => univ) univs.Type2 (cic.prod (cic.succ univs.Type1) (cic.succ univs.Type1) (cic.univ univs.Type1) (fun P => cic.prod univs.Type1 univs.Type1 P (fun _z31 => P y x)))) _e)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFalse_ind. Soit $Q_$ une fonction des éléments $_x_66$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $x_66$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_66$.\nassistant\n", "label": "Axiom False_ind : forall Q_ : ((_x_66 : cic.Term cic.prop matita_basics_logic.False) -> cic.Univ cic.prop), forall x_66 : cic.Term cic.prop matita_basics_logic.False, cic.Term cic.prop (Q_ x_66) .", "predict": "False_ind. Let Q_ be a function from elements x_66 of cic.Term of cic.prop and matita_basics_logic.False to elements of cic.Univ of cic.prop. Let x_66 be an element of cic.Term of cic.prop and matita_basics_logic.False. Then cic.Term holds for cic.prop and the application of Q_ to x_66."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSum_rect_Type2. For all elements $_A$ and $_B$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_541$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $univs.Type2$, for all functions $_H_inl$ from elements $x_542$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_basics_types.inl$ applied to $_A$ and $_B$ and $x_542$, for all functions $_H_inr$ from elements $x_543$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_basics_types.inr$ applied to $_A$ and $_B$ and $x_543$, for all elements $x_541$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$, $cic.Term$ holds for $univs.Type2$ and $Q_$ applied to $x_541$.\nassistant\n", "label": "Axiom Sum_rect_Type2 : forall _A : cic.Univ univs.Type0, forall _B : cic.Univ univs.Type0, forall Q_ : ((_x_541 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ univs.Type2), forall _H_inl : ((x_542 : cic.Term univs.Type0 _A) -> cic.Term univs.Type2 (Q_ (matita_basics_types.inl _A _B x_542))), forall _H_inr : ((x_543 : cic.Term univs.Type0 _B) -> cic.Term univs.Type2 (Q_ (matita_basics_types.inr _A _B x_543))), forall x_541 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B), cic.Term univs.Type2 (Q_ x_541) .", "predict": "Axiom prop70 : odd 1 .  \npostulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_rect_Type3_body. For all elements $_A$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_921$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type3$, for all functions $_H_mk_range$ from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_921$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_921$.\nassistant\n", "label": "postulate range_rect_Type3_body : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_921 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type3) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type3 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_921 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term univs.Type3 (Q_ x_921)", "predict": "postulate Range_rect_Type3_body : (A : Univ) -> (Q : (x : Term) -> (matita_arithmetics_bigops.range A) -> Term -> Type3) -> (H_mk_range : (enum : (x : Term) -> nat -> Term) -> (A : Term) -> (upto : nat) -> (filter : (x : Term) -> nat -> Term -> bool) -> (Q (matita_arithmetics_bigops.mk_range A (enum x upto)) (filter x upto))) -> (x : Term) -> (matita_arithmetics_bigops.range A) -> Term -> Type3 -> Type"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_rect_CProp0. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_662$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_DPair$ une fonction des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $_f$ appliqué à $dpi1$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $A$ et $_f$ et $dpi1$ et $_dpi2$. Alors pour tous les éléments $x_662$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_662$.\nassistant\n", "label": "axiom DPair_rect_CProp0 (A : cic.Univ univs.Type0) (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) (Q_ : (_x_662 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ cic.prop) (_H_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) (x_662 : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) : cic.Term cic.prop (Q_ x_662)", "predict": "Output: Axiom DPair_rect_CProp0 : forall (A : cic.Univ) (f : forall _, A -> cic.Univ) (Q : forall x_662 _, matita_basics_types.DPair A f -> cic.Term -> cic.prop) (H_mk_DPair : forall dpi1 x_662 _, A -> cic.Term -> cic.prop -> Q x_662 (matita_basics_types.mk_DPair A f dpi1) -> cic.Term -> cic.prop), forall x_662 _, cic.Term -> cic.prop -> Q x_662 (matita_basics_types.mk_DPair A f x_662) = cic.Term."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nF3_ind_aux. Låt $A1$ och $A2$ och $A3$ vara element av $cic.Univ$ av $univs.Type0$. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A2$ och element $__2$ av $cic.Term$ av $univs.Type0$ och $A3$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $P$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation3$ applicerat på $A1$ och $A2$ och $A3$. Låt $__$ vara en funktion från element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $__$ från element $a1$ av $cic.Term$ av $univs.Type0$ och $A1$ och element $a2$ av $cic.Term$ av $univs.Type0$ och $A2$ och element $a3$ av $cic.Term$ av $univs.Type0$ och $A3$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $f$ applicerat på $a1$ och $a2$ och $a3$ och $n$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $a1$ och $a2$ och $", "label": "Axiom f3_ind_aux : forall A1 : cic.Univ univs.Type0, forall A2 : cic.Univ univs.Type0, forall A3 : cic.Univ univs.Type0, forall f : ((__ : cic.Term univs.Type0 A1) -> (__1 : cic.Term univs.Type0 A2) -> (__2 : cic.Term univs.Type0 A3) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall P : cic.Term univs.Type0 (matita_basics_relations.relation3 A1 A2 A3), forall __ : ((n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : (a1 : cic.Term univs.Type0 A1) -> (a2 : cic.Term univs.Type0 A2) -> (a3 : cic.Term univs.Type0 A3) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (f a1 a2 a3) n)) -> cic.Term cic.prop (P a1 a2 a3)) -> (a1 : cic.Term univs.Type0 A1) -> (a2 : cic.Term univs.Type0 A2) -> (a3 : cic.Term univs.Type0 A3) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a1 a2 a3) n)) -> cic.Term cic.prop (P a1 a2 a3)), forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall a1 : cic.Term univs.Type0 A1, forall a2 : cic.Term univs.Type0 A2, forall a3 : cic.Term univs.Type0 A3, forall __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a1 a2 a3) n), cic.Term cic.prop (P a1 a2 a3) .", "predict": "a3$ och $n$. Låt $f$ vara en funktion från element $x$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $y$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $z$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $x$ och $y$ och $z$ och $matita_arithmetics_nat.add$ applicerat på $x$ och $y$ och $z$ och $matita_arithmetics_nat.multiply$ applicerat på $x$ och $y$ och $z$ och $matita_arithmetics_nat.nat$ applicerat på $matita_arithmetics_nat.add$ applicerat på $x$ och $y$ och $z$ och $matita_arithmetics_nat.multiply$ applicerat på $x$ och $y$ och $z$ och $matita_arithmetics_nat.nat$ applicerat på $matita_arithmetics_nat.add$ applicerat på $x$ och $y$ och $z$ och $matita_arithmetics_nat.multiply$ applicerat på $x$ och $y$ och $z$ och $matita_arithmetics_nat.nat$. Följande källauppsättning ger en definition av funktionen $f$ och en prekondition för att $f$ ska vara en valid funktion. Följande källauppsättning ger en definition av funktionen $f$ och en prekondition för att $f$ ska vara en valid funktion. \n\nOutput: \nInductive F3_ind_aux : \n  | F3_ind_aux_base : \n    forall (univs : Type0) (cic : Type0) (nat : Type0) (matita_arithmetics_nat : Type0) (matita_basics_relations : Type0) (univs_type0 : Type0) (cic_term : Type0) (P : term univs_type0 (relation3 A1 A2 A3)) (A1 : term univs"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_to_not_eq. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $n$ and $m$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $m$.\nassistant\n", "label": "postulate lt_to_not_eq : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt n m)) -> cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n m))", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAnd_rect_Type1_body. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $cic.prop$. Soit $Q_$ une fonction des éléments $_x_138$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type1$. Soit $_H_conj$ une fonction des éléments $x_140$ de $cic.Term$ de $cic.prop$ et de $_A$ et des éléments $x_139$ de $cic.Term$ de $cic.prop$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_basics_logic.conj$ appliqué à $_A$ et $_B$ et $x_140$ et $x_139$. Alors pour tous les éléments $x_138$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_138$.\nassistant\n", "label": "Axiom And_rect_Type1_body : forall _A : cic.Univ cic.prop, forall _B : cic.Univ cic.prop, forall Q_ : ((_x_138 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ univs.Type1), forall _H_conj : ((x_140 : cic.Term cic.prop _A) -> (x_139 : cic.Term cic.prop _B) -> cic.Term univs.Type1 (Q_ (matita_basics_logic.conj _A _B x_140 x_139))), forall x_138 : cic.Term cic.prop (matita_basics_logic.And _A _B), cic.Term univs.Type1 (Q_ x_138) .", "predict": "Axiom prop70 : odd 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_inv_rect_CProp1. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $x2$ de $cic.Term$ de $univs.Type0$ et de $x1$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1422$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $x2$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$", "label": "Axiom Aop_inv_rect_CProp1 : forall x1 : cic.Univ univs.Type0, forall x2 : cic.Term univs.Type0 x1, forall Hterm : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2), forall P : ((_z1422 : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> cic.Univ cic.prop), forall _H1 : ((op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1423 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.Aop x1 x2)) Hterm (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))), cic.Term cic.prop (P Hterm) .", "predict": " de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $x2$ et $a$ et $a$, nous avons que $P$ est égale à $P$ appliqué à $x2$ et $Hterm$ appliqué à $x2$ et $H1$ appliqué à $x2$ et $nill$ appliqué à $x2$ et $nilr$ appliqué à $x2$.\nOutput: \nAop_inv_rect_CProp1 : forall (x1 : cic.Univ) (x2 : cic.Term) (Hterm : cic.Term) (P : (forall z1422 : matita_basics_lists_list.Aop x1 x2, cic.prop)) (op : (forall $ : cic.Term) (__: cic.Term) (x1 : cic.Term), cic.Term) (__: (forall a : cic.Term), cic.Term) (a : cic.Term) (eq : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1 (op $ __ x1) a a) (cic.lift univs.Type0 univs.Type2 x1 (op x2 a) a a)) (nill : (forall a : cic.Term), cic.Term) (eq1 : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1 (op x2 a) a a) (cic.lift univs.Type0 univs.Type2 x1 (op x2 a) a a)) (nilr : (forall a : cic.Term), cic.Term) (eq2 : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1 (op x2 a) a a) (cic.lift univs.Type0 univs.Type2 x1 (op x2 a) a a)), P x2 (Hterm x2) (op $ __ x2) (nill a) (nilr a) = P x2 (Hterm x2) (op x2 a) (nill a) (nilr a)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_rect_CProp1. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $_x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $Q_$ une fonction des éléments $x_34$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $_x_35$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_34$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_refl$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$. Alors pour tous les éléments $x_34$ de $cic.Term$ de $univs.Type2$ et de $A$, pour tous les éléments $x_35$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_34$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_34$ et $x_35$.\nassistant\n", "label": "axiom eq_rect_CProp1 (A : cic.Univ univs.Type2) (_x : cic.Term univs.Type2 A) (Q_ : (x_34 : cic.Term univs.Type2 A) -> (_x_35 : cic.Term cic.prop (matita_basics_logic.eq A _x x_34)) -> cic.Univ cic.prop) (_H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x))) (x_34 : cic.Term univs.Type2 A) (x_35 : cic.Term cic.prop (matita_basics_logic.eq A _x x_34)) : cic.Term cic.prop (Q_ x_34 x_35)", "predict": "Axiom Eq_rect_CProp1 : forall (A : cic.Univ) (x : cic.Term) (Q : forall (x34 : cic.Term) (x35 : cic.prop (matita_basics_logic.eq (A x)) (matita_basics_logic.refl A x)), Q x34 x35), (forall (x34 : cic.Term) (x35 : cic.prop (matita_basics_logic.eq (A x)) (matita_basics_logic.refl A x)), cic.Term (cic.prop) (Q x34 x35))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSig_inv_rect_CProp4. Pour tous les éléments $x1$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $x2$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1206$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $x2$ appliqué à $pi1$ et des éléments $_z1207$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sig$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_Sig$ appliqué à $x1$ et $x2$ et $pi1$ et $_pi2$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $x1$ et $x2$ et $pi1$ et $_pi2$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "postulate Sig_inv_rect_CProp4 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ cic.prop) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> (P : (_z1206 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (pi1 : cic.Term univs.Type0 x1) -> (_pi2 : cic.Term cic.prop (x2 pi1)) -> (_z1207 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2)) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term cic.prop (P Hterm)", "predict": "postulate Sig_inv_rect_CProp4 : \n  {x1 : cic.Univ} -> \n  {x2 : forall $__ : univs.Type0, x1 -> cic.Univ -> cic.prop} -> \n  {Hterm : forall _z1206 : cic.Term, matita_basics_types.Sig x1 x2 -> cic.Univ -> cic.prop} -> \n  {P : forall _z1206 : cic.Term, matita_basics_types.Sig x1 x2 -> cic.Univ -> cic.prop} -> \n  {P1 : forall pi1 : cic.Term, x1 -> pi2 : cic.Term, x2 -> cic.prop -> cic.prop} -> \n  (pi1 : cic.Term) -> \n  (pi2 : forall _z1207 : cic.Term, matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_types.Sig x1 x2) -> \n     (cic.Term -> cic.prop) -> cic.Term -> cic.prop) -> \n  (P1 pi1 x1 pi2 pi1 _z1207 (matita_basics_types.mk_Sig x1 x2) (cic.Term -> cic.prop) pi2) -> \n  (cic.Term -> cic.prop) -> \n  (P _z1206 (matita_basics_types.mk_Sig x1 x2) pi1 pi2) -> \n  (cic.Term -> cic.prop) -> \n  (P _z1206 (matita_basics_types.mk_Sig x1 x2) pi1 pi2)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_prim_prim_pred. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_chebyshev_chebyshev_psi.prim$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_chebyshev_chebyshev_psi.prim$ appliqué à $matita_arithmetics_nat.pred$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$.\nassistant\n", "label": "Axiom eq_prim_prim_pred : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_chebyshev_chebyshev_psi.prim (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_chebyshev_chebyshev_psi.prim (matita_arithmetics_nat.pred (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)))) .", "predict": "Axiom Eq_prim_prim_pred : forall (n : cic.Term univs.Type0 matita_arithmetics_nat.nat), \nforall (P : cic.Term cic.prop matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n), \ncic.Term P (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_chebyshev_chebyshev_psi.prim (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))) n) (matita_arithmetics_chebyshev_chebyshev_psi.prim (matita_arithmetics_nat.pred (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))) n)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, håller $cic.Univ$ för $univs.Type0$.\nassistant\n", "label": "postulate Aop : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> cic.Univ univs.Type0", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_rect_CProp3. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Alors pour toutes les fonctions $Q_$ des éléments $_x_961$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_Dop$ des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $_nil$ et $_nil$ et des fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0", "label": "postulate Dop_rect_CProp3 : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_961 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_961 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term cic.prop (Q_ x_961)", "predict": "$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $b$ et $c$ et $_nil$ et $_nil$ et $_nil$, on a $Q_$ appliqué à $A$ et $_nil$ et $_nil$ et $prod$ appliqué à $a$ et $b$ et $c$ et $_nil$ et $_nil$ et $_nil$ et $prod$ appliqué à $a$ et $b$ et $c$ et $_nil$ et $_nil$ et $_nil$ est vrai.\n\nOutput:"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFalse_rect_CProp0. Låt $Q_$ vara en funktion från element $_x_78$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $x_78$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_78$.\nassistant\n", "label": "postulate False_rect_CProp0 : (Q_ : (_x_78 : cic.Term cic.prop matita_basics_logic.False) -> cic.Univ cic.prop) -> (x_78 : cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ x_78)", "predict": "postulate False_rect_CProp0 : \n  {x_78 : cic.Term (cic.prop (matita_basics_logic.False))} -> \n  (Q : x_78 -> cic.Univ (cic.prop (matita_basics_logic.False))) -> \n  cic.Term (cic.prop (matita_basics_logic.False)) -> \n  Q x_78 (False_rect_CProp0 x_78 Q)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_15591. För alla element $n$ och $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $posn$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla element $eqn0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.O$ och $n$, för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla element $q$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $eqm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.O$ och $q$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $m$ och $n$.\nassistant\n", "label": "axiom let_clause_15591 (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) (eqn0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O n)) (_clearme : cic.Term cic.prop (matita_arithmetics_primes.divides matita_arithmetics_nat.O m)) (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) (eqm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times matita_arithmetics_nat.O q))) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m n)", "predict": "Axiom let_clause_15591 : \n  \\forall n, m : cic.Term univs.Type0 matita_arithmetics_nat.nat,\n  \\forall posn : cic.Term univs.Type0 matita_arithmetics_nat.lt matita_arithmetics_nat.O m,\n  \\forall eqn0 : cic.Term univs.Type0 matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O n,\n  \\forall _clearme : cic.Term univs.Type0 matita_arithmetics_primes.divides matita_arithmetics_nat.O m,\n  \\forall q : univs.Type0 matita_arithmetics_nat.nat,\n  \\forall eqm : cic.Term univs.Type0 matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times matita_arithmetics_nat.O q)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd_rect_CProp0. Låt $_A$ och $_B$ vara element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_714$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H_mk_Prod$ från element $_fst$ av $cic.Term$ av $univs.Type0$ och $_A$ och element $_snd$ av $cic.Term$ av $univs.Type0$ och $_B$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.mk_Prod$ applicerat på $_A$ och $_B$ och $_fst$ och $_snd$, för alla element $x_714$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_714$.\nassistant\n", "label": "axiom Prod_rect_CProp0 (_A _B : cic.Univ univs.Type0) (Q_ : (_x_714 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ cic.prop) (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) (x_714 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) : cic.Term cic.prop (Q_ x_714)", "predict": "Output: \naxiom prod_rect_cprop0 : ∀ (a b : universes.type0), (λ (x : universes.type0) (prod : a × b), universes.univ) → ∀ (h_mk_prod : ∀ (fst : universes.type0) (a : universes.type0) (snd : universes.type0) (b : universes.type0), term.prop) (q : ∀ (x : universes.type0) (prod : a × b), universes.univ), ∀ (x : universes.type0) (prod : a × b), term.prop (q x (proj1_2 prod)) (proj2_2 prod)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_rect_Type0_body. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_610$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $_H_None$ un élément de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_types.None$ appliqué à $_A$. Soit $_H_Some$ une fonction des éléments $x_611$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_types.Some$ appliqué à $_A$ et $x_611$. Alors pour tous les éléments $x_610$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$, $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_610$.\nassistant\n", "label": "option_rect_Type0_body : _A : cic.Univ univs.Type0 -> Q_ : (_x_610 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Univ univs.Type0) -> _H_None : cic.Term univs.Type0 (Q_ (matita_basics_types.None _A)) -> _H_Some : (x_611 : cic.Term univs.Type0 _A -> cic.Term univs.Type0 (Q_ (matita_basics_types.Some _A x_611))) -> x_610 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Term univs.Type0 (Q_ x_610) .", "predict": "Output: Axiom option_rect_Type0_body : forall (A : cic.Univ) (Q_ : (forall x_610 : cic.Term) (matita_basics_types.option) A -> cic.Univ) (H_None : (forall x_611 : cic.Term) (Q_ A (matita_basics_types.None)) -> cic.Term) (H_Some : (forall x_611 : cic.Term) (forall x_612 : cic.Term) (Q_ x_612 (matita_basics_types.Some x_611)) -> cic.Term), (forall x_610 : cic.Term) (matita_basics_types.option) A -> cic.Term."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLog_div. Låt $p$ och $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Då för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $m$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_log.log$ applicerat på $p$ och $matita_arithmetics_div_and_mod.div$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_log.log$ applicerat på $p$ och $n$ och $matita_arithmetics_log.log$ applicerat på $p$ och $m$.\nassistant\n", "label": "postulate log_div : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.le m n)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_log.log p (matita_arithmetics_div_and_mod.div n m)) (matita_arithmetics_nat.minus (matita_arithmetics_log.log p n) (matita_arithmetics_log.log p m)))", "predict": "postulate log_div : (p n m : univs.Type0) -> (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.O)) p) -> (matita_arithmetics_nat.lt (matita_arithmetics_nat.O) m) -> (forall (_: matita_arithmetics_nat.le m n) -> (cic.Term (cic.prop (matita_arithmetics_nat.le (matita_arithmetics_log.log p) (matita_arithmetics_div_and_mod.div n m) (matita_arithmetics_nat.minus (matita_arithmetics_log.log p n) (matita_arithmetics_log.log p m))))))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLtl_nil. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.ltl$ applied to $A$ and $matita_basics_lists_list.nil$ applied to $A$ and $n$ and $matita_basics_lists_list.nil$ applied to $A$.\nassistant\n", "label": "ltl_nil : A : cic.Univ univs.Type0 -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.ltl A (matita_basics_lists_list.nil A) n) (matita_basics_lists_list.nil A)) .", "predict": "Output: \naxiom ltl_nil : forall (A : univers.univ univers.type0) (n : terme.term univers.type0 univers.type2) (l : list.list A (list.nil A)) (n : nat), prop.cic_prop (logic.eq (lift univers.type0 univers.type2) A) (list.ltl A l (list.nil A n))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1068. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $permf$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_permutation.permut$ appliqué à $f$ et $n$. Soient $i$ et $j$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $lein$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $i$ et $n$. Soit $lejn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $j$ et $n$. Soit $a$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $_clearme$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $matita_arithmetics_nat.le$ appliqué à $a$ et $n$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $a$ et $i$, pour tous les éléments $lean$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $a$ et $n$, pour tous les éléments $fa$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $a$ et $i$, pour tous les éléments $b$", "label": "let_clause_1068 : f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> permf : cic.Term cic.prop (matita_arithmetics_permutation.permut f n) -> i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> j : cic.Term univs.Type0 matita_arithmetics_nat.nat -> lein : cic.Term cic.prop (matita_arithmetics_nat.le i n) -> lejn : cic.Term cic.prop (matita_arithmetics_nat.le j n) -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _clearme : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le a n) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i)) -> lean : cic.Term cic.prop (matita_arithmetics_nat.le a n) -> fa : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f a) i) -> b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _clearme0 : cic.Term cic.prop (matita_b", "predict": " de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $_clearme$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $matita_arithmetics_nat.le$ appliqué à $b$ et $n$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $b$ et $j$, pour tous les éléments $lejn$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $b$ et $n$, pour tous les éléments $fb$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $b$ et $j$, pour tous les éléments $fa$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $a$ et $i$, pour tous les éléments $fb$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $b$ et $j$, pour tous les éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $j$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $a$ de $cic.Term$ de $univs.Type0$ et de $matita_ar"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nPi_1. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_bigops.bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$.\nassistant\n", "label": "pi_1 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (i : cic.Term univs.Type0 matita_arithmetics_nat.nat => p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (i : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) .", "predict": "Output: \nlet Pi_1 n : univs.Type0 -> matita_arithmetics_nat.nat => \n    let p : (univs.Type0 -> matita_arithmetics_nat.nat) -> (univs.Type0 -> matita_basics_bool.bool) => \n        cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_bigops.bigop n (fun i => p (i matita_arithmetics_nat.nat)) matita_arithmetics_nat.S matita_arithmetics_nat.O (fun i => matita_arithmetics_nat.S matita_arithmetics_nat.O matita_arithmetics_nat.S matita_arithmetics_nat.O))))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nComm. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all elements $xxx$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $nil$, for all elements $a$ and $b$ of $cic.Term$ of $univs.Type0$ and $A$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $nil$ and $matita_arithmetics_bigops.aop$ applied to $A$ and $nil$ and $xxx$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $nil$ and $matita_arithmetics_bigops.aop$ applied to $A$ and $nil$ and $xxx$ and $b$ and $a$.\nassistant\n", "label": "Axiom comm : forall A : cic.Univ univs.Type0, forall nil : cic.Term univs.Type0 A, forall xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A nil), forall a : cic.Term univs.Type0 A, forall b : cic.Term univs.Type0 A, cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A nil (matita_arithmetics_bigops.aop A nil xxx) a b) (matita_arithmetics_bigops.op A nil (matita_arithmetics_bigops.aop A nil xxx) b a)) .", "predict": "Output: \nAxiom comm_example : forall A : cic.Univ -> univs.Type0, \nforall nil : cic.Term -> univs.Type0, \nforall A : cic.Term -> univs.Type0, \nforall ACop : matita_arithmetics_bigops.ACop, \nforall a b : cic.Term -> univs.Type0, \ncic.Term (cic.prop -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A nil (matita_arithmetics_bigops.aop A nil xxx) a b) (matita_arithmetics_bigops.op A nil (matita_arithmetics_bigops.aop A nil xxx) b a))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_16004. Låt $m$ och $n$ och $a$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Då för alla element $posm$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, för alla element $pnm$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, för alla element $c$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $_clearme$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics", "label": "axiom let_clause_16004 (m n a b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (λ d => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_ar", "predict": "_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$, är $posn$ lika med $posm$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $m$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ lika med $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$.\nOutput: Let_clause_16004 : \n  m, n : univs.Type0 -> matita_arithmetics_nat.nat,\n  a, b : matita_arithmetics_nat.nat,\n  posn : matita_arithmetics_nat.lt n O,\n  posm : (n : matita_arithmetics_nat.nat) -> (m : matita_arithmetics_nat.nat) -> (pnm : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_gcd.gcd n m matita_arithmetics_nat.S O)) (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n matita_arithmetics_nat.times d m matita_ar"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nPlus_to_minus. Låt $n$ och $m$ och $p$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $n$ och $matita_arithmetics_nat.plus$ applicerat på $m$ och $p$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $n$ och $m$ och $p$.\nassistant\n", "label": "postulate plus_to_minus : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.plus m p))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus n m) p)", "predict": "postulate Plus_to_minus : (n m p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> forall (_:cic.Term cic.prop matita_basics_logic.eq) -> (_ (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n) (matita_arithmetics_nat.plus m p))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd_inv_rect_CProp1. Pour tous les éléments $x1$ et $x2$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1290$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $x2$ et des éléments $_z1291$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Prod$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_Prod$ appliqué à $x1$ et $x2$ et $_fst$ et $_snd$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $x1$ et $x2$ et $_fst$ et $_snd$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "Prod_inv_rect_CProp1 : x1 : cic.Univ univs.Type0 -> x2 : cic.Univ univs.Type0 -> Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) -> P : (_z1290 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) -> cic.Univ cic.prop) -> _H1 : (_fst : cic.Term univs.Type0 x1 -> _snd : cic.Term univs.Type0 x2 -> _z1291 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod x1 x2)) Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) -> cic.Term cic.prop (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) -> cic.Term cic.prop (P Hterm) .", "predict": "Output: \nAxiom Prod_inv_rect_CProp1 : \nforall x1 x2 : cic.Univ, \nforall Hterm : cic.Term, \nforall P : forall _z1290 : cic.Term, \nmatita_basics_types.Prod x1 x2 -> \nforall _H1 : forall _fst : cic.Term, \nforall _snd : cic.Term, \nforall _z1291 : cic.Term, \ncic.prop, \nforall _fst_1 : cic.Term, \nforall _snd_1 : cic.Term, \ncic.prop, \nP (matita_basics_types.mk_Prod x1 x2 _fst _snd) -> \ncic.Term (cic.prop) (P Hterm)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMax_spec_ind_body. Låt $_n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $Q_$ vara en funktion från element $x_971$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $_x_972$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_minimization.max_spec$ applicerat på $_n$ och $_f$ och $x_971$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H_found_max_spec$ från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $x_975$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $_n$ och element $x_974$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $_f$ applicerat på $m$ och $matita_basics_bool.true$ och funktioner $x_973$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $i$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $_n$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på", "label": "Axiom max_spec_ind_body : forall _n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall Q_ : ((x_971 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_972 : cic.Term cic.prop (matita_arithmetics_minimization.max_spec _n _f x_971)) -> cic.Univ cic.prop), forall _H_found_max_spec : ((m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_975 : cic.Term cic.prop (matita_arithmetics_nat.lt m _n)) -> (x_974 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f m) matita_basics_bool.true)) -> (x_973 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt m i)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i _n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f i) matita_basics_bool.false)) -> cic.Term cic", "predict": " $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $x_971$ applicerat på $m$ och $x_972$ applicerat på $m$ och $x_975$ applicerat på $m$ och $x_974$ applicerat på $m$ och $_H_found_max_spec$ applicerat på $m$ och $x_973$ applicerat på $m$ och $x_975$ applicerat på $m$ och $x_974$ applicerat på $m$ och $_f$ applicerat på $m$ och $matita_basics_bool.true$ og element $Q_$ applicerat på $m$ og $_f$ og $x_971$ og $x_972$ og $_H_found_max_spec$ og $x_973$ og $x_975$ og $x_974$ og $_f$ og $matita_basics_bool.true$ og $x_971$ og $x_972$ og $x_975$ og $x_974$ og $_f$ og $matita_basics_bool.true$ og $x_971$ og $x_972$ og $x_975$ og $x_974$ og $_f$ og $matita_basics_bool.true$ og $x_971$ og $x_972$ og $x_975$ og $x_974$ og $_f$ og $matita_basics_bool.true$ og $x_971$ og $x_972$ og $x_975$ og $x_974$ og $_f$ og $matita_basics_bool.true$ og $x_971$ og $x_972$ og $x_975$ og $x_974$ og $_f$ og $matita_basics_bool.true$ og $x_971$ og $x_972$ og $x_975$ og $x_974$ og $_f$ og $matita_basics_bool.true$ og $x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBi_RC. För alla element $A$ och $B$ av $cic.Univ$ av $univs.Type0$, för alla element $__$ av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.bi_relation$ applicerat på $A$ och $B$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_relations.bi_relation$ applicerat på $A$ och $B$.\nassistant\n", "label": "bi_RC : A : cic.Univ univs.Type0 -> B : cic.Univ univs.Type0 -> __ : cic.Term univs.Type0 (matita_basics_relations.bi_relation A B) -> cic.Term univs.Type0 (matita_basics_relations.bi_relation A B) .", "predict": "Output: \n∀ A B : cic.Univ, ∀ __ : cic.Term, ∀ bi_relation : matita_basics_relations.bi_relation A B, cic.Term univs.Type0 bi_relation A B"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nIff_not. Soient $A$ et $B$ des éléments de $cic.Univ$ de $cic.prop$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.iff$ appliqué à $A$ et $B$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.iff$ appliqué à $matita_basics_logic.Not$ appliqué à $A$ et $matita_basics_logic.Not$ appliqué à $B$.\nassistant\n", "label": "axiom iff_not (A B : cic.Univ cic.prop) (__ : cic.Term cic.prop (matita_basics_logic.iff A B)) : cic.Term cic.prop (matita_basics_logic.iff (matita_basics_logic.Not A) (matita_basics_logic.Not B))", "predict": "Axiom iff_not : forall (A B : cic.Univ) (__) : cic.prop -> (matita_basics_logic.iff A B) -> (cic.Term cic.prop) -> (matita_basics_logic.iff (matita_basics_logic.Not A) (matita_basics_logic.Not B))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDpi1__o__op. Soit $x0$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x1$ un élément de $cic.Term$ de $univs.Type0$ et de $x0$. Soit $x2$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $x0$ et $x1$ à des éléments de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $x3$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $matita_basics_lists_list.Aop$ appliqué à $x0$ et $x1$ et $x2$, pour tous les éléments $_x_807$ et $_x_808$ de $cic.Term$ de $univs.Type0$ et de $x0$, $cic.Term$ tient pour $univs.Type0$ et $x0$.\nassistant\n", "label": "Axiom dpi1__o__op : forall x0 : cic.Univ univs.Type0, forall x1 : cic.Term univs.Type0 x0, forall x2 : ((__ : cic.Term univs.Type0 (matita_basics_lists_list.Aop x0 x1)) -> cic.Univ univs.Type0), forall x3 : cic.Term univs.Type0 (matita_basics_types.DPair (matita_basics_lists_list.Aop x0 x1) x2), forall _x_807 : cic.Term univs.Type0 x0, forall _x_808 : cic.Term univs.Type0 x0, cic.Term univs.Type0 x0 .", "predict": "Axiom prop1__o__op : odd 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_CProp0. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_885$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_Aop$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av", "label": "Axiom Aop_rect_CProp0 : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_885 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop), forall _H_mk_Aop : ((op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))), forall x_885 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil), cic.Term cic.prop (Q_ x_885) .", "predict": " $univs.Type0$ och $A$ et $matita_basics_logic.eq$ applicerat sur $cic.lift$ applicerat sur $univs.Type0$ et $univs.Type2$ et $A$ et $op$ applicerat sur $a$ et $b$ et $c$ et fonction $Q_$, on a $Q_$ appliqué sur $A$ et $_nil$ est de type $cic.Univ$ et $Q_$ appliqué sur $A$ et $a$ est de type $cic.prop$. \n\nOutput: Axiom Aop_rect_CProp0 : forall (A : univs.univ) (x : univs.term A) (Q : (fun (op : cprop_bigops.bigop) (nil : cterm A) => cprop A)) (Q_mk : forall (op : cterm A) (x : cterm A), cterm A) (Q_nill : forall (a : cterm A), cprop A) (assoc : forall (a : cterm A) (b : cterm A) (c : cterm A), cterm A) (eq_lift : forall (T1 : univs.type0) (T2 : univs.type2) (A : cprop A) (op : cterm A) (x : cterm A) (y : cterm A), cterm A), (forall (a : cterm A), cterm A) (forall (a : cterm A), cprop A) (forall (a : cterm A) (b : cterm A) (c : cterm A), cterm A), Q (op nil) = Q (assoc a b c) /\\ Q_nill a = Q (assoc a (Q_mk op x) (assoc x nil (Q_nill a)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_f. Låt $A$ och $B$ vara element av $cic.Univ$ av $univs.Type2$. Då för alla funktioner $f$ från element $__$ av $cic.Term$ av $univs.Type2$ och $A$ till element av $cic.Term$ av $univs.Type2$ och $B$, för alla element $x$ och $y$ av $cic.Term$ av $univs.Type2$ och $A$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $x$ och $y$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $B$ och $f$ applicerat på $x$ och $f$ applicerat på $y$.\nassistant\n", "label": "postulate eq_f : (A : cic.Univ univs.Type2) -> (B : cic.Univ univs.Type2) -> (f : (__ : cic.Term univs.Type2 A) -> cic.Term univs.Type2 B) -> (x : cic.Term univs.Type2 A) -> (y : cic.Term univs.Type2 A) -> (__ : cic.Term cic.prop (matita_basics_logic.eq A x y)) -> cic.Term cic.prop (matita_basics_logic.eq B (f x) (f y))", "predict": "postulate Eq_f : {univs : Universe} -> {univs' : Universe} -> (A : univs.Type2) -> (B : univs'.Type2) -> (f : (x : univs.Type2) -> (A -> univs.Type2)) -> (x y : univs.Type2) -> (x eq y : matita_basics_logic.eq univs.Type2 x y) -> (f x eq (f y) : matita_basics_logic.eq univs'.Type2 (f x) (f y))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLength. För alla element $H$ av $cic.Univ$ av $univs.Type0$, för alla element $__$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $H$, håller $cic.Term$ för $univs.Type0$ och $matita_arithmetics_nat.nat$.\nassistant\n", "label": "postulate length : (H : cic.Univ univs.Type0) -> (__ : cic.Term univs.Type0 (matita_basics_lists_list.list H)) -> cic.Term univs.Type0 matita_arithmetics_nat.nat", "predict": "postulate Length : (H : univs.Type0) -> (T : univs.Type0) -> (list : H -> matita_basics_lists_list.list) -> (cic.Term T (matita_arithmetics_nat.nat))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_O_n_elim. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $P$ une fonction des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $__1$ une fonction des éléments $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_nat.S$ appliqué à $m$. Alors $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $n$.\nassistant\n", "label": "lt_O_n_elim : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> P : (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Univ cic.prop) -> __1 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (P (matita_arithmetics_nat.S m))) -> cic.Term cic.prop (P n) .", "predict": "Axiom Lt_O_n_elim : forall (n : matita_arithmetics_nat.nat) (n_lt_O : matita_arithmetics_nat.lt matita_arithmetics_nat.O n) (P : forall (n : matita_arithmetics_nat.nat), cic.prop), P n_lt_O matita_arithmetics_nat.O -> cic.prop."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExp_pi. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_bigops.bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $matita_arithmetics_exp.exp$ applied to $f$ applied to $i$ and $m$ and $matita_arithmetics_exp.exp$ applied to $matita_arithmetics_bigops.bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $f$ applied to $i$ and $m$.\nassistant\n", "label": "axiom exp_pi (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (λ i => p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (λ i => matita_arithmetics_exp.exp (f i) m)) (matita_arithmetics_exp.exp (matita_arithmetics_bigops.bigop n (λ i => p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (λ i => f i)) m))", "predict": "open matita_arithmetics_nat open matita_basics_bool open matita_basics_logic open matita_arithmetics_exp open matita_arithmetics_bigops open matita_basics_eq open matita_basics_term open matita_basics_univs\nVariable n m : Term univs.Type0 nat\nVariable p : (Term univs.Type0 nat) -> Term univs.Type0 bool\nVariable f : (Term univs.Type0 nat) -> Term univs.Type0 nat\nHypothesis h : prop cic.Term (eq univs.Type0 univs.Type2 nat (bigop n (fun i => p i) nat (S O (times (fun i => (exp f i m)) (bigop n (fun i => p i) nat (S O (times (fun i => (exp f i m))))))))))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNotb_notb. Pour tous les éléments $b$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $matita_basics_bool.notb$ appliqué à $matita_basics_bool.notb$ appliqué à $b$ et $b$.\nassistant\n", "label": "postulate notb_notb : (b : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_basics_bool.notb (matita_basics_bool.notb b)) b)", "predict": "postulate notb_notb : (b : matita_basics_bool.bool) -> prop (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool (matita_basics_bool.notb b) (matita_basics_bool.notb b))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1585. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $m$ och $n$. Då för alla element $d$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $auto$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.O$ och $m$, för alla element $auto'$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $d$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.O$ och $n$.\nassistant\n", "label": "Axiom let_clause_1585 : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall _clearme : cic.Term cic.prop (matita_arithmetics_primes.divides m n), forall d : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall auto : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O m), forall auto' : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.times m d)), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O n) .", "predict": "Axiom let_clause_1585 : \n  forall (n m : cic.Term univs.Type0 * matita_arithmetics_nat.nat) (posn : cic.Term posn * matita_arithmetics_nat.lt matita_arithmetics_nat.O n) (_clearme : cic.Term divides m n) (d auto auto' : cic.Term univs.Type0 * matita_arithmetics_nat.nat * matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat matita_arithmetics_nat.O m) (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat matita_arithmetics_nat.O n)) -> \n  cic.Term (cic.prop * matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat matita_arithmetics_nat.O n) (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat matita_arithmetics_nat.O m)) (matita_arithmetics_nat.times m d)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLtl_nil. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $A$ et $matita_basics_lists_list.ltl$ appliqué à $A$ et $matita_basics_lists_list.nil$ appliqué à $A$ et $n$ et $matita_basics_lists_list.nil$ appliqué à $A$.\nassistant\n", "label": "postulate ltl_nil : (A : cic.Univ univs.Type0) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.ltl A (matita_basics_lists_list.nil A) n) (matita_basics_lists_list.nil A))", "predict": "postulate ltl_nil : (A : univs.Type0) -> (n : matita_arithmetics_nat.nat) -> (term : cic.Term) -> (prop : cic.prop) -> (eq : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2) (matita_basics_lists_list.list A) (matita_basics_lists_list.nil A) n term) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_inv_rect_Type4. Pour tous les éléments $x1$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $x1$, pour toutes les fonctions $P$ des éléments $_z1638$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $x1$ à des éléments de $cic.Univ$ de $univs.Type4$, pour toutes les fonctions $_H1$ des fonctions $_enum$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_upto$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_filter$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ et des éléments $_z1639$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.range$ appliqué à $x1$ et $Hterm$ et $matita_arithmetics_bigops.mk_range$ appliqué à $x1$ et $_enum$ et $_upto$ et $_filter$ à des éléments de $cic.Term$ de $univs.Type4$ et de $P$ appliqué à $matita_arithmetics_bigops.mk_range$ appliqué à $x1$ et $_enum$ et $_upto$ et $_filter$, $cic.Term$ tient pour $univs.Type4$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "axiom range_inv_rect_Type4 (x1 : cic.Univ univs.Type0) (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1)) (P : (_z1638 : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1)) -> cic.Univ univs.Type4) (_H1 : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 x1) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (_z1639 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.range x1)) Hterm (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter))) -> cic.Term univs.Type4 (P (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter))) : cic.Term univs.Type4 (P Hterm)", "predict": "Axiom range_inv_rect_Type4 : \nforall x1 : Univ, \nforall Hterm : Term, \nrange x1 -> \nforall P : (z1638 : Term) -> range x1 -> Univ -> Type4, \nforall _H1 : (enum : (x : Term) -> nat -> Term) -> \nforall upto : (x : Term) -> nat -> Term, \nforall _filter : (x : Term) -> nat -> bool -> Term -> Type0, \nforall z1639 : Term -> prop -> eq (lift Univ Type2) -> range x1 -> Hterm -> mk_range x1 enum upto filter -> \nTerm -> Type4 -> P z1639 x1 (mk_range x1 enum upto filter)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAnd_rect_Type0_body. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $cic.prop$. Soit $Q_$ une fonction des éléments $_x_142$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $_H_conj$ une fonction des éléments $x_144$ de $cic.Term$ de $cic.prop$ et de $_A$ et des éléments $x_143$ de $cic.Term$ de $cic.prop$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $matita_basics_logic.conj$ appliqué à $_A$ et $_B$ et $x_144$ et $x_143$. Soit $x_142$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.And$ appliqué à $_A$ et $_B$. Alors $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_142$.\nassistant\n", "label": "And_rect_Type0_body : _A : cic.Univ cic.prop -> _B : cic.Univ cic.prop -> Q_ : (_x_142 : cic.Term cic.prop (matita_basics_logic.And _A _B) -> cic.Univ univs.Type0) -> _H_conj : (x_144 : cic.Term cic.prop _A -> x_143 : cic.Term cic.prop _B -> cic.Term univs.Type0 (Q_ (matita_basics_logic.conj _A _B x_144 x_143))) -> x_142 : cic.Term cic.prop (matita_basics_logic.And _A _B) -> cic.Term univs.Type0 (Q_ x_142) .", "predict": "Output: Axiom And_rect_Type0_body : forall (A B : cic.Univ) (prop : A -> B -> cic.prop) (conj : A -> B -> cic.Term -> cic.Term -> cic.Term) (x142 : cic.Term -> cic.prop -> cic.Term), And x142 A B -> prop x142 A B (conj A B x142) (conj A B (conj A B x142))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_rect_Type2. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Let $_x$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $Q_$ be a function from elements $x_13$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $_x_14$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_13$ to elements of $cic.Univ$ of $univs.Type2$. Let $_H_refl$ be an element of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $_x$ and $matita_basics_logic.refl$ applied to $A$ and $_x$. Let $x_13$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $x_14$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_13$. Then $cic.Term$ holds for $univs.Type2$ and $Q_$ applied to $x_13$ and $x_14$.\nassistant\n", "label": "Axiom eq_rect_Type2 : forall A : cic.Univ univs.Type2, forall _x : cic.Term univs.Type2 A, forall Q_ : ((x_13 : cic.Term univs.Type2 A) -> (_x_14 : cic.Term cic.prop (matita_basics_logic.eq A _x x_13)) -> cic.Univ univs.Type2), forall _H_refl : cic.Term univs.Type2 (Q_ _x (matita_basics_logic.refl A _x)), forall x_13 : cic.Term univs.Type2 A, forall x_14 : cic.Term cic.prop (matita_basics_logic.eq A _x x_13), cic.Term univs.Type2 (Q_ x_13 x_14) .", "predict": "Output: \nParameter Eq_rect_Type2 : \n  {A : cic.Univ} \n  -> {univs : Type2} \n  -> {x : cic.Term} \n  -> {univs : Type2} \n  -> {A : univs} \n  -> (Q_ : (x13 : cic.Term) -> A -> (x : cic.Term) -> matita_basics_logic.eq A x13 -> univs) \n  -> {H_refl : (x : cic.Term) -> Q_ x A x (matita_basics_logic.refl A x)} \n  -> (x13 : (x : cic.Term) -> univs) \n  -> (x14 : (x : cic.Term) -> (A : univs) -> (x : cic.Term) -> matita_basics_logic.eq A x -> univs) \n  -> (x : cic.Term) -> univs."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_inv_rect_Type2. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$. Då för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1122$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type2$, för alla funktioner $_H1$ från element $dpi1$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_dpi2$ av $cic.Term$ av $univs.Type0$ och $x2$ applicerat på $dpi1$ och element $_z1123$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.DPair$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_DPair$ applicerat på $x1$ och $x2$ och $dpi1$ och $_dpi2$ till element av $cic.Term$ av $univs.Type2$ och $P$ applicerat på $matita_basics_types.mk_DPair$ applicerat på $x1$ och $x2$ och $dpi1$ och $_dpi2$, håller $cic.Term$ för $univs.Type2$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "Axiom DPair_inv_rect_Type2 : forall x1 : cic.Univ univs.Type0, forall x2 : ((__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0), forall Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2), forall P : ((_z1122 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ univs.Type2), forall _H1 : ((dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1123 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type2 (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))), cic.Term univs.Type2 (P Hterm) .", "predict": "Axiom DPair_inv_rect_Type2 : \n  forall (univs : Type) (univs0 : univs -> Type) (univs1 : univs -> Type) (univs2 : univs -> Type) (cic : Type) (cic0 : cic -> Type) (cic1 : cic -> Type) (cic2 : cic -> Type) (x1 : cic0) (x2 : forall (z : cic1), univs1 z -> univs0) (Hterm : cic2) (P : forall (z1122 : cic0), univs1 z1122 -> univs2), \n  (forall (dpi1 : cic1), univs1 dpi1 -> univs0 -> cic2) -> \n  (forall (dpi2 : cic1), univs1 dpi2 -> univs0 -> cic2) -> \n  (forall (z1123 : cic.prop), univs1 z1123 -> univs2 -> univs0 -> cic.prop -> cic.prop -> univs0 -> cic2) -> \n  (forall (dpi1 : cic1), univs1 dpi1 -> univs0 -> cic.prop -> cic.prop -> univs0 -> cic.prop -> cic.prop -> univs0 -> cic2) -> \n  (forall (z1123 : cic.prop), univs1 z1123 -> univs2 -> univs0 -> cic.prop -> cic.prop -> univs0 -> cic.prop -> cic.prop -> univs0 -> cic.prop -> cic.prop -> univs0 -> cic.prop -> cic.prop -> univs0 -> cic.prop -> cic.prop -> univs0 -> cic.prop -> cic.prop -> univs0 -> cic.prop -> cic.prop -> univs0 -> cic.prop -> cic.prop -> univs0 -> cic.prop -> cic.prop -> univs0 -> cic.prop -> cic.prop -> univs0 -> cic.prop -> cic.prop -> univs0 -> cic.prop -> cic.prop -> univs0 -> cic.prop -> cic.prop -> univs0 -> cic.prop -> cic.prop -> univs0 -> cic.prop -> cic.prop -> univs0 -> cic.prop -> cic.prop -> un"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_inv_rect_Type0. For all elements $x1$ of $cic.Univ$ of $univs.Type0$, for all elements $x2$ of $cic.Term$ of $univs.Type0$ and $x1$, for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1596$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type0$, for all functions $_H1$ from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $matita_arithmetics_bigops.op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and elements $_z1597$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ and $Hterm$ and $matita_arithmetics_bigops.mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ to elements of $cic.Term$ of $univs.Type0$ and $P$ applied to $", "label": "postulate ACop_inv_rect_Type0 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> (P : (_z1596 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> cic.Univ univs.Type0) -> (_H1 : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (_comm : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (matita_arithmetics_bigops.op x1 x2 aop a b) (matita_arithmetics_bigops.op x1 x2 aop b a))) -> (_z1597 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop x1 x2)) Hterm (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) -> cic.Term univs.Type0 (P (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) -> cic.Term univs.Type0 (P Hterm)", "predict": "matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ and $Hterm$ and $matita_arithmetics_bigops.mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ and $_z1597$, there exists an element $z$ of $cic.Term$ of $univs.Type0$ and $P$ applied to $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ and $Hterm$ and $matita_arithmetics_bigops.mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ and $_z1597$ and $matita_arithmetics_bigops.op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and $matita_arithmetics_bigops.mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ and $_z1597$ such that $P$ applied to $matita_arithmetics_bigops.ACop$ applied to $x1$ and $x2$ and $Hterm$ and $matita_arithmetics_bigops.mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ and $_z1597$ and $matita_arithmetics_bigops.op$ applied to $x1$ and $x2$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $x1$ and $x2$ and $aop$ and $b$ and $a$ and $matita_arithmetics_bigops.mk_ACop$ applied to $x1$ and $x2$ and $aop$ and $_comm$ and $_z1597$ is true.\nOutput: \npostulate ACop_inv_rect_Type0 : \n  forall (x1 : cic.Univ) (x2 : cic.Term) (Hterm : cic.Term) (aop : matita_arithmetics_bigops.ACop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_rect_Type0_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_901$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type0$, för alla funktioner $_H_mk_ACop$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$, för alla element $x_901$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_901$.\nassistant\n", "label": "axiom ACop_rect_Type0_body (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_901 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ univs.Type0) (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) (x_901 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) : cic.Term univs.Type0 (Q_ x_901)", "predict": "Output: \nAxiom Cop_rect_Type0_body : \n  forall (A : cic.Univ) (univs : Type0), \n  (forall (Q : forall (x : cic.Term) (matita_arithmetics_bigops.ACop A nil) : cic.Univ), \n  (forall (aop : cic.Term) (matita_arithmetics_bigops.Aop A nil) (comm : forall (a : cic.Term) (A : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A nil aop a b (matita_arithmetics_bigops.op A nil aop b a))) : cic.Term), \n  (forall (a : cic.Term) (A : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A nil aop a)) (b : cic.Term) (A : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A nil aop b)) : cic.prop), \n  Q (matita_arithmetics_bigops.mk_ACop A nil aop comm)) = Q x_901."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNth_prime_body. Soit $__$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $univs.Type0$ et $matita_arithmetics_nat.nat$.\nassistant\n", "label": "nth_prime_body : __ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_arithmetics_nat.nat .", "predict": "Output: Axiom Nth_prime_body : forall ($$$ : Term univs.Type0 matita_arithmetics_nat.nat), Term univs.Type0 matita_arithmetics_nat.nat."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_rect_CProp3. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $Q_$ från element $_x_622$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$, för alla element $_H_None$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$, för alla funktioner $_H_Some$ från element $x_623$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_623$, för alla element $x_622$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_622$.\nassistant\n", "label": "postulate option_rect_CProp3 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_622 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop) -> (_H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_623 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_623))) -> (x_622 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term cic.prop (Q_ x_622)", "predict": "postulate Option_rect_CProp3 : {univs : Universe} -> (A : univs.Type0) -> (Q : (x : univs.Type0) -> option A -> univs.Type0 -> prop) -> (H_None : (x : univs.Type0) -> Q x (matita_basics_types.None) A) -> (H_Some : (x : univs.Type0) -> (a : A) -> (x : univs.Type0) -> Q x (matita_basics_types.Some a) x) -> (x : univs.Type0) -> Q x (option A) x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_prim_n3. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_chebyshev_chebyshev_psi.prim$ applicerat på $n$ och $matita_arithmetics_nat.pred$ applicerat på $matita_arithmetics_div_and_mod.div$ applicerat på $n$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$.\nassistant\n", "label": "Axiom le_prim_n3 : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))))))))))))) n), cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_chebyshev_psi.prim n) (matita_arithmetics_nat.pred (matita_arithmetics_div_and_mod.div n (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) .", "predict": "Axiom le_prim_n3 : forall (n : Term (univs.Type0) nat), (forall (p : prop) (le : le), (prim (matita_arithmetics_chebyshev_chebyshev_psi.prim n) (matita_arithmetics_nat.pred (div (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O)))))))))))))))))))))))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nUnit_inv_rect_Type4. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$. Let $P$ be a function from elements $_z912$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$ to elements of $cic.Univ$ of $univs.Type4$. Let $_H1$ be a function from elements $_z913$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.unit$ and $Hterm$ and $matita_basics_types.it$ to elements of $cic.Term$ of $univs.Type4$ and $P$ applied to $matita_basics_types.it$. Then $cic.Term$ holds for $univs.Type4$ and $P$ applied to $Hterm$.\nassistant\n", "label": "unit_inv_rect_Type4 : Hterm : cic.Term univs.Type0 matita_basics_types.unit -> P : (_z912 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Univ univs.Type4) -> _H1 : (_z913 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm matita_basics_types.it) -> cic.Term univs.Type4 (P matita_basics_types.it)) -> cic.Term univs.Type4 (P Hterm) .", "predict": "Output: \nAxiom Unit_inv_rect_Type4 : \n  forall (Hterm : Term univs.Type0 matita_basics_types.unit) (P : forall _z912 : Term univs.Type0 matita_basics_types.unit, Univ univs.Type4), \n  (forall (H1 : forall (H : Prop) (e : eq (lift univs.Type0 univs.Type2 matita_basics_types.unit Hterm matita_basics_types.it)) (H' : eq (Term univs.Type4) (P _z912) (Hterm matita_basics_types.it)), Term univs.Type4 (P (H1 H e H'))) -> \n  Term univs.Type4 (P Hterm))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_exp_to_le. Soient $b$ et $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $b$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $b$ et $n$ et $matita_arithmetics_exp.exp$ appliqué à $b$ et $m$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $n$ et $m$.\nassistant\n", "label": "le_exp_to_le : b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) b) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp b n) (matita_arithmetics_exp.exp b m)) -> cic.Term cic.prop (matita_arithmetics_nat.le n m) .", "predict": "Axiom le_exp_to_le : forall (b : cic.Term univs.Type0) (n m : matita_arithmetics_nat.nat), (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.O) b)) -> (matita_arithmetics_nat.le (matita_arithmetics_exp.exp b n) (matita_arithmetics_exp.exp b m)) -> (matita_arithmetics_nat.le n m)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNat_rect_Type1_body. Soit $Q_$ une fonction des éléments $_x_385$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Univ$ de $univs.Type1$. Soit $_H_O$ un élément de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_arithmetics_nat.O$. Alors pour toutes les fonctions $_H_S$ des éléments $x_386$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $_x_388$ de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $x_386$ à des éléments de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_arithmetics_nat.S$ appliqué à $x_386$, pour tous les éléments $x_385$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_385$.\nassistant\n", "label": "postulate nat_rect_Type1_body : (Q_ : (_x_385 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ univs.Type1) -> (_H_O : cic.Term univs.Type1 (Q_ matita_arithmetics_nat.O)) -> (_H_S : (x_386 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_388 : cic.Term univs.Type1 (Q_ x_386)) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_nat.S x_386))) -> (x_385 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type1 (Q_ x_385)", "predict": "postulate Nat_rect_Type1_body : \n  {Q_ : (x_385 : univs.Type0) -> (x_386 : matita_arithmetics_nat.nat) -> (H_O : x_387 : univs.Type1) -> Q_ (matita_arithmetics_nat.O) -> \n   (H_S : (x_388 : univs.Type1) -> (x_389 : univs.Type0) -> (x_390 : matita_arithmetics_nat.nat) -> Q_ x_389 x_390 -> \n    (x_391 : univs.Type1) -> Q_ x_391 (matita_arithmetics_nat.S x_390)) -> \n   (x_392 : univs.Type0) -> (x_393 : matita_arithmetics_nat.nat) -> Q_ x_392 x_393."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_Aop. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $return_sort$ be an element of $cic.Sort$. Then for all functions $return_type$ from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $return_sort$, for all functions $case_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to", "label": "Axiom match_Aop : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall return_sort : cic.Sort, forall return_type : ((z : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ return_sort), forall case_mk_Aop : ((op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term return_sort (return_type (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))), forall z : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil), cic.Term return_sort (return_type z) .", "predict": " $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $op$ applied to $b$ and $c$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $return_sort$, the following proposition holds: $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $return_sort$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $return_sort$ is true. \nOutput: \nInductive prop_Aop : forall (A : univs.Type0) (return_sort : univs.Type0), (cic.Term -> matita_basics_lists_list.Aop A _nil) -> (forall (op : univs.Type0 -> A -> univs.Type0 -> A) (a : univs.Type0 -> A) (z : univs.Type0), (cic.Term -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a z) (cic.lift univs.Type0 univs.Type2 A) (op a _nil z))) -> (forall (a : univs.Type0 -> A) (b : univs.Type0 -> A) (c : univs.Type0 -> A) (z : univs.Type0), (cic.Term -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c) z) (op (op a b) c) z)) -> (forall (A : univs.Type0) (return_sort : univs.Type0), (cic.Term -> matita_basics_lists_list.Aop A _nil) -> (forall (op : univs.Type0 -> A -> univs.Type0 -> A) (a : univs.Type0 -> A) (z : univs.Type0), (cic.Term ->"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_void. Let $return_sort$ be an element of $cic.Sort$. Then for all functions $return_type$ from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.void$ to elements of $cic.Univ$ of $return_sort$, for all elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.void$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.\nassistant\n", "label": "match_void : return_sort : cic.Sort -> return_type : (z : cic.Term univs.Type0 matita_basics_types.void -> cic.Univ return_sort) -> z : cic.Term univs.Type0 matita_basics_types.void -> cic.Term return_sort (return_type z) .", "predict": "Output: Axiom return_sort : cic.Sort. \nOutput: postulate prop80 : even 2."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_1_fact. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_factorial.fact$ appliqué à $n$.\nassistant\n", "label": "le_1_fact : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_factorial.fact n)) .", "predict": "Output: axiom le_1_fact : forall (n : term univs.Type0 nat), prop (le (s (fact n)) (s (nat_zero)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSum_rect_Type1. Låt $_A$ och $_B$ vara element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_546$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $univs.Type1$. Då för alla funktioner $_H_inl$ från element $x_547$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_basics_types.inl$ applicerat på $_A$ och $_B$ och $x_547$, för alla funktioner $_H_inr$ från element $x_548$ av $cic.Term$ av $univs.Type0$ och $_B$ till element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_basics_types.inr$ applicerat på $_A$ och $_B$ och $x_548$, för alla element $x_546$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_546$.\nassistant\n", "label": "postulate Sum_rect_Type1 : (_A : cic.Univ univs.Type0) -> (_B : cic.Univ univs.Type0) -> (Q_ : (_x_546 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ univs.Type1) -> (_H_inl : (x_547 : cic.Term univs.Type0 _A) -> cic.Term univs.Type1 (Q_ (matita_basics_types.inl _A _B x_547))) -> (_H_inr : (x_548 : cic.Term univs.Type0 _B) -> cic.Term univs.Type1 (Q_ (matita_basics_types.inr _A _B x_548))) -> (x_546 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Term univs.Type1 (Q_ x_546)", "predict": "postulate Sum_rect_Type1 : ∀ {univs : Universe} (A B : univs.Type0) (Q : (x : univs.Type0) -> (A -> univs.Type1) -> (univs.Type1 -> (A -> B -> univs.Type1)) -> A + B -> univs.Type1) -> (H_inl : ∀ (x : univs.Type0) -> A -> (univs.Type1)) -> (H_inr : ∀ (x : univs.Type0) -> B -> (univs.Type1)) -> ∀ (x : A + B) -> (cic.Term univs.Type1) -> Q x (H_inl _A) (H_inr _B)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFilter_DPair. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $univs.Type0$. Låt $return_sort$ vara ett element av $cic.Sort$. Låt $return_type$ vara en funktion från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $return_sort$. Låt $return$ vara en funktion från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $z$. Då för alla element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$, håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.\nassistant\n", "label": "Axiom filter_DPair : forall A : cic.Univ univs.Type0, forall _f : ((__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0), forall return_sort : cic.Sort, forall return_type : ((z : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ return_sort), forall return : ((z : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term return_sort (return_type z)), forall z : cic.Term univs.Type0 (matita_basics_types.DPair A _f), cic.Term return_sort (return_type z) .", "predict": "Axiom Filter_DPair : forall (univs : Type0), forall (cic : Univ), forall (univ : Type0), forall (Term : Type0), forall (univ : Sort), forall (return_type : Term -> DPair univs Term -> univ), forall (z : Term), (return univ z (DPair univs Term A f)) = (Term univs Sort) -> (univ (return_type z (DPair univs Term A f)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_n. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $n$ et $n$.\nassistant\n", "label": "axiom le_n (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_arithmetics_nat.le n n)", "predict": "Axiom Le_n : odd n ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_rect_Type1_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_899$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type1$, för alla funktioner $_H_mk_ACop$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$, för alla element $x_899$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_899$.\nassistant\n", "label": "axiom ACop_rect_Type1_body (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_899 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ univs.Type1) (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) (x_899 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) : cic.Term univs.Type1 (Q_ x_899)", "predict": "Output: \nAxiom ACop_rect_Type1_body : forall (univs : Universe) (A : univs.univ) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe) (univs : Universe"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nList_rect_Type1. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_741$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type1$, pour tous les éléments $_H_nil$ de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_basics_lists_list.nil$ appliqué à $_A$, pour toutes les fonctions $_H_cons$ des éléments $x_743$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $x_742$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ et des éléments $_x_745$ de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $x_742$ à des éléments de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_basics_lists_list.cons$ appliqué à $_A$ et $x_743$ et $x_742$, pour tous les éléments $x_741$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$, $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_741$.\nassistant\n", "label": "list_rect_Type1 : _A : cic.Univ univs.Type0 -> Q_ : (_x_741 : cic.Term univs.Type0 (matita_basics_lists_list.list _A) -> cic.Univ univs.Type1) -> _H_nil : cic.Term univs.Type1 (Q_ (matita_basics_lists_list.nil _A)) -> _H_cons : (x_743 : cic.Term univs.Type0 _A -> x_742 : cic.Term univs.Type0 (matita_basics_lists_list.list _A) -> _x_745 : cic.Term univs.Type1 (Q_ x_742) -> cic.Term univs.Type1 (Q_ (matita_basics_lists_list.cons _A x_743 x_742))) -> x_741 : cic.Term univs.Type0 (matita_basics_lists_list.list _A) -> cic.Term univs.Type1 (Q_ x_741) .", "predict": "Output: \nAxiom List_rect_Type1 : \n\\[\n\\forall A : cic.Univ \\to univs.Type0, \n\\forall Q_ : \\forall x_741 : cic.Term \\to univs.Type0, \n\\forall x_742 : matita_basics_lists_list.list \\to cic.Univ \\to univs.Type1, \n\\forall H_nil : \\forall x_743 : cic.Term \\to x_743 \\to univs.Type1, \n\\forall H_cons : \\forall x_745 : cic.Term \\to x_742 \\to Q_ \\to univs.Type1, \n\\forall x_741 : cic.Term \\to matita_basics_lists_list.list \\to x_741 \\to univs.Type1, \nQ_ x_741 (matita_basics_lists_list.nil A) H_nil \\land (\\forall x_742 : cic.Term \\to matita_basics_lists_list.list \\to x_742 \\to univs.Type0, Q_ x_742 (matita_basics_lists_list.cons A x_743 x_742) H_cons x_745) \\to \n\\forall x_741 : cic.Term \\to matita_basics_lists_list.list \\to x_741 \\to univs.Type1, Q_ x_741 x_741\\]"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOrd_rem_eq. Let $n$ and $p$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.ord_rem$ applied to $n$ and $p$ and $matita_basics_types.snd$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.p_ord$ applied to $n$ and $p$.\nassistant\n", "label": "axiom ord_rem_eq (n p : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_ord.ord_rem n p) (matita_basics_types.snd matita_arithmetics_nat.nat matita_arithmetics_nat.nat (matita_arithmetics_ord.p_ord n p)))", "predict": "postulate ord_rem_eq : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p : matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_ord.ord_rem n p) (matita_basics_types.snd matita_arithmetics_nat.nat matita_arithmetics_nat.nat matita_arithmetics_ord.p_ord n p)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSig_inv_rect_CProp3. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Univ$ av $cic.prop$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z1212$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H1$ från element $pi1$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_pi2$ av $cic.Term$ av $cic.prop$ och $x2$ applicerat på $pi1$ och element $_z1213$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Sig$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_Sig$ applicerat på $x1$ och $x2$ och $pi1$ och $_pi2$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.mk_Sig$ applicerat på $x1$ och $x2$ och $pi1$ och $_pi2$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "axiom Sig_inv_rect_CProp3 (x1 : cic.Univ univs.Type0) (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ cic.prop) (Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) (P : (_z1212 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2)) -> cic.Univ cic.prop) (_H1 : (pi1 : cic.Term univs.Type0 x1) -> (_pi2 : cic.Term cic.prop (x2 pi1)) -> (_z1213 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2)) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) : cic.Term cic.prop (P Hterm)", "predict": "Output: Axiom Sig_inv_rect_CProp3 : \n  forall (univs : Universe) (x1 : univs.Univ.Type0) (x2 : univs.Term -> x1 -> univs.Univ) (Hterm : univs.Term) (sig : univs.prop x1 x2) (P : univs.Term -> sig -> univs.prop) (H1 : univs.Term x1) (pi2 : univs.prop) (H2 : univs.prop) (H3 : univs.prop) (H4 : univs.prop) (H5 : univs.prop) (H6 : univs.prop) (H7 : univs.prop) (H8 : univs.prop) (H9 : univs.prop) (H10 : univs.prop) (H11 : univs.prop) (H12 : univs.prop) (H13 : univs.prop) (H14 : univs.prop) (H15 : univs.prop) (H16 : univs.prop) (H17 : univs.prop) (H18 : univs.prop) (H19 : univs.prop) (H20 : univs.prop) (H21 : univs.prop) (H22 : univs.prop) (H23 : univs.prop) (H24 : univs.prop) (H25 : univs.prop) (H26 : univs.prop) (H27 : univs.prop) (H28 : univs.prop) (H29 : univs.prop) (H30 : univs.prop) (H31 : univs.prop) (H32 : univs.prop) (H33 : univs.prop) (H34 : univs.prop) (H35 : univs.prop) (H36 : univs.prop) (H37 : univs.prop) (H38 : univs.prop) (H39 : univs.prop) (H40 : univs.prop) (H41 : univs.prop) (H42 : univs.prop) (H"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_inv_rect_CProp0. Pour tous les éléments $x1$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $x2$ de $cic.Term$ de $univs.Type0$ et de $x1$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1428$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $x2$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et", "label": "axiom Aop_inv_rect_CProp0 (x1 : cic.Univ univs.Type0) (x2 : cic.Term univs.Type0 x1) (Hterm : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) (P : (_z1428 : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> cic.Univ cic.prop) (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1429 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.Aop x1 x2)) Hterm (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) : cic.Term cic.prop (P Hterm)", "predict": " de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $x2$ et $a$ et $a$, si pour toutes les fonctions $Q$ des éléments $_z1428$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$ et pour toutes les fonctions $_H1$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $x2$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $op$ appliqué à $x2$ et $a$ et $a$, alors pour toutes les fonctions $P$ des éléments $_z1428$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$ et pour toutes les"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nPlus_minus_m_m. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $m$ and $n$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.minus$ applied to $n$ and $m$ and $m$.\nassistant\n", "label": "plus_minus_m_m : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.le m n) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus n m) m)) .", "predict": "Output: \naxiom plus_minus_m_m : forall (n m : term univs.type0 matita_arithmetics_nat.nat) (__) : le m n -> term prop (eq (lift univs.type0 univs.type2 matita_arithmetics_nat.nat n) (plus (minus n m) m))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nUnique_body. För alla element $H$ av $cic.Univ$ av $univs.Type0$, för alla element $__$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $H$, håller $cic.Univ$ för $cic.prop$.\nassistant\n", "label": "postulate unique_body : (H : cic.Univ univs.Type0) -> (__ : cic.Term univs.Type0 (matita_basics_lists_list.list H)) -> cic.Univ cic.prop", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nPrime_to_not_divides_fact. Let $p$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.prime$ applied to $p$. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $n$ and $p$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_arithmetics_primes.divides$ applied to $p$ and $matita_arithmetics_factorial.fact$ applied to $n$.\nassistant\n", "label": "prime_to_not_divides_fact : p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_primes.prime p) -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt n p) -> cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides p (matita_arithmetics_factorial.fact n))) .", "predict": "Output: Axiom prime_to_not_divides_fact : forall (p : Term univs.Type0 matita_arithmetics_nat.nat) (__) : prime p -> forall (n : Term univs.Type0 matita_arithmetics_nat.nat) -> forall (__1 : prop cic.prop matita_arithmetics_primes.prime p) -> Term cic.prop (Not (divides p (fact n))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nR2. Låt $T0$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $a0$ vara ett element av $cic.Term$ av $univs.Type0$ och $T0$. Låt $T1$ vara en funktion från element $x0$ av $cic.Term$ av $univs.Type0$ och $T0$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $x0$ till element av $cic.Univ$ av $univs.Type0$. Låt $a1$ vara ett element av $cic.Term$ av $univs.Type0$ och $T1$ applicerat på $a0$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$. Låt $T2$ vara en funktion från element $x0$ av $cic.Term$ av $univs.Type0$ och $T0$ och element $p0$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $x0$ och element $x1$ av $cic.Term$ av $univs.Type0$ och $T1$ applicerat på $x0$ och $p0$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T1$ applicerat på $x0$ och $p0$ och $matita_basics_logic.R1$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $T1$ och $a1$ och $x0$ och $p0$ och $x1$ till element av $cic.Univ$ av $", "label": "R2 : T0 : cic.Univ univs.Type0 -> a0 : cic.Term univs.Type0 T0 -> T1 : (x0 : cic.Term univs.Type0 T0 -> __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0) -> cic.Univ univs.Type0) -> a1 : cic.Term univs.Type0 (T1 a0 (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 T0) a0)) -> T2 : (x0 : cic.Term univs.Type0 T0 -> p0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 T0) a0 x0) -> x1 : cic.Term univs.Type0 (T1 x0 p0) -> __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (T1 x0 p0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 T0) a0 T1 a1 x0 p0) x1) -> cic.Univ univs.Type0) -> _a2 : cic.Term univs.Type0 (T2 a0 (matita_basics_logic.refl (", "predict": "univs.Type0$. Låt $a2$ vara ett element av $cic.Term$ av $univs.Type0$ och $T2$ applicerat på $a0$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $matita_basics_logic.refl$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$ och $matita_basics_logic.R1$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $T0$ och $a0$. Axiom prop81 : prop81 . \n\nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_Aop. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $return_sort$ vara ett element av $cic.Sort$. Då för alla funktioner $return_type$ från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $return_sort$, för alla funktioner $case_mk_Aop$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och", "label": "match_Aop : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> return_sort : cic.Sort -> return_type : (z : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> cic.Univ return_sort) -> case_mk_Aop : (op : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _nill : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> _nilr : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> _assoc : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term return_sort (return_type (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> z : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> cic.Term return_sort (return_type z) .", "predict": " $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ och funktioner $_assocr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $op$ applicerat på $b$ och $a$ och $c$ , det är giltig att applicerar $case_mk_Aop$ på $op$ applicerat på $A$ och $_nil$ och $A$ och $_nill$ och $_assoc$ och $_assocr$ och $_nilr$ till element av $cic.Term$ av $univs.Type0$ och $A$ och det kan uttryckas som följande: \n\n$A$ har typen $return_sort$ och $A$ är lika med $_nil$ eller det finns ett element $b$ av typen $A$ så att $op$ applicerat på $A$ och $b$ och $_nil$ är lika med $_nil$ och det finns ett element $c$ av typen $A$ så att $op$ applicerat på $b$ och $A$ och $_nil$ är lika med $_nil$ och det finns ett element $d$ av typen $A$ så att $op$ applicerat på $c$ och $b$ och $A$ är lika med $_nil$. \n\nLåt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då är $A$ lika med $_nil$ eller det finns ett element $B$ av typen $A$ så att $op$ applicerat"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_rect_Type4_body. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_917$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type4$. Alors pour toutes les fonctions $_H_mk_range$ des fonctions $_enum$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_upto$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_filter$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_range$ appliqué à $_A$ et $_enum$ et $_upto$ et $_filter$, pour tous les éléments $x_917$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$, $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_917$.\nassistant\n", "label": "axiom range_rect_Type4_body (_A : cic.Univ univs.Type0) (Q_ : (_x_917 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type4) (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) (x_917 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) : cic.Term univs.Type4 (Q_ x_917)", "predict": "Axiom Range_rect_Type4_body : forall (A : cic.Univ) (Q : (x : cic.Term) -> (A : cic.Univ) -> matita_arithmetics_bigops.range A -> (x : cic.Term) -> (univs.Type0) -> (matita_arithmetics_nat.nat) -> (cic.Term) -> (univs.Type4), (H_mk_range : (forall (x : cic.Term) -> (nat : matita_arithmetics_nat.nat) -> (x : cic.Term) -> (nat : matita_arithmetics_nat.nat) -> (A : cic.Term) -> (Q x A (matita_arithmetics_bigops.mk_range A x nat) (enum x nat A) (upto x nat A) (filter x nat A) Q (matita_arithmetics_bigops.mk_range A x nat) (enum x nat A) (upto x nat A) (filter x nat A)) -> (x : cic.Term) -> (matita_arithmetics_bigops.range A) -> (cic.Term) -> (univs.Type4)) -> (forall (x : cic.Term) -> (matita_arithmetics_bigops.range A) -> (cic.Term) -> (univs.Type4) -> (Q x A (matita_arithmetics_bigops.mk_range A x (matita_arithmetics_bigops.range A)) (enum x (matita_arithmetics_bigops.range A) A) (upto x (matita_arithmetics_bigops.range A) A) (filter x (matita_arithmetics_bigops.range A) A) Q (matita_arithmetics_bigops.mk_range A x (matita_arithmetics_bigops.range A)) (enum x (matita_arithmetics_bigops.range A) A) (upto x (matita_arithmetics_bigops.range A) A) (filter x (matita_arithmetics_bigops.range A) A)))) -> (forall (x : cic.Term) -> (matita_arithmetics_bigops.range A) -> (cic.Term) -> (univs.Type4))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExists_add. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $P$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $l1$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$. Then for all elements $x$ of $cic.Term$ of $univs.Type0$ and $A$, for all elements $l2$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.Exists$ applied to $A$ and $P$ and $matita_basics_lists_list.append$ applied to $A$ and $l1$ and $l2$, $cic.Term$ holds for $cic.prop$ and $matita_basics_lists_list.Exists$ applied to $A$ and $P$ and $matita_basics_lists_list.append$ applied to $A$ and $l1$ and $matita_basics_lists_list.cons$ applied to $A$ and $x$ and $l2$.\nassistant\n", "label": "postulate Exists_add : (A : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (x : cic.Term univs.Type0 A) -> (l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 l2))) -> cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 (matita_basics_lists_list.cons A x l2)))", "predict": "postulate Exists_add : (A : univs.Type0) -> (P : (x : cic.Term) -> A -> univs.Type0) -> (l1 : matita_basics_lists_list.list A) -> (x : cic.Term) -> (l2 : matita_basics_lists_list.list A) -> (l : matita_basics_lists_list.append A l1 l2) -> cic.Term -> cic.prop -> matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 (matita_basics_lists_list.cons A x l2))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNil_to_nil. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all elements $l1$ and $l2$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.append$ applied to $A$ and $l1$ and $l2$ and $matita_basics_lists_list.nil$ applied to $A$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.And$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $l1$ and $matita_basics_lists_list.nil$ applied to $A$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $l2$ and $matita_basics_lists_list.nil$ applied to $A$.\nassistant\n", "label": "axiom nil_to_nil (A : cic.Univ univs.Type0) (l1 l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A)) (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.append A l1 l2) (matita_basics_lists_list.nil A))) : cic.Term cic.prop (matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l1 (matita_basics_lists_list.nil A)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l2 (matita_basics_lists_list.nil A)))", "predict": "Nil_to_nil. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all elements $l1$ and $l2$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.append$ applied to $A$ and $l1$ and $l2$ and $matita_basics_lists_list.nil$ applied to $A$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.And$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $l1$ and $matita_basics_lists_list.nil$ applied to $A$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $l2$ and $matita_basics_lists_list.nil$ applied to $A$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNat_rect_Type2_body. Let $Q_$ be a function from elements $_x_381$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Univ$ of $univs.Type2$. Let $_H_O$ be an element of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_arithmetics_nat.O$. Then for all functions $_H_S$ from elements $x_382$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $_x_384$ of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $x_382$ to elements of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_arithmetics_nat.S$ applied to $x_382$, for all elements $x_381$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $univs.Type2$ and $Q_$ applied to $x_381$.\nassistant\n", "label": "axiom nat_rect_Type2_body (Q_ : (_x_381 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ univs.Type2) (_H_O : cic.Term univs.Type2 (Q_ matita_arithmetics_nat.O)) (_H_S : (x_382 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_384 : cic.Term univs.Type2 (Q_ x_382)) -> cic.Term univs.Type2 (Q_ (matita_arithmetics_nat.S x_382))) (x_381 : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term univs.Type2 (Q_ x_381)", "predict": "Output: \nInductive Nat_rect_Type2_body (Q_ : forall x_381 : cic.Term univs.Type0 (matita_arithmetics_nat.nat), Q_ x_381 : univs.Type2) (H_O : H_O : cic.Term univs.Type2 (Q_ matita_arithmetics_nat.O)) (H_S : forall x_382 : cic.Term univs.Type0 (matita_arithmetics_nat.nat), x_384 : univs.Type2 (Q_ x_382), (cic.Term univs.Type2 (Q_ (matita_arithmetics_nat.S) x_382)) -> (forall x_381 : cic.Term univs.Type0 (matita_arithmetics_nat.nat), (cic.Term univs.Type2 (Q_ x_381)))) = _eq_refl : forall x_381 : cic.Term univs.Type0 (matita_arithmetics_nat.nat), (cic.Term univs.Type2 (Q_ x_381))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_rect_CProp2_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type2$. Låt $_x$ vara ett element av $cic.Term$ av $univs.Type2$ och $A$. Låt $Q_$ vara en funktion från element $x_31$ av $cic.Term$ av $univs.Type2$ och $A$ och element $_x_32$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_31$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_refl$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $_x$ och $matita_basics_logic.refl$ applicerat på $A$ och $_x$. Då för alla element $x_31$ av $cic.Term$ av $univs.Type2$ och $A$, för alla element $x_32$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_31$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_31$ och $x_32$.\nassistant\n", "label": "postulate eq_rect_CProp2_body : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_31 : cic.Term univs.Type2 A) -> (_x_32 : cic.Term cic.prop (matita_basics_logic.eq A _x x_31)) -> cic.Univ cic.prop) -> (_H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x))) -> (x_31 : cic.Term univs.Type2 A) -> (x_32 : cic.Term cic.prop (matita_basics_logic.eq A _x x_31)) -> cic.Term cic.prop (Q_ x_31 x_32)", "predict": "postulate Eq_rect_CProp2_body : \n  {univs : Universe} \n  {A : univs.Type2} \n  {univs : Universe} \n  {x : univs.Type2 A} \n  {Q_ : (x_31 : univs.Type2) -> (A x) -> (cic.Term (cic.prop)) -> (matita_basics_logic.eq (A x) x_31) -> (univs.Type2)} \n  {H_refl : (cic.Term (cic.prop)) (Q_ x refl A x)} \n  -> (forall (x_31 : univs.Type2) (x_32 : cic.Term (cic.prop) (matita_basics_logic.eq (A x) x_31)) -> (cic.Term (cic.prop)) (Q_ x_31 x_32))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDivides_pi_p_M1. Soient $m$ et $i$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $i$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $m$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_primes.divides$ appliqué à $matita_arithmetics_bigops.bigop$ appliqué à $i$ et la fonction qui envoie $p$ à $matita_basics_bool.andb$ appliqué à $matita_arithmetics_nat.leb$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $m$ et $p$ et $matita_arithmetics_primes.primeb$ appliqué à $p$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.times$ et la fonction qui envoie $p$ à $p$ et $matita_arithmetics_binomial.M$ appliqué à $m$.\nassistant\n", "label": "divides_pi_p_M1 : m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.le i (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) m)))) -> cic.Term cic.prop (matita_arithmetics_primes.divides (matita_arithmetics_bigops.bigop i (p : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_basics_bool.andb (matita_arithmetics_nat.leb (matita_arithmetics_nat.S (matita_arithmetics_nat.S m)) p) (matita_arithmetics_primes.primeb p)) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (p : cic.Term univs.Type0 matita_arithmetics_nat.nat => p)) (matita_arithmetics_binomial.M m)) .", "predict": "postulate Divides_pi_p_M1 : forall (m : cic.Term univs.Type0) (i : matita_arithmetics_nat.nat) (p : cic.Term matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.O)))))) m) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O)))), (cic.Term cic.prop) -> (matita_arithmetics_primes.divides (cic.Term (matita_arithmetics_bigops.bigop i)) (fun p => matita_basics_bool.andb (matita_arithmetics_nat.leb (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) m p) (matita_arithmetics_primes.primeb p (matita_arithmetics_nat.nat) (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) (matita_arithmetics_nat.times) (fun p => p (matita_arithmetics_binomial.M m))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLstar_ind_l. For all elements $B$ of $cic.Univ$ of $univs.Type0$, for all functions $R$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Univ$ of $cic.prop$, for all elements $b2$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $P$ of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation2$ applied to $matita_arithmetics_nat.nat$ and $B$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.O$ and $b2$, for all functions $__1$ from elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $b1$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $R$ applied to $b1$ and $b$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $l$ and $b$ and $b2$ and elements $__3$ of $cic.Term$ of $cic.prop$ and $P$ applied to $l$ and $b$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.plus$ applied to $l$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $b1$, for all elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $b1$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $R$ and $", "label": "postulate lstar_ind_l : (B : cic.Univ univs.Type0) -> (R : (__ : cic.Term univs.Type0 B) -> (__1 : cic.Term univs.Type0 B) -> cic.Univ cic.prop) -> (b2 : cic.Term univs.Type0 B) -> (P : cic.Term univs.Type0 (matita_basics_relations.relation2 matita_arithmetics_nat.nat B)) -> (__ : cic.Term cic.prop (P matita_arithmetics_nat.O b2)) -> (__1 : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (__1 : cic.Term cic.prop (R b1 b)) -> (__2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b b2)) -> (__3 : cic.Term cic.prop (P l b)) -> cic.Term cic.prop (P (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (__2 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b1 b2)) -> cic.Term cic.prop (P l b1)", "predict": "l$ and $b1$ and $matita_arithmetics_nat.O$ and elements $__3$ of $cic.Term$ of $cic.prop$ and $P$ applied to $l$ and $b1$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_nat.plus$ applied to $l$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $b1$.\n\nOutput: \n  postulate Lstar_ind_l : {B : univs.Type0} -> (R : (__) -> (B -> __1 -> univs.Type0) -> (B -> B -> univs.Type0) -> (__) -> (B -> B -> univs.Type0) -> (B -> univs.Type0) -> (matita_basics_relations.relation2 (matita_arithmetics_nat.nat) B) -> (cic.Term univs.Type0) -> (B -> (cic.Term univs.Type0) -> univs.Type0) -> (cic.Term univs.Type0) -> (B -> B -> univs.Type0) -> (cic.Term univs.Type0) -> (B -> univs.Type0) -> (cic.Term univs.Type0) -> (B -> univs.Type0) -> (cic.Term univs.Type0) -> (B -> univs.Type0) -> (cic.Term univs.Type0) -> (B -> univs.Type0) -> (cic.Term univs.Type0) -> (B -> univs.Type0) -> (cic.Term univs.Type0) -> (B -> univs.Type0) -> (cic.Term univs.Type0) -> (B -> univs.Type0) -> (cic.Term univs.Type0) -> (B -> univs.Type0) -> (cic.Term univs.Type0) -> (B -> univs.Type0) -> (cic.Term univs.Type0) -> (B -> univs.Type0) -> (cic.Term univs.Type0) -> (B -> univs.Type0) -> (cic.Term univs.Type0) -> (B -> univs.Type"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDiv_mod_spec_rect_CProp3. Soient $_n$ et $_m$ et $_q$ et $_r$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $Q_$ une fonction des éléments $_x_845$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $_n$ et $_m$ et $_q$ et $_r$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_div_mod_spec_intro$ une fonction des éléments $x_847$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $_r$ et $_m$ et des éléments $x_846$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $_n$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $_q$ et $_m$ et $_r$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_div_and_mod.div_mod_spec_intro$ appliqué à $_n$ et $_m$ et $_q$ et $_r$ et $x_847$ et $x_846$. Alors pour tous les éléments $x_845$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $_n$ et $_m$ et $_q$ et $_r$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_845$.\nassistant\n", "label": "axiom div_mod_spec_rect_CProp3 (_n _m _q _r : cic.Term univs.Type0 matita_arithmetics_nat.nat) (Q_ : (_x_845 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ cic.prop) (_H_div_mod_spec_intro : (x_847 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_846 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term cic.prop (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_847 x_846))) (x_845 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) : cic.Term cic.prop (Q_ x_845)", "predict": "postulate Div_mod_spec_rect_CProp3 : forall (n m q r : cic.Term univs.Type0) (Q : (forall x : cic.Term) (matita_arithmetics_div_and_mod.div_mod_spec n m q r) -> cic.prop) (H_div_mod_spec_intro : forall x : cic.Term, (forall x : matita_arithmetics_nat.lt r m) -> (forall x : cic.prop, (forall x : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n) (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q m) r)) -> (forall x : cic.Term, Q x -> matita_arithmetics_div_and_mod.div_mod_spec_intro n m q r x))) -> forall x : cic.Term, (forall x : matita_arithmetics_div_and_mod.div_mod_spec n m q r) -> cic.prop (Q x)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_rect_Type1_body. Let $A$ be an element of $cic.Univ$ of $univs.Type2$. Let $_x$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Let $Q_$ be a function from elements $x_16$ of $cic.Term$ of $univs.Type2$ and $A$ and elements $_x_17$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_16$ to elements of $cic.Univ$ of $univs.Type1$. Let $_H_refl$ be an element of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $_x$ and $matita_basics_logic.refl$ applied to $A$ and $_x$. Let $x_16$ be an element of $cic.Term$ of $univs.Type2$ and $A$. Then for all elements $x_17$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $A$ and $_x$ and $x_16$, $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_16$ and $x_17$.\nassistant\n", "label": "postulate eq_rect_Type1_body : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_16 : cic.Term univs.Type2 A) -> (_x_17 : cic.Term cic.prop (matita_basics_logic.eq A _x x_16)) -> cic.Univ univs.Type1) -> (_H_refl : cic.Term univs.Type1 (Q_ _x (matita_basics_logic.refl A _x))) -> (x_16 : cic.Term univs.Type2 A) -> (x_17 : cic.Term cic.prop (matita_basics_logic.eq A _x x_16)) -> cic.Term univs.Type1 (Q_ x_16 x_17)", "predict": "postulate Eq_rect_Type1_body : (A : cic.Univ) -> (x : cic.Term) -> (Q_ : (x_16 : cic.Term) -> (A : cic.Term) -> (x_17 : cic.Term) -> (cic.prop) -> (matita_basics_logic.eq A x) -> (cic.Term)) -> (H_refl : (cic.Term) -> (Q_ x (matita_basics_logic.refl A x))) -> (x_16 : (cic.Term) -> (A)) -> (forall (x_17 : (cic.prop) -> (matita_basics_logic.eq A x)), (cic.Term) -> (univs.Type1) -> (Q_ x_16 x_17))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_to_not_eq. För alla element $n$ och $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $n$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.Not$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $n$ och $m$.\nassistant\n", "label": "postulate lt_to_not_eq : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt n m)) -> cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n m))", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_CProp3. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_799$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H_mk_Aop$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $", "label": "Aop_rect_CProp3 : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_799 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil) -> cic.Univ cic.prop) -> _H_mk_Aop : (op : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _nill : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> _nilr : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> _assoc : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> x_799 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil) -> cic.Term cic.prop (Q_ x_799) .", "predict": "matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ och $_H_mk_Aop$ applicerat på $b$ och $c$ och $c$ och $_nill$ applicerat på $a$ och $a$ och $a$ och $_nilr$ applicerat på $b$ och $b$ och $b$ och $_assoc$ applicerat på $a$ och $b$ och $c$ till element av $cic.Univ$ av $cic.prop$, kan vi konstruera en funktion $_Aop_rect_CProp3$ från element $_t$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$ som är lika med $_Q_$ applicerat på $_t$ och $_nil$ och $_H_mk_Aop$ applicerat på $_t$ och $_t$ och $_t$ och $_nill$ applicerat på $_t$ och $_t$ och $_t$ och $_assoc$ applicerat på $_t$ och $_t$ och $_t$.\nOutput: \nAop_rect_CProp3 : forall (A : univs.univ) (t : cic.term univs.type0 A) (Q : forall (x : cic.term univs.type0) (Aop : Aop t A) (Aop_nil : Aop nil A), cic.prop), (forall (H_mk_Aop : forall (op : op x A) (x1 : cic.term univs.type0 A), cic.term univs.type0 A) (nill : forall (a : cic.term univs.type0 A), cic.term cic.prop (matita_basics_logic.eq (cic.lift univs.type0 univs.type2 A) (op nil a a) (nill a a a))) (assoc : forall (a : cic.term univs.type0 A) (b : cic.term univs.type0 A) (c : cic.term univs.type0 A), cic.prop (matita_basics_logic.eq (cic"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDiv_mod_spec_ind_body. Let $_n$ and $_m$ and $_q$ and $_r$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $Q_$ be a function from elements $_x_809$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_div_mod_spec_intro$ be a function from elements $x_811$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $_r$ and $_m$ and elements $x_810$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $_n$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $_q$ and $_m$ and $_r$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_811$ and $x_810$. Then for all elements $x_809$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_809$.\nassistant\n", "label": "Axiom div_mod_spec_ind_body : forall _n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _q : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _r : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall Q_ : ((_x_809 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r)) -> cic.Univ cic.prop), forall _H_div_mod_spec_intro : ((x_811 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m)) -> (x_810 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r))) -> cic.Term cic.prop (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_811 x_810))), forall x_809 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r), cic.Term cic.prop (Q_ x_809) .", "predict": "Output: \nAxiom div_mod_spec_ind_body : \n  forall (n : Term univs.Type0 matita_arithmetics_nat.nat) \n  (m : Term univs.Type0 matita_arithmetics_nat.nat) \n  (q : Term univs.Type0 matita_arithmetics_nat.nat) \n  (r : Term univs.Type0 matita_arithmetics_nat.nat) \n  (Q : (forall x : Term univ univs.prop) -> div_mod_spec n m q r -> Term univ univs.prop) \n  (H_div_mod_spec_intro : (forall x : Term univ univs.prop) -> lt r m -> eq (lift Type0 Type2 nat n) (plus (times q m) r) -> (forall x : Term univ univs.prop) -> Q x (div_mod_spec_intro n m q r x)) -> \n  forall (x : Term univ univs.prop) -> div_mod_spec x, \n  Q x."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBigop_iso. Let $n1$ and $n2$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p1$ and $p2$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $op$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $B$ and $nil$. Let $f1$ and $f2$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_bigops.iso$ applied to $B$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $B$ and $matita_arithmetics_bigops.bigop$ applied to", "label": "bigop_iso : n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n2 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> p2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> B : cic.Univ univs.Type0 -> nil : cic.Term univs.Type0 B -> op : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil) -> f1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 B) -> f2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 B) -> __ : cic.Term cic.prop (matita_arithmetics_bigops.iso B (matita_arithmetics_bigops.mk_range B f1 n1 p1) (matita_arithmetics_bigops.mk_range B f2 n2 p2)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop n1 (i : cic.Term univs.Type0 matita_arithmetics_nat.nat => p1 i) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (i : cic.Term univs.Type0 matita_arithmetics_nat.nat => f1 i)) (matita_arithmetics_bigops.bigop n2 (i : cic.Term univs.Type0 matita_arithmetics_nat.nat => p2 i) B nil (matita_arithmetics_bigops.aop__o__op B nil op) (i : cic.Term univs.Type0 matita_arithmetics_nat.nat => f2 i))) .", "predict": " $op$ and $__$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$.\nOutput: \nOutput: \nInput: Translate the following English statement into Dedukti. Prop90. We can prove that $n1 + n2$ is equal to $f1(n1) + f2(n2)$ under the condition that $n1$ and $n2$ are elements of $univs.Type0$ and $matita_arithmetics_nat.nat$, $f1$ and $f2$ are functions from elements of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $univs.Type0$ and $matita_basics_bool.bool$, and $B$ is an element of $cic.Univ$ of $univs.Type0$. \nOutput: \nOutput: \nInput: Translate the following English statement into Dedukti. Prop100. We can prove that $n1 * n2$ is equal to $f1(n1) * f2(n2)$ under the condition that $n1$ and $n2$ are elements of $univs.Type0$ and $matita_arithmetics_nat.nat$, $f1$ and $f2$ are functions from elements of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $univs.Type0$ and $matita_basics_bool.bool$, and $B$ is an element of $cic.Univ$ of $univs.Type0$. \nOutput: \nOutput: \nInput: Translate the following English statement into Dedukti. Prop110. We can prove that $n1 ^ n2$ is equal to $f1(n1) ^ f2(n2)$ under the condition that $n1$ and $n2$ are elements of $univs.Type0$ and $matita_arithmetics_nat.nat$, $f1$ and $f2$ are functions from elements of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $univs.Type0$ and $mat"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_rect_Type4. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $_x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $Q_$ une fonction des éléments $x_4$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $_x_5$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_4$ à des éléments de $cic.Univ$ de $univs.Type4$. Alors pour tous les éléments $_H_refl$ de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$, pour tous les éléments $x_4$ de $cic.Term$ de $univs.Type2$ et de $A$, pour tous les éléments $x_5$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_4$, $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_4$ et $x_5$.\nassistant\n", "label": "axiom eq_rect_Type4 (A : cic.Univ univs.Type2) (_x : cic.Term univs.Type2 A) (Q_ : (x_4 : cic.Term univs.Type2 A) -> (_x_5 : cic.Term cic.prop (matita_basics_logic.eq A _x x_4)) -> cic.Univ univs.Type4) (_H_refl : cic.Term univs.Type4 (Q_ _x (matita_basics_logic.refl A _x))) (x_4 : cic.Term univs.Type2 A) (x_5 : cic.Term cic.prop (matita_basics_logic.eq A _x x_4)) : cic.Term univs.Type4 (Q_ x_4 x_5)", "predict": "postulate Eq_rect_Type4 : forall (A : cic.Univ) (x : cic.Term) (Q : (x4 : cic.Term) -> (x : A) -> x4 = A x -> cic.prop) (H_refl : cic.Term) (Q_refl : Q x (matita_basics_logic.refl A x)) (x4 : cic.Term) (x5 : cic.Term) (eq : matita_basics_logic.eq A x x4) -> cic.Term (univs.Type4) (Q x4 x5)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDivides_d_times_gcd. Let $m$ and $n$ and $d$ and $c$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $c$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $d$ and $matita_arithmetics_nat.times$ applied to $c$ and $m$. Then for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $d$ and $matita_arithmetics_nat.times$ applied to $c$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $d$ and $matita_arithmetics_nat.times$ applied to $c$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$.\nassistant\n", "label": "postulate divides_d_times_gcd : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (d : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O c)) -> (__1 : cic.Term cic.prop (matita_arithmetics_primes.divides d (matita_arithmetics_nat.times c m))) -> (__2 : cic.Term cic.prop (matita_arithmetics_primes.divides d (matita_arithmetics_nat.times c n))) -> cic.Term cic.prop (matita_arithmetics_primes.divides d (matita_arithmetics_nat.times c (matita_arithmetics_gcd.gcd n m)))", "predict": "postulate Divides_d_times_gcd : {m n d c : cic.Term (univs.Type0)} -> (m : matita_arithmetics_nat.nat) -> (n : matita_arithmetics_nat.nat) -> (d : matita_arithmetics_primes.prime) -> (c : matita_arithmetics_primes.divides d (matita_arithmetics_nat.times c m)) -> (forall (c1 : matita_arithmetics_primes.prime) -> (c1 : matita_arithmetics_primes.divides d (matita_arithmetics_nat.times c n)) -> (matita_arithmetics_gcd.gcd n m))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLstar_r_ind. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_R$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $B$. Låt $Q_$ vara en funktion från element $x_1337$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $x_1336$ av $cic.Term$ av $univs.Type0$ och $B$ och element $x_1335$ av $cic.Term$ av $univs.Type0$ och $B$ och element $_x_1338$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar_r$ applicerat på $B$ och $_R$ och $x_1337$ och $x_1336$ och $x_1335$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_lstar_r_O$ vara en funktion från element $b$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_nat.O$ och $b$ och $b$ och $matita_arithmetics_lstar.lstar_r_O$ applicerat på $B$ och $_R$ och $b$. Låt $_H_lstar_r_S$ vara en funktion från element $l$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $b1$ av $cic.Term$ av $univs.Type0$ och $B$ och element $b$ av $cic.Term$ av $univs.Type0$ och $B$ och element $x_1340$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar_r$ applicerat på $B$ och $_R$ och $l$ och $b1$ och $b$ och element $b2$ av $cic.Term$ av $univs.Type0$ och $B$ och element $x_133", "label": "axiom lstar_r_ind (B : cic.Univ univs.Type0) (_R : cic.Term univs.Type0 (matita_basics_relations.relation B)) (Q_ : (x_1337 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_1336 : cic.Term univs.Type0 B) -> (x_1335 : cic.Term univs.Type0 B) -> (_x_1338 : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R x_1337 x_1336 x_1335)) -> cic.Univ cic.prop) (_H_lstar_r_O : (b : cic.Term univs.Type0 B) -> cic.Term cic.prop (Q_ matita_arithmetics_nat.O b b (matita_arithmetics_lstar.lstar_r_O B _R b))) (_H_lstar_r_S : (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (x_1340 : cic.Term cic.prop (matita_arithmetics_lstar.lstar_r B _R l b1 b)) -> (b2 : cic.Term univs.Type0 B) -> (x_1339 : cic.Term cic.prop (_R b b2)) -> (_x_1342 : cic.Term cic", "predict": "7$ av $cic.Term$ av $univs.Type0$ och $univs.Type0$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $l$ och $b1$ och $b$ och $x_1340$ och $matita_arithmetics_lstar.lstar_r_S$ applicerat på $B$ och $_R$ och $l$ och $b1$ och $b$ och $b2$ och $x_1337$ och $b$.\n\nOutput: \nInductive lstar_r_ind : forall (univs : Type0) (cic : Type0) (B : cic.Univ univs) (R : cic.Term univs) (relation : B R) (Q_ : x1337 : cic.Term univs -> nat -> x1336 : cic.Term univs -> B -> x1335 : cic.Term univs -> B -> x1338 : cic.Term -> lstar_r B R x1337 x1336 x1335 -> x1338 : cic.prop) -> forall (H_lstar_r_O : b : cic.Term univs -> B -> x1338 b b (lstar_r_O B R b)) -> forall (H_lstar_r_S : l : cic.Term univs -> nat -> b1 : cic.Term univs -> B -> b : cic.Term univs -> B -> x1338 l b1 b (lstar_r_S B R l b1 b) -> b2 : cic.Term univs -> B -> x1337 : cic.Term univs -> B -> x1338 b2 x1337 b (lstar_r_S B R l b1 b) (Q_ b1 b x1337)), Type."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_rect_CProp1_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_965$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_Dop$ vara en funktion från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $_nil$ och $_nil$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A", "label": "Axiom Dop_rect_CProp1_body : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_965 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ cic.prop), forall _H_mk_Dop : ((sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))), forall x_965 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil), cic.Term cic.prop (Q_ x_965) .", "predict": "$ och $prod$ applicerat på $a$ och $b$ och $c$ och $_null$ till element av $cic.Term$ av $univs.Type0$ och $A$ och $Q_$ applicerat på $a$ och $b$ och $c$ och $_nil$ och $_nil$ och $_null$ . \n\nOutput: \nInductive prop1_body : Type :=\n| body_nil : prop1_body\n| body_mk_Dop : forall (sum : term) (ACop : matita_arithmetics_bigops.ACop) (prod : forall ($__: term) (A : term), term) (null : forall (a : term), term) (distr : forall (a : term) (b : term) (c : term), term) (Q_ : forall ($x_965 : term), matita_arithmetics_bigops.Dop A (nil) -> prop) (H_mk_Dop : forall (sum : term) (ACop : matita_arithmetics_bigops.ACop) (prod : forall ($__: term) (A : term), term) (null : forall (a : term), term) (distr : forall (a : term) (b : term) (c : term), term) (Q_ : forall ($x_965 : term), matita_arithmetics_bigops.Dop A (nil) -> prop) (H_mk_Dop : forall (sum : term) (ACop : matita_arithmetics_bigops.ACop) (prod : forall ($__: term) (A : term), term) (null : forall (a : term), term) (distr : forall (a : term) (b : term) (c : term), term) (Q_ : forall ($x_965 : term), matita_arithmetics_bigops.Dop A (nil) -> prop) -> prop) -> prop."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEx2_intro. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $P$ and $Q$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $x$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $P$ applied to $x$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $Q$ applied to $x$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.ex2$ applied to $A$ and $P$ and $Q$.\nassistant\n", "label": "postulate ex2_intro : (A : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (x : cic.Term univs.Type0 A) -> (__ : cic.Term cic.prop (P x)) -> (__1 : cic.Term cic.prop (Q x)) -> cic.Term cic.prop (matita_basics_logic.ex2 A P Q)", "predict": "postulate Ex2_intro : (A : univs.Type0) -> (P Q : (__) -> univs.Type0 -> univs.Type0) -> (x : univs.Type0) -> (P x A) -> (x1 : univs.Type0) -> (Q x A) -> cic.prop -> matita_basics_logic.ex2 A (P x) (Q x)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_rect_CProp0. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla funktioner $Q_$ från element $_x_939$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_range$ från funktioner $_enum$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $_A$ och element $_upto$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $_filter$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_range$ applicerat på $_A$ och $_enum$ och $_upto$ och $_filter$, för alla element $x_939$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_939$.\nassistant\n", "label": "postulate range_rect_CProp0 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_939 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ cic.prop) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_939 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term cic.prop (Q_ x_939)", "predict": "postulate Range_rect_CProp0 : \n  ∀ (A : cic.Univ) → (Q : (x : cic.Term univs.Type0) → matita_arithmetics_bigops.range A → cic.Term univs.Type0) → \n  (∀ (H_mk_range : (enum : (__) → nat) → (mk_range : (__) → (__) → cic.Term univs.Type0) → A → nat → (__) → cic.Term univs.Type0) → \n  (∀ (upto : cic.Term univs.Type0) → (filter : (__) → nat → cic.Term univs.Type0 → bool → cic.Term univs.Type0) → Q (mk_range enum H_mk_range A upto filter) (enum (λ x → x < upto) (λ x → filter x upto (λ y → y < upto))) x) → \n  (∀ (x : cic.Term univs.Type0) → matita_arithmetics_bigops.range A → cic.Term univs.Type0)) (Q A)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1078. Soient $a$ et $b$ et $q$ et $r$ et $q1$ et $r1$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $a$ et $b$ et $q$ et $r$. Soit $ltrb$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $r$ et $b$. Soit $spec$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $a$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $q$ et $b$ et $r$. Soit $_clearme0$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $a$ et $b$ et $q1$ et $r1$. Alors pour tous les éléments $ltr1b$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $r1$ et $b$, pour tous les éléments $spec1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$", "label": "Axiom let_clause_1078 : forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall q : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall r : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall q1 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall r1 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q r), forall ltrb : cic.Term cic.prop (matita_arithmetics_nat.lt r b), forall spec : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q b) r)), forall _clearme0 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q1 r1), forall ltr1b : cic.Term cic.prop (matita_arithmetics_nat.lt r1 b), forall spec1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q1 b) r1)), forall leqq1 : cic.Term cic.prop (matita_arithmetics_nat.le q q1), forall ltqq1 : cic.Term cic.prop (matita_arithmetics_nat.lt q q1), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a (matita_arithmetics_nat.plus r (matita_arithmetics_nat.times b q))) .", "predict": " et $a$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $q1$ et $b$ et $r1$, nous avons $spec$ égal à $spec1$ et $ltrb$ égal à $ltr1b$.\nOutput: \n```coq\nParameter a : univs.Type0.\nParameter b : univs.Type0.\nParameter q : univs.Type0.\nParameter r : univs.Type0.\nParameter q1 : univs.Type0.\nParameter r1 : univs.Type0.\nParameter prop : cic.prop.\nParameter div_mod_spec : matita_arithmetics_div_and_mod.div_mod_spec a b q r.\nParameter ltrb : cic.prop.\nParameter lt : matita_arithmetics_nat.lt r b.\nParameter spec : cic.prop.\nParameter lift : cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat a (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q b) r).\nParameter prop0 : cic.prop.\nParameter div_mod_spec0 : matita_arithmetics_div_and_mod.div_mod_spec a b q1 r1.\nHypothesis ltr1b : cic.prop.\nHypothesis ltr1b_ : matita_arithmetics_nat.lt r1 b.\nHypothesis spec1 : cic.prop.\nHypothesis spec1_ : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat a (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q1 b) r1)).\nLemma proof : spec = spec1 /\\ ltrb = ltr1b.\nProof.\n  (* Your proof goes here *)\nQed.\n```"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBool_rect_CProp4_body. Låt $Q_$ vara en funktion från element $_x_347$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $_H_true$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_bool.true$, för alla element $_H_false$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_bool.false$, för alla element $x_347$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_347$.\nassistant\n", "label": "axiom bool_rect_CProp4_body (Q_ : (_x_347 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) (_H_true : cic.Term cic.prop (Q_ matita_basics_bool.true)) (_H_false : cic.Term cic.prop (Q_ matita_basics_bool.false)) (x_347 : cic.Term univs.Type0 matita_basics_bool.bool) : cic.Term cic.prop (Q_ x_347)", "predict": "Axiom prop70 : odd 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nList_inv_rect_CProp1. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $x1$. Soit $P$ une fonction des éléments $_z1356$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $x1$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H1$ une fonction des éléments $_z1357$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $x1$ et $Hterm$ et $matita_basics_lists_list.nil$ appliqué à $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_lists_list.nil$ appliqué à $x1$. Soit $_H2$ une fonction des éléments $x_773$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $x_772$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $x1$ et des fonctions $_x_775$ des éléments $_z1357$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $x1$ et $Hterm$ et $x_772$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $x_772$ et des éléments $_z1357$ de $c", "label": "axiom list_inv_rect_CProp1 (x1 : cic.Univ univs.Type0) (Hterm : cic.Term univs.Type0 (matita_basics_lists_list.list x1)) (P : (_z1356 : cic.Term univs.Type0 (matita_basics_lists_list.list x1)) -> cic.Univ cic.prop) (_H1 : (_z1357 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list x1)) Hterm (matita_basics_lists_list.nil x1))) -> cic.Term cic.prop (P (matita_basics_lists_list.nil x1))) (_H2 : (x_773 : cic.Term univs.Type0 x1) -> (x_772 : cic.Term univs.Type0 (matita_basics_lists_list.list x1)) -> (_x_775 : (_z1357 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list x1)) Hterm x_772)) -> cic.Term cic.prop (P x_772)) -> (_z1357 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list x1)) Hterm (matita_basics_lists_list.cons x1 x_773 x_772))) -> cic.Term cic.prop (P (matita_basics_lists_list.cons x1 x_773 x_772))) : cic.Term cic.prop (P Hterm)", "predict": "ic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $x1$ et $Hterm$ et $matita_basics_lists_list.nil$ appliqué à $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_lists_list.nil$ appliqué à $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $x_772$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_lists_list.nil$ appliqué à $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $x_773$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_lists_list.nil$ appliqué à $x1$ à des éléments de $cic.Term$ de $cic.prop$. Soit $r$ une fonction des éléments $_x_775$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_lists_list.list$ appliqué à $x1$ et $Hterm$ et $matita_basics_lists_list.nil$ appliqué à $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_lists_list.nil$ appliqué à $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $x_772$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_lists_list.nil$ appliqué à $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_inv_rect_Type4. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be an element of $cic.Term$ of $univs.Type0$ and $x1$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z1374$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type4$. Let $_H1$ be a function from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $", "label": "Aop_inv_rect_Type4 : x1 : cic.Univ univs.Type0 -> x2 : cic.Term univs.Type0 x1 -> Hterm : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2) -> P : (_z1374 : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2) -> cic.Univ univs.Type4) -> _H1 : (op : (__ : cic.Term univs.Type0 x1 -> __1 : cic.Term univs.Type0 x1 -> cic.Term univs.Type0 x1) -> _nill : (a : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> _nilr : (a : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> _assoc : (a : cic.Term univs.Type0 x1 -> b : cic.Term univs.Type0 x1 -> c : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> _z1375 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.Aop x1 x2)) Hterm (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc)) -> cic.Term univs.Type4 (P (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type4 (P Hterm) .", "predict": "univs.Type2$ and $x1$ and $op$ applied to $x2$ and $a$ and $a$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $x2$ and $a$ and $a$ to elements of $cic.Term$ of $univs.Type0$ and $x1$. Let $H2$ be an element of $cic.Term$ of $univs.Type0$ and $x1$ and $H1$ and $Hterm$ and $P$ and $x2$. Let $H$ be an element of $cic.Term$ of $univs.Type0$ and $x1$ and $H2$. Then $P$ applied to $Hterm$ and $x2$ and $H$ applied to $Hterm$ and $x2$ and $x1$ is true. \nOutput: \nLet x1 be an element of cic.Univ of univs.Type0. Let x2 be an element of cic.Term of univs.Type0 and x1. Let Hterm be an element of cic.Term of univs.Type0 and matita_basics_lists_list.Aop applied to x1 and x2. Let P be a function from elements z1374 of cic.Term of univs.Type0 and matita_basics_lists_list.Aop applied to x1 and x2 to elements of cic.Univ of univs.Type4. Let H1 be a function from functions op from elements $ of cic.Term of univs.Type0 and x1 and elements $1 of cic.Term of univs.Type0 and x1 to elements of cic.Term of univs.Type0 and x1 and functions nill from elements a of cic.Term of univs.Type0 and x1 to elements of cic.Term of cic.prop and matita_basics_logic.eq applied to cic.lift applied to univs.Type0 and univs.Type2 and x1 and op applied to x2 and a and a and functions nilr from elements a of cic.Term of univs.Type0 and x1 to elements of cic.Term of cic.prop and matita_basics_logic.eq applied to cic"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd_rect_CProp3. For all elements $_A$ and $_B$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_708$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Prod$ from elements $_fst$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_snd$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_Prod$ applied to $_A$ and $_B$ and $_fst$ and $_snd$, for all elements $x_708$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_708$.\nassistant\n", "label": "Prod_rect_CProp3 : _A : cic.Univ univs.Type0 -> _B : cic.Univ univs.Type0 -> Q_ : (_x_708 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) -> cic.Univ cic.prop) -> _H_mk_Prod : (_fst : cic.Term univs.Type0 _A -> _snd : cic.Term univs.Type0 _B -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) -> x_708 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) -> cic.Term cic.prop (Q_ x_708) .", "predict": "Output: \nAxiom Prod_rect_CProp3 : forall (A : Univ) (B : Univ) (Q_ : forall (x_708 : Term) (matita_basics_types:Prod A B : Univ) (cic.prop) (Q_ (matita_basics_types.mk_Prod A B x_708 fst snd)), (forall (x_708 : Term) (matita_basics_types:Prod A B : Univ), Term x_708 (cic.prop) Q_ (x_708)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_discr. Let $a1$ be an element of $cic.Univ$ of $univs.Type0$. Let $a2$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $a1$ to elements of $cic.Univ$ of $univs.Type0$. Let $x$ and $y$ be elements of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $a1$ and $a2$. Then for all elements $_e$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.DPair$ applied to $a1$ and $a2$ and $x$ and $y$, $cic.Term$ holds for $univs.Type2$ and $matita_basics_types.match_DPair$ applied to $a1$ and $a2$ and $cic.succ$ applied to $univs.Type2$ and the function that maps $__$ to $cic.univ$ applied to $univs.Type2$ and the function that maps $t0$ and $t1$ to $matita_basics_types.match_DPair$ applied to $a1$ and $a2$ and $cic.succ$ applied to $univs.Type2$ and the function that maps $__$ to $cic.univ$ applied to $univs.Type2$ and the function that maps $u0$ and $u1$ to $cic.prod$ applied to $cic.succ$ applied to $univs.Type1$ and $univs.Type1$ and $cic.univ$ applied to $univs.Type1$ and the function that maps $", "label": "Axiom DPair_discr : forall a1 : cic.Univ univs.Type0, forall a2 : ((__ : cic.Term univs.Type0 a1) -> cic.Univ univs.Type0), forall x : cic.Term univs.Type0 (matita_basics_types.DPair a1 a2), forall y : cic.Term univs.Type0 (matita_basics_types.DPair a1 a2), forall _e : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair a1 a2)) x y), cic.Term univs.Type2 (matita_basics_types.match_DPair a1 a2 (cic.succ univs.Type2) (fun __ => cic.univ univs.Type2) (fun t0 => fun t1 => matita_basics_types.match_DPair a1 a2 (cic.succ univs.Type2) (fun __ => cic.univ univs.Type2) (fun u0 => fun u1 => cic.prod (cic.succ univs.Type1) univs.Type1 (cic.univ univs.Type1) (fun P => cic.prod univs.Type1 univs.Type1 (cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 a1) (matita_basics_logic.R0 a1 t0) u0) (fun e0 => cic.prod cic.prop univs.Type1 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 ((fun x0 => fun p0 => a2 x0) u0 e0)) (matita_basics_logic.R1 (cic.lift univs.Type0 univs.Type2 a1) t0 (fun x0 => fun p0 => a2 x0) t1 u0 e0) u1) (fun _e1 => P))) (fun _z41 => P))) y) x) .", "predict": "v0$ and $v1$ to $cic.prod$ applied to $cic.succ$ applied to $univs.Type1$ and $univs.Type1$ and $cic.univ$ applied to $univs.Type1$ and the function that maps $w0$ and $w1$ to $cic.prod$ applied to $cic.succ$ applied to $univs.Type1$ and $univs.Type1$ and $cic.univ$ applied to $univs.Type1$ and the function that maps $x0$ and $x1$ to $cic.univ$ applied to $univs.Type1$ and the function that maps $y0$ and $y1$ to $cic.univ$ applied to $univs.Type1$ and the function that maps $z0$ and $z1$ to $cic.univ$ applied to $univs.Type1$ and the function that maps $u0$ and $u1$ to $cic.prod$ applied to $cic.succ$ applied to $univs.Type1$ and $univs.Type1$ and $cic.univ$ applied to $univs.Type1$ and the function that maps $v0$ and $v1$ to $cic.prod$ applied to $cic.succ$ applied to $univs.Type1$ and $univs.Type1$ and $cic.univ$ applied to $univs.Type1$ and the function that maps $w0$ and $w1$ to $cic.prod$ applied to $cic.succ$ applied to $univs.Type1$ and $univs.Type1$ and $cic.univ$ applied to $univs.Type1$ and the function that maps $x0$ and $x1$ to $cic.univ$ applied to $univs.Type1$ and the function that maps $y0$ and $y1$ to $cic.univ$ applied to $univs.Type1$ and the function that maps $z0$ and $z1$ to $cic.univ$ applied to $univs.Type1$ and the function that maps $t0$ and $t1$ to $cic.univ$ applied to $univs.Type2$ and the function"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nCongruent_n_mod_n. Let $n$ and $p$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $p$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_congruence.congruent$ applied to $n$ and $matita_arithmetics_div_and_mod.mod$ applied to $n$ and $p$ and $p$.\nassistant\n", "label": "Axiom congruent_n_mod_n : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p), cic.Term cic.prop (matita_arithmetics_congruence.congruent n (matita_arithmetics_div_and_mod.mod n p) p) .", "predict": "Axiom Congruent_n_mod_n : forall (n p : cic.Term univs.Type0 matita_arithmetics_nat.nat), forall (___ : cic.Term cic.prop matita_arithmetics_nat.lt matita_arithmetics_nat.O p), cic.Term cprop (matita_arithmetics_congruence.congruent n (matita_arithmetics_div_and_mod.mod n p p))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_inv_rect_CProp2. Pour tous les éléments $x1$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $x2$ de $cic.Term$ de $univs.Type0$ et de $x1$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1614$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $aop$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $x1$ et $x2$ et des fonctions $_comm$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $matita_arithmetics_bigops.op$ appliqué à $x1$ et $x2$ et $aop$ et $a$ et $b$ et $matita_arithmetics_bigops.op$ appliqué à $x1$ et $x2$ et $aop$ et $b$ et $a$ et des éléments $_z1615$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.ACop$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_arithmetics_bigops.mk_ACop$ appliqué à $x1$ et $x2$ et $aop$ et $_comm$ à des éléments de $cic.Term$", "label": "ACop_inv_rect_CProp2 : x1 : cic.Univ univs.Type0 -> x2 : cic.Term univs.Type0 x1 -> Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2) -> P : (_z1614 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2) -> cic.Univ cic.prop) -> _H1 : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2) -> _comm : (a : cic.Term univs.Type0 x1 -> b : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (matita_arithmetics_bigops.op x1 x2 aop a b) (matita_arithmetics_bigops.op x1 x2 aop b a))) -> _z1615 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop x1 x2)) Hterm (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm)) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) -> cic.Term cic.prop (P Hterm) .", "predict": " de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $matita_arithmetics_bigops.op$ appliqué à $x1$ et $x2$ et $aop$ et $a$ et $b$ et $matita_arithmetics_bigops.op$ appliqué à $x1$ et $x2$ et $aop$ et $b$ et $a$ et des éléments $_z1616$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $matita_arithmetics_bigops.op$ appliqué à $x1$ et $x2$ et $aop$ et $a$ et $b$ et $matita_arithmetics_bigops.op$ appliqué à $x1$ et $x2$ et $aop$ et $b$ et $a$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $matita_arithmetics_bigops.op$ appliqué à $x1$ et $x2$ et $aop$ et $a$ et $b$ et $matita_arithmetics_bigops.op$ appliqué à $x1$ et $x2$ et $aop$ et $b$ et $a$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $x1$ et $matita_arithmetics_bigops.op$ appliqué à $x1$ et $x2$ et $aop$ et $a$ et $b$ et $matita_arithmetics_bigops.op$ appliqué à $x1$ et $x2$ et $aop$ et $b$ et $a$ à des"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nUnit_inv_ind. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$. Let $P$ be a function from elements $_z906$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $_H1$ from elements $_z907$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.unit$ and $Hterm$ and $matita_basics_types.it$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.it$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "axiom unit_inv_ind (Hterm : cic.Term univs.Type0 matita_basics_types.unit) (P : (_z906 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ cic.prop) (_H1 : (_z907 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm matita_basics_types.it)) -> cic.Term cic.prop (P matita_basics_types.it)) : cic.Term cic.prop (P Hterm)", "predict": "Axiom unit_inv_ind : forall (Hterm : Term univs.Type0 matita_basics_types.unit) (P : forall _z906 : Term univs.Type0 matita_basics_types.unit, Univ cic.prop), (forall _H1 : forall _z907 : cic.prop matita_basics_logic.eq (lift univs.Type0 univs.Type2 matita_basics_types.unit Hterm matita_basics_types.it), Term cic.prop P matita_basics_types.it) -> cic.Term cic.prop P Hterm."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDivides_n_O. För alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_primes.divides$ applicerat på $n$ och $matita_arithmetics_nat.O$.\nassistant\n", "label": "axiom divides_n_O (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_arithmetics_primes.divides n matita_arithmetics_nat.O)", "predict": "Divides_n_O. For all elements n of cic.Term of univs.Type0 and matita_arithmetics_nat.nat, holds cic.Term for cic.prop and matita_arithmetics_primes.divides applied on n and matita_arithmetics_nat.O."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNat_rect_Type1. Let $Q_$ be a function from elements $_x_385$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Univ$ of $univs.Type1$. Let $_H_O$ be an element of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_arithmetics_nat.O$. Then for all functions $_H_S$ from elements $x_386$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $_x_388$ of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $x_386$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_arithmetics_nat.S$ applied to $x_386$, for all elements $x_385$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_385$.\nassistant\n", "label": "Axiom nat_rect_Type1 : forall Q_ : ((_x_385 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ univs.Type1), forall _H_O : cic.Term univs.Type1 (Q_ matita_arithmetics_nat.O), forall _H_S : ((x_386 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_388 : cic.Term univs.Type1 (Q_ x_386)) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_nat.S x_386))), forall x_385 : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term univs.Type1 (Q_ x_385) .", "predict": "Nat_rect_Type1. Let Q_ be a function from elements x_ of cic.Term of univs.Type0 and matita_arithmetics_nat.nat to elements of cic.Univ of univs.Type1. Let H_O be an element of cic.Term of univs.Type1 and Q_ applied to matita_arithmetics_nat.O. Then for all functions H_S from elements x_ of cic.Term of univs.Type0 and matita_arithmetics_nat.nat to elements of cic.Term of univs.Type1 and Q_ applied to matita_arithmetics_nat.S applied to x_, for all elements x_ of cic.Term of univs.Type0 and matita_arithmetics_nat.nat, cic.Term holds for univs.Type1 and Q_ applied to x_."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFalse_rect_CProp3_body. Soit $Q_$ une fonction des éléments $_x_75$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour tous les éléments $x_75$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_75$.\nassistant\n", "label": "axiom False_rect_CProp3_body (Q_ : (_x_75 : cic.Term cic.prop matita_basics_logic.False) -> cic.Univ cic.prop) (x_75 : cic.Term cic.prop matita_basics_logic.False) : cic.Term cic.prop (Q_ x_75)", "predict": "Output: Axiom False_rect_CProp3_body : forall (Q : cic.Term cic.prop -> matita_basics_logic.False -> cic.Univ cic.prop), forall (x_75 : cic.Term cic.prop -> matita_basics_logic.False), cic.Term x_75 -> cic.prop -> Q x_75."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_rect_CProp0. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour toutes les fonctions $Q_$ des éléments $_x_939$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_range$ des fonctions $_enum$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_upto$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_filter$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_range$ appliqué à $_A$ et $_enum$ et $_upto$ et $_filter$, pour tous les éléments $x_939$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_939$.\nassistant\n", "label": "axiom range_rect_CProp0 (_A : cic.Univ univs.Type0) (Q_ : (_x_939 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ cic.prop) (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) (x_939 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) : cic.Term cic.prop (Q_ x_939)", "predict": "Range_rect_CProp0 : \n  A : Univ -> Type0 -> Type0 -> (Term Univ -> nat -> Type0 -> (Term Univ -> nat -> bool -> Type0 -> Prop) -> Term Univ -> nat -> Term Univ -> nat -> (Term Univ -> nat -> bool -> Type0 -> Prop) -> Term Univ -> Prop) -> Term Univ -> Type0 -> Type0 -> Type0 -> Type0 -> Prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNat_ind_plus. Soit $R$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.predicate$ appliqué à $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $R$ appliqué à $matita_arithmetics_nat.O$. Alors pour toutes les fonctions $__1$ des éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $R$ appliqué à $n$ à des éléments de $cic.Term$ de $cic.prop$ et de $R$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $R$ appliqué à $n$.\nassistant\n", "label": "postulate nat_ind_plus : (R : cic.Term univs.Type0 (matita_basics_relations.predicate matita_arithmetics_nat.nat)) -> (__ : cic.Term cic.prop (R matita_arithmetics_nat.O)) -> (__1 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term cic.prop (R n)) -> cic.Term cic.prop (R (matita_arithmetics_nat.plus n (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (R n)", "predict": "postulate Nat_ind_plus : (R : univs.Type0 -> matita_basics_relations.predicate (matita_arithmetics_nat.nat)) -> (P : univs.Type0 -> matita_arithmetics_nat.nat -> matita_arithmetics_nat.O -> matita_arithmetics_nat.prop (R matita_arithmetics_nat.O)) -> (forall n : univs.Type0 -> matita_arithmetics_nat.nat, P n n matita_arithmetics_nat.O) -> (forall n : univs.Type0 -> matita_arithmetics_nat.nat, P n n matita_arithmetics_nat.O -> P n (matita_arithmetics_nat.plus n (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (R (matita_arithmetics_nat.plus n (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) -> (forall n : univs.Type0 -> matita_arithmetics_nat.nat, R n)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_rect_Type3_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all functions $Q_$ from elements $_x_895$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type3$, for all functions $_H_mk_ACop$ from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_895$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$, $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_895$.\nassistant\n", "label": "ACop_rect_Type3_body : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_895 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Univ univs.Type3) -> _H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> _comm : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type3 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> x_895 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Term univs.Type3 (Q_ x_895) .", "predict": "Output: Let A : univs.Type0. Then for all _nil : univs.Type0, A, for all Q_ : (cic.Term univs.Type0) -> (cic.Term univs.Type3), for all _H_mk_ACop : (cic.Term univs.Type0) -> (matita_arithmetics_bigops.Aop A _nil), for all _comm : (cic.Term univs.Type0) -> A -> (cic.Term univs.Type0) -> A -> (cic.Term univs.prop) -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A (matita_arithmetics_bigops.op A _nil _) _ (matita_arithmetics_bigops.op A _nil _ _) (cic.Term univs.Type3)) (Q_ (matita_arithmetics_bigops.mk_ACop A _nil _) _comm), for all x_895 : cic.Term univs.Type0, (matita_arithmetics_bigops.ACop A _nil), cic.Term univs.Type3 holds (Q_ x_895)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_inv_plus_l. Soient $x$ et $y$ et $z$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $x$ et $y$ et $z$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.And$ appliqué à $matita_arithmetics_nat.le$ appliqué à $x$ et $matita_arithmetics_nat.minus$ appliqué à $z$ et $y$ et $matita_arithmetics_nat.le$ appliqué à $y$ et $z$.\nassistant\n", "label": "axiom le_inv_plus_l (x y z : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.plus x y) z)) : cic.Term cic.prop (matita_basics_logic.And (matita_arithmetics_nat.le x (matita_arithmetics_nat.minus z y)) (matita_arithmetics_nat.le y z))", "predict": "Axiom le_inv_plus_l : forall (x y z : cic.Term univs.Type0 matita_arithmetics_nat.nat), forall (P : cic.Term cic.prop matita_arithmetics_nat.le (matita_arithmetics_nat.plus x y) z), matita_basics_logic.And (matita_arithmetics_nat.le x (matita_arithmetics_nat.minus z y)) (matita_arithmetics_nat.le y z)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_Psi_BPsi1. För alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_chebyshev_factorization.B$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$ och $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ applicerat på $n$.\nassistant\n", "label": "axiom le_Psi_BPsi1 (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_chebyshev_psi.Psi (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_nat.times (matita_arithmetics_chebyshev_factorization.B (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_chebyshev_chebyshev_psi.Psi n)))", "predict": "Axiom Le_Psi_BPsi1 : \n  \\forall (n : cic.Term univs.Type0) (matita_arithmetics_nat:nat), \n  \\forall (__) : cic.Term (cic.prop * matita_arithmetics_nat.lt (matita_arithmetics_nat.O n)),\n  cic.Term (cic.prop * matita_arithmetics_nat.le (matita_arithmetics_chebyshev_chebyshev_psi.Psi (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.times (matita_arithmetics_chebyshev_factorization.B (matita_arithmetics_nat.times matita_arithmetics_nat.S matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) matita_arithmetics_chebyshev_chebyshev_psi.Psi n)) n)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1569. Let $m$ and $n$ and $a$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$. Let $posm$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$. Let $pnm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Let $c$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $d$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $c$ and $n$ and $matita_arithmetics_nat.times$ applied to $d$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita", "label": "axiom let_clause_1569 (m n a b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (λ d => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) (d : cic.Term univs.Type0 matita", "predict": "_arithmetics_nat.times$ applied to $c$ and $m$ and $matita_arithmetics_nat.times$ applied to $d$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Let $x$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.times$ applied to $c$ and $posn$ and $matita_arithmetics_nat.times$ applied to $x$ and $posm$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Let $z$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.times$ applied to $c$ and $posm$ and $matita_arithmetics_nat.times$ applied to $z$ and $posn$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. \nOutput: \nExample3:\nInput: Translate the following English statement into Lean. Let $x$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $y$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.minus$ applied to $matita_arithmetics_nat.times$ applied to $x$ and $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ applied to $y$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. \nOutput: \nLet x : cic.Term (univs.Type0 × matita_arithmetics_nat.nat"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_sigma_pi_SO_n. För alla element $n$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_bigops.bigop$ applicerat på $n$ och funktionen som avbildar $i$ som $matita_basics_bool.true$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.plus$ och funktionen som avbildar $i$ som $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $n$.\nassistant\n", "label": "Axiom eq_sigma_pi_SO_n : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (fun i => matita_basics_bool.true) matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_nat.plus (fun i => matita_arithmetics_nat.S matita_arithmetics_nat.O)) n) .", "predict": "Axiom Eq_sigma_pi_SO_n : forall (n : Term univs.Type0 nat), prop (eq (lift univs.Type0 univs.Type2 nat) n (bool true) (nat O) (nat plus) (nat S O n))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDiv_mod_spec_rect_CProp1. Let $_n$ and $_m$ and $_q$ and $_r$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all functions $Q_$ from elements $_x_853$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_div_mod_spec_intro$ from elements $x_855$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $_r$ and $_m$ and elements $x_854$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $_n$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $_q$ and $_m$ and $_r$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_855$ and $x_854$, for all elements $x_853$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_853$.\nassistant\n", "label": "div_mod_spec_rect_CProp1 : _n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _q : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _r : cic.Term univs.Type0 matita_arithmetics_nat.nat -> Q_ : (_x_853 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r) -> cic.Univ cic.prop) -> _H_div_mod_spec_intro : (x_855 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m) -> x_854 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r)) -> cic.Term cic.prop (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_855 x_854))) -> x_853 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r) -> cic.Term cic.prop (Q_ x_853) .", "predict": "Output: \nAxiom Div_mod_spec_rect_CProp1 : forall n m q r : Term univs.Type0 matita_arithmetics_nat.nat, (forall Q : Term prop matita_arithmetics_div_and_mod.div_mod_spec n m q r, (forall H_div_mod_spec_intro : Term prop (lt r m) (eq (lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n) (plus (times q m) (times r))) (Q (div_mod_spec_intro n m q r H_div_mod_spec_intro))), (forall x853 : Term prop, div_mod_spec n m q r x853 -> (forall x854 : Term prop, eq (lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n) (plus (times q m) (times r)) -> (forall x855 : Term prop, Q x855 -> (forall x854 : Term prop, eq (lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n) (plus (times q m) (times r)) -> (forall x853 : Term prop, div_mod_spec n m q r x853 -> Q x853))))))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_upper_bound5. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $ltml$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_primes.nth_prime$ applied to $n$ and $m$, $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_nat.nat$.\nassistant\n", "label": "let_upper_bound5 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> ltml : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_primes.nth_prime n) m) -> cic.Term univs.Type0 matita_arithmetics_nat.nat .", "predict": "postulate let_upper_bound5 : (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (ltml : cic.Term univs.Type0 matita_arithmetics_nat.lt (matita_arithmetics_primes.nth_prime n m)) -> cic.Term univs.Type0 matita_arithmetics_nat.nat"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1617. Let $p$ and $m$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posn$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $p$. Let $gcd1$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Then for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$, for all elements $c$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $nm$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$ and $matita_arithmetics_nat.times$ applied to $p$ and $c$, for all elements $a$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $_clearme0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $b$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $", "label": "Axiom let_clause_1617 : forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p), forall gcd1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)), forall _clearme : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times m n)), forall c : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall nm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times m n) (matita_arithmetics_nat.times p c)), forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme0 : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (fun b => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p) (matita_ar", "predict": "univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.times$ applied to $m$ and $a$ and $matita_arithmetics_nat.times$ applied to $p$ and $b$ and $matita_arithmetics_nat.times$ applied to $n$ and $c$ and $matita_basics_logic.eq$ applied to $matita_arithmetics_nat.times$ applied to $m$ and $n$ and $matita_arithmetics_nat.times$ applied to $p$ and $c$ and $matita_arithmetics_primes.prime$ applied to $p$ and $matita_basics_logic.eq$ applied to $matita_arithmetics_nat.times$ applied to $m$ and $n$ and $matita_arithmetics_nat.times$ applied to $p$ and $c$ and $posn$ and $gcd1$, there exists an element $d$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.times$ applied to $m$ and $n$ and $matita_arithmetics_nat.times$ applied to $p$ and $c$ and $matita_arithmetics_primes.prime$ applied to $p$ and $matita_basics_logic.eq$ applied to $matita_arithmetics_nat.times$ applied to $m$ and $n$ and $matita_arithmetics_nat.times$ applied to $p$ and $c$ and $posn$ and $gcd1$ such that $d$ is less than or equal to $nm$ and $d$ divides $matita_arithmetics_nat.times$ applied to $m$ and $n$ and $matita_arithmetics_nat.times$ applied to $p$ and $c$.\n\nOutput: \nLemma let_clause_1617 : forall (p m n : Term univs.Type0 matita_arithmetics_nat.nat) (posn : Term cic.prop matita_arithmetics_nat.lt matita_arithmetics_nat.O p) (gcd1 : Term cic.prop matita_basics_logic.eq (lift univs.Type0 univs.Type2 mat"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_rect_CProp0. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_913$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_ACop$ vara en funktion från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$. Då för alla element $x_913$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_913$.\nassistant\n", "label": "Axiom ACop_rect_CProp0 : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_913 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop), forall _H_mk_ACop : ((aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))), forall x_913 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil), cic.Term cic.prop (Q_ x_913) .", "predict": "Axiom Cop_rect_CProp0 : \n  forall A : cic.Univ, \n  term : cic.Term, \n  Q_ : (forall x : cic.Term, cic.Term (cic.prop) (ACop (A, term)) (x, A)) -> \n  (forall a : cic.Term, aop : Aop (A, term), \n  comm : (forall a b : cic.Term, A (a, A) (b, A) -> A (op (A, term, aop, a, b), A) (op (A, term, aop, b, a)) -> \n  eq (cic.lift (univs.Type0, univs.Type2, A, eq (matita_arithmetics_bigops.op (A, term, aop, a) (A, term, aop, b)) (matita_arithmetics_bigops.op (A, term, aop, b) (A, term, aop, a)))))) -> \n  (forall x : cic.Term, cic.Term (cic.prop) (ACop (A, term)) (x, A)) -> \n  (forall x : cic.Term, cic.Term (cic.prop) (ACop (A, term)) (x, A))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_Type3_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all functions $Q_$ from elements $_x_787$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type3$, for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $", "label": "Aop_rect_Type3_body : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_787 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil) -> cic.Univ univs.Type3) -> _H_mk_Aop : (op : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _nill : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> _nilr : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> _assoc : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type3 (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) -> x_787 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil) -> cic.Term univs.Type3 (Q_ x_787) .", "predict": "univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and $a$ and $b$ and $c$, $Q_$ is true. \nOutput: \n\nAop_rect_Type3_body A : Univ univs.Type0 -> Term univs.Type0 -> Aop A _nil : (Term univs.Type0 -> Aop A _nil) (univs.Type0 -> Univ) -> (Term univs.Type0 -> Aop A _nil) (univs.Type0 -> Prop -> eq (lift univs.Type0 univs.Type2 A (op _nil a a)) (assoc a b c a b c)) -> True"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_to_le_to_lt. För alla element $n$ och $m$ och $p$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $n$ och $m$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $m$ och $p$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $n$ och $p$.\nassistant\n", "label": "Axiom lt_to_le_to_lt : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt n m), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.le m p), cic.Term cic.prop (matita_arithmetics_nat.lt n p) .", "predict": "Axiom Prop70 : odd 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOrd_O_to_not_divides. Let $p$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.prime$ applied to $p$. Then for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.ord$ applied to $m$ and $p$ and $matita_arithmetics_nat.O$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_arithmetics_primes.divides$ applied to $p$ and $m$.\nassistant\n", "label": "Axiom ord_O_to_not_divides : forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), forall __1 : cic.Term cic.prop (matita_arithmetics_primes.prime p), forall __2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_ord.ord m p) matita_arithmetics_nat.O), cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides p m)) .", "predict": "Axiom Ord_O_to_not_divides : forall (p : Term univs.Type0 matita_arithmetics_nat.nat) (m : Term matita_arithmetics_nat.lt O m) (p_prime : Term cic.prop matita_arithmetics_primes.prime p) (forall (eq : Term cic.prop (matita_basics_logic.eq (lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (ord m p O))), Term cic.prop (matita_basics_logic.Not (divides p m))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_sigma. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p1$ and $p2$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $g1$ and $g2$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all functions $__$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p1$ applied to $i$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p2$ applied to $i$ and $matita_basics_bool.true$, for all functions $__1$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $mat", "label": "axiom le_sigma (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p1 p2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (g1 g2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt i n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p2 i) matita_basics_bool.true)) (__1 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt i n)) -> (__2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_arithmetics_nat.le (g1 i) (g2 i))) : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_bigops.bigop n (λ i => p1 i) matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_nat.plus (λ i => g1 i)) (matita_arithmetics_bigops.bigop n (λ i => p2 i) matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_nat.plus (λ i => g2 i)))", "predict": "ita_arithmetics_nat.nat$ and elements $x$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $g1$ applied to $i$ and $x$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $g2$ applied to $i$ and $x$, the statement $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p1$ applied to $i$ and $matita_basics_bool.true$ and $p2$ applied to $i$ and $matita_basics_bool.true$ and $g1$ applied to $i$ and $x$ and $g2$ applied to $i$ and $x$ implies the statement $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p1$ applied to $i$ and $matita_basics_bool.true$ and $p2$ applied to $i$ and $matita_basics_bool.true$ and $g1$ applied to $i$ and $x$ and $g2$ applied to $i$ and $x$.\n\nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \n"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLstar_S. Låt $B$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $R$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $B$. Låt $b1$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $B$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $R$ applicerat på $b1$ och $b$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $b2$ vara ett element av $cic.Term$ av $univs.Type0$ och $B$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $R$ och $l$ och $b$ och $b2$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_lstar.lstar$ applicerat på $B$ och $R$ och $matita_arithmetics_nat.plus$ applicerat på $l$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $b1$ och $b2$.\nassistant\n", "label": "axiom lstar_S (B : cic.Univ univs.Type0) (R : cic.Term univs.Type0 (matita_basics_relations.relation B)) (b1 b : cic.Term univs.Type0 B) (__ : cic.Term cic.prop (R b1 b)) (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) (b2 : cic.Term univs.Type0 B) (__1 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b b2)) : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2)", "predict": "Axiom Lstar_S : forall B : univs.Type0, cic.Univ, R : matita_basics_relations.relation B, b1 b : cic.Term univs.Type0 B, __ : cic.Term cic.prop (R b1 b), l : matita_arithmetics_nat.nat, b2 : cic.Term univs.Type0 B, (forall __1 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R l b b2), cic.Term cic.prop (matita_arithmetics_lstar.lstar B R (matita_arithmetics_nat.plus l (matita_arithmetics_nat.S matita_arithmetics_nat.O)) b1 b2))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_rect_CProp3_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_907$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_ACop$ be a function from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$. Let $x_907$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_907$.\nassistant\n", "label": "ACop_rect_CProp3_body : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_907 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Univ cic.prop) -> _H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> _comm : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> x_907 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Term cic.prop (Q_ x_907) .", "predict": "Axiom ACop_rect_CProp3_body : forall A : cic.Univ, _nil : cic.Term, A, Q_ : (forall _x_907 : cic.Term, ACop (A, _nil) -> cic.Univ -> cic.prop), _H_mk_ACop : (forall aop : cic.Term, Aop (A, _nil) -> (forall a : cic.Term, A -> forall b : cic.Term, A -> cic.Term -> cic.prop) -> eq (lift univs.Type0 univs.Type2 A) (op (A, _nil) aop (comm a A b) (op (A, _nil) aop b a))) -> forall x_907 : (ACop (A, _nil) -> cic.Term -> cic.prop) (mk_ACop A _nil aop), holds (Q_ x_907)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_15625. Soient $m$ et $n$ et $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $posm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$. Alors pour tous les éléments $pnm$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $c$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $_clearme$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $d$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appl", "label": "postulate let_clause_15625 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arith", "predict": "iqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $m$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $q$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $p$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, nous avons $pnm$, $posn$, $posm$, $pnm$, $pnm$, $posn$, $posm$, $pnm$, $posn$, $posm$, $pnm$, $posn$, $posm$, $pnm$, $posn$, $posm$, $pnm$, $posn$, $posm$, $pnm$, $posn$, $posm$, $pnm$, $posn$, $posm$, $pnm$, $posn$, $posm$, $pnm$, $posn$, $posm$, $pnm$, $posn$, $posm$, $pnm$, $posn$, $posm$, $pnm$, $posn$, $posm$, $pnm$, $posn$, $posm$, $pnm$, $posn$, $posm$, $pnm"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_Sig. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $return_sort$ be an element of $cic.Sort$. Let $return_type$ be a function from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $return_sort$. Let $case_mk_Sig$ be a function from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $_f$ applied to $pi1$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_basics_types.mk_Sig$ applied to $A$ and $_f$ and $pi1$ and $_pi2$. Then for all elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.\nassistant\n", "label": "postulate match_Sig : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ return_sort) -> (case_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term return_sort (return_type (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (z : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term return_sort (return_type z)", "predict": "postulate Match_Sig : (A : cic.Univ) -> (f : (x : cic.Term) -> A -> cic.Univ) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term) -> (matita_basics_types.Sig A f) -> cic.Univ) -> ((pi1 : cic.Term) -> A -> (pi2 : cic.prop) -> f pi1 -> (case_mk_Sig : (pi1 : cic.Term) -> A -> (pi2 : cic.prop) -> f pi1 -> cic.Term (return_sort) (return_type z))) -> (forall (z : cic.Term) -> (matita_basics_types.Sig A f) -> cic.Term (return_sort) (return_type z))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nPsi_3. $cic.Term$ håller för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$.\nassistant\n", "label": "Axiom Psi_3 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_chebyshev_chebyshev_psi.Psi (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))))) .", "predict": "Proposition100. Vi kan bevisa att $1$ är ojämnt.  \nAxiom proposition100 : odd 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNot_rect_CProp4. Låt $_A$ vara ett element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_100$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_nmk$ vara en funktion från funktioner $x_101$ från element $__$ av $cic.Term$ av $cic.prop$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_logic.nmk$ applicerat på $_A$ och $x_101$. Då för alla element $x_100$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_100$.\nassistant\n", "label": "postulate Not_rect_CProp4 : (_A : cic.Univ cic.prop) -> (Q_ : (_x_100 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ cic.prop) -> (_H_nmk : (x_101 : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term cic.prop (Q_ (matita_basics_logic.nmk _A x_101))) -> (x_100 : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Term cic.prop (Q_ x_100)", "predict": "postulate Not_rect_CProp4 : (A : cic.Univ) -> (Q : (x : cic.Term prop) -> matita_basics_logic.Not A -> cic.Univ prop) -> ((H : (x : cic.Term prop) -> A -> cic.Term prop) -> (False -> cic.Term prop) -> (Q (matita_basics_logic.nmk A) (matita_basics_logic.False) -> cic.Term prop)) -> (forall (x : cic.Term prop) -> matita_basics_logic.Not A -> cic.Term prop)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSig_rect_CProp0. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $Q_$ une fonction des éléments $_x_688$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $_H_mk_Sig$ des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $_f$ appliqué à $pi1$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $A$ et $_f$ et $pi1$ et $_pi2$, pour tous les éléments $x_688$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_688$.\nassistant\n", "label": "Sig_rect_CProp0 : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> Q_ : (_x_688 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) -> cic.Univ cic.prop) -> _H_mk_Sig : (pi1 : cic.Term univs.Type0 A -> _pi2 : cic.Term cic.prop (_f pi1) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> x_688 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) -> cic.Term cic.prop (Q_ x_688) .", "predict": "Sig_rect_CProp0 : Axiom. \n  A : univers. \n  f : (term univers) -> A -> univers. \n  Q : (term univers) -> Sig A f -> univers. \n  H_mk_Sig : (pi1 : term univers) -> (pi2 : term prop) -> (f pi1 -> term prop) -> (Q pi1 -> Sig A f -> term prop) -> (forall x : term univers, Sig A f -> term prop) -> (forall x : term univers, Sig A f -> term prop)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMk_Dop. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $nil$, för alla funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $nil$ och $nil$, för alla funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $nil$ och $sum$ och $b$ och $c$ och $matita_arithmetics_bigops.aop__o__op$ applicerat på $A$ och $nil$ och $sum$ och $prod$ applicerat på $a$ och $b$ och $prod$ applicerat på $a$ och $c$, håller $cic.Term$ för $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $nil$.\nassistant\n", "label": "postulate mk_Dop : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a nil) nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A nil sum b c)) (matita_arithmetics_bigops.aop__o__op A nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A nil)", "predict": "postulate Mk_Dop : \n  {A : cic.Univ} -> \n  {univs : Type0} -> \n  {nil : Term univs} -> \n  {sum : Term univs (matita_arithmetics_bigops.ACop A nil)} -> \n  {prod : (a : Term univs A) -> (b : Term univs A) -> Term univs A} -> \n  {prod_null : (a : Term univs A) -> (nil : Term univs) -> (prod a nil = prod a nil)} -> \n  {prod_null_distr : (a : Term univs A) -> (b : Term univs A) -> (c : Term univs A) -> \n  (prod a (matita_arithmetics_bigops.aop__o__op A nil sum b c) = \n  matita_arithmetics_bigops.aop__o__op A nil sum (prod a b) (prod a c))} -> \n  (A : prop univs) -> \n  (eq : (univs.Type0) -> (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a nil))) -> \n  (eq_distr : (a : Term univs A) -> (b : Term univs A) -> (c : Term univs A) -> \n  (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) \n  (prod a (matita_arithmetics_bigops.aop__o__op A nil sum b c))) -> \n  (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) \n  (prod a (matita_arithmetics_bigops.aop__o__op A nil sum (prod a b) (prod a c))))) -> \n  (cic.Term univs A) -> \n  (matita_arithmetics_bigops.Dop A nil)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBool_inv_rect_Type2. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $P$ vara en funktion från element $_z605$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Univ$ av $univs.Type2$. Låt $_H1$ vara en funktion från element $_z606$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $Hterm$ och $matita_basics_bool.true$ till element av $cic.Term$ av $univs.Type2$ och $P$ applicerat på $matita_basics_bool.true$. Låt $_H2$ vara en funktion från element $_z606$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $Hterm$ och $matita_basics_bool.false$ till element av $cic.Term$ av $univs.Type2$ och $P$ applicerat på $matita_basics_bool.false$. Då håller $cic.Term$ för $univs.Type2$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "axiom bool_inv_rect_Type2 (Hterm : cic.Term univs.Type0 matita_basics_bool.bool) (P : (_z605 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ univs.Type2) (_H1 : (_z606 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.true)) -> cic.Term univs.Type2 (P matita_basics_bool.true)) (_H2 : (_z606 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) Hterm matita_basics_bool.false)) -> cic.Term univs.Type2 (P matita_basics_bool.false)) : cic.Term univs.Type2 (P Hterm)", "predict": "Bool_inv_rect_Type2. Let Hterm be an element of cic.Term of univs.Type0 and matita_basics_bool.bool. Let P be a function from elements _z605 of cic.Term of univs.Type0 and matita_basics_bool.bool to elements of cic.Univ of univs.Type2. Let _H1 be a function from elements _z606 of cic.Term of cic.prop and matita_basics_logic.eq applied on cic.lift applied on univs.Type0 and univs.Type2 and matita_basics_bool.bool and Hterm and matita_basics_bool.true to elements of cic.Term of univs.Type2 and P applied on matita_basics_bool.true. Let _H2 be a function from elements _z606 of cic.Term of cic.prop and matita_basics_logic.eq applied on cic.lift applied on univs.Type0 and univs.Type2 and matita_basics_bool.bool and Hterm and matita_basics_bool.false to elements of cic.Term of univs.Type2 and P applied on matita_basics_bool.false. Then holds cic.Term for univs.Type2 and P applied on Hterm."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nHint_declaration_CProp1. Let $A$ be an element of $cic.Univ$ of $cic.prop$. Then for all elements $_a$ and $_b$ of $cic.Term$ of $cic.prop$ and $A$, $cic.Univ$ holds for $univs.Type0$.\nassistant\n", "label": "axiom hint_declaration_CProp1 (A : cic.Univ cic.prop) (_a _b : cic.Term cic.prop A) : cic.Univ univs.Type0", "predict": "Output: postulate Hint_declaration_CProp1 : forall (A : cic.Univ) (_a _b : cic.Term), A holds univs.Type0."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd_rect_CProp3. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_708$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_Prod$ une fonction des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $_A$ et $_B$ et $_fst$ et $_snd$. Soit $x_708$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_708$.\nassistant\n", "label": "Axiom Prod_rect_CProp3 : forall _A : cic.Univ univs.Type0, forall _B : cic.Univ univs.Type0, forall Q_ : ((_x_708 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ cic.prop), forall _H_mk_Prod : ((_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))), forall x_708 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B), cic.Term cic.prop (Q_ x_708) .", "predict": "Axiom Prod_rect_CProp3 : forall (A : Universe) (B : Universe), (forall (x : Term) (P : Prod A B -> Prop), (forall (fst : Term) (snd : Term), (P (mk_Prod A B fst snd)) -> P (mk_Prod A B x x)) -> (forall (x : Prod A B), P x)) -> (forall (x : Prod A B), P x)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_CProp3. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_799$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_Aop$ une fonction des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0", "label": "Axiom Aop_rect_CProp3 : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_799 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop), forall _H_mk_Aop : ((op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))), forall x_799 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil), cic.Term cic.prop (Q_ x_799) .", "predict": "$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ et $op$ appliqué à $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ et des fonctions $_assocr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$.\nOutput: \nAxiom Aop_rect_CProp3 : forall (A : Univ), Term A nil -> (forall (x : Term), Aop A (nil x) -> Prop) -> (forall (x : Term), (forall (op : Term -> A), (forall (x1 : Term), A op x1 -> Term) -> (forall (a : Term), A (op a) a -> Prop) -> (forall (a : Term), A (nilr a) (eq (lift (univs.Type0) (univs.Type2)) A op (op a) a) -> Prop) -> (forall (a : Term), A (assoc a b c) (eq (lift (univs.Type0) (univs.Type2)) A op (op op a b c) (op (op a b) c)) -> Prop) -> (forall (a : Term), A (assocr a b c) (eq ("}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nPermut_n_to_le. Låt $h$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $k$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $k$ och $n$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_permutation.permut$ applicerat på $h$ och $n$. Låt $__2$ vara en funktion från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $k$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $h$ applicerat på $m$ och $m$. Låt $j$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__3$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $k$ och $j$. Låt $__4$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $j$ och $n$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $k$ och $h$ applicerat på $j$.\nassistant\n", "label": "postulate permut_n_to_le : (h : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (k : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le k n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_permutation.permut h n)) -> (__2 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt m k)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (h m) m)) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.le k j)) -> (__4 : cic.Term cic.prop (matita_arithmetics_nat.le j n)) -> cic.Term cic.prop (matita_arithmetics_nat.le k (h j))", "predict": "postulate Permut_n_to_le : \n  {A : univs.Type0} {Nat : matita_arithmetics_nat.nat} (h : A → A → Nat) \n  (k n : A → Nat) (P : A → matita_arithmetics_nat.le) (Q : A → matita_arithmetics_permut) \n  (f : (m : A → Nat) → (f m) : matita_arithmetics_nat.lt) (j : A → Nat) (R : A → matita_arithmetics_nat.le) (S : A → matita_arithmetics_nat.le) \n  → (P k) → (Q n) → (f m) → (R k) → (S j) → (P (h m))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOp. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla element $_xxx$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $nil$, för alla element $_x_807$ och $_x_808$ av $cic.Term$ av $univs.Type0$ och $A$, håller $cic.Term$ för $univs.Type0$ och $A$.\nassistant\n", "label": "Axiom op : forall A : cic.Univ univs.Type0, forall nil : cic.Term univs.Type0 A, forall _xxx : cic.Term univs.Type0 (matita_basics_lists_list.Aop A nil), forall _x_807 : cic.Term univs.Type0 A, forall _x_808 : cic.Term univs.Type0 A, cic.Term univs.Type0 A .", "predict": "Axiom svar7 : odd 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_rect_Type3. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_644$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $univs.Type3$. Then for all functions $_H_mk_DPair$ from elements $dpi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_dpi2$ of $cic.Term$ of $univs.Type0$ and $_f$ applied to $dpi1$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_types.mk_DPair$ applied to $A$ and $_f$ and $dpi1$ and $_dpi2$, for all elements $x_644$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $A$ and $_f$, $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_644$.\nassistant\n", "label": "DPair_rect_Type3 : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) -> Q_ : (_x_644 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Univ univs.Type3) -> _H_mk_DPair : (dpi1 : cic.Term univs.Type0 A -> _dpi2 : cic.Term univs.Type0 (_f dpi1) -> cic.Term univs.Type3 (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> x_644 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Term univs.Type3 (Q_ x_644) .", "predict": "DPair_rect_Type3 : Type := let A : Univ := let A : Univ := Univ in let f : forall x : Term, A -> Univ := fun x : Term, A => let f : forall x : Term, A -> Univ := fun x : Term, A => x in let Q_ : forall x : Term, DPair A f -> Univ := fun x : Term, DPair A f => let Q_ : forall x : Term, DPair A f -> Univ := fun x : Term, DPair A f => x in let H_mk_DPair : forall dpi1 : Term, A -> forall dpi2 : Term, (f dpi1) -> Term := fun dpi1 : Term, A => fun dpi2 : Term, (f dpi1) => let H_mk_DPair : forall dpi1 : Term, A -> forall dpi2 : Term, (f dpi1) -> Term := fun dpi1 : Term, A => fun dpi2 : Term, (f dpi1) => dpi1 in let Prop : forall x : Term, DPair A f -> Univ := fun x : Term, DPair A f => Q_ in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop in Prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1013. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $n$ och $m$ och $i$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Hind$ vara en funktion från element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_minimization.max$ applicerat på $i$ och $f$ och $m$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $m$ och $matita_basics_bool.false$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $m$ och $matita_arithmetics_nat.O$. Låt $fi$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $i$ och $matita_basics_bool.true$. Låt $eqm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$", "label": "axiom let_clause_1013 (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (n m i : cic.Term univs.Type0 matita_arithmetics_nat.nat) (Hind : (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.max i f) m)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.false)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m matita_arithmetics_nat.O)) (fi : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.true)) (eqm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) i m)) (fm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.false)) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) matita_basics_bool.false matita_basics_bool.true)", "predict": " applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $m$ och $matita_basics_bool.true$. Låt $Hm$ vara en förutsättning som innebär att $f$ är en funktion från element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $Hn$ vara en förutsättning som innebär att $f$ är en funktion från element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $Hfi$ vara en förutsättning som innebär att $f$ är en funktion från element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $Heqm$ vara en förutsättning som innebär att $f$ är en funktion från element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $Hm$ vara en förutsättning som innebär att $f$ är en funktion från element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $Hfi$ vara en förutsättning som innebär att $f$ är en funktion från element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_rect_CProp3. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_622$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_None$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.None$ appliqué à $_A$. Soit $_H_Some$ une fonction des éléments $x_623$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.Some$ appliqué à $_A$ et $x_623$. Alors pour tous les éléments $x_622$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_622$.\nassistant\n", "label": "option_rect_CProp3 : _A : cic.Univ univs.Type0 -> Q_ : (_x_622 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Univ cic.prop) -> _H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A)) -> _H_Some : (x_623 : cic.Term univs.Type0 _A -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_623))) -> x_622 : cic.Term univs.Type0 (matita_basics_types.option _A) -> cic.Term cic.prop (Q_ x_622) .", "predict": "Output: Axiom Option_rect_CProp3 : forall (A : cic.Univ) (Q_ : (x : cic.Term) -> (univs.Type0) -> option -> (cic.Term) -> (cic.prop)) (H_None : (cic.Term) -> (cic.prop) -> Q_ (matita_basics_types.None) A H_None) (H_Some : (x : (cic.Term) -> (univs.Type0)) -> A -> (cic.Term) -> (cic.prop) -> Q_ (matita_basics_types.Some) A (H_Some x)) -> forall (x_622 : (cic.Term) -> (univs.Type0) -> option) -> (cic.Term) -> (cic.prop) -> Q_ x_622 A _H."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLhd. Pour tous les éléments $H$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $H$, pour tous les éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $univs.Type0$ et $matita_basics_lists_list.list$ appliqué à $H$.\nassistant\n", "label": "postulate lhd : (H : cic.Univ univs.Type0) -> (__ : cic.Term univs.Type0 (matita_basics_lists_list.list H)) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 (matita_basics_lists_list.list H)", "predict": "postulate Lhd : forall (H : Univ) (__) : Term 0 (list H) -> Term 0 (nat _) -> Term 0 (list H)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProj2. För alla element $A$ och $B$ av $cic.Univ$ av $cic.prop$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $A$ och $B$, håller $cic.Term$ för $cic.prop$ och $B$.\nassistant\n", "label": "postulate proj2 : (A : cic.Univ cic.prop) -> (B : cic.Univ cic.prop) -> (__ : cic.Term cic.prop (matita_basics_logic.And A B)) -> cic.Term cic.prop B", "predict": "postulate proj2 : (A B : cic.Univ) -> (A : cic.prop) -> (B : cic.prop) -> (A , B : matita_basics_logic.And) -> cic.Term cic.prop B"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFilter_Dop. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all elements $return_sort$ of $cic.Sort$, for all functions $return_type$ from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $return_sort$, for all functions $return$ from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $z$, for all elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.\nassistant\n", "label": "axiom filter_Dop (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (return_sort : cic.Sort) (return_type : (z : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ return_sort) (return : (z : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term return_sort (return_type z)) (z : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) : cic.Term return_sort (return_type z)", "predict": "Output: \nAxiom Filter_Dop : ∀ A : univers.Univ univers.Type0, ∀ _nil : univers.Term univers.Type0, ∀ A : univers.Univ, ∀ return_sort : sort.Sort, ∀ return_type : ∀ z : univers.Term univers.Type0, matita_arithmetics_bigops.Dop A _nil univers.Univ return_sort → ∀ return : ∀ z : univers.Term univers.Type0, matita_arithmetics_bigops.Dop A _nil univers.Term return_sort return_type z → ∀ z : univers.Term univers.Type0, matita_arithmetics_bigops.Dop A _nil univers.Term → univers.Term return_sort return_type z."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_rect_Type2. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_923$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type2$. Soit $_H_mk_range$ une fonction des fonctions $_enum$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_upto$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_filter$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ à des éléments de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_range$ appliqué à $_A$ et $_enum$ et $_upto$ et $_filter$. Soit $x_923$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $_A$. Alors $cic.Term$ tient pour $univs.Type2$ et $Q_$ appliqué à $x_923$.\nassistant\n", "label": "Axiom range_rect_Type2 : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_923 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type2), forall _H_mk_range : ((_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type2 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))), forall x_923 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A), cic.Term univs.Type2 (Q_ x_923) .", "predict": "Range_rect_Type2 : forall (A : Univ) (Q : forall x : Term, Univ -> Type2 -> bool), (H_mk_range : forall enum : forall _, nat -> Term, forall upto : _, nat -> Term, filter : forall _, nat -> bool -> Term -> Type2, Q (mk_range A enum upto filter)) -> (x : Term, range A) -> Univ -> Type2 -> bool."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nCompose. Låt $A$ och $B$ och $C$ vara element av $cic.Univ$ av $univs.Type0$. Låt $_f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $B$ till element av $cic.Term$ av $univs.Type0$ och $C$. Då för alla funktioner $_g$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $B$, för alla element $_x$ av $cic.Term$ av $univs.Type0$ och $A$, håller $cic.Term$ för $univs.Type0$ och $C$.\nassistant\n", "label": "postulate compose : (A : cic.Univ univs.Type0) -> (B : cic.Univ univs.Type0) -> (C : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 B) -> cic.Term univs.Type0 C) -> (_g : (__ : cic.Term univs.Type0 A) -> cic.Term univs.Type0 B) -> (_x : cic.Term univs.Type0 A) -> cic.Term univs.Type0 C", "predict": "postulate \n    prop81 : even 2  \n    prop82 : \n        ∀ A B C : univs.Type0 \n        → (∀ x : univs.Type0 → cic.Term x → cic.Term x → cic.Term x → univs.Type0) \n        → (∀ x : univs.Type0 → cic.Term x → B → univs.Type0) \n        → (∀ x : univs.Type0 → A → B → univs.Type0) \n        → cic.Term A B C"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_inv_rect_CProp1. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $x2$ av $cic.Term$ av $univs.Type0$ och $x1$, för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1620$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $matita_arithmetics_bigops.op$ applicerat på $x1$ och $x2$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $x1$ och $x2$ och $aop$ och $b$ och $a$ och element $_z1621$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_arithmetics_bigops.mk_ACop$ applicerat på $x1$ och $x2$ och $aop$ och $_comm$ till element av $cic.Term$", "label": "axiom ACop_inv_rect_CProp1 (x1 : cic.Univ univs.Type0) (x2 : cic.Term univs.Type0 x1) (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) (P : (_z1620 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> cic.Univ cic.prop) (_H1 : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (_comm : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (matita_arithmetics_bigops.op x1 x2 aop a b) (matita_arithmetics_bigops.op x1 x2 aop b a))) -> (_z1621 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop x1 x2)) Hterm (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) : cic.Term cic.prop (P Hterm)", "predict": " av $cic.prop$ så är $P$ en inverterbar rekursion. \n\nOutput: \nAxiom ACop_inv_rect_CProp1 : forall (x1 : cic.Univ) (univs : Type0), \nforall (x2 : cic.Term) (univs : Type0), \nforall (Hterm : cic.Term) (univs : Type0), \nforall (matita_arithmetics_bigops.ACop) (x1 : univs), \nforall (x2 : univs), \nforall (P : _z1620 (cic.Term) (univs)) (matita_arithmetics_bigops.ACop) (x1 : univs) (x2 : univs), \nforall (postulate prop80 : even 2) (aop : cic.Term) (univs : Type0), \nforall (comm : _H1 (cic.Term) (univs)) (a : cic.Term) (x1 : univs), \nforall (b : cic.Term) (x1 : univs), \nforall (univs : Type2), \nforall (x1 : univs), \nforall (matita_basics_logic.eq) (cic.lift) (univs.Type0) (univs.Type2) (x1), \nforall (matita_arithmetics_bigops.op) (x1 : univs) (x2 : univs), \nforall (aop : cic.Term) (x1 : univs), \nforall (b : cic.Term) (x1 : univs), \nforall (matita_arithmetics_bigops.op) (x1 : univs) (x2 : univs), \nforall (aop : cic.Term) (x1 : univs), \nforall (b : cic.Term) (x1 : univs), \nforall (P : _z1621 (cic.Term) (cic.prop)), \nforall (matita_basics_logic.eq) (cic.lift) (univs.Type0) (univs.Type2) (matita_arithmetics_bigops.ACop) (x1 : univs) (x2 : univs) (Hterm : cic.Term) (matita_arithmetics_bigops.mk_ACop) (x"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBool_rect_Type3. Let $Q_$ be a function from elements $_x_335$ of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Univ$ of $univs.Type3$. Let $_H_true$ be an element of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_bool.true$. Let $_H_false$ be an element of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_basics_bool.false$. Let $x_335$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Then $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_335$.\nassistant\n", "label": "bool_rect_Type3 : Q_ : (_x_335 : cic.Term univs.Type0 matita_basics_bool.bool -> cic.Univ univs.Type3) -> _H_true : cic.Term univs.Type3 (Q_ matita_basics_bool.true) -> _H_false : cic.Term univs.Type3 (Q_ matita_basics_bool.false) -> x_335 : cic.Term univs.Type0 matita_basics_bool.bool -> cic.Term univs.Type3 (Q_ x_335) .", "predict": "Bool_rect_Type3. Axiom Q : forall x_335 : Term univs.Type0, bool, Univ univs.Type3 (Q x_335). Axiom H_true : Univ univs.Type3 (Q matita_basics_bool.true). Axiom H_false : Univ univs.Type3 (Q matita_basics_bool.false). Variable x_335 : Term univs.Type0, bool. Postulate (Q x_335) : Univ univs.Type3."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_inv_rect_CProp3. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Alors pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $x1$, pour toutes les fonctions $P$ des éléments $_z1080$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $x1$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $_z1081$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.option$ appliqué à $x1$ et $Hterm$ et $matita_basics_types.None$ appliqué à $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.None$ appliqué à $x1$, pour toutes les fonctions $_H2$ des éléments $x_623$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_z1081$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.option$ appliqué à $x1$ et $Hterm$ et $matita_basics_types.Some$ appliqué à $x1$ et $x_623$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.Some$ appliqué à $x1$ et $x_623$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "option_inv_rect_CProp3 : x1 : cic.Univ univs.Type0 -> Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) -> P : (_z1080 : cic.Term univs.Type0 (matita_basics_types.option x1) -> cic.Univ cic.prop) -> _H1 : (_z1081 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.None x1)) -> cic.Term cic.prop (P (matita_basics_types.None x1))) -> _H2 : (x_623 : cic.Term univs.Type0 x1 -> _z1081 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.Some x1 x_623)) -> cic.Term cic.prop (P (matita_basics_types.Some x1 x_623))) -> cic.Term cic.prop (P Hterm) .", "predict": "Output: Axiom Option_inv_rect_CProp3 : forall (x1 : Univ) (Hterm : Term) (P : option (Term -> Prop)) (H1 : Prop -> eq (lift Type0 Type2) -> option (Term -> Prop)) (H2 : Term -> option (Term -> Prop)) -> (forall (z1080 : Term) (x1 : option (Term -> Prop)) -> P x1 -> forall (z1081 : Prop) (Hterm : Term) (x1 : option (Term -> Prop)) -> P x1 -> forall (x_623 : Term) (x1 : option (Term -> Prop)) (z1081 : Prop) (Hterm : Term) (x1 : option (Term -> Prop)) -> P x1) -> (forall (x_623 : Term) (x1 : option (Term -> Prop)) -> P x1 -> forall (z1081 : Prop) (Hterm : Term) (x1 : option (Term -> Prop)) -> P x1) -> forall (x_623 : Term) (x1 : option (Term -> Prop)) -> P x1."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTrue_to_le_min. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $n$ and $m$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $b$ and $m$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $m$ and $matita_basics_bool.true$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_minimization.min$ applied to $n$ and $b$ and $f$ and $m$.\nassistant\n", "label": "true_to_le_min : f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.le b m) -> __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.true) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_minimization.min n b f) m) .", "predict": "Output: \naxiom True_to_le_min : \n  (f : term univs.Type0 (matita_arithmetics_nat.nat) -> term univs.Type0 (matita_basics_bool.bool)) -> \n  (n m b : term univs.Type0 (matita_arithmetics_nat.nat)) -> \n  (p : term cic.prop (matita_arithmetics_nat.le b m)) -> \n  (p1 : term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool (f m matita_basics_bool.true)))) -> \n  (term cic.Term (matita_arithmetics_nat.le (matita_arithmetics_minimization.min n b f m))) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_inv_rect_Type0. Pour tous les éléments $x1$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $x2$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $univs.Type0$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1134$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $_H1$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $x2$ appliqué à $dpi1$ et des éléments $_z1135$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$ à des éléments de $cic.Term$ de $univs.Type0$ et de $P$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$, $cic.Term$ tient pour $univs.Type0$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "postulate DPair_inv_rect_Type0 : (x1 : cic.Univ univs.Type0) -> (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> (P : (_z1134 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ univs.Type0) -> (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1135 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type0 (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type0 (P Hterm)", "predict": "postulate DPInvRectType0 : (x1 : Univ) -> (x2 : (__) -> Univ) -> (Hterm : Term) -> (P : (_z1134 : Term) -> (DPair x1 x2) -> Univ) -> (P ((dpi1 : Term) -> (dpi2 : Term) -> eq (lift (univs.Type0) (univs.Type2)) (DPair x1 x2) (mk_DPair x1 x2 (dpi1 dpi2))) (Hterm)) -> Term -> univs.Type0 -> P (mk_DPair x1 x2 (dpi1 dpi2)) (Hterm) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_inv_rect_CProp2. For all elements $x1$ of $cic.Univ$ of $univs.Type0$, for all elements $x2$ of $cic.Term$ of $univs.Type0$ and $x1$, for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1416$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and", "label": "postulate Aop_inv_rect_CProp2 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> (P : (_z1416 : cic.Term univs.Type0 (matita_basics_lists_list.Aop x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1417 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.Aop x1 x2)) Hterm (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P (matita_basics_lists_list.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term cic.prop (P Hterm)", "predict": " $univs.Type2$ and $x1$ and $op$ applied to $x2$ and $a$ and $a$ and functions $_H$ from functions $op$ from elements $x$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $y$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_app$ from elements $f$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $x$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_cons$ from elements $x$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $y$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_nil$ from elements $x$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_nill$ from elements $x$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $x2$ and $x$ and $x$ and functions $_H1$ from functions $op$ from elements $x$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $y$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_nill$ from elements $x$ of $cic.Term$ of $univs.Type0$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nVoid_rect_CProp2. Låt $Q_$ vara en funktion från element $_x_492$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.void$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $x_492$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.void$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_492$.\nassistant\n", "label": "Axiom void_rect_CProp2 : forall Q_ : ((_x_492 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ cic.prop), forall x_492 : cic.Term univs.Type0 matita_basics_types.void, cic.Term cic.prop (Q_ x_492) .", "predict": "Axiom Void_rect_CProp2 : forall (Q_ : cic.Term univs.Type0 matita_basics_types.void -> cic.Univ cic.prop), (forall (x_492 : cic.Term univs.Type0 matita_basics_types.void), Q_ x_492) -> cic.Term cic.prop Q_."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_rect_Type1_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_953$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type1$. Soit $_H_mk_Dop$ une fonction des éléments $sum$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ et des fonctions $prod$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_null$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $prod$ appliqué à $a$ et $_nil$ et $_nil$ et des fonctions $_distr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs", "label": "Dop_rect_Type1_body : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_953 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil) -> cic.Univ univs.Type1) -> _H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> prod : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _null : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> _distr : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> x_953 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil) -> cic.Term univs.Type1 (Q_ x_953) .", "predict": ".Type3$ et $A$ et $prod$ appliqué à $b$ et $c$ et $prod$ appliqué à $a$ et $_nil$ et $_nil$. \n\nOutput: \n```plaintext\nAxiom Dop_rect_Type1_body : \n  forall A : Univ, \n  (Term) -> \n  (forall x : Term, Dop (A x)) -> \n  (forall x : Term, (forall x1 : Term, (forall x2 : Term, (forall x3 : Term, (forall x4 : Term, (forall x5 : Term, (forall x6 : Term, (forall x7 : Term, (forall x8 : Term, (forall sum : Term, (forall prod : (Term -> Term), (forall __ : Term, (forall __1 : Term, (forall __2 : Term, (forall a : Term, (forall b : Term, (forall c : Term, (forall __3 : Term, (forall __4 : Term, (forall __5 : Term, (forall __6 : Term, (forall __7 : Term, (forall __8 : Term, (forall sum : Term, (forall prod : (Term -> Term), (forall __ : Term, (forall __1 : Term, (forall __2 : Term, (forall a : Term, (forall b : Term, (forall c : Term, (forall __3 : Term, (forall __4 : Term, (forall __5 : Term, (forall __6 : Term, (forall __7 : Term, (forall __8 : Term, (forall sum : Term, (forall prod : (Term -> Term), (forall __ : Term, (forall __1 : Term, (forall __2 : Term, (forall a : Term, (forall b : Term, (forall c : Term, (forall __3 : Term, (forall __4 : Term, (forall __5 : Term, (forall __6 : Term, (forall __7 : Term, (forall __8 : Term, (forall sum : Term, (forall prod : (Term -> Term), (forall __ : Term, (forall __1 : Term, (forall __2 : Term, (forall a : Term, (forall b : Term, (forall c : Term, (forall __3 : Term, (forall __4 : Term, (forall __5 : Term, (forall __6 : Term,"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSplit_eq. For all elements $A$ of $cic.Univ$ of $univs.Type0$, for all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $matita_basics_lists_list.length$ applied to $A$ and $l$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $A$ and $l$ and $matita_basics_lists_list.append$ applied to $A$ and $matita_basics_types.fst$ applied to $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.split$ applied to $A$ and $l$ and $n$ and $matita_basics_types.snd$ applied to $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.list$ applied to $A$ and $matita_basics_lists_list.split$ applied to $A$ and $l$ and $n$.\nassistant\n", "label": "postulate split_eq : (A : cic.Univ univs.Type0) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le n (matita_basics_lists_list.length A l))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l (matita_basics_lists_list.append A (matita_basics_types.fst (matita_basics_lists_list.list A) (matita_basics_lists_list.list A) (matita_basics_lists_list.split A l n)) (matita_basics_types.snd (matita_basics_lists_list.list A) (matita_basics_lists_list.list A) (matita_basics_lists_list.split A l n))))", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFilter. Let $T$ be an element of $cic.Univ$ of $univs.Type0$. Let $_p$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $T$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $_l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $T$. Then $cic.Term$ holds for $univs.Type0$ and $matita_basics_lists_list.list$ applied to $T$.\nassistant\n", "label": "axiom filter (T : cic.Univ univs.Type0) (_p : (__ : cic.Term univs.Type0 T) -> cic.Term univs.Type0 matita_basics_bool.bool) (_l : cic.Term univs.Type0 (matita_basics_lists_list.list T)) : cic.Term univs.Type0 (matita_basics_lists_list.list T)", "predict": "postulate filter : (T : cic.Univ -> univs.Type0) -> (p : (T $__ : cic.Term -> univs.Type0) -> matita_basics_bool.bool) -> (T l : cic.Term -> univs.Type0 -> matita_basics_lists_list.list) -> (cic.Term -> univs.Type0 -> matita_basics_lists_list.list) T l"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_inv_rect_CProp1. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $Hterm$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $x1$. Let $P$ be a function from elements $_z1092$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $x1$ to elements of $cic.Univ$ of $cic.prop$. Let $_H1$ be a function from elements $_z1093$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $x1$ and $Hterm$ and $matita_basics_types.None$ applied to $x1$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.None$ applied to $x1$. Let $_H2$ be a function from elements $x_631$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_z1093$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.option$ applied to $x1$ and $Hterm$ and $matita_basics_types.Some$ applied to $x1$ and $x_631$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.Some$ applied to $x1$ and $x_631$. Then $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "postulate option_inv_rect_CProp1 : (x1 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.option x1)) -> (P : (_z1092 : cic.Term univs.Type0 (matita_basics_types.option x1)) -> cic.Univ cic.prop) -> (_H1 : (_z1093 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.None x1))) -> cic.Term cic.prop (P (matita_basics_types.None x1))) -> (_H2 : (x_631 : cic.Term univs.Type0 x1) -> (_z1093 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1)) Hterm (matita_basics_types.Some x1 x_631))) -> cic.Term cic.prop (P (matita_basics_types.Some x1 x_631))) -> cic.Term cic.prop (P Hterm)", "predict": "postulate Option_inv_rect_CProp1 : \n  (x1 : cic.Univ) -> \n  (Hterm : cic.Term) -> \n  (matita_basics_types.option x1) -> \n  (P : (z1092 : cic.Term) -> (matita_basics_types.option x1) -> cic.Univ) -> \n  (H1 : (z1093 : cic.Term) -> (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_basics_types.option x1) Hterm matita_basics_types.None x1) -> cic.Term) -> \n  (H2 : (x631 : cic.Term) -> x1 -> (z1093 : cic.Term) -> (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2)) (matita_basics_types.option x1) (Hterm (matita_basics_types.Some x1 x631)) matita_basics_types.None x1) -> cic.Term) -> \n  (P (Hterm) (matita_basics_types.None x1)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDivides_ind_body. Pour tous les éléments $_n$ et $_m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour toutes les fonctions $Q_$ des éléments $_x_1192$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.divides$ appliqué à $_n$ et $_m$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_quotient$ des éléments $q$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $x_1193$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $_m$ et $matita_arithmetics_nat.times$ appliqué à $_n$ et $q$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_primes.quotient$ appliqué à $_n$ et $_m$ et $q$ et $x_1193$, pour tous les éléments $x_1192$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.divides$ appliqué à $_n$ et $_m$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_1192$.\nassistant\n", "label": "axiom divides_ind_body (_n _m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (Q_ : (_x_1192 : cic.Term cic.prop (matita_arithmetics_primes.divides _n _m)) -> cic.Univ cic.prop) (_H_quotient : (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_1193 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _m (matita_arithmetics_nat.times _n q))) -> cic.Term cic.prop (Q_ (matita_arithmetics_primes.quotient _n _m q x_1193))) (x_1192 : cic.Term cic.prop (matita_arithmetics_primes.divides _n _m)) : cic.Term cic.prop (Q_ x_1192)", "predict": "divides_ind_body : forall (n m : cic.Term univs.Type0) (Q : (forall x1192 : cic.Term cic.prop) -> divides n m (cic.Univ _) -> (forall q : cic.Term univs.Type0) -> divides n m q -> (forall x1193 : cic.Term cic.prop) -> eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat m) (times n q) -> Q x1192) -> forall (x1192 : divides n m), (cic.Term cic.prop) (Q x1192)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_list. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $return_sort$ un élément de $cic.Sort$. Soit $return_type$ une fonction des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Univ$ de $return_sort$. Soit $case_nil$ un élément de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_basics_lists_list.nil$ appliqué à $_A$. Soit $case_cons$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_basics_lists_list.cons$ appliqué à $_A$ et $__$ et $__1$. Soit $z$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$. Alors $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.\nassistant\n", "label": "postulate match_list : (_A : cic.Univ univs.Type0) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ return_sort) -> (case_nil : cic.Term return_sort (return_type (matita_basics_lists_list.nil _A))) -> (case_cons : (__ : cic.Term univs.Type0 _A) -> (__1 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term return_sort (return_type (matita_basics_lists_list.cons _A __ __1))) -> (z : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term return_sort (return_type z)", "predict": "postulate Match_list : \n  {A : cic.Univ} {return_sort : cic.Sort} {return_type : ∀ z : cic.Term, univs.Type0 → matita_basics_lists_list.list A → return_sort} \n  {case_nil : return_sort → return_type} \n  {case_cons : ∀ __ : cic.Term, univs.Type0 → A → ∀ __1 : cic.Term, univs.Type0 → matita_basics_lists_list.list A → return_sort → return_type} \n  {z : ∀ z : cic.Term, univs.Type0 → matita_basics_lists_list.list A} → \n  (return_sort → return_type) (return_type z)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_rect_Type3. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_895$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type3$. Let $_H_mk_ACop$ be a function from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $univs.Type3$ and $Q_$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$. Then for all elements $x_895$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$, $cic.Term$ holds for $univs.Type3$ and $Q_$ applied to $x_895$.\nassistant\n", "label": "axiom ACop_rect_Type3 (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_895 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ univs.Type3) (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type3 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) (x_895 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) : cic.Term univs.Type3 (Q_ x_895)", "predict": "ACop_rect_Type3 : Let A : cic.Univ ∈ univs.Type0. Let _nil : cic.Term ∈ univs.Type0, A. Let Q_ : (x_895 : cic.Term ∈ univs.Type0) → matita_arithmetics_bigops.ACop A _nil → cic.Univ ∈ univs.Type3. Let _H_mk_ACop : (aop : cic.Term ∈ univs.Type0) → matita_arithmetics_bigops.Aop A _nil → (comm : (a : cic.Term ∈ univs.Type0) → A → (b : cic.Term ∈ univs.Type0) → A → cic.Term ∈ cic.prop → matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A (matita_arithmetics_bigops.op A _nil aop a b (matita_arithmetics_bigops.op A _nil aop b a))) (Q_ aop)). Then for all x_895 : cic.Term ∈ univs.Type0, matita_arithmetics_bigops.ACop A _nil, cic.Term ∈ univs.Type3 holds for Q_ x_895."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nChecker_spec. Let $tl$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $matita_arithmetics_nat.nat$. Let $a$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $l$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $matita_arithmetics_chebyshev_bertrand256.checker$ applied to $l$ and $matita_basics_bool.true$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_lists_list.list$ applied to $matita_arithmetics_nat.nat$ and $l$ and $matita_basics_lists_list.cons$ applied to $matita_arithmetics_nat.nat$ and $a$ and $tl$, for all elements $p$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.mem$ applied to $matita_arithmetics_nat.nat$ and $p$ and $tl$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $pp$ to $matita_basics_logic.And$ applied to $matita_basics_logic.And$ applied to $matita_basics_lists_list.mem$ applied to $matita_arithmetics_nat.nat$ and $pp$ and $l$ and $matita_arithmetics_nat.lt$ applied to $pp$ and $p$ and $matita_arithmetics_nat.le$ applied to", "label": "axiom checker_spec (tl : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) (l : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_chebyshev_bertrand256.checker l) matita_basics_bool.true)) (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) l (matita_basics_lists_list.cons matita_arithmetics_nat.nat a tl))) (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__2 : cic.Term cic.prop (matita_basics_lists_list.mem matita_arithmetics_nat.nat p tl)) : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (λ pp => matita_basics_logic.And (matita_basics_logic.And (matita_basics_lists_list.mem matita_arithmetics_nat.nat pp l) (matita_arithmetics_nat.lt pp p)) (matita_arithmetics_nat.le p (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) pp))))", "predict": " $matita_arithmetics_chebyshev_bertrand256.checker$ applied to $p$ and $matita_arithmetics_chebyshev_bertrand256.checker$ applied to $p$ and $matita_basics_lists_list.cons$ applied to $matita_arithmetics_nat.nat$ and $a$ and $tl$ and $pp$ and $matita_basics_lists_list.cons$ applied to $matita_arithmetics_nat.nat$ and $tl$ and $matita_basics_lists_list.cons$ applied to $matita_arithmetics_nat.nat$ and $a$ and $tl$ and $pp$ and $matita_basics_lists_list.cons$ applied to $matita_arithmetics_nat.nat$ and $tl$ and $matita_basics_lists_list.cons$ applied to $matita_arithmetics_nat.nat$ and $a$ and $tl$ and $pp$ and $matita_basics_lists_list.cons$ applied to $matita_arithmetics_nat.nat$ and $tl$ and $matita_basics_lists_list.cons$ applied to $matita_arithmetics_nat.nat$ and $a$ and $tl$ and $pp$ and $matita_basics_lists_list.cons$ applied to $matita_arithmetics_nat.nat$ and $tl$ and $matita_basics_lists_list.cons$ applied to $matita_arithmetics_nat.nat$ and $a$ and $tl$ and $pp$ and $matita_basics_lists_list.cons$ applied to $matita_arithmetics_nat.nat$ and $tl$ and $matita_basics_lists_list.cons$ applied to $matita_arithmetics_nat.nat$ and $a$ and $tl$ and $pp$ and $matita_basics_lists_list.cons$ applied to $matita_arithmetics_nat.nat$ and $tl$ and $matita_basics_lists_list.cons$ applied to $matita_arithmetics_nat.nat$ and $a$ and $tl$ and $pp$ and $matita_basics_lists_list.cons$ applied to $matita_arithmetics_nat.nat$ and $tl$ and $matita_basics_lists_list.cons$ applied to $matita_arithmetics_nat.nat$ and $a$ and $tl$ and $pp$ and $matita_basics_lists_list.cons$ applied"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_Aop. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $return_sort$ vara ett element av $cic.Sort$. Låt $return_type$ vara en funktion från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $return_sort$. Låt $case_mk_Aop$ vara en funktion från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term", "label": "axiom match_Aop (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (return_sort : cic.Sort) (return_type : (z : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ return_sort) (case_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term return_sort (return_type (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) (z : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) : cic.Term return_sort (return_type z)", "predict": "$ av $univs.Type0$ och $A$ och $op$ applicerat på $op$ applicerat sur $a$ et $b$ et $c$ et $op$ applicerat sur $a$ et $op$ applicerat sur $b$ et $c$ et $op$ applicerat sur $op$ applicerat sur $a$ et $b$ et $c$ et $op$ applicerat sur $a$ et $op$ applicerat sur $b$ et $c$ et $op$ applicerat sur $op$ applicerat sur $a$ et $b$ et $c$ et $op$ applicerat sur $a$ et $op$ applicerat sur $b$ et $c$ et $op$ applicerat sur $op$ applicerat sur $a$ et $b$ et $c$ et $op$ applicerat sur $a$ et $op$ applicerat sur $b$ et $c$ et $op$ applicerat sur $op$ applicerat sur $a$ et $b$ et $c$ et $op$ applicerat sur $a$ et $op$ applicerat sur $b$ et $c$ et $op$ applicerat sur $op$ applicerat sur $a$ et $b$ et $c$ et $op$ applicerat sur $a$ et $op$ applicerat sur $b$ et $c$ et $op$ applicerat sur $op$ applicerat sur $a$ et $b$ et $c$ et $op$ applicerat sur $a$ et $op$ applicerat sur $b$ et $c$ et $op$ applicerat sur $op$ applicerat sur $a$ et $b$ et $c$ et $op$ applicerat sur $a$ et $op$ applicerat sur $b$ et $c$ et $op$ applicerat sur $op$ applicerat sur $a$ et $b$ et $c$ et $op$ applicerat sur $a$ et $op$ applicerat sur $b$ et $c$ et $op$ applicerat sur $op$ applicerat sur $a$ et $b$ et $c$ et $op$ applic"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_rect_Type2_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $Q_$ from elements $_x_602$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type2$, for all elements $_H_None$ of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_basics_types.None$ applied to $_A$, for all functions $_H_Some$ from elements $x_603$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $univs.Type2$ and $Q_$ applied to $matita_basics_types.Some$ applied to $_A$ and $x_603$, for all elements $x_602$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$, $cic.Term$ holds for $univs.Type2$ and $Q_$ applied to $x_602$.\nassistant\n", "label": "Axiom option_rect_Type2_body : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_602 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ univs.Type2), forall _H_None : cic.Term univs.Type2 (Q_ (matita_basics_types.None _A)), forall _H_Some : ((x_603 : cic.Term univs.Type0 _A) -> cic.Term univs.Type2 (Q_ (matita_basics_types.Some _A x_603))), forall x_602 : cic.Term univs.Type0 (matita_basics_types.option _A), cic.Term univs.Type2 (Q_ x_602) .", "predict": "Axiom prop80 : even 2."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_rect_CProp2. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Alors pour toutes les fonctions $Q_$ des éléments $_x_909$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_mk_ACop$ des éléments $aop$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ et des fonctions $_comm$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $_nil$ et $aop$ et $a$ et $b$ et $matita_arithmetics_bigops.op$ appliqué à $A$ et $_nil$ et $aop$ et $b$ et $a$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_bigops.mk_ACop$ appliqué à $A$ et $_nil$ et $aop$ et $_comm$, pour tous les éléments $x_909$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.ACop$ appliqué à $A$ et $_nil$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_909$.\nassistant\n", "label": "Axiom ACop_rect_CProp2 : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_909 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop), forall _H_mk_ACop : ((aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))), forall x_909 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil), cic.Term cic.prop (Q_ x_909) .", "predict": "Axiom ACop_rect_CProp2 : forall (A : cic.Univ) (_nil : A), (forall (Q_ : forall (x_909 : cic.Term) (matita_arithmetics_bigops.ACop A _nil), (forall (comm : forall (a : cic.Term) (b : cic.Term) (aop : matita_arithmetics_bigops.Aop A _nil), (matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2) A (matita_arithmetics_bigops.op A _nil aop a b)) (matita_arithmetics_bigops.op A _nil aop b a))) -> (Q_ x_909))) -> (forall (x_909 : cic.Term) (matita_arithmetics_bigops.ACop A _nil), Q_ x_909)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_max_n. Pour toutes les fonctions $f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$, pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_minimization.max$ appliqué à $n$ et $f$ et $n$.\nassistant\n", "label": "axiom le_max_n (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_minimization.max n f) n)", "predict": "Axiom le_max_n : forall (f : univs.Type0 -> univs.Type0 -> matita_basics_bool.bool), (forall (n : matita_arithmetics_nat.nat), cic.Term n -> cic.Term n -> cic.prop) (matita_arithmetics_minimization.max n f n) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_rect_Type4_body. For all elements $_A$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_917$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type4$, for all functions $_H_mk_range$ from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_917$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_917$.\nassistant\n", "label": "range_rect_Type4_body : _A : cic.Univ univs.Type0 -> Q_ : (_x_917 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Univ univs.Type4) -> _H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 _A) -> _upto : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> x_917 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Term univs.Type4 (Q_ x_917) .", "predict": "Output: \nforall A : Univ, (fun (x_917 : Term) (range : matita_arithmetics_bigops.range A) => Q_ (matita_arithmetics_bigops.mk_range A (enum (fun __ : Term => matita_arithmetics_nat.nat) upto (filter (fun __ : Term => matita_arithmetics_nat.nat) (fun __ : Term => matita_basics_bool.bool)) (Q_ (mk_range A (enum (fun __ : Term => matita_arithmetics_nat.nat) upto (filter (fun __ : Term => matita_arithmetics_nat.nat) (fun __ : Term => matita_basics_bool.bool)) (Q_ (mk_range A (enum (fun __ : Term => matita_arithmetics_nat.nat) upto (filter (fun __ : Term => matita_arithmetics_nat.nat) (fun __ : Term => matita_basics_bool.bool)) (Q_ (mk_range A (enum (fun __ : Term => matita_arithmetics_nat.nat) upto (filter (fun __ : Term => matita_arithmetics_nat.nat) (fun __ : Term => matita_basics_bool.bool)) (Q_ (mk_range A (enum (fun __ : Term => matita_arithmetics_nat.nat) upto (filter (fun __ : Term => matita_arithmetics_nat.nat) (fun __ : Term => matita_basics_bool.bool)) (Q_ (mk_range A (enum (fun __ : Term => matita_arithmetics_nat.nat) upto (filter (fun __ : Term => matita_arithmetics_nat.nat) (fun __ : Term => matita_basics_bool.bool)) (Q_ (mk_range A (enum (fun __ : Term => matita_arithmetics_nat.nat) upto (filter (fun __ : Term => matita_arithmetics_nat.nat) (fun __ : Term => matita_basics_bool.bool)) (Q_ (mk_range A (enum (fun __ : Term => matita_arithmetics_nat.nat) upto (filter (fun __ : Term => matita_arithmetics_nat.nat) (fun __ : Term => matita_basics_bool.bool)) (Q_ (mk_range A (enum (fun __ : Term => matita_arithmetics_nat.nat) upto (filter (fun __ : Term =>"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nCompare_append. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $l1$ och $l2$ och $l3$ och $l4$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $A$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l1$ och $l2$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l3$ och $l4$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_basics_lists_list.list$ applicerat på $A$ och funktionen som avbildar $l$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.And$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $A$ och $l1$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l3$ och $l$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $A$ och $l4$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l$ och $l2$ och $matita_basics_logic.And$ applicerat", "label": "compare_append : A : cic.Univ univs.Type0 -> l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A) -> l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A) -> l3 : cic.Term univs.Type0 (matita_basics_lists_list.list A) -> l4 : cic.Term univs.Type0 (matita_basics_lists_list.list A) -> __ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) (matita_basics_lists_list.append A l1 l2) (matita_basics_lists_list.append A l3 l4)) -> cic.Term cic.prop (matita_basics_logic.ex (matita_basics_lists_list.list A) (l : cic.Term univs.Type0 (matita_basics_lists_list.list A) => matita_basics_logic.Or (matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l1 (matita_basics_lists_list.append A l3 l)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l4 (matita_basics_lists_list.append A l l2))) (matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l3 (matita_basics_lists_list.append A l1 l)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list A)) l2 (matita_basics_lists_list.append A l l4))))) .", "predict": " på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $A$ och $l1$ och $l3$ och $l$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $A$ och $l4$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l$ och $l2$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $A$ och $l1$ och $l4$ och $l$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $A$ och $l3$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l$ och $l2$ och $matita_basics_logic.And$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $A$ och $l1$ och $l3$ och $l$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $A$ och $l4$ och $matita_basics_lists_list.append$ applicerat på $A$ och $l$ och $l2$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_rect_Type0. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_901$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type0$. Låt $_H_mk_ACop$ vara en funktion från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$. Då för alla element $x_901$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_901$.\nassistant\n", "label": "axiom ACop_rect_Type0 (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_901 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ univs.Type0) (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type0 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) (x_901 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) : cic.Term univs.Type0 (Q_ x_901)", "predict": "Axiom ACop_rect_Type0 : \n  (∀ A : univs.Type0, cic.Univ) → \n  (∀ _, nil : cic.Term univs.Type0 A, \n  (∀ Q_ : ∀ x_901 : cic.Term univs.Type0 A, (ACop A nil) x_901 → cic.Univ univs.Type0) → \n  (∀ aop : cic.Term univs.Type0, (Aop A nil) aop → \n  (∀ _comm : ∀ a b : cic.Term univs.Type0 A, (eq (cic.lift univs.Type0 univs.Type2 A) (bigops.op A nil aop a b)) (bigops.op A nil aop b a)) → \n  (∀ x_901 : cic.Term univs.Type0, (ACop A nil) x_901) → \n  cic.Term univs.Type0 (Q_ aop _comm)) → \n  (∀ x_901 : cic.Term univs.Type0, (ACop A nil) x_901 → cic.Univ univs.Type0)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAll_mp. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $P$ and $Q$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$, for all functions $__$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__$ of $cic.Term$ of $cic.prop$ and $P$ applied to $a$ to elements of $cic.Term$ of $cic.prop$ and $Q$ applied to $a$, for all elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $A$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_lists_list.All$ applied to $A$ and $P$ and $l$, $cic.Term$ holds for $cic.prop$ and $matita_basics_lists_list.All$ applied to $A$ and $Q$ and $l$.\nassistant\n", "label": "postulate All_mp : (A : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (__ : (a : cic.Term univs.Type0 A) -> (__ : cic.Term cic.prop (P a)) -> cic.Term cic.prop (Q a)) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__1 : cic.Term cic.prop (matita_basics_lists_list.All A P l)) -> cic.Term cic.prop (matita_basics_lists_list.All A Q l)", "predict": "postulate All_mp : (A : univs.Type0) -> (P Q : (__) -> univs.Type0 -> univs.Type0) -> ((a : univs.Type0) -> (__) -> (a : cic.Term) -> (__) -> cic.prop) -> (l : univs.Type0) -> (matita_basics_lists_list.list A) -> (__) -> (matita_basics_lists_list.All A P l) -> cic.Term (matita_basics_lists_list.All A Q l)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_rect_Type1_body. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_606$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type1$. Alors pour tous les éléments $_H_None$ de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_basics_types.None$ appliqué à $_A$, pour toutes les fonctions $_H_Some$ des éléments $x_607$ de $cic.Term$ de $univs.Type0$ et de $_A$ à des éléments de $cic.Term$ de $univs.Type1$ et de $Q_$ appliqué à $matita_basics_types.Some$ appliqué à $_A$ et $x_607$, pour tous les éléments $x_606$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.option$ appliqué à $_A$, $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_606$.\nassistant\n", "label": "axiom option_rect_Type1_body (_A : cic.Univ univs.Type0) (Q_ : (_x_606 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ univs.Type1) (_H_None : cic.Term univs.Type1 (Q_ (matita_basics_types.None _A))) (_H_Some : (x_607 : cic.Term univs.Type0 _A) -> cic.Term univs.Type1 (Q_ (matita_basics_types.Some _A x_607))) (x_606 : cic.Term univs.Type0 (matita_basics_types.option _A)) : cic.Term univs.Type1 (Q_ x_606)", "predict": "Axiom option_rect_Type1_body : forall (A : Univ), (forall (x : Term) (opt : option A), Q opt x -> (forall (H_None : Term) (H_Some : forall (x : Term), A -> Term), forall (x : option A), Q H_None H_Some x -> forall (x : Term), Q (match x with None => matita_basics_types.None A | Some a => matita_basics_types.Some A x end) (fun x : Term => match x with None => matita_basics_types.None A | Some a => matita_basics_types.Some A x end x)) -> forall (x : Term), Q x x ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nInvert_permut. Låt $__$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla funktioner $__1$ från element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__2$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $univs.Type0$ och $matita_arithmetics_nat.nat$.\nassistant\n", "label": "axiom invert_permut (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__1 : (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) (__2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term univs.Type0 matita_arithmetics_nat.nat", "predict": "Axiom Invert_permut : forall (cic : Type) (univs : Type) (nat : Type) (element : cic -> nat), (forall (f : (cic -> nat) -> (cic -> nat)), (forall (x : cic), f x = x) -> (forall (y : cic), f (f y) = y))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMax. Assume that $Sort$. Then if $Sort$, then $Sort$.\nassistant\n", "label": "Axiom max : Sort -> Sort -> Sort .", "predict": "Output: Axiom max_assume : forall (Sort : Type), Sort -> Sort."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_to_leb_true. For all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $matita_arithmetics_nat.leb$ applied to $n$ and $m$ and $matita_basics_bool.true$.\nassistant\n", "label": "le_to_leb_true : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.le n m) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (matita_arithmetics_nat.leb n m) matita_basics_bool.true) .", "predict": "Output: Axiom Le_to_leb_true : forall (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool (matita_arithmetics_nat.leb n m)) matita_basics_bool.true)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_Not. Låt $_A$ vara ett element av $cic.Univ$ av $cic.prop$. Låt $return_sort$ vara ett element av $cic.Sort$. Då för alla funktioner $return_type$ från element $z$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$ till element av $cic.Univ$ av $return_sort$, för alla funktioner $case_nmk$ från funktioner $__$ från element $__$ av $cic.Term$ av $cic.prop$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.False$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $matita_basics_logic.nmk$ applicerat på $_A$ och $__$, för alla element $z$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Not$ applicerat på $_A$, håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.\nassistant\n", "label": "axiom match_Not (_A : cic.Univ cic.prop) (return_sort : cic.Sort) (return_type : (z : cic.Term cic.prop (matita_basics_logic.Not _A)) -> cic.Univ return_sort) (case_nmk : (__ : (__ : cic.Term cic.prop _A) -> cic.Term cic.prop matita_basics_logic.False) -> cic.Term return_sort (return_type (matita_basics_logic.nmk _A __))) (z : cic.Term cic.prop (matita_basics_logic.Not _A)) : cic.Term return_sort (return_type z)", "predict": "Axiom prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_DPair. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $return_sort$ un élément de $cic.Sort$. Alors pour toutes les fonctions $return_type$ des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $return_sort$, pour toutes les fonctions $case_mk_DPair$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $_f$ appliqué à $dpi1$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $A$ et $_f$ et $dpi1$ et $_dpi2$, pour tous les éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.\nassistant\n", "label": "postulate match_DPair : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ univs.Type0) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Univ return_sort) -> (case_mk_DPair : (dpi1 : cic.Term univs.Type0 A) -> (_dpi2 : cic.Term univs.Type0 (_f dpi1)) -> cic.Term return_sort (return_type (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> (z : cic.Term univs.Type0 (matita_basics_types.DPair A _f)) -> cic.Term return_sort (return_type z)", "predict": "postulate Match_DPair : {univs : Universe} {A : univs.Type0} {univs.Type0 -> univs.Type0 -> univs.Type0} {return_sort : cic.Sort} -> ((z : cic.Term univs.Type0) -> (dpi1 : A) -> (dpi2 : univs.Type0 -> cic.Term univs.Type0 -> univs.Type0) -> (case_mk_DPair : dpi1 -> (return_type : z -> matita_basics_types.mk_DPair A _f dpi1 dpi2) -> (return_sort -> return_type z)) -> ((z : matita_basics_types.DPair A _f) -> cic.Term univs.Type0 -> return_sort -> return_type z)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nList_rect_CProp3. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_761$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$. Då för alla element $_H_nil$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_lists_list.nil$ applicerat på $_A$, för alla funktioner $_H_cons$ från element $x_763$ av $cic.Term$ av $univs.Type0$ och $_A$ och element $x_762$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$ och element $_x_765$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $x_762$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_lists_list.cons$ applicerat på $_A$ och $x_763$ och $x_762$, för alla element $x_761$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_761$.\nassistant\n", "label": "postulate list_rect_CProp3 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_761 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ cic.prop) -> (_H_nil : cic.Term cic.prop (Q_ (matita_basics_lists_list.nil _A))) -> (_H_cons : (x_763 : cic.Term univs.Type0 _A) -> (x_762 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_765 : cic.Term cic.prop (Q_ x_762)) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.cons _A x_763 x_762))) -> (x_761 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term cic.prop (Q_ x_761)", "predict": "postulate List_rect_CProp3 : {univs : Type0} -> univs -> (A : univs) -> (Q : (x : Term) -> list A -> Prop) -> (H_nil : prop) -> ((x : Term) -> (A : Type0) -> (Q (A : Term) (list A)) -> (x : Term) -> prop) -> (x : Term) -> list A -> prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nStreicherK. Låt $T$ vara ett element av $cic.Univ$ av $univs.Type2$. Låt $t$ vara ett element av $cic.Term$ av $univs.Type2$ och $T$. Då för alla funktioner $P$ från element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $T$ och $t$ och $t$ till element av $cic.Univ$ av $univs.Type2$, för alla element $__$ av $cic.Term$ av $univs.Type2$ och $P$ applicerat på $matita_basics_logic.refl$ applicerat på $T$ och $t$, för alla element $p$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $T$ och $t$ och $t$, håller $cic.Term$ för $univs.Type2$ och $P$ applicerat på $p$.\nassistant\n", "label": "postulate streicherK : (T : cic.Univ univs.Type2) -> (t : cic.Term univs.Type2 T) -> (P : (__ : cic.Term cic.prop (matita_basics_logic.eq T t t)) -> cic.Univ univs.Type2) -> (__ : cic.Term univs.Type2 (P (matita_basics_logic.refl T t))) -> (p : cic.Term cic.prop (matita_basics_logic.eq T t t)) -> cic.Term univs.Type2 (P p)", "predict": "postulate StreicherK : \n  {univs : Type2}\n  {T : univs}\n  (t : univs)\n  (P : Term -> prop -> eq univs)\n  (tT : T t)\n  -> (T refl t)\n  -> (P refl T t)\n  -> (P _ _ _) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nCongruent_n_mod_times. Låt $n$ och $m$ och $p$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $p$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_congruence.congruent$ applicerat på $n$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $n$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $p$ och $p$.\nassistant\n", "label": "postulate congruent_n_mod_times : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> cic.Term cic.prop (matita_arithmetics_congruence.congruent n (matita_arithmetics_div_and_mod.mod n (matita_arithmetics_nat.times m p)) p)", "predict": "postulate Congruent_n_mod_times : {n m p : cic.Term (univs.Type0)} -> {Nat : matita_arithmetics_nat.nat} -> (n : matita_arithmetics_nat.O -> p) -> (forall m' : matita_arithmetics_nat.O -> p, (n : matita_arithmetics_nat.times m m') -> p) -> (forall m' : matita_arithmetics_nat.O -> p, (n : matita_arithmetics_div_and_mod.mod n (matita_arithmetics_nat.times m m')) -> p) -> n (matita_arithmetics_nat.times m p) -> p"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nUnit_inv_rect_CProp1. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$. Alors pour toutes les fonctions $P$ des éléments $_z960$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $_z961$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.unit$ et $Hterm$ et $matita_basics_types.it$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.it$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "unit_inv_rect_CProp1 : Hterm : cic.Term univs.Type0 matita_basics_types.unit -> P : (_z960 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Univ cic.prop) -> _H1 : (_z961 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm matita_basics_types.it) -> cic.Term cic.prop (P matita_basics_types.it)) -> cic.Term cic.prop (P Hterm) .", "predict": "Axiom Unit_inv_rect_CProp1 : forall (Hterm : cic.Term univs.Type0 matita_basics_types.unit) (P : forall _z960 : cic.Term univs.Type0 matita_basics_types.unit, cic.Univ (cic.prop)) (H1 : forall _z961 : cic.Term (cic.prop) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit Hterm matita_basics_types.it)), cic.Term (cic.prop) P (matita_basics_types.it Hterm matita_basics_types.it)), P Hterm."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1553. Let $n$ and $n0$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $matita_arithmetics_nat.nat$ and the function that maps $a$ to $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $a$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $a$. Let $a$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme0$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n0$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $a$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$", "label": "postulate let_clause_1553 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n0 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n0 (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n0 (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)))))) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme0 : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n0 (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) a)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n0 (matita_arithmetics", "predict": " and $matita_arithmetics_nat.nat$ and $n0$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $a$. \n\nOutput: \n```agda\npostulate \n  let_clause_1553 : \n    (n n0 : cic.Term univs.Type0 matita_arithmetics_nat.nat) \n    (lclearme : cic.Term univs.Type0 matita_basics_logic.ex (matita_arithmetics_nat.nat (λ a → matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n0) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n0) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) a)))))) \n    (lclearme0 : cic.Term univs.Type0 (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n0) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n0) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) a)))))\n```"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_rect_Type2. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_897$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type2$, för alla funktioner $_H_mk_ACop$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$, för alla element $x_897$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $univs.Type2$ och $Q_$ applicerat på $x_897$.\nassistant\n", "label": "ACop_rect_Type2 : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_897 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Univ univs.Type2) -> _H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> _comm : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type2 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> x_897 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Term univs.Type2 (Q_ x_897) .", "predict": "Output: Axiom ACop_rect_Type2 : forall A : univs.Type0, A : cic.Univ, (_nil : cic.Term), (Q_ : forall x_897 : cic.Term, matita_arithmetics_bigops.ACop A _nil) -> (forall aop : cic.Term, matita_arithmetics_bigops.Aop A _nil) -> (forall a b : cic.Term, A a -> A b -> cic.prop) -> (forall a : cic.Term, A a -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil (matita_arithmetics_bigops.Aop A _nil) a (matita_arithmetics_bigops.op A _nil (matita_arithmetics_bigops.Aop A _nil) b))) -> (forall x_897 : cic.Term, matita_arithmetics_bigops.ACop A _nil) -> cic.Term univs.Type2 (Q_ x_897)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBc_n_n. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_binomial.bc$ appliqué à $n$ et $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$.\nassistant\n", "label": "postulate bc_n_n : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_binomial.bc n n) (matita_arithmetics_nat.S matita_arithmetics_nat.O))", "predict": "postulate Bc_n_n : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMk_Sig. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$. Låt $pi1$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $_pi2$ vara ett element av $cic.Term$ av $cic.prop$ och $f$ applicerat på $pi1$. Då håller $cic.Term$ för $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $A$ och $f$.\nassistant\n", "label": "mk_Sig : A : cic.Univ univs.Type0 -> f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> pi1 : cic.Term univs.Type0 A -> _pi2 : cic.Term cic.prop (f pi1) -> cic.Term univs.Type0 (matita_basics_types.Sig A f) .", "predict": "Output: \nAxiom mk_Sig : \nforall (univs : Univ), \nforall (univs_Type0 : Type0), \nforall (cic_Univ : Univ), \nforall (cic_Term : Term), \nforall (cic_prop : prop), \nlet A : cic_Univ := ... in \nlet f : (cic_Term) -> A -> cic_Univ := ... in \nlet pi1 : (cic_Term) := ... in \nlet _pi2 : (cic_Term) := f pi1 in \ncic_Term univs_Type0 (matita_basics_types.Sig A f), \n... ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_smallest_factor_n. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_primes.smallest_factor$ appliqué à $n$ et $n$.\nassistant\n", "label": "postulate le_smallest_factor_n : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_primes.smallest_factor n) n)", "predict": "postulate Le_smallest_factor_n : forall (n : nat), is_term (prop (le (smallest_factor n) n))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_ind_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_861$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_Aop$ vara en funktion från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av", "label": "Axiom Aop_ind_body : forall A : cic.Univ univs.Type0, forall _nil : cic.Term univs.Type0 A, forall Q_ : ((_x_861 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop), forall _H_mk_Aop : ((op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))), forall x_861 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil), cic.Term cic.prop (Q_ x_861) .", "predict": " $cic.Term$ av $cic.prop$ et $matita_basics_logic.eq$ applicerat sur $cic.lift$ applicerat sur $univs.Type0$ et $univs.Type3$ et $A$ et $op$ applicerat sur $a$ et $op$ applicerat sur $b$ et $c$ et fonction de $matita_basics_logic.eq$ applicé sur $cic.lift$ applicé sur $univs.Type0$ et $univs.Type2$ et $A$ et $op$ applicé sur $a$ et $op$ applicé sur $b$ et $a$ et fonction de $matita_basics_logic.eq$ applicé sur $cic.lift$ applicé sur $univs.Type0$ et $univs.Type2$ et $A$ et $op$ applicé sur $a$ et $op$ applicé sur $c$ et $a$ et fonction de $matita_basics_logic.eq$ applicé sur $cic.lift$ applicé sur $univs.Type0$ et $univs.Type2$ et $A$ et $op$ applicé sur $b$ et $op$ applicé sur $c$ et $b$ et fonction de $matita_basics_logic.eq$ applicé sur $cic.lift$ applicé sur $univs.Type0$ et $univs.Type2$ et $A$ et $op$ applicé sur $b$ et $op$ applicé sur $a$ et $b$ et fonction de $matita_basics_logic.eq$ applicé sur $cic.lift$ applicé sur $univs.Type0$ et $univs.Type2$ et $A$ et $op$ applicé sur $c$ et $op$ applicé sur $a$ et $c$ et fonction de $matita_basics_logic.eq$ applicé sur $cic.lift$ applicé sur $univs.Type0$ et $univs.Type2$ et $A$ et $op$ applicé sur $c$ et $op$ applicé sur $b$ et $c$ et fonction de $matita_basics_logic.eq$ applicé sur $cic.lift$ applicé sur $univs.Type0$ et $univs.Type2$ et $A$ et $op"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_CProp2_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_881$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_Aop$ une fonction des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type", "label": "axiom Aop_rect_CProp2_body (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_881 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop) (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) (x_881 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) : cic.Term cic.prop (Q_ x_881)", "predict": "0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $op$ appliqué à $b$ et $c$ et des fonctions $_assocr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $op$ appliqué à $a$ et $b$ et $c$ et des fonctions $_nilr$ et $_assocr$ et $_H_mk_Aop$ et $Q_$ et $_H_mk_Aop$ et $Q_$ et $_H_mk_Aop$ et $Q_$ et $_H_mk_Aop$ et $Q_$ et $_H_mk_Aop$ et $Q_$ et $_H_mk_Aop$ et $Q_$ et $_H_mk_Aop$ et $Q_$ et $_H_mk_Aop$ et $Q_$ et $_H_mk_Aop$ et $Q_$ et $_H_mk_Aop$ et $Q_$ et $_H_mk_Aop$ et $Q_$ et $_H_mk_Aop$ et $Q_$ et $_H_mk_Aop$ et $Q_$ et $_H_mk_Aop$ et $Q_$ et $_H_mk_Aop$ et $Q_$ et $_H_mk_Aop$ et $Q_$ et $_H_mk_Aop$ et $Q_$ et $_H_mk_Aop$ et $Q_$ et $_H_mk_Aop$ et $Q_$ et $_H_mk_Aop$ et $Q_$ et $_H_mk_Aop$ et $Q_$ et $_H_mk_Aop$ et $Q_$ et $_H_mk_Aop$ et $Q"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMod_n_n. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_div_and_mod.mod$ applicerat på $n$ och $n$ och $matita_arithmetics_nat.O$.\nassistant\n", "label": "Axiom mod_n_n : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod n n) matita_arithmetics_nat.O) .", "predict": "Axiom Mod_n_n : forall (n : cic.Term univs.Type0 matita_arithmetics_nat.nat), \nforall (P : cic.Term cic.prop matita_arithmetics_nat.lt matita_arithmetics_nat.O n), \ncic.Term cic.prop (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_div_and_mod.mod n n matita_arithmetics_nat.O)) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_previous_prime4. For all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_nat.nat$.\nassistant\n", "label": "let_previous_prime4 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_arithmetics_nat.nat .", "predict": "Output: Axiom let_previous_prime4 : forall (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat), cic.Term univs.Type0 matita_arithmetics_nat.nat."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_rect_Type3_body. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $_nil$ av $cic.Term$ av $univs.Type0$ och $A$, för alla funktioner $Q_$ från element $_x_895$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type3$, för alla funktioner $_H_mk_ACop$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $univs.Type3$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$, för alla element $x_895$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$, håller $cic.Term$ för $univs.Type3$ och $Q_$ applicerat på $x_895$.\nassistant\n", "label": "ACop_rect_Type3_body : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_895 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Univ univs.Type3) -> _H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> _comm : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term univs.Type3 (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> x_895 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Term univs.Type3 (Q_ x_895) .", "predict": "Output: Axiom Cop_rect_Type3_body : \n  forall A : cic.Univ, \n  _nil : cic.Term A, \n  Q : forall x : cic.Term A, ACop A _nil -> cic.Univ (Type3), \n  _H_mk_ACop : forall aop : cic.Term A, Aop A _nil -> forall a b : cic.Term A, \n  eq (cic.lift (Type0, Type2) A (matita_arithmetics_bigops.op A _nil aop a b)) (op A _nil aop b aop b a) -> \n  cic.Term (Type3), \n  forall x : cic.Term A, ACop A _nil -> Q x (mk_ACop A _nil aop _comm), \n  forall x : cic.Term A, ACop A _nil -> Q x x."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nB_SSSO. $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_chebyshev_factorization.B$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$.\nassistant\n", "label": "axiom B_SSSO : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_chebyshev_factorization.B (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_max_f_max_g. Låt $f$ och $g$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla funktioner $__$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $n$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $f$ applicerat på $i$ och $matita_basics_bool.true$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $g$ applicerat på $i$ och $matita_basics_bool.true$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_minimization.max$ applicerat på $n$ och $f$ och $matita_arithmetics_minimization.max$ applicerat på $n$ och $g$.\nassistant\n", "label": "le_max_f_max_g : f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> g : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt i n) -> __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.true) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (g i) matita_basics_bool.true)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_minimization.max n f) (matita_arithmetics_minimization.max n g)) .", "predict": "Axiom le_max_f_max_g : forall (f : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool), (g : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool), (n : cic.Term univs.Type0 matita_arithmetics_nat.nat), (i : cic.Term univs.Type0 matita_arithmetics_nat.nat), (P : cic.Term univs.Type0 matita_basics_logic.eq), (Q : cic.Term univs.Type0 matita_basics_logic.eq), (P1 : cic.Term univs.Type0 matita_basics_logic.eq), (P2 : cic.Term univs.Type0 matita_basics_logic.eq), (R : cic.Term univs.Type0 matita_basics_logic.eq), (S : cic.Term univs.Type0 matita_basics_logic.eq), (R1 : cic.Term univs.Type0 matita_basics_logic.eq), (R2 : cic.Term univs.Type0 matita_basics_logic.eq), (max_f : cic.Term univs.Type0 matita_arithmetics_minimization.max), (max_g : cic.Term univs.Type0 matita_arithmetics_minimization.max), ((f i matita_basics_bool.true) P1 R (g i matita_basics_bool.true) P2 R1) -> (max_f n f max_g n g) P Q."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nUnit_rect_CProp4_body. Pour toutes les fonctions $Q_$ des éléments $_x_509$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $_H_it$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.it$, pour tous les éléments $x_509$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_509$.\nassistant\n", "label": "unit_rect_CProp4_body : Q_ : (_x_509 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Univ cic.prop) -> _H_it : cic.Term cic.prop (Q_ matita_basics_types.it) -> x_509 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Term cic.prop (Q_ x_509) .", "predict": "Axiom Unit_rect_CProp4_body : forall Q : forall x509 : Term univs.Type0 unit, (forall H_it : Term prop, Q H_it) -> forall x509 : Term univs.Type0 unit, prop (Q x509)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_rect_CProp2_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_909$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_ACop$ vara en funktion från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $A$ och $_nil$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $A$ och $_nil$ och $aop$ och $b$ och $a$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_ACop$ applicerat på $A$ och $_nil$ och $aop$ och $_comm$. Låt $x_909$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$. Då håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_909$.\nassistant\n", "label": "axiom ACop_rect_CProp2_body (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_909 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop) (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) (x_909 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) : cic.Term cic.prop (Q_ x_909)", "predict": "postulate ACop_rect_CProp2_body : forall (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (forall x_909 : cic.Term univs.Type0) (A _nil) -> cic.Univ (cic.prop)) (H_mk_ACop : (forall aop : cic.Term univs.Type0) (A _nil) (forall a b : cic.Term univs.Type0) (A a) (A b) -> cic.Term (cic.prop) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a) (matita_arithmetics_bigops.op A _nil aop b) (matita_arithmetics_bigops.op A _nil aop (matita_arithmetics_bigops.op A _nil aop a) b) (matita_arithmetics_bigops.op A _nil aop (matita_arithmetics_bigops.op A _nil aop b) a))) (x_909 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Term (cic.prop) (Q_ x_909)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nPermut_S_to_permut. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $m$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_permutation.permut$ appliqué à $f$ et $matita_arithmetics_nat.S$ appliqué à $m$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $f$ appliqué à $matita_arithmetics_nat.S$ appliqué à $m$ et $matita_arithmetics_nat.S$ appliqué à $m$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_permutation.permut$ appliqué à $f$ et $m$.\nassistant\n", "label": "axiom permut_S_to_permut (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_permutation.permut f (matita_arithmetics_nat.S m))) (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (f (matita_arithmetics_nat.S m)) (matita_arithmetics_nat.S m))) : cic.Term cic.prop (matita_arithmetics_permutation.permut f m)", "predict": "Axiom permut_S_to_permut : forall (f : cic.Term univs.Type0 (matita_arithmetics_nat.nat) -> cic.Term univs.Type0 (matita_arithmetics_nat.nat)), (m : cic.Term univs.Type0 (matita_arithmetics_nat.nat)), forall (_:cic.prop), forall (_1:matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (f (matita_arithmetics_nat.S m))) (f m)), (cic.Term) (cic.prop) (matita_arithmetics_permutation.permut f m)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTrue_rect_Type2_body. Soit $Q_$ une fonction des éléments $_x_48$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$ à des éléments de $cic.Univ$ de $univs.Type2$. Soit $_H_I$ un élément de $cic.Term$ de $univs.Type2$ et de $Q_$ appliqué à $matita_basics_logic.I$. Soit $x_48$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$. Alors $cic.Term$ tient pour $univs.Type2$ et $Q_$ appliqué à $x_48$.\nassistant\n", "label": "axiom True_rect_Type2_body (Q_ : (_x_48 : cic.Term cic.prop matita_basics_logic.True) -> cic.Univ univs.Type2) (_H_I : cic.Term univs.Type2 (Q_ matita_basics_logic.I)) (x_48 : cic.Term cic.prop matita_basics_logic.True) : cic.Term univs.Type2 (Q_ x_48)", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_inv_ind. Soient $x1$ et $x2$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_Hterm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $x1$ et $x2$. Alors pour toutes les fonctions $P$ des éléments $_z724$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $_z725$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2$ et $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $x1$, pour toutes les fonctions $_H2$ des éléments $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $_x_419$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $x1$ et $m$ et des fonctions $_x_421$ des éléments $_z725$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2$ et $m$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $m$ et des éléments $_z725$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2$ et $matita_arithmetics_nat.S$ appliqué à $m$ à des éléments de $c", "label": "axiom le_inv_ind (x1 x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_Hterm : cic.Term cic.prop (matita_arithmetics_nat.le x1 x2)) (P : (_z724 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ cic.prop) (_H1 : (_z725 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2 x1)) -> cic.Term cic.prop (P x1)) (_H2 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_419 : cic.Term cic.prop (matita_arithmetics_nat.le x1 m)) -> (_x_421 : (_z725 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2 m)) -> cic.Term cic.prop (P m)) -> (_z725 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2 (matita_arithmetics_nat.S m))) -> cic.Term cic.prop (P (matita_arithmetics_nat.S m))) : cic.Term cic.prop (P x2)", "predict": "ic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_nat.S$ appliqué à $m$, il existe une fonction $_H$ des éléments $x$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Univ$ de $cic.prop$ telle que pour toutes les fonctions $_H3$ des éléments $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $_x_419$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $x1$ et $m$ et des fonctions $_x_421$ des éléments $_z725$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2$ et $m$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $m$ et des éléments $_z725$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2$ et $matita_arithmetics_nat.S$ appliqué à $m$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_arithmetics_nat.S$ appliqué à $m$ et des fonctions $_x_423$ des éléments $_z725$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2$ et $m$ à des éléments de $cic.Term$ de $c"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_10332. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $le_n$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$. Alors pour tous les éléments $x2515$ et $x2516$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $x2515$ et $matita_arithmetics_nat.plus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $x2516$ et $matita_arithmetics_div_and_mod.div$ appliqué à $x2515$ et $x2516$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $x2515$ et $x2516$.\nassistant\n", "label": "Axiom let_clause_10332 : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall le_n : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))))) n), forall x2515 : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall x2516 : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2515 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div x2515 x2516)) (matita_arithmetics_div_and_mod.mod x2515 x2516))) .", "predict": "Let_clause_10332. Axiom let_clause_10332 : (forall n : matita_arithmetics_nat.nat, (forall x2515 x2516 : matita_arithmetics_nat.nat, (matita_arithmetics_nat.le n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x2516 (matita_arithmetics_div_and_mod.div n x2516)) (matita_arithmetics_div_and_mod.mod n x2516)))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nP_ord_to_exp1. Let $p$ and $n$ and $q$ and $r$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $p$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.p_ord$ applied to $n$ and $p$ and $matita_basics_types.mk_Prod$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $q$ and $r$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.And$ applied to $matita_basics_logic.Not$ applied to $matita_arithmetics_primes.divides$ applied to $p$ and $r$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_exp.exp$ applied to $p$ and $q$ and $r$.\nassistant\n", "label": "p_ord_to_exp1 : p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> q : cic.Term univs.Type0 matita_arithmetics_nat.nat -> r : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> __2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord n p) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat q r)) -> cic.Term cic.prop (matita_basics_logic.And (matita_basics_logic.Not (matita_arithmetics_primes.divides p r)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.times (matita_arithmetics_exp.exp p q) r))) .", "predict": "P_ord_to_exp1 : ∀ (p n q r : cic.Term (univs.Type0 × matita_arithmetics_nat.nat × matita_arithmetics_nat.nat × matita_arithmetics_ord.p_ord n p × matita_basics_types.mk_Prod (matita_arithmetics_nat.nat × matita_arithmetics_nat.nat) q r)), cic.Term (cic.prop × matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p × matita_arithmetics_nat.lt matita_arithmetics_nat.O n × matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 × matita_basics_types.Prod (matita_arithmetics_nat.nat × matita_arithmetics_nat.nat) matita_arithmetics_nat.nat matita_arithmetics_nat.nat) n p × matita_basics_logic.eq (matita_arithmetics_nat.nat × matita_arithmetics_nat.nat × matita_arithmetics_nat.nat) matita_arithmetics_nat.nat q r) → \n  (matita_basics_logic.And (matita_basics_logic.Not (matita_arithmetics_primes.divides p r)) × matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 × matita_basics_types.Prod (matita_arithmetics_nat.nat × matita_arithmetics_nat.nat) matita_arithmetics_nat.nat matita_arithmetics_nat.nat) n (matita_arithmetics_nat.times (matita_arithmetics_exp.exp p q r))), True."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExists_add. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $P$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $l1$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$. Alors pour tous les éléments $x$ de $cic.Term$ de $univs.Type0$ et de $A$, pour tous les éléments $l2$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.Exists$ appliqué à $A$ et $P$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l1$ et $l2$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_lists_list.Exists$ appliqué à $A$ et $P$ et $matita_basics_lists_list.append$ appliqué à $A$ et $l1$ et $matita_basics_lists_list.cons$ appliqué à $A$ et $x$ et $l2$.\nassistant\n", "label": "Exists_add : A : cic.Univ univs.Type0 -> P : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> l1 : cic.Term univs.Type0 (matita_basics_lists_list.list A) -> x : cic.Term univs.Type0 A -> l2 : cic.Term univs.Type0 (matita_basics_lists_list.list A) -> __ : cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 l2)) -> cic.Term cic.prop (matita_basics_lists_list.Exists A P (matita_basics_lists_list.append A l1 (matita_basics_lists_list.cons A x l2))) .", "predict": "Output: Axiom Exists_add : forall (A : cic.Univ) (univs : Type0), (P : forall($__ : Term) (A : Univ), Univ -> prop) -> (l1 : Term) -> (l2 : list A) -> forall (x : Term) (l2' : list A) (ex : Exists A P) (app : append A l1 l2) (cons : cons A x l2), (Term) -> prop -> Exists A P -> append A l1 (append A l2 l2') -> append A (cons A x l2) (cons A x l2')."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_inv_ind. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $x2$ av $cic.Term$ av $univs.Type0$ och $x1$, för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1566$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $matita_arithmetics_bigops.op$ applicerat på $x1$ och $x2$ och $aop$ och $a$ och $b$ och $matita_arithmetics_bigops.op$ applicerat på $x1$ och $x2$ och $aop$ och $b$ och $a$ och element $_z1567$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_arithmetics_bigops.mk_ACop$ applicerat på $x1$ och $x2$ och $aop$ och $_comm$ till element av $cic.Term$ av $cic.prop$", "label": "axiom ACop_inv_ind (x1 : cic.Univ univs.Type0) (x2 : cic.Term univs.Type0 x1) (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) (P : (_z1566 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> cic.Univ cic.prop) (_H1 : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (_comm : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (matita_arithmetics_bigops.op x1 x2 aop a b) (matita_arithmetics_bigops.op x1 x2 aop b a))) -> (_z1567 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.ACop x1 x2)) Hterm (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_ACop x1 x2 aop _comm))) : cic.Term cic.prop (P Hterm)", "predict": " . Då för alla element $H$ av $cic.prop$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat sur $cic.prop$ , för alla element $x3$ av $cic.Term$ av $univs.Type0$ och $x1$ och $x2$ och $x3$ och $H$ och $P$ och $_H1$ och $_comm$ och $Hterm$ och $matita_arithmetics_bigops.mk_ACop$ applicerat på $x1$ och $x2$ och $aop$ och $_comm$ till element av $cic.Term$ av $cic.prop$ . \n\nOutput: \nOutput: \nLåt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $x2$ av $cic.Term$ av $univs.Type0$ och $x1$, för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1566$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $aop$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$ och funktioner $_comm$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $b$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $matita_arithmetics_bigops.op$ applicerat på $x1$ och $x2$ och"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nVoid_rect_CProp3_body. För alla funktioner $Q_$ från element $_x_491$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.void$ till element av $cic.Univ$ av $cic.prop$, för alla element $x_491$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.void$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_491$.\nassistant\n", "label": "Axiom void_rect_CProp3_body : forall Q_ : ((_x_491 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ cic.prop), forall x_491 : cic.Term univs.Type0 matita_basics_types.void, cic.Term cic.prop (Q_ x_491) .", "predict": "Axiom Void_rect_CProp3_body : forall (Q_ : cic.Term univs.Type0 matita_basics_types.void -> cic.Univ cic.prop), forall (x_491 : cic.Term univs.Type0 matita_basics_types.void), Q_ x_491."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_73. Soient $n$ et $m$ et $p$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posp$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $p$. Soient $x134$ et $x135$ et $x136$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.plus$ appliqué à $x134$ et $matita_arithmetics_nat.plus$ appliqué à $x135$ et $x136$ et $matita_arithmetics_nat.plus$ appliqué à $x135$ et $matita_arithmetics_nat.plus$ appliqué à $x134$ et $x136$.\nassistant\n", "label": "let_clause_73 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> posp : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p) -> x134 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> x135 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> x136 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.plus x134 (matita_arithmetics_nat.plus x135 x136)) (matita_arithmetics_nat.plus x135 (matita_arithmetics_nat.plus x134 x136))) .", "predict": "Output: \nLet_clause_73 : let n, m, p : cic.Term univs.Type0 in let n : matita_arithmetics_nat.nat in let m, p : matita_arithmetics_nat.nat in let posp : cic.Term cic.prop in let posp : matita_arithmetics_nat.lt in let x134, x135, x136 : cic.Term univs.Type0 in let x134, x135, x136 : matita_arithmetics_nat.nat in let x134, x135, x136 : cic.Term in let x134, x135, x136 : matita_arithmetics_nat.nat in let x134, x135, x136 : cic.Term in let x134, x135, x136 : matita_arithmetics_nat.nat in let x134, x135, x136 : cic.Term in let x134, x135, x136 : matita_arithmetics_nat.nat in let x134, x135, x136 : cic.Term in let x134, x135, x136 : matita_arithmetics_nat.nat in let x134, x135, x136 : cic.Term in let x134, x135, x136 : matita_arithmetics_nat.nat in let x134, x135, x136 : cic.Term in let x134, x135, x136 : matita_arithmetics_nat.nat in let x134, x135, x136 : cic.Term in let x134, x135, x136 : matita_arithmetics_nat.nat in let x134, x135, x136 : cic.Term in let x134, x135, x136 : matita_arithmetics_nat.nat in let x134, x135, x136 : cic.Term in let x134, x135, x136 : matita_arithmetics"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_inv_rect_Type4. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$. Då för alla funktioner $P$ från element $_z1506$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type4$, för alla funktioner $_H1$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$", "label": "Axiom Aop_inv_rect_Type4 : forall x1 : cic.Univ univs.Type0, forall x2 : cic.Term univs.Type0 x1, forall Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2), forall P : ((_z1506 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> cic.Univ univs.Type4), forall _H1 : ((op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1507 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type4 (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))), cic.Term univs.Type4 (P Hterm) .", "predict": " till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $a$ och $a$ till element av $cic.Univ$ av $univs.Type4$, har $P$ och $_H1$ och $_nill$ och $_nilr$ alla dess egenskaper. \n\nOutput: \nInductive Aop_inv_rect_Type4 (univs : Type) (x1 : cic.Univ univs) (x2 : cic.Term univs x1) (Hterm : cic.Term univs (Aop x1 x2)) : forall (P : forall (a : cic.Term univs x1) (op : forall (b : cic.Term univs x1) (c : cic.Term univs x1) -> cic.Term univs x1) (a : cic.Term univs x1) -> cic.Univ univs) (H1 : forall (op : forall (b : cic.Term univs x1) (c : cic.Term univs x1) -> cic.Term univs x1) (a : cic.Term univs x1) -> cic.Term univs x1) (nill : forall (a : cic.Term univs x1) -> cic.prop univs) (nilr : forall (a : cic.Term univs x1) -> cic.prop univs) -> forall (z1506 : cic.Term univs x1) (Hterm : cic.Term univs (Aop x1 x2)), P z1506 Hterm H1 nill nilr = true."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_upper_bound1. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors $cic.Term$ tient pour $univs.Type0$ et $matita_arithmetics_nat.nat$.\nassistant\n", "label": "postulate let_upper_bound1 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat", "predict": "postulate Let_upper_bound1 : (n : cic.Term univs.Type0 (matita_arithmetics_nat.nat)) -> cic.Term univs.Type0 (matita_arithmetics_nat.nat)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_rect_Type4_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $Q_$ from elements $_x_917$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$ to elements of $cic.Univ$ of $univs.Type4$, for all functions $_H_mk_range$ from functions $_enum$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_upto$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and functions $_filter$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$ to elements of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $matita_arithmetics_bigops.mk_range$ applied to $_A$ and $_enum$ and $_upto$ and $_filter$, for all elements $x_917$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $_A$, $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_917$.\nassistant\n", "label": "Axiom range_rect_Type4_body : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_917 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type4), forall _H_mk_range : ((_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type4 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))), forall x_917 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A), cic.Term univs.Type4 (Q_ x_917) .", "predict": "Range_rect_Type4_body. Parameter A : Univ. Then for all Q_ : (x_917 : Term) -> range A -> Univ -> Type0, H_mk_range : (enum : (__) -> Term -> nat -> Term) -> A -> upto : Term -> nat -> Term -> filter : (__) -> nat -> Term -> bool -> Term -> Type4, for all elements x_917 : Term -> range A -> Term -> Type0, for all elements Q_ : (x_917 : Term) -> range A -> Univ -> Type0, cic.Term x_917 holds for univs.Type4 and Q_ applied to x_917."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSum_inv_ind. Soient $x1$ et $x2$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $x1$ et $x2$. Soit $P$ une fonction des éléments $_z972$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sum$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H1$ une fonction des éléments $x_522$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_z973$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sum$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.inl$ appliqué à $x1$ et $x2$ et $x_522$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.inl$ appliqué à $x1$ et $x2$ et $x_522$. Soit $_H2$ une fonction des éléments $x_523$ de $cic.Term$ de $univs.Type0$ et de $x2$ et des éléments $_z973$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Sum$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.inr$ appliqué à $x1$ et $x2$ et $x_523$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.inr$ appliqué à $x1$ et $x2$ et $x_523$. Alors $cic", "label": "postulate Sum_inv_ind : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Univ univs.Type0) -> (Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> (P : (_z972 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (x_522 : cic.Term univs.Type0 x1) -> (_z973 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inl x1 x2 x_522))) -> cic.Term cic.prop (P (matita_basics_types.inl x1 x2 x_522))) -> (_H2 : (x_523 : cic.Term univs.Type0 x2) -> (_z973 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2)) Hterm (matita_basics_types.inr x1 x2 x_523))) -> cic.Term cic.prop (P (matita_basics_types.inr x1 x2 x_523))) -> cic.Term cic.prop (P Hterm)", "predict": ".postulate$ $P$ $x1$ $x2$ $Hterm$ $_H1$ $_H2$ $Hterm$ $P$ $x1$ $x2$ $Hterm$ $_H1$ $_H2$ $P$ $x1$ $x2$ $Hterm$ $_H1$ $_H2$ ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMk_Prod. För alla element $A$ och $B$ av $cic.Univ$ av $univs.Type0$, för alla element $_fst$ av $cic.Term$ av $univs.Type0$ och $A$, för alla element $_snd$ av $cic.Term$ av $univs.Type0$ och $B$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_types.Prod$ applicerat på $A$ och $B$.\nassistant\n", "label": "axiom mk_Prod (A B : cic.Univ univs.Type0) (_fst : cic.Term univs.Type0 A) (_snd : cic.Term univs.Type0 B) : cic.Term univs.Type0 (matita_basics_types.Prod A B)", "predict": "Axiom Mk_Prod : \n  forall A B : cic.Univ.univs.Type0, \n  forall _fst : cic.Term.univs.Type0 A, \n  forall _snd : cic.Term.univs.Type0 B, \n  cic.Term.univs.Type0 (Prod A B)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd_rect_CProp1. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_712$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_mk_Prod$ une fonction des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $_A$ et $_B$ et $_fst$ et $_snd$. Alors pour tous les éléments $x_712$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_712$.\nassistant\n", "label": "axiom Prod_rect_CProp1 (_A _B : cic.Univ univs.Type0) (Q_ : (_x_712 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ cic.prop) (_H_mk_Prod : (_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) (x_712 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) : cic.Term cic.prop (Q_ x_712)", "predict": "postulate Prod_rect_CProp1 : forall (A : univs.Type0) (B : univs.Type0), (cic.Univ -> cic.Term -> Prod A B) -> (A -> cic.Term -> B -> cic.Term -> cic.prop -> (cic.Term -> cic.prop) (Prod A B x_712)) -> forall (x_712 : cic.Term -> Prod A B), (cic.Term -> cic.prop) (Q_ x_712)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSig_rect_CProp2. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_684$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_Sig$ be a function from elements $pi1$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $_pi2$ of $cic.Term$ of $cic.prop$ and $_f$ applied to $pi1$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.mk_Sig$ applied to $A$ and $_f$ and $pi1$ and $_pi2$. Then for all elements $x_684$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sig$ applied to $A$ and $_f$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_684$.\nassistant\n", "label": "Sig_rect_CProp2 : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> Q_ : (_x_684 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) -> cic.Univ cic.prop) -> _H_mk_Sig : (pi1 : cic.Term univs.Type0 A -> _pi2 : cic.Term cic.prop (_f pi1) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> x_684 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) -> cic.Term cic.prop (Q_ x_684) .", "predict": "Sig_rect_CProp2 : \n  A : cic.Univ \n  (univs.Type0) \n  -> \n  (forall x : cic.Term (univs.Type0) \n   -> A -> cic.Univ \n   (cic.prop)) \n  -> \n  (forall x : cic.Term (univs.Type0) \n   -> matita_basics_types.Sig A _f -> cic.Univ \n   (cic.prop)) \n  -> \n  (forall pi1 : cic.Term (univs.Type0) \n   -> A -> cic.Term (cic.prop) \n   -> _f pi1 -> cic.Term (cic.prop)) \n  -> \n  (forall pi1 : cic.Term (univs.Type0) \n   -> A -> cic.Term (cic.prop) \n   -> _f pi1 -> cic.Term (cic.prop)) \n  -> \n  (forall x : cic.Term (univs.Type0) \n   -> matita_basics_types.Sig A _f -> cic.Term (cic.prop) \n   (Q_ x)) \n  -> \n  (forall x : cic.Term (univs.Type0) \n   -> matita_basics_types.Sig A _f -> cic.Term (cic.prop) \n   (Q_ x))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDiv_mod_spec_to_eq2. Soient $a$ et $b$ et $q$ et $r$ et $q1$ et $r1$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $a$ et $b$ et $q$ et $r$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_div_and_mod.div_mod_spec$ appliqué à $a$ et $b$ et $q1$ et $r1$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $r$ et $r1$.\nassistant\n", "label": "axiom div_mod_spec_to_eq2 (a b q r q1 r1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q r)) (__1 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec a b q1 r1)) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) r r1)", "predict": "Axiom div_mod_spec_to_eq2 : forall (a b q r q1 r1 : Term univs.Type0) (cic.Arithmetic.Nat.nat), Div_mod_spec a b q r -> Div_mod_spec a b q1 r1 -> lift univs.Type0 univs.Type2 (cic.Arithmetic.Nat.nat) r r1 = eq."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $nil$ de $cic.Term$ de $univs.Type0$ et de $A$, pour tous les éléments $_xxx$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.Dop$ appliqué à $A$ et $nil$, pour tous les éléments $_x_969$ et $_x_970$ de $cic.Term$ de $univs.Type0$ et de $A$, $cic.Term$ tient pour $univs.Type0$ et $A$.\nassistant\n", "label": "prod : A : cic.Univ univs.Type0 -> nil : cic.Term univs.Type0 A -> _xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A nil) -> _x_969 : cic.Term univs.Type0 A -> _x_970 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A .", "predict": "Output: \n∀ A : cic.Univ → univs.Type0, ∀ nil : cic.Term → univs.Type0 → A, ∀ _xxx : cic.Term → univs.Type0 → matita_arithmetics_bigops.Dop A nil, ∀ _x_969 : cic.Term → univs.Type0 → A, ∀ _x_970 : cic.Term → univs.Type0 → A, cic.Term univs.Type0 A."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_inv_rect_CProp4. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $x2$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$. Alors pour toutes les fonctions $P$ des éléments $_z1140$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H1$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $x2$ appliqué à $dpi1$ et des éléments $_z1141$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$ à des éléments de $cic.Term$ de $cic.prop$ et de $P$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$, $cic.Term$ tient pour $cic.prop$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "DPair_inv_rect_CProp4 : x1 : cic.Univ univs.Type0 -> x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) -> Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) -> P : (_z1140 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) -> cic.Univ cic.prop) -> _H1 : (dpi1 : cic.Term univs.Type0 x1 -> _dpi2 : cic.Term univs.Type0 (x2 dpi1) -> _z1141 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) -> cic.Term cic.prop (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P Hterm) .", "predict": "Output: \nAxiom DPair_inv_rect_CProp4 : forall (univ : univs.Type0) (x1 : cic.Univ) (x2 : (fun __ : cic.Term -> univ) -> cic.Univ), (Hterm : cic.Term) (P : (forall z1140 : cic.Term) -> matita_basics_types.DPair x1 x2 -> cic.Univ -> cic.prop) (H1 : (forall dpi1 : cic.Term) -> (forall dpi2 : cic.Term) -> (forall z1141 : cic.Term) -> (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2 Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 dpi2))) (matita_basics_types.mk_DPair x1 x2 dpi1 dpi2)) -> (P z1141 (matita_basics_types.mk_DPair x1 x2 dpi1 dpi2) z1141) -> P (matita_basics_types.mk_DPair x1 x2 dpi1 dpi2) (dpi1, dpi2) -> cic.Term -> cic.prop -> P Hterm (H1 dpi1 dpi2 z1141 z1141 (P z1141 (matita_basics_types.mk_DPair x1 x2 dpi1 dpi2) z1141) (dpi1, dpi2))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_inv_rect_Type4. Soit $x1$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $x1$. Soit $P$ une fonction des éléments $_z1638$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_bigops.range$ appliqué à $x1$ à des éléments de $cic.Univ$ de $univs.Type4$. Soit $_H1$ une fonction des fonctions $_enum$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_upto$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des fonctions $_filter$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$ et des éléments $_z1639$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_bigops.range$ appliqué à $x1$ et $Hterm$ et $matita_arithmetics_bigops.mk_range$ appliqué à $x1$ et $_enum$ et $_upto$ et $_filter$ à des éléments de $cic.Term$ de $univs.Type4$ et de $P$ appliqué à $matita_arithmetics_bigops.mk_range$ appliqué à $x1$ et $_enum$ et $_upto$ et $_filter$. Alors $cic.Term$ tient pour $univs.Type4$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "range_inv_rect_Type4 : x1 : cic.Univ univs.Type0 -> Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1) -> P : (_z1638 : cic.Term univs.Type0 (matita_arithmetics_bigops.range x1) -> cic.Univ univs.Type4) -> _H1 : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 x1) -> _upto : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> _z1639 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.range x1)) Hterm (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter)) -> cic.Term univs.Type4 (P (matita_arithmetics_bigops.mk_range x1 _enum _upto _filter))) -> cic.Term univs.Type4 (P Hterm) .", "predict": "Output: \nAxiom Range_inv_rect_Type4 : \nlet x1 : cic.Univ := _\nlet Hterm : cic.Term := _\nlet P : (z1638 : cic.Term) -> (matita_arithmetics_bigops.range x1) -> cic.Univ := _\nlet H1 : (enum : (__) -> (cic.Term) -> (x1) -> (upto : (__) -> (cic.Term) -> (matita_arithmetics_nat.nat) -> (filter : (__) -> (cic.Term) -> (matita_basics_bool.bool) -> (z1639 : (cic.Term) -> (cic.prop) -> (matita_basics_logic.eq) (cic.lift (univs.Type0, univs.Type2, matita_arithmetics_bigops.range x1, Hterm, matita_arithmetics_bigops.mk_range x1, enum, upto, filter))))) -> (cic.Term) -> (univs.Type4) := _\nin (cic.Term) := (univs.Type4) -> (P Hterm) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_inv_rect_Type0. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be an element of $cic.Term$ of $univs.Type0$ and $x1$. Then for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1530$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type0$, for all functions $_H1$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $univs.Type0$ and $x1$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $x2$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $c", "label": "axiom Aop_inv_rect_Type0 (x1 : cic.Univ univs.Type0) (x2 : cic.Term univs.Type0 x1) (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) (P : (_z1530 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> cic.Univ univs.Type0) (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1531 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type0 (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) : cic.Term univs.Type0 (P Hterm)", "predict": "ic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $op$ applied to $x2$ and $a$ and $a$ and $P$ and $_H1$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $x1$ and $P$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $x1$ and $x1$ and $P$, there exists an element $a1$ of $cic.Term$ of $univs.Type0$ and $x1$ such that for all elements $a2$ of $cic.Term$ of $univs.Type0$ and $x1$ and $a1$, $P$ applied to $a2$ and $matita_arithmetics_bigops.Aop$ applied to $x1$ and $x2$ and $a2$ is true.\n\nOutput: Aop_inv_rect_Type0 : \n  forall (x1 : cic.Univ) (x2 : cic.Term x1) (Hterm : cic.Term x1) (matita_arithmetics_bigops.Aop x1 x2) (P : (forall $_z1530 : cic.Term x1) (matita_arithmetics_bigops.Aop x1 x2) -> cic.Univ x1) (op : (forall $_ : cic.Term x1) (x1 : cic.Term x1) -> cic.Term x1 x1) (P : (forall a : cic.Term x1) -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1 (matita_arithmetics_bigops.Aop x1 x2) a) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1 (matita_arithmetics_bigops.Aop x1 x2) a) (cic.lift univs.Type0 univs.Type2 x1 x1))) (H1 : (forall op : (forall $_ : cic.Term x1) (x1 : cic.Term x1) -> cic.Term x1 x1)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDivides_times. Let $n$ and $m$ and $p$ and $q$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $n$ and $p$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $m$ and $q$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $matita_arithmetics_nat.times$ applied to $n$ and $m$ and $matita_arithmetics_nat.times$ applied to $p$ and $q$.\nassistant\n", "label": "axiom divides_times (n m p q : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_primes.divides n p)) (__1 : cic.Term cic.prop (matita_arithmetics_primes.divides m q)) : cic.Term cic.prop (matita_arithmetics_primes.divides (matita_arithmetics_nat.times n m) (matita_arithmetics_nat.times p q))", "predict": "postulate divides_times : (n m p q : matita_arithmetics_nat.nat) -> (d : matita_arithmetics_primes.divides n p) -> (e : matita_arithmetics_primes.divides m q) -> matita_arithmetics_nat.times n m = matita_arithmetics_nat.times p q -> matita_arithmetics_primes.divides (matita_arithmetics_nat.times n m) (matita_arithmetics_nat.times p q)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_rect_CProp1. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_630$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_None$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$. Låt $_H_Some$ vara en funktion från element $x_631$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_631$. Då för alla element $x_630$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_630$.\nassistant\n", "label": "postulate option_rect_CProp1 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_630 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop) -> (_H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_631 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_631))) -> (x_630 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term cic.prop (Q_ x_630)", "predict": "postulate Option_rect_CProp1 : \n  ∀ (A : univs.Type0) -> cic.Univ -> \n  (∀ (x : cic.Term) -> A -> cic.Univ -> prop) -> \n  (None -> prop -> prop) -> \n  (∀ (x : cic.Term) -> A -> cic.Univ -> prop) -> \n  (∀ (x : cic.Term) -> A -> prop) -> \n  (∀ (x : cic.Term) -> A -> prop)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_inv_rect_Type2. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $x2$ av $cic.Term$ av $univs.Type0$ och $x1$, för alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$, för alla funktioner $P$ från element $_z1518$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type2$, för alla funktioner $_H1$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $", "label": "postulate Aop_inv_rect_Type2 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> (P : (_z1518 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> cic.Univ univs.Type2) -> (_H1 : (op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1519 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type2 (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type2 (P Hterm)", "predict": "cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$, det finns en funktion $f$ från element $_z1518$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type2$ så att $P$ applicerat på $_z1518$ och $x2$ och $Hterm$ och $_H1$ och $_nill$ och $_nilr$ och $f$ är lika med $x1$.\n\nOutput: \npostulate Aop_inv_rect_Type2 : \n  {x1 : cic.Univ (univs.Type0)} \n  (x2 : cic.Term (univs.Type0) x1) \n  (Hterm : cic.Term (univs.Type0) x1) \n  (P : {op : matita_arithmetics_bigops.Aop (x1)} \n     {a : cic.Term (univs.Type0) x1} \n     (op x2 a) -> cic.Univ (univs.Type2)) \n  (op : {x : cic.Term (univs.Type0)} (x1) -> {y : cic.Term (univs.Type0)} (x1) -> cic.Term (univs.Type0) (x1)) \n  (nill : {x : cic.Term (univs.Type0)} (x1) -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 x1) x1) \n  (nilr : {x : cic.Term (univs.Type0)} (x1) -> matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 x1) x1) \n  -> \n  {f : {op : matita_arithmetics_bigops.Aop (x1)} \n     {a :"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLstar_ind. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $_R$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_relations.relation$ applied to $B$. Let $Q_$ be a function from elements $x_1233$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $x_1232$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1231$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $_x_1234$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $_R$ and $x_1233$ and $x_1232$ and $x_1231$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_lstar_O$ be a function from elements $b$ of $cic.Term$ of $univs.Type0$ and $B$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_nat.O$ and $b$ and $b$ and $matita_arithmetics_lstar.lstar_O$ applied to $B$ and $_R$ and $b$. Let $_H_lstar_S$ be a function from elements $b1$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1236$ of $cic.Term$ of $cic.prop$ and $_R$ applied to $b1$ and $b$ and elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $b2$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1235$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_lstar.lstar$ applied to $B$ and $_R$ and $l$", "label": "axiom lstar_ind (B : cic.Univ univs.Type0) (_R : cic.Term univs.Type0 (matita_basics_relations.relation B)) (Q_ : (x_1233 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_1232 : cic.Term univs.Type0 B) -> (x_1231 : cic.Term univs.Type0 B) -> (_x_1234 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B _R x_1233 x_1232 x_1231)) -> cic.Univ cic.prop) (_H_lstar_O : (b : cic.Term univs.Type0 B) -> cic.Term cic.prop (Q_ matita_arithmetics_nat.O b b (matita_arithmetics_lstar.lstar_O B _R b))) (_H_lstar_S : (b1 : cic.Term univs.Type0 B) -> (b : cic.Term univs.Type0 B) -> (x_1236 : cic.Term cic.prop (_R b1 b)) -> (l : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b2 : cic.Term univs.Type0 B) -> (x_1235 : cic.Term cic.prop (matita_arithmetics_lstar.lstar B _R l b b2)) -> (_x_1238 : cic.Term cic.prop (Q_ l b b2 x_123", "predict": " and $x_1234$ and $x_1232$ and $x_1231$ to elements of $cic.Univ$ of $cic.prop$ and $matita_arithmetics_lstar.lstar_S$ applied to $B$ and $_R$ and $x_1236$ and $x_1235$ and $x_1234$ and $x_1233$ and $x_1232$ and $x_1231$. Let $P$ be a function from elements $x_1237$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1238$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1239$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1240$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1241$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1242$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1243$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1244$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1245$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1246$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1247$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1248$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1249$ of $cic.Term$ of $univs.Type0$ and $B$ and elements $x_1250$ of $cic.Term$ of $univs.Type0"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_n_Sn. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $matita_arithmetics_nat.S$ applied to $n$.\nassistant\n", "label": "axiom le_n_Sn (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_arithmetics_nat.le n (matita_arithmetics_nat.S n))", "predict": "Output: Axiom Le_n_Sn : forall (n : univs.Type0.cic.Term), (matita_arithmetics_nat.nat) (cic.prop) (matita_arithmetics_nat.le n (matita_arithmetics_nat.S n))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nVoid_rect_CProp2. Pour toutes les fonctions $Q_$ des éléments $_x_492$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.void$ à des éléments de $cic.Univ$ de $cic.prop$, pour tous les éléments $x_492$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.void$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_492$.\nassistant\n", "label": "axiom void_rect_CProp2 (Q_ : (_x_492 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ cic.prop) (x_492 : cic.Term univs.Type0 matita_basics_types.void) : cic.Term cic.prop (Q_ x_492)", "predict": "Void_rect_CProp2 : forall Q : forall x492 : cic.Term univs.Type0 matita_basics_types.void, cic.Univ cic.prop, Q x492."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_rect_CProp1_body. Let $_A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all functions $Q_$ from elements $_x_630$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$ to elements of $cic.Univ$ of $cic.prop$, for all elements $_H_None$ of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.None$ applied to $_A$, for all functions $_H_Some$ from elements $x_631$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.Some$ applied to $_A$ and $x_631$, for all elements $x_630$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.option$ applied to $_A$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_630$.\nassistant\n", "label": "axiom option_rect_CProp1_body (_A : cic.Univ univs.Type0) (Q_ : (_x_630 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop) (_H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A))) (_H_Some : (x_631 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_631))) (x_630 : cic.Term univs.Type0 (matita_basics_types.option _A)) : cic.Term cic.prop (Q_ x_630)", "predict": "Output: Option_rect_CProp1_body : (A : Univ) -> (Q : (x : Term) -> (A -> Univ) -> prop) -> (H_None : (x : Term) -> prop) -> (H_Some : (x : Term) -> (x' : Term) -> (A -> Term) -> (A -> prop) -> prop) -> (x : Term) -> (matita_basics_types.option A -> Univ) -> Term -> prop -> Prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTo_max. Let $i$ and $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $i$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $m$ and $i$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.le$ applied to $matita_arithmetics_nat.max$ applied to $n$ and $m$ and $i$.\nassistant\n", "label": "Axiom to_max : forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.le n i), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.le m i), cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.max n m) i) .", "predict": "To_max : forall (i : cic.Term univs.Type0) (n : matita_arithmetics_nat.nat) (m : matita_arithmetics_nat.nat), forall (p : cic.Term cic.prop) (le_n_i : matita_arithmetics_nat.le n i), forall (p1 : cic.Term cic.prop) (le_m_i : matita_arithmetics_nat.le m i), cic.Term p (matita_arithmetics_nat.le (matita_arithmetics_nat.max n m) i)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nPermut_mod. Pour tous les éléments $p$ et $a$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.prime$ appliqué à $p$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $matita_arithmetics_primes.divides$ appliqué à $p$ et $a$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_permutation.permut$ appliqué à la fonction qui envoie $n$ à $matita_arithmetics_div_and_mod.mod$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $n$ et $p$ et $matita_arithmetics_nat.pred$ appliqué à $p$.\nassistant\n", "label": "permut_mod : p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_primes.prime p) -> __1 : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides p a)) -> cic.Term cic.prop (matita_arithmetics_permutation.permut (n : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_arithmetics_div_and_mod.mod (matita_arithmetics_nat.times a n) p) (matita_arithmetics_nat.pred p)) .", "predict": "Output: Axiom Permut_mod : forall (p : cic.Term univs.Type0) (a : cic.Term univs.Type0) (p_prime : prime p) (not_divides : Not (divides p a)), forall (n : cic.Term univs.Type0), prop (permut (fun n => mod (nat.times a n) p (pred p)) n)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nStreicherK. Soit $T$ un élément de $cic.Univ$ de $univs.Type2$. Alors pour tous les éléments $t$ de $cic.Term$ de $univs.Type2$ et de $T$, pour toutes les fonctions $P$ des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $T$ et $t$ et $t$ à des éléments de $cic.Univ$ de $univs.Type2$, pour tous les éléments $__$ de $cic.Term$ de $univs.Type2$ et de $P$ appliqué à $matita_basics_logic.refl$ appliqué à $T$ et $t$, pour tous les éléments $p$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $T$ et $t$ et $t$, $cic.Term$ tient pour $univs.Type2$ et $P$ appliqué à $p$.\nassistant\n", "label": "axiom streicherK (T : cic.Univ univs.Type2) (t : cic.Term univs.Type2 T) (P : (__ : cic.Term cic.prop (matita_basics_logic.eq T t t)) -> cic.Univ univs.Type2) (__ : cic.Term univs.Type2 (P (matita_basics_logic.refl T t))) (p : cic.Term cic.prop (matita_basics_logic.eq T t t)) : cic.Term univs.Type2 (P p)", "predict": "Axiom StreicherK : forall (T : cic.Univ) (univs.Type2), forall (t : cic.Term) (univs.Type2) (T), forall (P : (__) -> cic.prop -> matita_basics_logic.eq (univs.Type2) T t) (T) (t), forall (__) (univs.Type2) (P (matita_basics_logic.refl T t)), forall (p : cic.Term) (cic.prop) (matita_basics_logic.eq (univs.Type2) T t t) (univs.Type2) (P p)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_rect_CProp5_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Then for all functions $Q_$ from elements $_x_905$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_ACop$ from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$, for all elements $x_905$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_905$.\nassistant\n", "label": "ACop_rect_CProp5_body : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_905 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Univ cic.prop) -> _H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil) -> _comm : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) -> x_905 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> cic.Term cic.prop (Q_ x_905) .", "predict": "Axiom ACop_rect_CProp5_body : forall A : univers.Type0, _nil : term.Type0, A, (forall Q_x905 : term.Type0 -> ACop (A _nil) -> univers.Type0 -> prop, (forall aop : term.Type0, Aop (A _nil) -> (forall a b : term.Type0, A -> prop -> eq (lift (univers.Type0 univers.Type2) A (op (A _nil) aop a b (op (A _nil) aop b a)) (op (A _nil) aop aop))) -> Q_x905 (mk_ACop A _nil aop comm))), forall x905 : term.Type0, ACop (A _nil) -> term.Type0 -> prop -> prop -> x905."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEx2_ind_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_P$ and $_Q$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_274$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex2$ applied to $A$ and $_P$ and $_Q$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_ex2_intro$ be a function from elements $x$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $x_276$ of $cic.Term$ of $cic.prop$ and $_P$ applied to $x$ and elements $x_275$ of $cic.Term$ of $cic.prop$ and $_Q$ applied to $x$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_logic.ex2_intro$ applied to $A$ and $_P$ and $_Q$ and $x$ and $x_276$ and $x_275$. Then for all elements $x_274$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex2$ applied to $A$ and $_P$ and $_Q$, $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_274$.\nassistant\n", "label": "ex2_ind_body : A : cic.Univ univs.Type0 -> _P : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> _Q : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) -> Q_ : (_x_274 : cic.Term cic.prop (matita_basics_logic.ex2 A _P _Q) -> cic.Univ cic.prop) -> _H_ex2_intro : (x : cic.Term univs.Type0 A -> x_276 : cic.Term cic.prop (_P x) -> x_275 : cic.Term cic.prop (_Q x) -> cic.Term cic.prop (Q_ (matita_basics_logic.ex2_intro A _P _Q x x_276 x_275))) -> x_274 : cic.Term cic.prop (matita_basics_logic.ex2 A _P _Q) -> cic.Term cic.prop (Q_ x_274) .", "predict": "Output: Axiom prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExists_All. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $P$ och $Q$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $cic.prop$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.Exists$ applicerat på $A$ och $P$ och $l$. Då för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.All$ applicerat på $A$ och $Q$ och $l$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.ex$ applicerat på $A$ och funktionen som avbildar $x$ som $matita_basics_logic.And$ applicerat på $P$ applicerat på $x$ och $Q$ applicerat på $x$.\nassistant\n", "label": "postulate Exists_All : (A : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.Exists A P l)) -> (__1 : cic.Term cic.prop (matita_basics_lists_list.All A Q l)) -> cic.Term cic.prop (matita_basics_logic.ex A (\\ x : cic.Term univs.Type0 A -> matita_basics_logic.And (P x) (Q x)))", "predict": "postulate Exists_All : {univs : Universe} -> (A : univs.Type0) -> (P Q : (x : cic.Term univs.Type0 A) -> Universe) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (x : cic.Term univs.Type0 (matita_basics_lists_list.Exists A P l)) -> ((x1 : cic.Term univs.Type0 (cic.prop)) -> (x2 : cic.Term univs.Type0 (matita_basics_lists_list.All A Q l))) -> (cic.Term univs.Type0 (cic.prop) (matita_basics_logic.ex A (fun x => matita_basics_logic.And (P x) (Q x))))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_Type3_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_867$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type3$. Let $_H_mk_Aop$ be a function from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop", "label": "postulate Aop_rect_Type3_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_867 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ univs.Type3) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type3 (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_867 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Term univs.Type3 (Q_ x_867)", "predict": "$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type3$ and $A$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and $op$ applied to $op$ applied to $op$ applied to $a$ and $b$ and $c$ and $op$ applied to $op$ applied to $op$ applied to $a$ and $b$ and $c$ and $op$ applied to $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_assocr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type3$ and $A$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and $op$ applied to $op$ applied to $op$ applied to $a$ and $b$ and $c$ and $op$ applied to $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.Term$ of $univs.Type0$ and $A$. We assume that $Q_$ is well-defined, $Q_$ is a function from elements $_x_867$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Univ$ of $univs.Type3$, $Q_$ is a function from elements $_x_867$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd. Soient $s1$ et $s2$ des éléments de $Sort$. Soit $a$ un élément de $Univ$ de $s1$. Soit $b$ une fonction des éléments de $Term$ de $s1$ et de $a$ à des éléments de $Univ$ de $s2$. Alors $Univ$ tient pour $rule$ appliqué à $s1$ et $s2$.\nassistant\n", "label": "axiom prod (s1 s2 : Sort) (a : Univ s1) (b : Term s1 a -> Univ s2) : Univ (rule s1 s2)", "predict": "Output: \nAxiom Prod : forall (s1 s2 : Sort), exists (a : Univ s1), forall (b : Term s1 -> Univ s1 s2), Univ rule s1 s2."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nP_ord_aux_Strue. Pour tous les éléments $n$ et $m$ et $p$ et $q$ et $r$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.O$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Prod$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_ord.p_ord_aux$ appliqué à $p$ et $matita_arithmetics_div_and_mod.div$ appliqué à $n$ et $m$ et $m$ et $matita_basics_types.mk_Prod$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.nat$ et $q$ et $r$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.Prod$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_ord.p_ord_aux$ appliqué à $matita_arithmetics_nat.S$ appliqué à $p$ et $n$ et $m$ et $matita_basics_types.mk_Prod$ appliqué à $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $q$ et $r$.\nassistant\n", "label": "axiom p_ord_aux_Strue (n m p q r : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod n m) matita_arithmetics_nat.O)) (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord_aux p (matita_arithmetics_div_and_mod.div n m) m) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat q r))) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord_aux (matita_arithmetics_nat.S p) n m) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat (matita_arithmetics_nat.S q) r))", "predict": "Axiom P_ord_aux_Strue : forall (n m p q r : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__) : cic.prop matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_div_and_mod.mod n m matita_arithmetics_nat.O)) (forall (__)1 : cic.Term univs.Type0 matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat (matita_arithmetics_ord.p_ord_aux p (matita_arithmetics_div_and_mod.div n m m) (matita_arithmetics_nat.S p) n m matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat q r)), cic.Term cic.prop matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat (matita_arithmetics_ord.p_ord_aux (matita_arithmetics_nat.S p) n m (matita_arithmetics_nat.S q) m matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat r))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDivides_inv_ind. Let $x1$ and $x2$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $Hterm$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z2006$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $q$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $x_1193$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x2$ and $matita_arithmetics_nat.times$ applied to $x1$ and $q$ and elements $_z2007$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_arithmetics_primes.divides$ applied to $x1$ and $x2$ and $Hterm$ and $matita_arithmetics_primes.quotient$ applied to $x1$ and $x2$ and $q$ and $x_1193$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_arithmetics_primes.quotient$ applied to $x1$ and $x2$ and $q$ and $x_1193$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "axiom divides_inv_ind (x1 x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) (Hterm : cic.Term cic.prop (matita_arithmetics_primes.divides x1 x2)) (P : (_z2006 : cic.Term cic.prop (matita_arithmetics_primes.divides x1 x2)) -> cic.Univ cic.prop) (_H1 : (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_1193 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2 (matita_arithmetics_nat.times x1 q))) -> (_z2007 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_arithmetics_primes.divides x1 x2)) Hterm (matita_arithmetics_primes.quotient x1 x2 q x_1193))) -> cic.Term cic.prop (P (matita_arithmetics_primes.quotient x1 x2 q x_1193))) : cic.Term cic.prop (P Hterm)", "predict": "Output: Axiom divides_inv_ind : forall x1 : Term univs Type0, x2 : nat, (Hterm : Term prop), (divides x1 x2), (P : (q : Type0 nat) -> (x_1193 : prop eq (lift univs.Type0 univs.Type2 nat x2 (times x1 q))), (H1 : (z2006 : Term prop) (z2007 : Term prop), (quotient x1 x2 q x_1193), P (quotient x1 x2 q x_1193)), x1."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_inv_rect_Type2. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z1518$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type2$. Låt $_H1$ vara en funktion från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x", "label": "Axiom Aop_inv_rect_Type2 : forall x1 : cic.Univ univs.Type0, forall x2 : cic.Term univs.Type0 x1, forall Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2), forall P : ((_z1518 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2)) -> cic.Univ univs.Type2), forall _H1 : ((op : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_nill : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> (_nilr : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> (_assoc : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> (_z1519 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type2 (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))), cic.Term univs.Type2 (P Hterm) .", "predict": "1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$ till element av $cic.Univ$ av $univs.Type2$.\nOutput: \nAop_inv_rect_Type2: forall (univs: Type) (x1: univs.Univ) (x2: univs.Term x1) (Hterm: univs.Term x1 matita_arithmetics_bigops.Aop x2) (P: (forall (z1: univs.Term x1 matita_arithmetics_bigops.Aop x2) -> univs.Univ univs.Type2)) (H1: (forall (op: (forall ($: univs.Term x1) -> univs.Term x1) (nill: (forall (a: univs.Term x1) -> univs.Term x1)) -> univs.Term x1) -> (forall (a: univs.Term x1) -> univs.prop univs.Type0 univs.Type2 x1 op a -> univs.eq (cic.lift univs.Type0 univs.Type2 x1) (cic.lift univs.Type0 univs.Type2 x1) (op x2 a a) -> univs.Univ univs.Type2))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLog_times1. Låt $p$ och $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Då för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_log.log$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_log.log$ applicerat på $p$ och $n$ och $matita_arithmetics_log.log$ applicerat på $p$ och $m$.\nassistant\n", "label": "Axiom log_times1 : forall p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall __2 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_log.log p (matita_arithmetics_nat.times n m)) (matita_arithmetics_nat.S (matita_arithmetics_nat.plus (matita_arithmetics_log.log p n) (matita_arithmetics_log.log p m)))) .", "predict": "Axiom log_times1 : forall (p : cic.Term univs.Type0) (n : matita_arithmetics_nat.nat) (m : matita_arithmetics_nat.nat), (p, matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.O)) p) -> (n, matita_arithmetics_nat.lt (matita_arithmetics_nat.O) n) -> (m, matita_arithmetics_nat.lt (matita_arithmetics_nat.O) m) -> (matita_arithmetics_log.log p, matita_arithmetics_nat.le (matita_arithmetics_log.log (matita_arithmetics_nat.times n m)) (matita_arithmetics_nat.S (matita_arithmetics_nat.plus (matita_arithmetics_log.log p n) (matita_arithmetics_log.log p m))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSameF_p_le. För alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $p$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, för alla funktioner $f$ och $g$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $A$, för alla element $n$ och $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $n$ och $m$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_bigops.sameF_p$ applicerat på $m$ och $p$ och $A$ och $f$ och $g$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_bigops.sameF_p$ applicerat på $n$ och $p$ och $A$ och $f$ och $g$.\nassistant\n", "label": "postulate sameF_p_le : (A : cic.Univ univs.Type0) -> (p : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 A) -> (g : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 A) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le n m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_bigops.sameF_p m p A f g)) -> cic.Term cic.prop (matita_arithmetics_bigops.sameF_p n p A f g)", "predict": "postulate SameF_p_le : \n  {A : cic.Univ}\n  {univs : Type0}\n  {p : Term univs.Type0 matita_arithmetics_nat.nat -> Term univs.Type0 matita_basics_bool.bool}\n  {f g : Term univs.Type0 matita_arithmetics_nat.nat -> Term univs.Type0}\n  {n m : Term univs.Type0 matita_arithmetics_nat.nat}\n  {F : Term univs.Type0}\n  {le : le n m}\n  {sameF_p : sameF_p n m p A f g}\n  -> sameF_p n p A f g"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nChecker. Let $__$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.list$ applied to $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $univs.Type0$ and $matita_basics_bool.bool$.\nassistant\n", "label": "postulate checker : (__ : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) -> cic.Term univs.Type0 matita_basics_bool.bool", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTimes_mod. Soient $a$ et $b$ et $c$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $c$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $b$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $c$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $c$ et $matita_arithmetics_nat.times$ appliqué à $c$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $a$ et $b$.\nassistant\n", "label": "Axiom times_mod : forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall c : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O c), forall __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O b), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod (matita_arithmetics_nat.times a c) (matita_arithmetics_nat.times b c)) (matita_arithmetics_nat.times c (matita_arithmetics_div_and_mod.mod a b))) .", "predict": "Axiom Times_mod : forall (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__) : (matita_arithmetics_nat.lt matita_arithmetics_nat.O c) -> forall (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__)1 : (matita_arithmetics_nat.lt matita_arithmetics_nat.O b) -> cic.Term (cic.prop matita_arithmetics_nat.lt) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_div_and_mod.mod (matita_arithmetics_nat.times a c) (matita_arithmetics_nat.times b c) (matita_arithmetics_nat.times c (matita_arithmetics_div_and_mod.mod a b)))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_hd. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $_l$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $A$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_types.option$ applicerat på $A$.\nassistant\n", "label": "postulate option_hd : (A : cic.Univ univs.Type0) -> (_l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> cic.Term univs.Type0 (matita_basics_types.option A)", "predict": "postulate Option_hd : {univs : Universe} -> (A : univs.Type0) -> (l : matita_basics_lists_list.list A) -> (term : cic.Term univs.Type0) -> (option : A -> matita_basics_types.option) -> True"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTrue_rect_CProp4. Soit $Q_$ une fonction des éléments $_x_54$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_I$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_logic.I$. Soit $x_54$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.True$. Alors $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_54$.\nassistant\n", "label": "True_rect_CProp4 : Q_ : (_x_54 : cic.Term cic.prop matita_basics_logic.True -> cic.Univ cic.prop) -> _H_I : cic.Term cic.prop (Q_ matita_basics_logic.I) -> x_54 : cic.Term cic.prop matita_basics_logic.True -> cic.Term cic.prop (Q_ x_54) .", "predict": "Output: Axiom True_rect_CProp4 : forall (Q : forall (x_54 : Term prop), True -> Univ prop), (forall (H_I : Term prop), Q H_I (I : True)) -> forall (x_54 : Term prop), Q x_54 True."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_inv_rect_CProp0. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $x1$ och $x2$. Då för alla funktioner $P$ från element $_z1758$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x1$ och $x2$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $prod$ applicerat på $a$", "label": "postulate Dop_inv_rect_CProp0 : (x1 : cic.Univ univs.Type0) -> (x2 : cic.Term univs.Type0 x1) -> (Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> (P : (_z1758 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop x1 x2)) -> cic.Univ cic.prop) -> (_H1 : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x1 x2)) -> (prod : (__ : cic.Term univs.Type0 x1) -> (__1 : cic.Term univs.Type0 x1) -> cic.Term univs.Type0 x1) -> (_null : (a : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a x2) x2)) -> (_distr : (a : cic.Term univs.Type0 x1) -> (b : cic.Term univs.Type0 x1) -> (c : cic.Term univs.Type0 x1) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (prod a (matita_arithmetics_bigops.aop__o__op x1 x2 sum b c)) (matita_arithmetics_bigops.aop__o__op x1 x2 sum (prod a b) (prod a c)))) -> (_z1759 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Dop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term cic.prop (P (matita_arithmetics_bigops.mk_Dop x1 x2 sum prod _null _distr))) -> cic.Term cic.prop (P Hterm)", "predict": " och $x1$ och $null$ applicerat på $a$ och $x1$ och $x2$ och $H1$ och $Hterm$ och $P$ och $x1$ och $x2$, har vi att $P$ är lika med $prod$ applicerat på $a$ och $x1$ och $null$ applicerat på $a$ och $x1$ och $x2$ och $H1$ och $Hterm$ och $P$ och $x1$ och $x2$. \n\nOutput: \npostulate Dop_inv_rect_CProp0 : {univs : Type} -> {x1 : cic.Univ} -> {x2 : cic.Term} -> {Hterm : cic.Term} -> (P : (z1758 : cic.Term) -> (matita_arithmetics_bigops.Dop x1 x2) -> cic.Univ -> cic.prop) -> (H1 : sum (cic.Term) (matita_arithmetics_bigops.ACop x1 x2)) -> (prod : ((__) : cic.Term) -> (x1 : cic.Term) -> ((__)1 : cic.Term) -> cic.Term) -> (null : (a : cic.Term) -> (x1 : cic.Term) -> cic.Term) -> (eq : matita_basics_logic.eq) -> (cic.lift univs.Type0 univs.Type2) -> (x1 : cic.Term) -> (x2 : cic.Term) -> (prod (a : cic.Term) x1 null a x1 x2 H1 Hterm P x1 x2) = P a x1 (null a x1 x2) H1 Hterm P x1 x2."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nPad_bigop_nil. Let $k$ and $n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all functions $p$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all elements $B$ of $cic.Univ$ of $univs.Type0$, for all elements $nil$ of $cic.Term$ of $univs.Type0$ and $B$, for all elements $op$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $B$ and $nil$, for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $B$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $k$, for all functions $__1$ from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $i$ and elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $k$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool", "label": "Axiom pad_bigop_nil : forall k : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall p : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall B : cic.Univ univs.Type0, forall nil : cic.Term univs.Type0 B, forall op : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop B nil), forall f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 B), forall __ : cic.Term cic.prop (matita_arithmetics_nat.le n k), forall __1 : ((i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le n i)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt i k)) -> cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p i) matita_basics_bool.false) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (f i) nil))), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) (matita_arithmetics_bigops.bigop n (fun i => p i) B nil (matita_arithmetics_bigops.op B nil op) (fun i => f i)) (matita_arithmetics_bigops.bigop k (fun i => p i) B nil (matita_arithmetics_bigops.op B nil op) (fun i => f i))) .", "predict": "$ and $f$ applied to $i$ and $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p$ applied to $i$ and $f$ applied to $i$ and $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p$ applied to $i$ and $f$ applied to $i$ and $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p$ applied to $i$ and $f$ applied to $i$ and $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p$ applied to $i$ and $f$ applied to $i$ and $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p$ applied to $i$ and $f$ applied to $i$ and $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p$ applied to $i$ and $f$ applied to $i$ and $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p$ applied to $i$ and $f$ applied to $i$ and $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p$ applied to $i$ and $f$ applied to $i$ and $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p$ applied to $i$ and $f$ applied to $i$ and $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p$ applied to $i$ and $f$ applied to $i$ and $"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_rect_CProp0_body. För alla element $A$ av $cic.Univ$ av $univs.Type2$, för alla element $_x$ av $cic.Term$ av $univs.Type2$ och $A$, för alla funktioner $Q_$ från element $x_37$ av $cic.Term$ av $univs.Type2$ och $A$ och element $_x_38$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_37$ till element av $cic.Univ$ av $cic.prop$, för alla element $_H_refl$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $_x$ och $matita_basics_logic.refl$ applicerat på $A$ och $_x$, för alla element $x_37$ av $cic.Term$ av $univs.Type2$ och $A$, för alla element $x_38$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_37$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_37$ och $x_38$.\nassistant\n", "label": "postulate eq_rect_CProp0_body : (A : cic.Univ univs.Type2) -> (_x : cic.Term univs.Type2 A) -> (Q_ : (x_37 : cic.Term univs.Type2 A) -> (_x_38 : cic.Term cic.prop (matita_basics_logic.eq A _x x_37)) -> cic.Univ cic.prop) -> (_H_refl : cic.Term cic.prop (Q_ _x (matita_basics_logic.refl A _x))) -> (x_37 : cic.Term univs.Type2 A) -> (x_38 : cic.Term cic.prop (matita_basics_logic.eq A _x x_37)) -> cic.Term cic.prop (Q_ x_37 x_38)", "predict": "postulate Eq_rect_CProp0_body : (A : cic.Univ) -> (x : cic.Term A) -> (Q : (x37 : cic.Term A) -> (x38 : cic.Term (cic.prop)) -> (matita_basics_logic.eq A x x37) -> (cic.Term A)) -> (x38 : cic.Term (cic.prop)) -> (H_refl : cic.Term (cic.prop)) -> (Q x H_refl) -> (x37 : cic.Term A) -> (x38 : cic.Term (cic.prop)) -> (matita_basics_logic.eq A x x37) -> (cic.Term A)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBc2. For all elements $n$ and $k$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $k$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_factorial.fact$ applied to $k$ and $matita_arithmetics_factorial.fact$ applied to $matita_arithmetics_nat.minus$ applied to $n$ and $k$ and $matita_arithmetics_factorial.fact$ applied to $n$.\nassistant\n", "label": "bc2 : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> k : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.le k n) -> cic.Term cic.prop (matita_arithmetics_primes.divides (matita_arithmetics_nat.times (matita_arithmetics_factorial.fact k) (matita_arithmetics_factorial.fact (matita_arithmetics_nat.minus n k))) (matita_arithmetics_factorial.fact n)) .", "predict": "Axiom Bc2 : forall (n k : cic.Term univs.Type0) (___ : cic.Term cic.prop matita_arithmetics_nat.le k n), cic.Term cic.prop (matita_arithmetics_primes.divides (matita_arithmetics_nat.times (matita_arithmetics_factorial.fact k) (matita_arithmetics_factorial.fact (matita_arithmetics_nat.minus n k))) (matita_arithmetics_factorial.fact n))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDiv_mod_spec_rect_Type1. For all elements $_n$ and $_m$ and $_q$ and $_r$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all functions $Q_$ from elements $_x_829$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$ to elements of $cic.Univ$ of $univs.Type1$, for all functions $_H_div_mod_spec_intro$ from elements $x_831$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $_r$ and $_m$ and elements $x_830$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $_n$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $_q$ and $_m$ and $_r$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applied to $_n$ and $_m$ and $_q$ and $_r$ and $x_831$ and $x_830$, for all elements $x_829$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $_n$ and $_m$ and $_q$ and $_r$, $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_829$.\nassistant\n", "label": "div_mod_spec_rect_Type1 : _n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _q : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _r : cic.Term univs.Type0 matita_arithmetics_nat.nat -> Q_ : (_x_829 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r) -> cic.Univ univs.Type1) -> _H_div_mod_spec_intro : (x_831 : cic.Term cic.prop (matita_arithmetics_nat.lt _r _m) -> x_830 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _n (matita_arithmetics_nat.plus (matita_arithmetics_nat.times _q _m) _r)) -> cic.Term univs.Type1 (Q_ (matita_arithmetics_div_and_mod.div_mod_spec_intro _n _m _q _r x_831 x_830))) -> x_829 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec _n _m _q _r) -> cic.Term univs.Type1 (Q_ x_829) .", "predict": "Output: \npostulate Div_mod_spec_rect_Type1 : \n  {n m q r : cic.Term univs.Type0}\n  {Q_ : (x_829 : cic.Term cic.prop) -> (matita_arithmetics_div_and_mod.div_mod_spec n m q r) -> \n   (x_829 : cic.Term univs.Type1) -> \n   (x_831 : cic.Term cic.prop) -> (x_830 : cic.Term cic.prop) -> \n   (matita_arithmetics_nat.lt r m) -> (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n) (matita_arithmetics_nat.plus (matita_arithmetics_nat.times q m) r)) -> \n   (Q_ x_829) -> \n   (matita_arithmetics_div_and_mod.div_mod_spec_intro n m q r x_831 x_830) -> \n   (x_829 : cic.Term cic.prop) -> \n   (matita_arithmetics_div_and_mod.div_mod_spec n m q r) -> \n   (x_829 : cic.Term univs.Type1) -> \n   (Q_ x_829) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_Type3_body. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_nil$ un élément de $cic.Term$ de $univs.Type0$ et de $A$. Soit $Q_$ une fonction des éléments $_x_787$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.Aop$ appliqué à $A$ et $_nil$ à des éléments de $cic.Univ$ de $univs.Type3$. Alors pour toutes les fonctions $_H_mk_Aop$ des fonctions $op$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $_nill$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $_nil$ et $a$ et $a$ et des fonctions $_nilr$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $A$ et $op$ appliqué à $a$ et $_nil$ et $a$ et des fonctions $_assoc$ des éléments $a$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $b$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $c$ de $cic", "label": "axiom Aop_rect_Type3_body (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_787 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ univs.Type3) (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type3 (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) (x_787 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) : cic.Term univs.Type3 (Q_ x_787)", "predict": ".Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$ et des fonctions $assoc$ des éléments $x$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $y$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Term$ de $univs.Type0$ et de $A$, la fonction $_assoc$ appliquée à $op$ appliqué à $_H_mk_Aop$ appliquée à $x$ et $y$ et $z$ et $assoc$ appliquée à $x$ et $y$ et $z$ est égale à $op$ appliqué à $assoc$ appliquée à $x$ et $y$ et $z$ et $_H_mk_Aop$ appliquée à $op$ appliqué à $x$ et $y$ et $z$.\n\nOutput: \nAxiom Aop_rect_Type3_body : forall (A : cic.Univ) (_nil : A) (Q_ : (forall (_x_787 : cic.Term), matita_basics_lists_list.Aop A _nil) -> (forall (op : (forall (__) : cic.Term, A -> A), (forall (__)_1 : cic.Term, A), (forall (a : cic.Term), A) -> (forall (__)_nill : (forall (a : cic.Term), A), (cic.prop -> matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2) A) (op _nil a a)) -> (forall (__)_nilr : (forall (a : cic.Term), A), (cic.prop -> matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2) A) (op a _nil a)) -> (forall (a : cic.Term), A -> (cic.prop -> matita_basics_logic.eq (cic.lift (univs.Type0) (univs.Type2) A) (op a _nil a))) -> ("}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nUnit_rect_Type0_body. Låt $Q_$ vara en funktion från element $_x_507$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$ till element av $cic.Univ$ av $univs.Type0$. Då för alla element $_H_it$ av $cic.Term$ av $univs.Type0$ och $Q_$ applicerat på $matita_basics_types.it$, för alla element $x_507$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.unit$, håller $cic.Term$ för $univs.Type0$ och $Q_$ applicerat på $x_507$.\nassistant\n", "label": "unit_rect_Type0_body : Q_ : (_x_507 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Univ univs.Type0) -> _H_it : cic.Term univs.Type0 (Q_ matita_basics_types.it) -> x_507 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Term univs.Type0 (Q_ x_507) .", "predict": "Axiom example3 : odd 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nB1. Pour tous les éléments $_n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $univs.Type0$ et $matita_arithmetics_nat.nat$.\nassistant\n", "label": "axiom B1 (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term univs.Type0 matita_arithmetics_nat.nat", "predict": "Output: Axiom B1 : forall (n : cic.Term univs.Type0 matita_arithmetics_nat.nat), cic.Term univs.Type0 matita_arithmetics_nat.nat."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_inv_rect_Type1. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara ett element av $cic.Term$ av $univs.Type0$ och $x1$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$. Då för alla funktioner $P$ från element $_z1524$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Aop$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $univs.Type1$, för alla funktioner $_H1$ från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $univs.Type0$ och $x1$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Term$ av $cic.prop", "label": "Aop_inv_rect_Type1 : x1 : cic.Univ univs.Type0 -> x2 : cic.Term univs.Type0 x1 -> Hterm : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2) -> P : (_z1524 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop x1 x2) -> cic.Univ univs.Type1) -> _H1 : (op : (__ : cic.Term univs.Type0 x1 -> __1 : cic.Term univs.Type0 x1 -> cic.Term univs.Type0 x1) -> _nill : (a : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op x2 a) a)) -> _nilr : (a : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a x2) a)) -> _assoc : (a : cic.Term univs.Type0 x1 -> b : cic.Term univs.Type0 x1 -> c : cic.Term univs.Type0 x1 -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 x1) (op a (op b c)) (op (op a b) c))) -> _z1525 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_arithmetics_bigops.Aop x1 x2)) Hterm (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc)) -> cic.Term univs.Type1 (P (matita_arithmetics_bigops.mk_Aop x1 x2 op _nill _nilr _assoc))) -> cic.Term univs.Type1 (P Hterm) .", "predict": "$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $x1$ och $op$ applicerat på $x2$ och $a$ och $a$, har vi $P$ applicerat på $Hterm$ och $_H1$ och $_nill$ och $_nilr$ för alla element $a$ av $cic.Term$ av $univs.Type0$ och $x1$ och $x2$. \nOutput: \nAop_inv_rect_Type1: forall (x1 : univs.Type0) (x2 : cic.Term x1) (Hterm : cic.Term x1 x2) (P : (cic.Term x1 (matita_arithmetics_bigops.Aop x1 x2)) -> (cic.Univ (univs.Type1))) (H1 : forall (op : (cic.Term x1) -> (cic.Term x1)) (nill : (cic.Term x1)) (nilr : (cic.Term x1)) -> (P (matita_arithmetics_bigops.Aop x1 x2) op nill nilr)), (P Hterm H1 nill nilr) forall (a : cic.Term x1) (x1 : univs.Type0) (x2 : cic.Term x1)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLstar_inv_step. Soit $B$ un élément de $cic.Univ$ de $univs.Type0$. Soit $R$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation$ appliqué à $B$. Alors pour tous les éléments $b1$ et $b2$ de $cic.Term$ de $univs.Type0$ et de $B$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_lstar.lstar$ appliqué à $B$ et $R$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $b1$ et $b2$, $cic.Term$ tient pour $cic.prop$ et $R$ appliqué à $b1$ et $b2$.\nassistant\n", "label": "axiom lstar_inv_step (B : cic.Univ univs.Type0) (R : cic.Term univs.Type0 (matita_basics_relations.relation B)) (b1 b2 : cic.Term univs.Type0 B) (__ : cic.Term cic.prop (matita_arithmetics_lstar.lstar B R (matita_arithmetics_nat.S matita_arithmetics_nat.O) b1 b2)) : cic.Term cic.prop (R b1 b2)", "predict": "Axiom Lstar_inv_step : forall (B : cic.Univ -> univs.Type0), (R : cic.Term -> univs.Type0 -> matita_basics_relations.relation), (forall (b1 b2 : cic.Term -> univs.Type0 -> B), forall (_ : cic.Term -> cic.prop -> matita_arithmetics_lstar.lstar -> matita_arithmetics_nat.S -> b1 -> b2), cic.Term B R b1 b2) ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExists_All. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soient $P$ et $Q$ des fonctions des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $l$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $A$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.Exists$ appliqué à $A$ et $P$ et $l$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_lists_list.All$ appliqué à $A$ et $Q$ et $l$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.ex$ appliqué à $A$ et la fonction qui envoie $x$ à $matita_basics_logic.And$ appliqué à $P$ appliqué à $x$ et $Q$ appliqué à $x$.\nassistant\n", "label": "postulate Exists_All : (A : cic.Univ univs.Type0) -> (P : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (l : cic.Term univs.Type0 (matita_basics_lists_list.list A)) -> (__ : cic.Term cic.prop (matita_basics_lists_list.Exists A P l)) -> (__1 : cic.Term cic.prop (matita_basics_lists_list.All A Q l)) -> cic.Term cic.prop (matita_basics_logic.ex A (\\ x : cic.Term univs.Type0 A -> matita_basics_logic.And (P x) (Q x)))", "predict": "postulate Exists_All : (A : univs.Type0) -> (P Q : (x : A) -> univs.Type0) -> (l : matita_basics_lists_list.list A) -> (e : matita_basics_lists_list.Exists A P l) -> (a : matita_basics_lists_list.All A Q l) -> (cic.Term (matita_basics_logic.ex A (\\x -> matita_basics_logic.And (P x) (Q x))) e)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_10331. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $lt4n$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $m$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $le4m$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $m$. Soit $Hind$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_arithmetics_exp.exp$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $m$. Soit $a$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $lea$ un élément de $cic.Term$ de $cic.prop$ et de $", "label": "Axiom let_clause_10331 : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall lt4n : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))) n), forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall le4m : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))) m), forall Hind : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_exp.exp (matita_arithmetics_nat.S m) (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) m)), forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall lea : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S mat", "predict": "matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$. Soit $b$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $leb$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $b$. Soit $Hab$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $a$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $b$. \n\nOutput: Let Hind : le4m (leb (Hab a b)) (lea (Hind a)) in let_clause_10331. Let_clause_10331. Soit $n$ un élément de $cic"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNat_inv_rect_Type0. För alla element $Hterm$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, för alla funktioner $P$ från element $_z683$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Univ$ av $univs.Type0$, för alla funktioner $_H1$ från element $_z684$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $Hterm$ och $matita_arithmetics_nat.O$ till element av $cic.Term$ av $univs.Type0$ och $P$ applicerat på $matita_arithmetics_nat.O$, för alla funktioner $_H2$ från element $x_390$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $_x_392$ från element $_z684$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $Hterm$ och $x_390$ till element av $cic.Term$ av $univs.Type0$ och $P$ applicerat på $x_390$ och element $_z684$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $Hterm$ och $matita_arithmetics_nat.S$ applicerat på $x_390$ till element av $cic.Term$ av $univs.Type0$ och $P$ applicerat på $matita_arithmetics_nat.S$ applicerat på $x_390$, håller $cic.Term$ för $univs.Type0$ och $P$ applicerat på $Hterm", "label": "Axiom nat_inv_rect_Type0 : forall Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall P : ((_z683 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Univ univs.Type0), forall _H1 : ((_z684 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm matita_arithmetics_nat.O)) -> cic.Term univs.Type0 (P matita_arithmetics_nat.O)), forall _H2 : ((x_390 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_x_392 : (_z684 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm x_390)) -> cic.Term univs.Type0 (P x_390)) -> (_z684 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) Hterm (matita_arithmetics_nat.S x_390))) -> cic.Term univs.Type0 (P (matita_arithmetics_nat.S x_390))), cic.Term univs.Type0 (P Hterm) .", "predict": "$ och $_H1$ och $_H2$ fast.\n\nOutput: \n```coq\nParameter Hterm : Term Type0.\nParameter P : Term Type0 nat -> Univ Type0.\nParameter H1 : Prop Type0 Prop -> Logic.eq Type0 Prop (lift Type0 Type2 nat) Hterm O -> Term Type0.\nParameter H2 : Term Type0 nat -> (Term Type0 Prop -> Logic.eq Type0 Prop (lift Type0 Type2 nat) Hterm _) -> Term Type0 -> Term Type0 (nat S) -> Term Type0.\nLemma nat_inv_rect_Type0 : forall (x : nat), P Hterm (H1 _ _) (H2 _ _) x.\nProof.\n  (* Your proof goes here *)\nQed.\n```"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_inv_rect_CProp0. Let $x1$ be an element of $cic.Univ$ of $univs.Type0$. Let $x2$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $x1$ to elements of $cic.Univ$ of $univs.Type0$. Then for all elements $Hterm$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $x1$ and $x2$, for all functions $P$ from elements $_z1164$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.DPair$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $dpi1$ of $cic.Term$ of $univs.Type0$ and $x1$ and elements $_dpi2$ of $cic.Term$ of $univs.Type0$ and $x2$ applied to $dpi1$ and elements $_z1165$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.DPair$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_types.mk_DPair$ applied to $x1$ and $x2$ and $dpi1$ and $_dpi2$ to elements of $cic.Term$ of $cic.prop$ and $P$ applied to $matita_basics_types.mk_DPair$ applied to $x1$ and $x2$ and $dpi1$ and $_dpi2$, $cic.Term$ holds for $cic.prop$ and $P$ applied to $Hterm$.\nassistant\n", "label": "axiom DPair_inv_rect_CProp0 (x1 : cic.Univ univs.Type0) (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) (P : (_z1164 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ cic.prop) (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1165 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term cic.prop (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) : cic.Term cic.prop (P Hterm)", "predict": "postulate DPair_inv_rect_CProp0 : {univs : Type} -> {univs : Type} -> (x1 : Univ) -> (x2 : (x : Term) -> Univ) -> (Hterm : Term) -> (matita_basics_types.DPair x1 x2) -> (P : (z1164 : Term) -> matita_basics_types.DPair x1 x2 -> Univ -> Prop) -> (H1 : (dpi1 : Term) -> (x1 : Term) -> (dpi2 : Term) -> (z1165 : Term) -> (matita_basics_logic.eq (univs.Type0) (univs.Type2) (matita_basics_types.DPair x1 x2) Hterm) -> (matita_basics_types.mk_DPair x1 x2 dpi1 dpi2) -> (cic.Term) -> (P (matita_basics_types.mk_DPair x1 x2 dpi1 dpi2) (dpi1 x1) (dpi2 x2) z1165)) -> (cic.Term) -> (cic.prop) -> (P (matita_basics_types.mk_DPair x1 x2 H1) (H1 dpi1) (H1 dpi2) (matita_basics_logic.eq (cic.Term) (cic.prop) (cic.lift (univs.Type0) (univs.Type2) (matita_basics_types.DPair x1 x2) Hterm) (matita_basics_types.mk_DPair x1 x2 dpi1 dpi2))) -> (cic.Term) -> (cic.prop) -> (P (matita_basics_types.mk_DPair x1 x2 H1) (H1 dpi1) (H1 dpi2) (matita_basics_logic.eq (cic.Term) (cic.prop) (cic.lift (univs.Type0) (univs.Type2) (matita_basics_types.DPair x1 x2) Hterm) (matita_basics_types.mk_DPair x1 x2 dpi1 dpi2)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOrb_elim. För alla element $b1$ och $b2$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, för alla funktioner $P$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Univ$ av $cic.prop$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_basics_bool.match_bool$ applicerat på $cic.type$ applicerat på $cic.z$ och funktionen som avbildar $__$ som $cic.univ$ applicerat på $cic.prop$ och $P$ applicerat på $matita_basics_bool.true$ och $P$ applicerat på $b2$ och $b1$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $matita_basics_bool.orb$ applicerat på $b1$ och $b2$.\nassistant\n", "label": "postulate orb_elim : (b1 : cic.Term univs.Type0 matita_basics_bool.bool) -> (b2 : cic.Term univs.Type0 matita_basics_bool.bool) -> (P : (__ : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ cic.prop) -> (__ : cic.Term cic.prop (matita_basics_bool.match_bool (cic.type cic.z) (\\ __ : cic.Term univs.Type0 matita_basics_bool.bool -> cic.univ cic.prop) (P matita_basics_bool.true) (P b2) b1)) -> cic.Term cic.prop (P (matita_basics_bool.orb b1 b2))", "predict": "postulate orb_elim : (b1 : univs.Type0) -> (b2 : univs.Type0) -> (P : (__) -> (__) -> cic.prop) -> (__) -> (cic.univ -> P matita_basics_bool.true -> P b2 b1) -> P (matita_basics_bool.orb b1 b2) b1 b2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nVoid_rect_Type4_body. For all functions $Q_$ from elements $_x_483$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.void$ to elements of $cic.Univ$ of $univs.Type4$, for all elements $x_483$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.void$, $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_483$.\nassistant\n", "label": "postulate void_rect_Type4_body : (Q_ : (_x_483 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ univs.Type4) -> (x_483 : cic.Term univs.Type0 matita_basics_types.void) -> cic.Term univs.Type4 (Q_ x_483)", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1704. Let $m$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $posm$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$. Then for all elements $a$ and $x1029$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x1029$ and $matita_arithmetics_bigops.aop__o__op$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $matita_arithmetics_sigma_pi.plusAC$ and $x1029$ and $matita_arithmetics_nat.O$.\nassistant\n", "label": "let_clause_1704 : m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> x1029 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1029 (matita_arithmetics_bigops.aop__o__op matita_arithmetics_nat.nat matita_arithmetics_nat.O matita_arithmetics_sigma_pi.plusAC x1029 matita_arithmetics_nat.O)) .", "predict": "Output: \nAxiom let_clause_1704 : (m : Term univs.Type0 matita_arithmetics_nat.nat) -> (posm : Term cic.prop matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> (forall (a : Term univs.Type0 matita_arithmetics_nat.nat) (x1029 : Term univs.Type0 matita_arithmetics_nat.nat), (Term cic.prop) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat x1029 (matita_arithmetics_bigops.aop__o__op matita_arithmetics_nat.nat matita_arithmetics_nat.O (matita_arithmetics_sigma_pi.plusAC x1029 matita_arithmetics_nat.O))))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMonotonic_le_minus_r. Låt $p$ och $q$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $q$ och $p$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_nat.minus$ applicerat på $n$ och $p$ och $matita_arithmetics_nat.minus$ applicerat på $n$ och $q$.\nassistant\n", "label": "axiom monotonic_le_minus_r (p q n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.le q p)) : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.minus n p) (matita_arithmetics_nat.minus n q))", "predict": "postulate Monotonic_le_minus_r : (p q n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (le q p) -> (le (matita_arithmetics_nat.minus n p) (matita_arithmetics_nat.minus n q))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nUnit_inv_rect_Type1. Soit $Hterm$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$. Alors pour toutes les fonctions $P$ des éléments $_z930$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.unit$ à des éléments de $cic.Univ$ de $univs.Type1$, pour toutes les fonctions $_H1$ des éléments $_z931$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.unit$ et $Hterm$ et $matita_basics_types.it$ à des éléments de $cic.Term$ de $univs.Type1$ et de $P$ appliqué à $matita_basics_types.it$, $cic.Term$ tient pour $univs.Type1$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "axiom unit_inv_rect_Type1 (Hterm : cic.Term univs.Type0 matita_basics_types.unit) (P : (_z930 : cic.Term univs.Type0 matita_basics_types.unit) -> cic.Univ univs.Type1) (_H1 : (_z931 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm matita_basics_types.it)) -> cic.Term univs.Type1 (P matita_basics_types.it)) : cic.Term univs.Type1 (P Hterm)", "predict": "Axiom Unit_inv_rect_Type1 : forall (Hterm : cic.Term univs.Type0 matita_basics_types.unit) (P : forall (_z930 : cic.Term univs.Type0 matita_basics_types.unit), cic.Univ univs.Type1), (forall (_z931 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit Hterm matita_basics_types.it)) (P (matita_basics_types.it))), cic.Term univs.Type1 P Hterm) -> (cic.Term univs.Type1 P Hterm)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTimes_Sn_m. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.plus$ applied to $m$ and $matita_arithmetics_nat.times$ applied to $n$ and $m$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $n$ and $m$.\nassistant\n", "label": "axiom times_Sn_m (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.plus m (matita_arithmetics_nat.times n m)) (matita_arithmetics_nat.times (matita_arithmetics_nat.S n) m))", "predict": "Output: \nAxiom Times_Sn_m : forall (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat), cic.Term n m univs.Type0 univs.Type2 matita_arithmetics_nat.nat matita_arithmetics_nat.plus m (matita_arithmetics_nat.times n m (matita_arithmetics_nat.times (matita_arithmetics_nat.S n) m)) cic.prop matita_basics_logic.eq."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nUnit_rect_CProp2_body. Let $Q_$ be a function from elements $_x_515$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_it$ be an element of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_basics_types.it$. Let $x_515$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_types.unit$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_515$.\nassistant\n", "label": "unit_rect_CProp2_body : Q_ : (_x_515 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Univ cic.prop) -> _H_it : cic.Term cic.prop (Q_ matita_basics_types.it) -> x_515 : cic.Term univs.Type0 matita_basics_types.unit -> cic.Term cic.prop (Q_ x_515) .", "predict": "Output: \nAxiom prop80 : even 2 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBijn_transpose_l. Soit $f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soient $n$ et $i$ et $j$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $i$ et $n$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $j$ et $n$, pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_permutation.bijn$ appliqué à $f$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_permutation.bijn$ appliqué à la fonction qui envoie $p$ à $matita_arithmetics_permutation.transpose$ appliqué à $i$ et $j$ et $f$ appliqué à $p$ et $n$.\nassistant\n", "label": "postulate bijn_transpose_l : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le i n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.le j n)) -> (__2 : cic.Term cic.prop (matita_arithmetics_permutation.bijn f n)) -> cic.Term cic.prop (matita_arithmetics_permutation.bijn (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_permutation.transpose i j (f p)) n)", "predict": "postulate Bijn_transpose_l : (f : ∀ (x : cic.Term univs.Type0) (y : matita_arithmetics_nat.nat), cic.Term univs.Type0 (matita_arithmetics_nat.nat)) → (n i j : ∀ (x : cic.Term univs.Type0) (y : matita_arithmetics_nat.nat), cic.Term univs.Type0 (matita_arithmetics_nat.nat)) → (∀ (p : cic.prop) (le_i_n : matita_arithmetics_nat.le i n) (p1 : cic.prop) (le_j_n : matita_arithmetics_nat.le j n) (bij_f_n : ∀ (x : cic.Term univs.Type0) (y : matita_arithmetics_nat.nat), matita_arithmetics_permutation.bijn f n) (x' : cic.Term univs.Type0) (le_p_n : matita_arithmetics_nat.le p n) (x'' : cic.Term univs.Type0) (bij_f_n' : ∀ (x : cic.Term univs.Type0) (y : matita_arithmetics_nat.nat), matita_arithmetics_permutation.bijn (λ x y → f x y) n) → matita_arithmetics_permutation.bijn (λ x y → matita_arithmetics_permutation.transpose (λ x y → i y) (λ x y → j y) (λ x y → f x y) n) n ((λ x y → x y) p (λ x y → matita_arithmetics_permutation.transpose (λ x y → i y) (λ x y → j y) (λ x y → f x y) n) n)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTrue. $cic.Term$ holds for $univs.Type0$ and $matita_basics_bool.bool$.\nassistant\n", "label": "Axiom true : cic.Term univs.Type0 matita_basics_bool.bool .", "predict": "Axiom prop70 : odd 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_inv_ind. Låt $x1$ och $x2$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_Hterm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $x1$ och $x2$. Låt $P$ vara en funktion från element $_z724$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Univ$ av $cic.prop$. Låt $_H1$ vara en funktion från element $_z725$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $x2$ och $x1$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $x1$. Då för alla funktioner $_H2$ från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $_x_419$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $x1$ och $m$ och funktioner $_x_421$ från element $_z725$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $x2$ och $m$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $m$ och element $_z725$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $x2$ och $matita_arithmetics", "label": "le_inv_ind : x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _Hterm : cic.Term cic.prop (matita_arithmetics_nat.le x1 x2) -> P : (_z724 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Univ cic.prop) -> _H1 : (_z725 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2 x1) -> cic.Term cic.prop (P x1)) -> _H2 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _x_419 : cic.Term cic.prop (matita_arithmetics_nat.le x1 m) -> _x_421 : (_z725 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2 m) -> cic.Term cic.prop (P m)) -> _z725 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2 (matita_arithmetics_nat.S m)) -> cic.Term cic.prop (P (matita_arithmetics_nat.S m))) -> cic.Term cic.prop (P x2) .", "predict": "_nat.nat$ och $_x_419$ och $_x_421$, vi har att $P$ är en funktionsäkare för $_Hterm$ och $_H1$.\n\nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput:"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMod_cr_pair. Soient $m$ et $n$ et $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $a$ et $m$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $b$ et $n$, pour tous les éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.And$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $matita_arithmetics_chinese_reminder.cr_pair$ appliqué à $m$ et $n$ et $a$ et $b$ et $m$ et $a$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_div_and_mod.mod$ appliqué à $matita_arithmetics_chinese_reminder.cr_pair$ appliqué à $m$ et $n$ et $a$ et $b$ et $n$ et $b$.\nassistant\n", "label": "axiom mod_cr_pair (m n a b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt a m)) (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt b n)) (__2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) : cic.Term cic.prop (matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod (matita_arithmetics_chinese_reminder.cr_pair m n a b) m) a) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod (matita_arithmetics_chinese_reminder.cr_pair m n a b) n) b))", "predict": "Output: \nAxiom Mod_cr_pair : forall (m n : cic.Term univs.Type0) (a b : matita_arithmetics_nat.nat), forall (e : cic.Term cic.prop) (l_a : matita_arithmetics_nat.lt a m) (e1 : cic.Term cic.prop) (l_b : matita_arithmetics_nat.lt b n) (e2 : cic.Term cic.prop) (eq_univs_type0_type2 : matita_basics_logic.eq (cic.lift univs.Type0) (cic.lift univs.Type2)) (eq_nat : matita_basics_logic.eq (cic.lift univs.Type0) (cic.lift matita_arithmetics_nat.nat)) (gcd_n_m : matita_arithmetics_gcd.gcd n m) (S_O : matita_arithmetics_nat.S matita_arithmetics_nat.O), e /\\ l_a /\\ e1 /\\ l_b /\\ e2 /\\ (matita_arithmetics_div_and_mod.mod (matita_arithmetics_chinese_reminder.cr_pair m n a b m a) (matita_arithmetics_div_and_mod.mod (matita_arithmetics_chinese_reminder.cr_pair m n a b n) b))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_Sum. Let $_A$ and $_B$ be elements of $cic.Univ$ of $univs.Type0$. Let $return_sort$ be an element of $cic.Sort$. Then for all functions $return_type$ from elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $return_sort$, for all functions $case_inl$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_basics_types.inl$ applied to $_A$ and $_B$ and $__$, for all functions $case_inr$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $return_sort$ and $return_type$ applied to $matita_basics_types.inr$ applied to $_A$ and $_B$ and $__$, for all elements $z$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$, $cic.Term$ holds for $return_sort$ and $return_type$ applied to $z$.\nassistant\n", "label": "match_Sum : _A : cic.Univ univs.Type0 -> _B : cic.Univ univs.Type0 -> return_sort : cic.Sort -> return_type : (z : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) -> cic.Univ return_sort) -> case_inl : (__ : cic.Term univs.Type0 _A -> cic.Term return_sort (return_type (matita_basics_types.inl _A _B __))) -> case_inr : (__ : cic.Term univs.Type0 _B -> cic.Term return_sort (return_type (matita_basics_types.inr _A _B __))) -> z : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) -> cic.Term return_sort (return_type z) .", "predict": "Output: \nAxiom Match_Sum : forall (A : univers.Type0) (B : univers.Type0) (return_sort : univers.Sort) (return_type : univers.Term -> univers.Term -> return_sort) (case_inl : univers.Term -> A -> univers.Term -> return_sort) (case_inr : univers.Term -> univers.Term -> B -> return_sort) (z : univers.Term), return_sort = return_type (matita_basics_types.Sum A B) z."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_smallest_factor_to_not_divides. Let $n$ and $i$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$. Then for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $i$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $matita_arithmetics_primes.smallest_factor$ applied to $n$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_arithmetics_primes.divides$ applied to $i$ and $n$.\nassistant\n", "label": "postulate lt_smallest_factor_to_not_divides : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) i)) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt i (matita_arithmetics_primes.smallest_factor n))) -> cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides i n))", "predict": "postulate Lt_smallest_factor_to_not_divides : {n i : univs.Type0} -> matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n -> (forall {i1 i2 : cic.prop} -> matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) i -> matita_arithmetics_primes.smallest_factor n -> cic.Term) -> (forall {i1 i2 : cic.prop} -> matita_arithmetics_nat.lt i (matita_arithmetics_primes.smallest_factor n) -> cic.Term) -> matita_basics_logic.Not (matita_arithmetics_primes.divides i n)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAnd_rect_Type4. Let $_A$ and $_B$ be elements of $cic.Univ$ of $cic.prop$. Let $Q_$ be a function from elements $_x_122$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $univs.Type4$. Then for all functions $_H_conj$ from elements $x_124$ of $cic.Term$ of $cic.prop$ and $_A$ and elements $x_123$ of $cic.Term$ of $cic.prop$ and $_B$ to elements of $cic.Term$ of $univs.Type4$ and $Q_$ applied to $matita_basics_logic.conj$ applied to $_A$ and $_B$ and $x_124$ and $x_123$, for all elements $x_122$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $_A$ and $_B$, $cic.Term$ holds for $univs.Type4$ and $Q_$ applied to $x_122$.\nassistant\n", "label": "postulate And_rect_Type4 : (_A : cic.Univ cic.prop) -> (_B : cic.Univ cic.prop) -> (Q_ : (_x_122 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ univs.Type4) -> (_H_conj : (x_124 : cic.Term cic.prop _A) -> (x_123 : cic.Term cic.prop _B) -> cic.Term univs.Type4 (Q_ (matita_basics_logic.conj _A _B x_124 x_123))) -> (x_122 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Term univs.Type4 (Q_ x_122)", "predict": "postulate And_rect_Type4 : {A : Univ} {B : Univ} {Q_ : (x_122 : Term) -> And A B -> Univ -> Type4} -> (H_conj : (x_124 : Term) -> A -> (x_123 : Term) -> B -> Term -> Type4) -> (forall x_122 -> And A B -> Term -> Type4) -> (forall x_122 -> Q_ x_122 (And A B) x_122)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_CProp4_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $_nil$ of $cic.Term$ of $univs.Type0$ and $A$, for all functions $Q_$ from elements $_x_875$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$", "label": "axiom Aop_rect_CProp4_body (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_875 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ cic.prop) (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) (x_875 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) : cic.Term cic.prop (Q_ x_875)", "predict": " applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $b$ and $a$ and $a$ and functions $_id$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $a$ and $a$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $a$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and functions $_comm$ from elements $a$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nList_divides. För alla element $__$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $matita_arithmetics_nat.nat$, för alla element $__1$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$, håller $cic.Term$ för $univs.Type0$ och $matita_basics_bool.bool$.\nassistant\n", "label": "postulate list_divides : (__ : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat)) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool", "predict": "postulate List_divides : (cic.Term : univs.Type0) -> (matita_basics_lists_list.list : (cic.Term -> matita_arithmetics_nat.nat)) -> (cic.Term : univs.Type0) -> (matita_arithmetics_nat.nat) -> (cic.Term -> matita_basics_bool.bool)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_rect_CProp4_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_957$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_Dop$ vara en funktion från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $_nil$ och $_nil$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$", "label": "Dop_rect_CProp4_body : A : cic.Univ univs.Type0 -> _nil : cic.Term univs.Type0 A -> Q_ : (_x_957 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil) -> cic.Univ cic.prop) -> _H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil) -> prod : (__ : cic.Term univs.Type0 A -> __1 : cic.Term univs.Type0 A -> cic.Term univs.Type0 A) -> _null : (a : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> _distr : (a : cic.Term univs.Type0 A -> b : cic.Term univs.Type0 A -> c : cic.Term univs.Type0 A -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> x_957 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil) -> cic.Term cic.prop (Q_ x_957) .", "predict": " och $b$ och $c$ och $_nil$ och $_nil$ till element av $cic.Univ$ av $cic.prop$. Låt $_rec_Dop$ vara en funktion från element $_x_958$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$ genom induktion över $_x_958$ med hjälp av $_rec_Dop$. \n\nOutput: \nAxiom Dop_rect_CProp4_body : \\lambda A : univs.Type0 -> cic.Univ -> \\lambda _nil : cic.Term -> A -> \\lambda Q_ : (cic.Term -> univs.Type0 -> dop -> cic.Univ -> cic.prop) -> \\lambda _H_mk_Dop : (cic.Term -> ACop -> cic.Term -> A -> cic.Term -> A -> (cic.Term -> A -> cic.Term -> A) -> (cic.Term -> A -> cic.prop) -> eq -> cic.prop) -> \\lambda _rec_Dop : (cic.Term -> ACop -> cic.Term -> A -> cic.prop) -> (cic.Term -> univs.Type0 -> dop -> cic.prop) -> \\lambda sum : cic.Term -> ACop -> cic.Term -> A -> \\lambda prod : (cic.Term -> A) -> (cic.Term -> A) -> (cic.Term -> A -> cic.Term -> A) -> (cic.Term -> A -> cic.prop) -> eq -> cic.prop -> \\lambda _null : (cic.Term -> A -> cic.Term -> A) -> (cic.Term -> A -> cic.prop) -> eq -> cic.prop -> cic.prop -> (cic.Term -> A -> cic.prop) -> \\lambda _distr : (cic.Term -> A -> cic.Term -> A -> cic.Term -> A -> cic.Term -> A -> dop -> cic.prop) -> (cic.Term -> A -> cic.Term -> A -> cic.Term -> A -> cic.prop) -> eq -> cic.prop -> cic.prop -> cic.prop -> (cic.Term -> A -> cic.prop) -> cic.prop -> \\lambda _rec_Dop : (cic.Term -> ACop -> cic.Term -> A -> cic.prop) -> (cic.Term -> univs.Type0 ->"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDivides_to_div. Soient $n$ et $m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.divides$ appliqué à $n$ et $m$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_div_and_mod.div$ appliqué à $m$ et $n$ et $n$ et $m$.\nassistant\n", "label": "Axiom divides_to_div : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_primes.divides n m), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div m n) n) m) .", "predict": "Divides_to_div. Let n and m be elements of cic.Term of univs.Type0 and matita_arithmetics_nat.nat. Let __ be an element of cic.Term of cic.prop and matita_arithmetics_primes.divides applied to n and m. Then cic.Term holds for cic.prop and matita_basics_logic.eq applied to cic.lift applied to univs.Type0 and univs.Type2 and matita_arithmetics_nat.nat and matita_arithmetics_nat.times applied to matita_arithmetics_div_and_mod.div applied to m and n and n and m."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_15601. For all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $posn$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $m$, for all elements $eqn0$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $n$, for all elements $_clearme$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $matita_arithmetics_nat.O$ and $m$, for all elements $q$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $eqm$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $m$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.O$ and $q$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $matita_arithmetics_nat.O$.\nassistant\n", "label": "postulate let_clause_15601 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (eqn0 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) matita_arithmetics_nat.O n)) -> (_clearme : cic.Term cic.prop (matita_arithmetics_primes.divides matita_arithmetics_nat.O m)) -> (q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (eqm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times matita_arithmetics_nat.O q))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n matita_arithmetics_nat.O)", "predict": "postulate let_clause_15601 : \n  (∀ n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) →\n  (∀ posn : cic.Term univs.Type0 matita_arithmetics_nat.lt matita_arithmetics_nat.O m) →\n  (∀ eqn0 : cic.Term univs.Type0 matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat matita_arithmetics_nat.O n)) →\n  (∀ _clearme : cic.Term univs.Type0 matita_arithmetics_primes.divides matita_arithmetics_nat.O m) →\n  (∀ q : cic.Term univs.Type0 matita_arithmetics_nat.nat) →\n  (∀ eqm : cic.Term univs.Type0 matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat m (matita_arithmetics_nat.times matita_arithmetics_nat.O q))) →\n  (cic.Term holds for cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n matita_arithmetics_nat.O)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_plus_to_minus. Let $n$ and $m$ and $p$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $m$ and $n$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $n$ and $matita_arithmetics_nat.plus$ applied to $p$ and $m$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.minus$ applied to $n$ and $m$ and $p$.\nassistant\n", "label": "axiom lt_plus_to_minus (n m p : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.le m n)) (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt n (matita_arithmetics_nat.plus p m))) : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.minus n m) p)", "predict": "postulate Lt_plus_to_minus : (n m p : matita_arithmetics_nat.nat) -> (le m n) -> (lt n (plus p m)) -> (lt (minus n m) p)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOption_rect_CProp2. För alla element $_A$ av $cic.Univ$ av $univs.Type0$, för alla funktioner $Q_$ från element $_x_626$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$, för alla element $_H_None$ av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.None$ applicerat på $_A$, för alla funktioner $_H_Some$ från element $x_627$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_types.Some$ applicerat på $_A$ och $x_627$, för alla element $x_626$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.option$ applicerat på $_A$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_626$.\nassistant\n", "label": "postulate option_rect_CProp2 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_626 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Univ cic.prop) -> (_H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A))) -> (_H_Some : (x_627 : cic.Term univs.Type0 _A) -> cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_627))) -> (x_626 : cic.Term univs.Type0 (matita_basics_types.option _A)) -> cic.Term cic.prop (Q_ x_626)", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAnd_inv_rect_Type1. Let $x1$ and $x2$ be elements of $cic.Univ$ of $cic.prop$. Let $Hterm$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $x1$ and $x2$. Let $P$ be a function from elements $_z347$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.And$ applied to $x1$ and $x2$ to elements of $cic.Univ$ of $univs.Type1$. Let $_H1$ be a function from elements $x_140$ of $cic.Term$ of $cic.prop$ and $x1$ and elements $x_139$ of $cic.Term$ of $cic.prop$ and $x2$ and elements $_z348$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_basics_logic.And$ applied to $x1$ and $x2$ and $Hterm$ and $matita_basics_logic.conj$ applied to $x1$ and $x2$ and $x_140$ and $x_139$ to elements of $cic.Term$ of $univs.Type1$ and $P$ applied to $matita_basics_logic.conj$ applied to $x1$ and $x2$ and $x_140$ and $x_139$. Then $cic.Term$ holds for $univs.Type1$ and $P$ applied to $Hterm$.\nassistant\n", "label": "Axiom And_inv_rect_Type1 : forall x1 : cic.Univ cic.prop, forall x2 : cic.Univ cic.prop, forall Hterm : cic.Term cic.prop (matita_basics_logic.And x1 x2), forall P : ((_z347 : cic.Term cic.prop (matita_basics_logic.And x1 x2)) -> cic.Univ univs.Type1), forall _H1 : ((x_140 : cic.Term cic.prop x1) -> (x_139 : cic.Term cic.prop x2) -> (_z348 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.And x1 x2)) Hterm (matita_basics_logic.conj x1 x2 x_140 x_139))) -> cic.Term univs.Type1 (P (matita_basics_logic.conj x1 x2 x_140 x_139))), cic.Term univs.Type1 (P Hterm) .", "predict": "Axiom And_inv_rect_Type1 : \n  (x1 : Univ) -> (x2 : Univ) -> \n  (Hterm : Term) -> (And x1 x2) -> \n  (P : forall z347 : Term, And x1 x2 -> Univ) -> \n  (H1 : forall x140 : Term, x1 -> forall x139 : Term, x2 -> \n    (z348 : Term) -> eq (lift prop) (Type2) (And x1 x2) Hterm (conj x1 x2 x140 x139) -> \n    Term) -> \n  P Hterm."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nCongruent_times. Let $n$ and $m$ and $n1$ and $m1$ and $p$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $p$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_congruence.congruent$ applied to $n$ and $n1$ and $p$. Then for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_congruence.congruent$ applied to $m$ and $m1$ and $p$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_congruence.congruent$ applied to $matita_arithmetics_nat.times$ applied to $n$ and $m$ and $matita_arithmetics_nat.times$ applied to $n1$ and $m1$ and $p$.\nassistant\n", "label": "axiom congruent_times (n m n1 m1 p : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) (__1 : cic.Term cic.prop (matita_arithmetics_congruence.congruent n n1 p)) (__2 : cic.Term cic.prop (matita_arithmetics_congruence.congruent m m1 p)) : cic.Term cic.prop (matita_arithmetics_congruence.congruent (matita_arithmetics_nat.times n m) (matita_arithmetics_nat.times n1 m1) p)", "predict": "Output: \nAxiom Congruent_times : forall (n m n1 m1 p : cic.Term univs.Type0 matita_arithmetics_nat.nat), \n(matita_arithmetics_nat.lt matita_arithmetics_nat.O p) -> \n(matita_arithmetics_congruence.congruent n n1 p) -> \nforall (q r : cic.Term univs.Type0 matita_arithmetics_congruence.congruent), \n(matita_arithmetics_congruence.congruent m m1 p) -> \n(matita_arithmetics_congruence.congruent (matita_arithmetics_nat.times n m p) (matita_arithmetics_nat.times n1 m1 p) q r)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSig_rect_CProp0. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $Q_$ une fonction des éléments $_x_688$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $cic.prop$. Alors pour toutes les fonctions $_H_mk_Sig$ des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $_f$ appliqué à $pi1$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $A$ et $_f$ et $pi1$ et $_pi2$, pour tous les éléments $x_688$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_688$.\nassistant\n", "label": "postulate Sig_rect_CProp0 : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (Q_ : (_x_688 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ cic.prop) -> (_H_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (x_688 : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term cic.prop (Q_ x_688)", "predict": "postulate Sig_rect_CProp0 : \n  {A : Univ} -> \n  {f : forall _, A -> Univ} -> \n  {Q_ : forall _, Sig A f -> Univ -> prop} -> \n  (forall pi1 : Term, pi2 : prop -> Univ -> prop, \n   (forall x_688 : Term, Q_ (mk_Sig A f pi1 pi2) x_688)) -> \n  (forall x_688 : Term, Sig A f x_688 -> prop)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_rect_CProp4. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_929$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_mk_range$ vara en funktion från funktioner $_enum$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $_A$ och element $_upto$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $_filter$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_range$ applicerat på $_A$ och $_enum$ och $_upto$ och $_filter$. Låt $x_929$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$. Då håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_929$.\nassistant\n", "label": "range_rect_CProp4 : _A : cic.Univ univs.Type0 -> Q_ : (_x_929 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Univ cic.prop) -> _H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 _A) -> _upto : cic.Term univs.Type0 matita_arithmetics_nat.nat -> _filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> x_929 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A) -> cic.Term cic.prop (Q_ x_929) .", "predict": "Range_rect_CProp4 : univers : univs.Type0 -> (x : Term univs.Type0) -> (Q : (A : Term univs.Type0) -> matita_arithmetics_bigops.range A -> univ) -> (H_mk_range : (enum : (x : Term univs.Type0) -> nat -> Term univs.Type0) -> (upto : Term univs.Type0) -> (filter : (x : Term univs.Type0) -> nat -> Term univs.Type0) -> bool -> Q A) -> (x : Term univs.Type0) -> matita_arithmetics_bigops.range x -> (Q x (matita_arithmetics_bigops.mk_range A (enum x) (upto) (filter x))) -> prop"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nGcd_1_to_divides_times_to_divides. Let $p$ and $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $p$. Then for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $p$ and $n$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $n$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_primes.divides$ applied to $p$ and $m$.\nassistant\n", "label": "postulate gcd_1_to_divides_times_to_divides : (p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O p)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd p n) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (__2 : cic.Term cic.prop (matita_arithmetics_primes.divides p (matita_arithmetics_nat.times n m))) -> cic.Term cic.prop (matita_arithmetics_primes.divides p m)", "predict": "postulate gcd_1_to_divides_times_to_divides : \n  (p n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) \n  -> (___ : cic.Term cic.prop matita_arithmetics_nat.lt matita_arithmetics_nat.O p) \n  -> (___1 : cic.Term cic.prop matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_gcd.gcd p n (matita_arithmetics_nat.S matita_arithmetics_nat.O))) \n  -> (___2 : cic.Term cic.prop matita_arithmetics_primes.divides p (matita_arithmetics_nat.times n m)) \n  -> matita_arithmetics_primes.divides p m"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFilter_Or. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $cic.prop$. Alors pour tous les éléments $return_sort$ de $cic.Sort$, pour toutes les fonctions $return_type$ des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Or$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $return_sort$, pour toutes les fonctions $return$ des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Or$ appliqué à $_A$ et $_B$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $z$, pour tous les éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Or$ appliqué à $_A$ et $_B$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.\nassistant\n", "label": "Axiom filter_Or : forall _A : cic.Univ cic.prop, forall _B : cic.Univ cic.prop, forall return_sort : cic.Sort, forall return_type : ((z : cic.Term cic.prop (matita_basics_logic.Or _A _B)) -> cic.Univ return_sort), forall return : ((z : cic.Term cic.prop (matita_basics_logic.Or _A _B)) -> cic.Term return_sort (return_type z)), forall z : cic.Term cic.prop (matita_basics_logic.Or _A _B), cic.Term return_sort (return_type z) .", "predict": "Filter_Or : forall (A B : cic.Univ) (return_sort : cic.Sort) (return_type : forall z : cic.Term (cic.prop), matita_basics_logic.Or (A z) (B z) (return_sort z)) (return : forall z : cic.Term (cic.prop), matita_basics_logic.Or (A z) (B z) (return_type z)), forall z : cic.Term (cic.prop), matita_basics_logic.Or (A z) (B z) (return_sort z (return z))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_Type4. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Låt $Q_$ vara en funktion från element $_x_783$ av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.Aop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $univs.Type4$. Låt $_H_mk_Aop$ vara en funktion från funktioner $op$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nill$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $_nil$ och $a$ och $a$ och funktioner $_nilr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $op$ applicerat på $a$ och $_nil$ och $a$ och funktioner $_assoc$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A", "label": "axiom Aop_rect_Type4 (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_783 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ univs.Type4) (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type4 (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) (x_783 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) : cic.Term univs.Type4 (Q_ x_783)", "predict": "$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_nilr$ applicerat på $a$ och $b$ och $c$ och $assoc$ applicerat på $op$ applicerat på $a$ och $b$ och $c$ till element av $cic.Univ$ av $univs.Type4$. \n\nOutput: \n```\naxiom Aop_rect_Type4 : \n    (A : univs.univ cic.univ) \n    -> (nil : term.univ cic.univ A) \n    -> (Q : (x : term.univ cic.univ A) -> (Aop A nil : univ.univ cic.univ 4)) \n    -> (_H_mk_Aop : (op : (x : term.univ cic.univ A) -> (x1 : term.univ cic.univ A) -> term.univ cic.univ A) -> (a : term.univ cic.univ A) -> (prop.univ cic.prop) -> (eq.univ cic.prop.eq (lift.univ univs.Type0 univs.Type2 A (op a a)) (op a nil a)) -> (nilr : (a : term.univ cic.univ A) -> (prop.univ cic.prop) -> (eq.univ cic.prop.eq (lift.univ univs.Type0 univs.Type2 A a) (op a nil a))) -> (assoc : (a : term.univ cic.univ A) -> (b : term.univ cic.univ A) -> (c : term.univ cic.univ A) -> term.univ cic.univ A) -> (nilr : (a : term.univ cic.univ A) -> (b : term.univ cic.univ A) -> (c : term.univ cic.univ A) -> assoc a b c -> (nilr (assoc a b c) a b c)) -> (Aop_rect_Type4 A nil Q _H_mk_Aop op a (prop.univ cic.prop) (eq.univ cic.prop.eq (lift.univ univs.Type0 univs.Type2 A (op a a)) (op a nil a)) nilr (assoc a b c) nilr) : univ.univ cic.univ 4\n```\n\nPlease make sure that the output is exactly"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSum_rect_Type2_body. Låt $_A$ och $_B$ vara element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_541$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $univs.Type2$. Låt $_H_inl$ vara en funktion från element $x_542$ av $cic.Term$ av $univs.Type0$ och $_A$ till element av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_basics_types.inl$ applicerat på $_A$ och $_B$ och $x_542$. Låt $_H_inr$ vara en funktion från element $x_543$ av $cic.Term$ av $univs.Type0$ och $_B$ till element av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_basics_types.inr$ applicerat på $_A$ och $_B$ och $x_543$. Då för alla element $x_541$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sum$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $univs.Type2$ och $Q_$ applicerat på $x_541$.\nassistant\n", "label": "Axiom Sum_rect_Type2_body : forall _A : cic.Univ univs.Type0, forall _B : cic.Univ univs.Type0, forall Q_ : ((_x_541 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ univs.Type2), forall _H_inl : ((x_542 : cic.Term univs.Type0 _A) -> cic.Term univs.Type2 (Q_ (matita_basics_types.inl _A _B x_542))), forall _H_inr : ((x_543 : cic.Term univs.Type0 _B) -> cic.Term univs.Type2 (Q_ (matita_basics_types.inr _A _B x_543))), forall x_541 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B), cic.Term univs.Type2 (Q_ x_541) .", "predict": "Axiom Sum_rect_Type2_body : forall (A : univ.Type0) (B : univ.Type0), (cic.Term A) -> (matita_basics_types.Sum A B) -> (univ.Type2) -> (cic.Term A) -> (Q_ (matita_basics_types.inl A B _)) -> (cic.Term A) -> (Q_ (matita_basics_types.inr A B _)) -> (forall (x_541 : cic.Term A), (Q_ x_541) -> (Q_ (matita_basics_types.Sum A B x_541)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFilter_void. Låt $return_sort$ vara ett element av $cic.Sort$. Då för alla funktioner $return_type$ från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.void$ till element av $cic.Univ$ av $return_sort$, för alla funktioner $return$ från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.void$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $z$, för alla element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.void$, håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.\nassistant\n", "label": "postulate filter_void : (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 matita_basics_types.void) -> cic.Univ return_sort) -> (return : (z : cic.Term univs.Type0 matita_basics_types.void) -> cic.Term return_sort (return_type z)) -> (z : cic.Term univs.Type0 matita_basics_types.void) -> cic.Term return_sort (return_type z)", "predict": "postulate filter_void : (z : univs.Type0) -> matita_basics_types.void -> cic.Sort -> cic.Univ"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nACop_rect_CProp4. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_903$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_ACop$ be a function from elements $aop$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ and functions $_comm$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $a$ and $b$ and $matita_arithmetics_bigops.op$ applied to $A$ and $_nil$ and $aop$ and $b$ and $a$ to elements of $cic.Term$ of $cic.prop$ and $Q_$ applied to $matita_arithmetics_bigops.mk_ACop$ applied to $A$ and $_nil$ and $aop$ and $_comm$. Let $x_903$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$. Then $cic.Term$ holds for $cic.prop$ and $Q_$ applied to $x_903$.\nassistant\n", "label": "axiom ACop_rect_CProp4 (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_903 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> cic.Univ cic.prop) (_H_mk_ACop : (aop : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> (_comm : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_arithmetics_bigops.op A _nil aop a b) (matita_arithmetics_bigops.op A _nil aop b a))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_ACop A _nil aop _comm))) (x_903 : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) : cic.Term cic.prop (Q_ x_903)", "predict": "ACop_rect_CProp4: \nvariable A : cic.Univ (univs.Type0) \nvariable _nil : cic.Term (univs.Type0) A \nvariable Q_ : (forall x : cic.Term (univs.Type0), matita_arithmetics_bigops.ACop A _nil) -> cic.prop \nvariable _H_mk_ACop : (forall aop : cic.Term (univs.Type0), matita_arithmetics_bigops.Aop A _nil) -> (forall a b : cic.Term (univs.Type0), A) -> (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A (matita_arithmetics_bigops.op A _nil aop a b (matita_arithmetics_bigops.op A _nil aop b a)))) -> cic.prop \nvariable x_903 : (matita_arithmetics_bigops.ACop A _nil) (cic.Term (univs.Type0)) \n(cic.Term (cic.prop) (Q_ x_903))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_max_spec. Låt $_n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$. Låt $return_sort$ vara ett element av $cic.Sort$. Låt $return_type$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $z$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_minimization.max_spec$ applicerat på $_n$ och $_f$ och $__$ till element av $cic.Univ$ av $return_sort$. Låt $case_found_max_spec$ vara en funktion från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $_n$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och $_f$ applicerat på $m$ och $matita_basics_bool.true$ och funktioner $__2$ från element $i$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $i$ och element $__3$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $i$ och $_n$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_bool.bool$ och", "label": "Axiom match_max_spec : forall _n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall return_sort : cic.Sort, forall return_type : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (z : cic.Term cic.prop (matita_arithmetics_minimization.max_spec _n _f __)) -> cic.Univ return_sort), forall case_found_max_spec : ((m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt m _n)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f m) matita_basics_bool.true)) -> (__2 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt m i)) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.lt i _n)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f i) matita_basics_bool.false)) -> cic.Term return_sort (return_type m (", "predict": " $_f$ applicerat på $i$ och $matita_basics_bool.false$ . Låt $proof_of_max_spec$ vara en proposition som är en funktion från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $z$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_minimization.max_spec$ till element av $cic.Sort$ av $return_sort$ . Låt $max_spec_proof$ vara en proposition som är en funktion från element $z$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_minimization.max_spec$ till element av $cic.Sort$ av $return_sort$ . Låt $max_spec_result$ vara en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är en proposition som är"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEnum_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Then for all elements $_xxx$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.range$ applied to $A$, for all elements $_x_942$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $univs.Type0$ and $A$.\nassistant\n", "label": "axiom enum_body (A : cic.Univ univs.Type0) (_xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.range A)) (_x_942 : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term univs.Type0 A", "predict": "Output: postulate Enum_body : (A : cic.Univ univs.Type0) -> (forall (_xxx : cic.Term univs.Type0 (matita_arithmetics_bigops.range A)) -> (forall (_x_942 : cic.Term univs.Type0 (matita_arithmetics_nat.nat)) -> cic.Term univs.Type0 A))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFalse_rect_Type1. Pour toutes les fonctions $Q_$ des éléments $_x_71$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$ à des éléments de $cic.Univ$ de $univs.Type1$, pour tous les éléments $x_71$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$, $cic.Term$ tient pour $univs.Type1$ et $Q_$ appliqué à $x_71$.\nassistant\n", "label": "Axiom False_rect_Type1 : forall Q_ : ((_x_71 : cic.Term cic.prop matita_basics_logic.False) -> cic.Univ univs.Type1), forall x_71 : cic.Term cic.prop matita_basics_logic.False, cic.Term univs.Type1 (Q_ x_71) .", "predict": "False_rect_Type1. For all functions Q_ of elements x_71 of cic.Term of cic.prop and of matita_basics_logic.False to elements of univs.Type1, for all elements x_71 of cic.Term of cic.prop and of matita_basics_logic.False, cic.Term holds for univs.Type1 and Q_ applied to x_71."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_sqrt_n. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_sqrt.sqrt$ applied to $n$ and $n$.\nassistant\n", "label": "Axiom lt_sqrt_n : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) n), cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_sqrt.sqrt n) n) .", "predict": "Lt_sqrt_n : forall (n : matita_arithmetics_nat.nat), (matita_arithmetics_nat.lt (matita_arithmetics_sqrt.sqrt n) n)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExp_body. Låt $__$ och $__1$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då håller $cic.Term$ för $univs.Type0$ och $matita_arithmetics_nat.nat$.\nassistant\n", "label": "postulate exp_body : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_CProp2. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_801$ of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$. Then for all functions $_H_mk_Aop$ from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $un", "label": "axiom Aop_rect_CProp2 (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_801 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) -> cic.Univ cic.prop) (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.mk_Aop A _nil op _nill _nilr _assoc))) (x_801 : cic.Term univs.Type0 (matita_basics_lists_list.Aop A _nil)) : cic.Term cic.prop (Q_ x_801)", "predict": "ivs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and $op$ applied to $op$ applied to $op$ applied to $a$ and $b$ and $c$ to elements of $cic.prop$ of $cic.prop$ of $cic.prop$.\n\nOutput: \nAop_rect_CProp2 : \n  ∀ (A : cic.Univ) (Q_ : (λ (x : cic.Term) → Aop (A nil) x) → cic.Univ → cic.prop) (H_mk_Aop : (λ (op : (λ (x : cic.Term) → A) → (λ (x : cic.Term) → A) → cic.Term → (λ (op : (λ (x : cic.Term) → A) → (λ (x : cic.Term) → A) → cic.Term → cic.Term))) (λ (op : (λ (x : cic.Term) → A) → (λ (x : cic.Term) → A) → cic.Term → cic.Term) → (λ (op : (λ (x : cic.Term) → A) → (λ (x : cic.Term) → A) → cic.Term → cic.Term) → (λ (op : (λ (x : cic.Term) → A) → (λ (x : cic.Term) → A) → cic.Term → cic.Term) → (λ (op : (λ (x : cic.Term) → A) → (λ (x : cic.Term) → A) → cic.Term → cic.Term) → (λ (op : (λ (x : cic.Term) → A) → (λ (x : cic.Term) → A) → cic.Term → cic.Term) → (λ (op : (λ (x : cic.Term) → A) → (λ (x : cic.Term) → A) → cic.Term → cic.Term) → (λ (op : (λ (x : cic.Term) → A) → (λ (x : cic.Term) → A) → cic.Term → cic.Term) → (λ (op : (λ (x : cic.Term) → A) → (λ (x : cic.Term) → A) → cic.Term → cic.Term) → (λ (op : (λ (x : cic.Term) → A"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_min_spec. Soient $_n$ et $_b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ à des éléments de $cic.Term$ de $univs.Type0$ et de $matita_basics_bool.bool$. Soit $return_sort$ un élément de $cic.Sort$. Soit $return_type$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $z$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_minimization.min_spec$ appliqué à $_n$ et $_b$ et $_f$ et $__$ à des éléments de $cic.Univ$ de $return_sort$. Soit $case_found_min_spec$ une fonction des éléments $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $_b$ et $m$ et des éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $m$ et $matita_arithmetics_nat.plus$ appliqué à $_n$ et $_b$ et des éléments $__2$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_bool.bool$ et $_f$ appliqué à $m$ et $matita_basics_bool.true$ et des fonctions $__3$ des éléments $i$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $__3$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $_b$ et $i$ et des éléments $__4$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $i", "label": "axiom match_min_spec (_n _b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) (return_sort : cic.Sort) (return_type : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (z : cic.Term cic.prop (matita_arithmetics_minimization.min_spec _n _b _f __)) -> cic.Univ return_sort) (case_found_min_spec : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.le _b m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt m (matita_arithmetics_nat.plus _n _b))) -> (__2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (_f m) matita_basics_bool.true)) -> (__3 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.le _b i)) -> (__4 : cic.Term cic.prop (matita_arithmetics_nat.lt i m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type", "predict": "$ et $matita_arithmetics_nat.plus$ appliqué à $_n$ et $_b$ et des fonctions $case_found_min_spec$ appliquées à $_n$ et $_b$ et $_f$ et $m$ et $matita_arithmetics_minimization.min_spec$ appliqué à $_n$ et $_b$ et $_f$ et $m$ et $return_sort$ et $return_type$ appliquées à $_n$ et $_b$ et $_f$ et $m$ et $z$ et $case_found_min_spec$ appliquées à $_n$ et $_b$ et $_f$ et $m$ et $z$ et $return_sort$ et $return_type$ appliquées à $_n$ et $_b$ et $_f$ et $m$ et $z$ et $return_sort$ et $return_type$ appliquées à $_n$ et $_b$ et $_f$ et $m$ et $z$ et $return_sort$ et $return_type$ appliquées à $_n$ et $_b$ et $_f$ et $m$ et $z$ et $return_sort$ et $return_type$ appliquées à $_n$ et $_b$ et $_f$ et $m$ et $z$ et $return_sort$ et $return_type$ appliquées à $_n$ et $_b$ et $_f$ et $m$ et $z$ et $return_sort$ et $return_type$ appliquées à $_n$ et $_b$ et $_f$ et $m$ et $z$ et $return_sort$ et $return_type$ appliquées à $_n$ et $_b$ et $_f$ et $m$ et $z$ et $return_sort$ et $return_type$ appliquées à $_n$ et $_b$ et $_f$ et $m$ et $z$ et $return_sort$ et $return_type$ appliquées à $_n$ et $_b$ et $_f$ et $m$ et $z$ et $return_sort$ et $return_type$ appliquées à $_n$ et $_b$ et $_f$ et $m$ et $z$ et $return_sort$ et $return_type$ appliquées à $_n$ et $_b$ et $_f$ et $m$ et $z$ et $return_sort$ et"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_10471. Let $n1$ and $n2$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p1$ and $p2$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $B$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $B$. Let $op$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $B$ and $nil$. Let $f1$ and $f2$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $B$. Let $_clearme$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_bigops.iso$ applied to $B$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f1$ and $n1$ and $p1$ and $matita_arithmetics_bigops.mk_range$ applied to $B$ and $f2$ and $n2$ and $p2$. Let $h$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $_clearme0$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.ex$ applied to $cic.prod$ applied to $un", "label": "let_clause_10471 : n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n2 : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> p2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> B : cic.Univ univs.Type0 -> nil : cic.Term univs.Type0 B -> op : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop B nil) -> f1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 B) -> f2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 B) -> _clearme : cic.Term cic.prop (matita_arithmetics_bigops.iso B (matita_arithmetics_bigops.mk_range B f1 n1 p1) (matita_arithmetics_bigops.mk_range B f2 n2 p2)) -> h : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> _clearme0 : cic.Term cic.prop (matita_basics_logic.ex (cic.prod univs.Type0 univs.Type0 matita_arithmetics_nat.nat (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat => matita_arithmetics_nat.nat)) (k : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 mat", "predict": "ivs.Type0$ and $matita_basics_bool.bool$ and $h$ and $op$ and $_clearme$ and $B$.\nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \nOutput: \n"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBool_rect_CProp3_body. Låt $Q_$ vara en funktion från element $_x_353$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Univ$ av $cic.prop$. Låt $_H_true$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_bool.true$. Låt $_H_false$ vara ett element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_bool.false$. Då för alla element $x_353$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_353$.\nassistant\n", "label": "bool_rect_CProp3_body : Q_ : (_x_353 : cic.Term univs.Type0 matita_basics_bool.bool -> cic.Univ cic.prop) -> _H_true : cic.Term cic.prop (Q_ matita_basics_bool.true) -> _H_false : cic.Term cic.prop (Q_ matita_basics_bool.false) -> x_353 : cic.Term univs.Type0 matita_basics_bool.bool -> cic.Term cic.prop (Q_ x_353) .", "predict": "Axiom Bool_rect_CProp3_body : \n  forall (Q : forall (x_353 : Term univs.Type0) (b : bool), prop), \n  (forall (H_true : prop), Q true H_true) -> \n  (forall (H_false : prop), Q false H_false) -> \n  forall (x_353 : Term univs.Type0), \n  (forall (b : bool), prop) -> prop."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_1686. Låt $n$ och $m$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Hind$ vara en funktion från element $p$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $p$ och $m$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$ till element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_arithmetics_chebyshev_chebyshev_psi.Psi$ applicerat på $p$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.pred$ applicerat på $p$ och $matita_arithmetics_exp.exp$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $p$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $a$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $un", "label": "Axiom let_clause_1686 : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall Hind : ((p : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt p m)) -> (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_chebyshev_psi.Psi p) (matita_arithmetics_nat.times (matita_arithmetics_nat.pred p) (matita_arithmetics_exp.exp (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) p) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)))))))), forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme : cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m (matita_arithmetics_nat.times (matita", "predict": "ivs.Type0$ och $a$ och $matita_basics_logic.eq$ applicerat på $matita_arithmetics_nat.pred$ applicerat på $a$ och $a$ och $matita_basics_logic.eq$ applicerat på $matita_arithmetics_nat.S$ applicerat på $a$ och $a$. Låt $p$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $q$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $r$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $s$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $t$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $u$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $v$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $w$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $x$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $y$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $z$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $Hind$ vara en funktion från element $p$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRcomp. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_R1$ och $_R2$ vara element av $cic.Term$ av $univs.Type0$ och $matita_basics_relations.relation$ applicerat på $A$. Låt $_a1$ och $_a2$ vara element av $cic.Term$ av $univs.Type0$ och $A$. Då håller $cic.Univ$ för $cic.prop$.\nassistant\n", "label": "axiom Rcomp (A : cic.Univ univs.Type0) (_R1 _R2 : cic.Term univs.Type0 (matita_basics_relations.relation A)) (_a1 _a2 : cic.Term univs.Type0 A) : cic.Univ cic.prop", "predict": "Output: \naxiom rcomp : \n  (a : univs.univ) -> \n  (r1 r2 : univs.term a) -> \n  (a1 a2 : univs.term a) -> \n  (prop : cic.univ cic.prop)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFilter_DPair. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_f$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Univ$ av $univs.Type0$. Låt $return_sort$ vara ett element av $cic.Sort$. Låt $return_type$ vara en funktion från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$ till element av $cic.Univ$ av $return_sort$. Då för alla funktioner $return$ från element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$ till element av $cic.Term$ av $return_sort$ och $return_type$ applicerat på $z$, för alla element $z$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $A$ och $_f$, håller $cic.Term$ för $return_sort$ och $return_type$ applicerat på $z$.\nassistant\n", "label": "filter_DPair : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) -> return_sort : cic.Sort -> return_type : (z : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Univ return_sort) -> return : (z : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Term return_sort (return_type z)) -> z : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Term return_sort (return_type z) .", "predict": "Output: Axiom Filter_DPair : forall (univs : Type0), (univ : Univ), (f : Term -> univ), (return_sort : Sort), (return_type : (z : Term) -> DPair univ f z -> univ) -> (return : (z : Term) -> DPair univ f z -> Term) -> (return_sort : Sort), (return_type : (z : Term) -> DPair univ f z -> univ) -> (forall (z : Term) -> DPair univ f z -> cic.Term) -> (forall (z : Term) -> DPair univ f z -> univ) -> (forall (z : Term) -> DPair univ f z -> cic.Term) -> (forall (z : Term) -> DPair univ f z -> univ) -> (forall (z : Term) -> DPair univ f z -> cic.Term) -> (forall (z : Term) -> DPair univ f z -> univ) -> (forall (z : Term) -> DPair univ f z -> cic.Term) -> (forall (z : Term) -> DPair univ f z -> univ) -> (forall (z : Term) -> DPair univ f z -> cic.Term) -> (forall (z : Term) -> DPair univ f z -> univ) -> (forall (z : Term) -> DPair univ f z -> cic.Term) -> (forall (z : Term) -> DPair univ f z -> univ) -> (forall (z : Term) -> DPair univ f z -> cic.Term) -> (forall (z : Term) -> DPair univ f z -> univ) -> (forall (z : Term) -> DPair univ f z -> cic.Term) -> (forall (z : Term) -> DPair univ f z -> univ) -> (forall (z : Term) -> DPair univ f z -> cic.Term) -> (forall (z : Term) -> DPair univ f z -> univ) -> (forall (z : Term) -> DPair univ f z -> cic.Term) -> (forall (z : Term) -> DPair univ f z -> univ) -> (forall (z : Term) -> DPair univ f z -> cic.Term) -> (forall (z : Term) ->"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_sigma_p. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p1$ and $p2$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $g1$ and $g2$ be functions from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be a function from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p1$ applied to $i$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $p2$ applied to $i$ and $matita_basics_bool.true$. Let $__1$ be a function from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n$ and elements $__2$ of $cic.Term$", "label": "lt_sigma_p : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> p1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> p2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> g1 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> g2 : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_arithmetics_nat.nat) -> __ : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt i n) -> __1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p2 i) matita_basics_bool.true)) -> __1 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt i n) -> __2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (p1 i) matita_basics_bool.true) -> cic.Term cic.prop (matita_arith", "predict": " of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $g1$ applied to $i$ and $matita_basics_bool.true$ to elements of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $n$ and elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $g2$ applied to $i$ and $matita_basics_bool.true$. Let $p3$ be a function from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $j$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $k$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $l$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $o$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $p$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $q$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $r$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $s$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $t$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNilr_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $xxx$ be an element of $cic.Term$ of $univs.Type0$ and $matita_basics_lists_list.Aop$ applied to $A$ and $nil$. Let $a$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $matita_basics_lists_list.op$ applied to $A$ and $nil$ and $xxx$ and $a$ and $nil$ and $a$.\nassistant\n", "label": "postulate nilr_body : (A : cic.Univ univs.Type0) -> (nil : cic.Term univs.Type0 A) -> (xxx : cic.Term univs.Type0 (matita_basics_lists_list.Aop A nil)) -> (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (matita_basics_lists_list.op A nil xxx a nil) a)", "predict": "postulate Nilr_body : {A : cic.Univ} {univs : Type} -> (A : univs.Type0) -> (nil : cic.Term) -> (A : univs.Type0) -> (xxx : cic.Term) -> (A : univs.Type0) -> (matita_basics_lists_list.Aop A nil : univs.Type0) -> (a : cic.Term) -> (A : univs.Type0) -> (cic.Term) -> (cic.prop) -> (matita_basics_logic.eq (univs.Type0) (univs.Type2) A (matita_basics_lists_list.op A nil xxx a nil a))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_list. Pour tous les éléments $_A$ de $cic.Univ$ de $univs.Type0$, pour tous les éléments $return_sort$ de $cic.Sort$, pour toutes les fonctions $return_type$ des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Univ$ de $return_sort$, pour tous les éléments $case_nil$ de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_basics_lists_list.nil$ appliqué à $_A$, pour toutes les fonctions $case_cons$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $__1$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_basics_lists_list.cons$ appliqué à $_A$ et $__$ et $__1$, pour tous les éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.\nassistant\n", "label": "axiom match_list (_A : cic.Univ univs.Type0) (return_sort : cic.Sort) (return_type : (z : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ return_sort) (case_nil : cic.Term return_sort (return_type (matita_basics_lists_list.nil _A))) (case_cons : (__ : cic.Term univs.Type0 _A) -> (__1 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Term return_sort (return_type (matita_basics_lists_list.cons _A __ __1))) (z : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) : cic.Term return_sort (return_type z)", "predict": "Output: \nAxiom Match_list : forall A : cic.Univ -> univs.Type0, forall return_sort : cic.Sort, forall z : cic.Term -> univs.Type0 -> matita_basics_lists_list.list A -> return_sort -> return_type, forall case_nil : return_sort -> return_type (matita_basics_lists_list.nil A), forall case_cons : forall __ : cic.Term -> univs.Type0 -> A -> forall __1 : cic.Term -> univs.Type0 -> matita_basics_lists_list.list A -> return_sort -> return_type (matita_basics_lists_list.cons A __ __1), forall z : cic.Term -> univs.Type0 -> matita_basics_lists_list.list A, z = return_sort (return_type z)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNot_inv_rect_Type3. Soit $x1$ un élément de $cic.Univ$ de $cic.prop$. Alors pour tous les éléments $Hterm$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $x1$, pour toutes les fonctions $P$ des éléments $_z269$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $x1$ à des éléments de $cic.Univ$ de $univs.Type3$, pour toutes les fonctions $_H1$ des fonctions $x_89$ des éléments $__$ de $cic.Term$ de $cic.prop$ et de $x1$ à des éléments de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.False$ et des éléments $_z270$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $cic.prop$ et $univs.Type2$ et $matita_basics_logic.Not$ appliqué à $x1$ et $Hterm$ et $matita_basics_logic.nmk$ appliqué à $x1$ et $x_89$ à des éléments de $cic.Term$ de $univs.Type3$ et de $P$ appliqué à $matita_basics_logic.nmk$ appliqué à $x1$ et $x_89$, $cic.Term$ tient pour $univs.Type3$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "axiom Not_inv_rect_Type3 (x1 : cic.Univ cic.prop) (Hterm : cic.Term cic.prop (matita_basics_logic.Not x1)) (P : (_z269 : cic.Term cic.prop (matita_basics_logic.Not x1)) -> cic.Univ univs.Type3) (_H1 : (x_89 : (__ : cic.Term cic.prop x1) -> cic.Term cic.prop matita_basics_logic.False) -> (_z270 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_basics_logic.Not x1)) Hterm (matita_basics_logic.nmk x1 x_89))) -> cic.Term univs.Type3 (P (matita_basics_logic.nmk x1 x_89))) : cic.Term univs.Type3 (P Hterm)", "predict": "Not_inv_rect_Type3 : ∀ (x1 : cic.Univ) (Hterm : cic.Term (cic.prop) (matita_basics_logic.Not x1)) (P : (λ _z269 : cic.Term (cic.prop) (matita_basics_logic.Not x1)) → univs.Type3) (H1 : ∀ (x_89 : cic.Term (cic.prop) x1) → cic.Term (cic.prop) (matita_basics_logic.False) × (λ _z270 : cic.Term (cic.prop) (matita_basics_logic.eq (cic.lift (cic.prop) univs.Type2) (matita_basics_logic.Not x1) Hterm (matita_basics_logic.nmk x1 x_89))) → univs.Type3) → cic.Term (cic.prop) (matita_basics_logic.nmk x1 (λ x_89 : cic.Term (cic.prop) x1 → cic.Term (cic.prop) (matita_basics_logic.False) × (λ _z270 : cic.Term (cic.prop) (matita_basics_logic.eq (cic.lift (cic.prop) univs.Type2) (matita_basics_logic.Not x1) Hterm (matita_basics_logic.nmk x1 x_89))) → univs.Type3) (P (matita_basics_logic.nmk x1 (λ x_89 : cic.Term (cic.prop) x1 → cic.Term (cic.prop) (matita_basics_logic.False) × (λ _z270 : cic.Term (cic.prop) (matita_basics_logic.eq (cic.lift (cic.prop) univs.Type2) (matita_basics_logic.Not x1) Hterm (matita_basics_logic.nmk x1 x_89))))) (H1 x_89)) → univs.Type3."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDpi1__o__aop__o__op. Låt $x0$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x1$ vara ett element av $cic.Term$ av $univs.Type0$ och $x0$. Då för alla funktioner $x2$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $x0$ och $x1$ till element av $cic.Univ$ av $univs.Type0$, för alla element $x3$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.DPair$ applicerat på $matita_arithmetics_bigops.ACop$ applicerat på $x0$ och $x1$ och $x2$, för alla element $_x_887$ och $_x_888$ av $cic.Term$ av $univs.Type0$ och $x0$, håller $cic.Term$ för $univs.Type0$ och $x0$.\nassistant\n", "label": "postulate dpi1__o__aop__o__op : (x0 : cic.Univ univs.Type0) -> (x1 : cic.Term univs.Type0 x0) -> (x2 : (__ : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop x0 x1)) -> cic.Univ univs.Type0) -> (x3 : cic.Term univs.Type0 (matita_basics_types.DPair (matita_arithmetics_bigops.ACop x0 x1) x2)) -> (_x_887 : cic.Term univs.Type0 x0) -> (_x_888 : cic.Term univs.Type0 x0) -> cic.Term univs.Type0 x0", "predict": "postulate Dpi1__o__aop__o__op : \n  (x0 : cic.Univ (univs.Type0)) -> \n  (x1 : cic.Term (univs.Type0) x0) -> \n  (x2 : (__) -> (matita_arithmetics_bigops.ACop) x0 x1 -> cic.Univ (univs.Type0)) -> \n  (x3 : cic.Term (univs.Type0)) -> \n  (x : matita_basics_types.DPair (matita_arithmetics_bigops.ACop x0 x1) x2) -> \n  (x4 : (__) -> (__) -> (cic.Term (univs.Type0)) x0) -> \n  (x5 : x4 _x_887 _x_888) -> \n  (cic.Term (univs.Type0) x0)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nFact_pi_p2. For all elements $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_factorial.fact$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and $matita_arithmetics_bigops.bigop$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and the function that maps $p$ to $matita_arithmetics_primes.primeb$ applied to $p$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $p$ to $matita_arithmetics_bigops.bigop$ applied to $matita_arithmetics_log.log$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and the function that maps $i$ to $matita_basics_bool.true$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_exp.exp$ applied to $p$ and $matita_arithmetics_nat.times$ applied", "label": "postulate fact_pi_p2 : (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_factorial.fact (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (matita_arithmetics_bigops.bigop (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_primes.primeb p) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_bigops.bigop (matita_arithmetics_log.log p (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n)) (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_bool.true) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (\\ i : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_arithmetics_nat.times (matita_arithmetics_exp.exp p (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita", "predict": " to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_exp.exp$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_exp.exp$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_exp.exp$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $matita_arithmetics_nat.times$ applied to $matita_arithmetics_exp.exp$ applied to $p$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $n$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMatch_Sig. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_f$ une fonction des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $return_sort$ un élément de $cic.Sort$. Soit $return_type$ une fonction des éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $return_sort$. Alors pour toutes les fonctions $case_mk_Sig$ des éléments $pi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_pi2$ de $cic.Term$ de $cic.prop$ et de $_f$ appliqué à $pi1$ à des éléments de $cic.Term$ de $return_sort$ et de $return_type$ appliqué à $matita_basics_types.mk_Sig$ appliqué à $A$ et $_f$ et $pi1$ et $_pi2$, pour tous les éléments $z$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Sig$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $return_sort$ et $return_type$ appliqué à $z$.\nassistant\n", "label": "postulate match_Sig : (A : cic.Univ univs.Type0) -> (_f : (__ : cic.Term univs.Type0 A) -> cic.Univ cic.prop) -> (return_sort : cic.Sort) -> (return_type : (z : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Univ return_sort) -> (case_mk_Sig : (pi1 : cic.Term univs.Type0 A) -> (_pi2 : cic.Term cic.prop (_f pi1)) -> cic.Term return_sort (return_type (matita_basics_types.mk_Sig A _f pi1 _pi2))) -> (z : cic.Term univs.Type0 (matita_basics_types.Sig A _f)) -> cic.Term return_sort (return_type z)", "predict": "postulate Match_Sig : \n  {A : cic.Univ}\n  {__ : Term univs.Type0 -> A -> Univ}\n  {return_sort : Sig}\n  {return_type : Term univs.Type0 -> Sig -> Univ}\n  -> Sig\n  -> \n  (case_mk_Sig : Term univs.Type0 -> A -> Sig -> Univ)\n  -> \n  (pi1 : Term univs.Type0) -> \n  (pi2 : Term cic.prop) -> \n  (__ pi1) -> \n  (return_type pi1 (return_sort z) (return_type z)) -> \n  {z : Term univs.Type0} -> \n  Sig (matita_basics_types.mk_Sig A __ pi1 pi2) -> \n  {z : Sig (matita_basics_types.mk_Sig A __ pi1 pi2)} -> \n  Term univs.Type0 return_sort (return_type z)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nP_ord_to_exp1. For all elements $p$ and $n$ and $q$ and $r$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $p$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, for all elements $__2$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.p_ord$ applied to $n$ and $p$ and $matita_basics_types.mk_Prod$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $q$ and $r$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.And$ applied to $matita_basics_logic.Not$ applied to $matita_arithmetics_primes.divides$ applied to $p$ and $r$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $matita_arithmetics_nat.times$ applied to $matita_arithmetics_exp.exp$ applied to $p$ and $q$ and $r$.\nassistant\n", "label": "p_ord_to_exp1 : p : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> q : cic.Term univs.Type0 matita_arithmetics_nat.nat -> r : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> __2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord n p) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat q r)) -> cic.Term cic.prop (matita_basics_logic.And (matita_basics_logic.Not (matita_arithmetics_primes.divides p r)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.times (matita_arithmetics_exp.exp p q) r))) .", "predict": "Output: \nforall p n q r : cic.Term univs.Type0 matita_arithmetics_nat.nat, \nforall __ : cic.Term cic.prop matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p, \nforall __1 : cic.Term cic.prop matita_arithmetics_nat.lt matita_arithmetics_nat.O n, \nforall __2 : cic.Term cic.prop matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_types.Prod (matita_arithmetics_nat.nat) (matita_arithmetics_nat.nat) (matita_arithmetics_ord.p_ord n p matita_basics_types.mk_Prod (matita_arithmetics_nat.nat) (matita_arithmetics_nat.nat) q r)), \ncic.Term holds for cic.prop (matita_basics_logic.And (matita_basics_logic.Not (matita_arithmetics_primes.divides p r)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_nat.times (matita_arithmetics_exp.exp p q r))))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_div_div_div_div. Soient $n$ et $m$ et $q$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $__1$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_div_and_mod.div$ appliqué à $matita_arithmetics_div_and_mod.div$ appliqué à $q$ et $n$ et $m$ et $matita_arithmetics_div_and_mod.div$ appliqué à $matita_arithmetics_div_and_mod.div$ appliqué à $q$ et $m$ et $n$.\nassistant\n", "label": "eq_div_div_div_div : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> q : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.div (matita_arithmetics_div_and_mod.div q n) m) (matita_arithmetics_div_and_mod.div (matita_arithmetics_div_and_mod.div q m) n)) .", "predict": "Output: Axiom Eq_div_div_div_div : forall (n : Term univs.Type0) (m : Term univs.Type0) (q : Term univs.Type0), Prop (nat (div (div q n) m)) (eq (nat (div (div q m) n)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTri_relation. För alla element $__$ och $__1$ och $__2$ av $cic.Univ$ av $univs.Type0$, håller $cic.Univ$ för $univs.Type0$.\nassistant\n", "label": "axiom tri_relation (__ __1 __2 : cic.Univ univs.Type0) : cic.Univ univs.Type0", "predict": "Output: Axiom Tri_relation : forall (x : cic.Univ) (x1 : univs.Type0) (x2 : univs.Type0), x = x1 -> x = x2 -> x1 = x2 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nR1. Soit $A$ un élément de $cic.Univ$ de $univs.Type2$. Soit $_x$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $Q_$ une fonction des éléments $x_19$ de $cic.Term$ de $univs.Type2$ et de $A$ et des éléments $_x_20$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_19$ à des éléments de $cic.Univ$ de $univs.Type0$. Soit $_H_refl$ un élément de $cic.Term$ de $univs.Type0$ et de $Q_$ appliqué à $_x$ et $matita_basics_logic.refl$ appliqué à $A$ et $_x$. Soit $x_19$ un élément de $cic.Term$ de $univs.Type2$ et de $A$. Soit $x_20$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $A$ et $_x$ et $x_19$. Alors $cic.Term$ tient pour $univs.Type0$ et $Q_$ appliqué à $x_19$ et $x_20$.\nassistant\n", "label": "Axiom R1 : forall A : cic.Univ univs.Type2, forall _x : cic.Term univs.Type2 A, forall Q_ : ((x_19 : cic.Term univs.Type2 A) -> (_x_20 : cic.Term cic.prop (matita_basics_logic.eq A _x x_19)) -> cic.Univ univs.Type0), forall _H_refl : cic.Term univs.Type0 (Q_ _x (matita_basics_logic.refl A _x)), forall x_19 : cic.Term univs.Type2 A, forall x_20 : cic.Term cic.prop (matita_basics_logic.eq A _x x_19), cic.Term univs.Type0 (Q_ x_19 x_20) .", "predict": "Axiom R1 : \nforall A : univs.Type2, \n  (forall x : A, \n    (forall x_19 : A, \n      (forall x_20 : matita_basics_logic.eq (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (cic.Term univs.Type2) (c"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSum_rect_Type1. Let $_A$ and $_B$ be elements of $cic.Univ$ of $univs.Type0$. Let $Q_$ be a function from elements $_x_546$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $univs.Type1$. Let $_H_inl$ be a function from elements $x_547$ of $cic.Term$ of $univs.Type0$ and $_A$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_basics_types.inl$ applied to $_A$ and $_B$ and $x_547$. Let $_H_inr$ be a function from elements $x_548$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_basics_types.inr$ applied to $_A$ and $_B$ and $x_548$. Then for all elements $x_546$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Sum$ applied to $_A$ and $_B$, $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_546$.\nassistant\n", "label": "Axiom Sum_rect_Type1 : forall _A : cic.Univ univs.Type0, forall _B : cic.Univ univs.Type0, forall Q_ : ((_x_546 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B)) -> cic.Univ univs.Type1), forall _H_inl : ((x_547 : cic.Term univs.Type0 _A) -> cic.Term univs.Type1 (Q_ (matita_basics_types.inl _A _B x_547))), forall _H_inr : ((x_548 : cic.Term univs.Type0 _B) -> cic.Term univs.Type1 (Q_ (matita_basics_types.inr _A _B x_548))), forall x_546 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B), cic.Term univs.Type1 (Q_ x_546) .", "predict": "Output: \nDefinition Sum_rect_Type1 (A B : univ) (Q_ : forall x : term, (A,B) : Sum -> univ) (H_inl : forall x : term, A -> term, Q_ (inl A B) x) (H_inr : forall x : term, B -> term, Q_ (inr A B) x) : forall x : term, (A,B) -> term := fun x : term, (A,B) => match x with | inl a => H_inl a A | inr b => H_inr b B end."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nP_ord_O_to_not_divides. Let $n$ and $i$ and $r$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_types.Prod$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_ord.p_ord$ applied to $n$ and $matita_arithmetics_primes.nth_prime$ applied to $i$ and $matita_basics_types.mk_Prod$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.O$ and $r$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.Not$ applied to $matita_arithmetics_primes.divides$ applied to $matita_arithmetics_primes.nth_prime$ applied to $i$ and $n$.\nassistant\n", "label": "axiom p_ord_O_to_not_divides (n i r : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat)) (matita_arithmetics_ord.p_ord n (matita_arithmetics_primes.nth_prime i)) (matita_basics_types.mk_Prod matita_arithmetics_nat.nat matita_arithmetics_nat.nat matita_arithmetics_nat.O r))) : cic.Term cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides (matita_arithmetics_primes.nth_prime i) n))", "predict": "postulate P_ord_O_to_not_divides : forall (n i r : cic.Term univs.Type0 matita_arithmetics_nat.nat) (___ : cic.Term cic.prop matita_arithmetics_nat.lt matita_arithmetics_nat.O n) (___1 : cic.Term cic.prop matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod (matita_arithmetics_nat.nat) (matita_arithmetics_nat.nat) (matita_arithmetics_ord.p_ord n (matita_arithmetics_primes.nth_prime i (matita_basics_types.mk_Prod (matita_arithmetics_nat.nat) (matita_arithmetics_nat.nat) matita_arithmetics_nat.O r))))) (matita_arithmetics_primes.divides (matita_arithmetics_primes.nth_prime i n))) -> cic.Term holds_for cic.prop (matita_basics_logic.Not (matita_arithmetics_primes.divides (matita_arithmetics_primes.nth_prime i n)))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nSig_inv_ind. Låt $x1$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $x2$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $x1$ till element av $cic.Univ$ av $cic.prop$. Låt $Hterm$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $x1$ och $x2$. Då för alla funktioner $P$ från element $_z1170$ av $cic.Term$ av $univs.Type0$ och $matita_basics_types.Sig$ applicerat på $x1$ och $x2$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H1$ från element $pi1$ av $cic.Term$ av $univs.Type0$ och $x1$ och element $_pi2$ av $cic.Term$ av $cic.prop$ och $x2$ applicerat på $pi1$ och element $_z1171$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_types.Sig$ applicerat på $x1$ och $x2$ och $Hterm$ och $matita_basics_types.mk_Sig$ applicerat på $x1$ och $x2$ och $pi1$ och $_pi2$ till element av $cic.Term$ av $cic.prop$ och $P$ applicerat på $matita_basics_types.mk_Sig$ applicerat på $x1$ och $x2$ och $pi1$ och $_pi2$, håller $cic.Term$ för $cic.prop$ och $P$ applicerat på $Hterm$.\nassistant\n", "label": "Sig_inv_ind : x1 : cic.Univ univs.Type0 -> x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) -> Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) -> P : (_z1170 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) -> cic.Univ cic.prop) -> _H1 : (pi1 : cic.Term univs.Type0 x1 -> _pi2 : cic.Term cic.prop (x2 pi1) -> _z1171 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2)) Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) -> cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) -> cic.Term cic.prop (P Hterm) .", "predict": "Output: Axiom Sig_inv_ind : \n  forall (univs : Type0) (x1 : Univ univs) (x2 : Term univs -> x1 -> Univ) (Hterm : Term univs -> Sig x1 x2) (P : Term univs -> Sig x1 x2 -> Univ) (H1 : Term univs -> x1 -> Prop) (H2 : Term univs -> x1 -> Prop), \n  (forall (z1170 : Term univs) (matita_basics_types : Sig x1 x2) (eq : lift univs.Type0 univs.Type2 Sig x1 x2 Hterm mk_Sig pi1 pi2) (z1171 : Prop) (eq' : eq lift univs.Type0 univs.Type2 Sig x1 x2 Hterm mk_Sig pi1 pi2) (z1172 : Prop), \n  (forall (z1173 : Term univs) (matita_basics_types : Sig x1 x2) (eq : eq' eq' lift univs.Type0 univs.Type2 Sig x1 x2 Hterm mk_Sig pi1 pi2) (z1174 : Prop) (eq'' : eq' eq' lift univs.Type0 univs.Type2 Sig x1 x2 Hterm mk_Sig pi1 pi2) (z1175 : Prop), \n  (forall (pi1 : Term univs) (pi2 : Prop), \n  (P z1170 matita_basics_types eq z1171 eq' z1172 z1173 matita_basics_types eq'' z1174 eq''' z1175) \n  -> \n  (P Hterm x1 x2 H1 H2)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_O_ord_rem. For all elements $p$ and $n$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $p$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $n$, $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_ord.ord_rem$ applied to $n$ and $p$.\nassistant\n", "label": "axiom lt_O_ord_rem (p n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.S matita_arithmetics_nat.O) p)) (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O (matita_arithmetics_ord.ord_rem n p))", "predict": "Output: \nAxiom Lt_O_ord_rem : \n    forall (p : cic.Term univs.Type0) (n : matita_arithmetics_nat.nat), \n    forall (__$ : cic.Term cic.prop) (__$1 : matita_arithmetics_nat.lt matita_arithmetics_nat.S matita_arithmetics_nat.O p) (__$2 : matita_arithmetics_nat.lt matita_arithmetics_nat.O n), \n    cic.Term (cic.prop) (matita_arithmetics_nat.lt matita_arithmetics_nat.O (matita_arithmetics_ord.ord_rem n p))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_16002. Soient $m$ et $n$ et $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $posn$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$. Soit $posm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$. Soit $pnm$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. Soit $c$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $_clearme$ un élément de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $d$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué", "label": "postulate let_clause_16002 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (a : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) -> (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) -> (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) -> (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (\\ d : cic.Term univs.Type0 matita_arithmetics_nat.nat -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita", "predict": " à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $posn$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $posm$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$. \nOutput: \n```\nlet_clause_16002 : \n  {m : univs.Type0}\n  {n : univs.Type0}\n  {a : matita_arithmetics_nat.nat}\n  {b : matita_arithmetics_nat.nat}\n  {posn : matita_arithmetics_nat.lt matita_arithmetics_nat.O n}\n  {posm : matita_arithmetics_nat.lt matita_arithmetics_nat.O m}\n  {pnm : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_gcd.gcd n m (matita_arithmetics_nat.S matita_arithmetics_nat.O)))}\n  {c : univs.Type0}\n  {ex : matita_basics_logic.ex (matita_arithmetics_nat.nat (\\d : matita_arithmetics_nat.nat) -> matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c posn) (matita_arithmetics_nat.times d posm) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))))} .\n```"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_plus. Soient $n1$ et $n2$ et $m1$ et $m2$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Soit $__$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $n1$ et $n2$. Soit $__1$ un élément de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $m1$ et $m2$. Alors $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $n1$ et $m1$ et $matita_arithmetics_nat.plus$ appliqué à $n2$ et $m2$.\nassistant\n", "label": "axiom le_plus (n1 n2 m1 m2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.le n1 n2)) (__1 : cic.Term cic.prop (matita_arithmetics_nat.le m1 m2)) : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.plus n1 m1) (matita_arithmetics_nat.plus n2 m2))", "predict": "Axiom le_plus : forall (n1 : cic.Term univs.Type0) (n2 : cic.Term univs.Type0) (m1 : matita_arithmetics_nat.nat) (m2 : matita_arithmetics_nat.nat) (__) : cic.prop (matita_arithmetics_nat.le n1 n2) -> forall (__)1 : cic.prop (matita_arithmetics_nat.le m1 m2), cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.plus n1 m1) (matita_arithmetics_nat.plus n2 m2))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_16004. Soient $m$ et $n$ et $a$ et $b$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $posn$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $n$, pour tous les éléments $posm$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.lt$ appliqué à $matita_arithmetics_nat.O$ et $m$, pour tous les éléments $pnm$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $c$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $_clearme$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.ex$ appliqué à $matita_arithmetics_nat.nat$ et la fonction qui envoie $d$ à $matita_basics_logic.Or$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $c$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $d$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et", "label": "Axiom let_clause_16004 : forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall a : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall b : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n), forall posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m), forall pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)), forall c : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (fun d => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.min", "predict": " $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_gcd.gcd$ appliqué à $n$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, pour tous les éléments $a'$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $b'$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $ab'eq$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $matita_arithmetics_nat.plus$ appliqué à $a'$ et $b'$ et $matita_arithmetics_nat.minus$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.minus$ appliqué à $matita_arithmetics_nat.times$ appliqué à $a$ et $n$ et $matita_arithmetics_nat.times$ appliqué à $b$ et $m$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$, nous avons la propriété suivante : $posn$ est démontrée par $prop80$, $posm$ est démontrée par $prop80$, $pnm$ est démontrée par $prop80$, $c$ est démontré par $prop80$, $_clearme$ est démontré par $prop80$, $a'$ est démontré par $prop80$, $b'$ est démontré par $prop80$, et $ab'eq$ est démontré par $prop80$.\n\nOutput: \nLet_clause_16004 : forall (m : Term univs.Type0) (n : Term univs.Type0) (a : nat) (b : nat) (posn : Term prop) (posm : Term prop) (posn_leq_n : lt n O) (posm_leq_m : lt m O) (pnm : Term prop)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nBool_rect_Type1_body. För alla funktioner $Q_$ från element $_x_341$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Univ$ av $univs.Type1$, för alla element $_H_true$ av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_basics_bool.true$, för alla element $_H_false$ av $cic.Term$ av $univs.Type1$ och $Q_$ applicerat på $matita_basics_bool.false$, för alla element $x_341$ av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$, håller $cic.Term$ för $univs.Type1$ och $Q_$ applicerat på $x_341$.\nassistant\n", "label": "postulate bool_rect_Type1_body : (Q_ : (_x_341 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Univ univs.Type1) -> (_H_true : cic.Term univs.Type1 (Q_ matita_basics_bool.true)) -> (_H_false : cic.Term univs.Type1 (Q_ matita_basics_bool.false)) -> (x_341 : cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type1 (Q_ x_341)", "predict": "postulate prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nEq_rect_Type5. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type2$. Låt $_x$ vara ett element av $cic.Term$ av $univs.Type2$ och $A$. Låt $Q_$ vara en funktion från element $x_7$ av $cic.Term$ av $univs.Type2$ och $A$ och element $_x_8$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_7$ till element av $cic.Univ$ av $univs.Type5$. Då för alla element $_H_refl$ av $cic.Term$ av $univs.Type5$ och $Q_$ applicerat på $_x$ och $matita_basics_logic.refl$ applicerat på $A$ och $_x$, för alla element $x_7$ av $cic.Term$ av $univs.Type2$ och $A$, för alla element $x_8$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $A$ och $_x$ och $x_7$, håller $cic.Term$ för $univs.Type5$ och $Q_$ applicerat på $x_7$ och $x_8$.\nassistant\n", "label": "Axiom eq_rect_Type5 : forall A : cic.Univ univs.Type2, forall _x : cic.Term univs.Type2 A, forall Q_ : ((x_7 : cic.Term univs.Type2 A) -> (_x_8 : cic.Term cic.prop (matita_basics_logic.eq A _x x_7)) -> cic.Univ univs.Type5), forall _H_refl : cic.Term univs.Type5 (Q_ _x (matita_basics_logic.refl A _x)), forall x_7 : cic.Term univs.Type2 A, forall x_8 : cic.Term cic.prop (matita_basics_logic.eq A _x x_7), cic.Term univs.Type5 (Q_ x_7 x_8) .", "predict": "Axiom Eq_rect_Type5 : forall (univs : Type2), univs -> (univs -> Type2) -> (cic.Term -> (cic.prop -> eq (univs univs) (cic.Term univs) (cic.Term univs))) -> (cic.Term -> Type5) -> (cic.Term -> Type5) -> (forall x7 : cic.Term -> Type2, Q_ x7 (univs univs) (matita_basics_logic.refl (univs univs) (cic.Term univs) x7) (cic.Term univs) -> (forall x8 : cic.Term -> cic.prop -> eq (univs univs) (cic.Term univs) (cic.Term univs) -> (univs univs) -> Type5) -> (forall H_refl : cic.Term -> Type5, Q_ H_refl (univs univs) (matita_basics_logic.refl (univs univs) (cic.Term univs) x7) (cic.Term univs) -> (forall x7 : cic.Term -> Type2, Q_ x7 (univs univs) (matita_basics_logic.refl (univs univs) (cic.Term univs) x7) (cic.Term univs) -> (forall x8 : cic.Term -> cic.prop -> eq (univs univs) (cic.Term univs) (cic.Term univs) -> (univs univs) -> Type5) -> (forall x7 : cic.Term -> Type2, Q_ x7 (univs univs) (matita_basics_logic.refl (univs univs) (cic.Term univs) x7) (cic.Term univs) -> (forall x8 : cic.Term -> cic.prop -> eq (univs univs) (cic.Term univs) (cic.Term univs) -> (univs univs) -> Type5) -> (forall x7 : cic.Term -> Type2, Q_ x7 (univs univs) (matita_basics_logic.refl (univs univs) (cic"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nOr_div_mod. Låt $n$ och $q$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $q$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.Or$ applicerat på $matita_basics_logic.And$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_div_and_mod.mod$ applicerat på $n$ och $q$ och $q$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.S$ applicerat på $n$ och $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_div_and_mod.div$ applicerat på $n$ och $q$ och $q$ och $matita_basics_logic.And$ applicerat på $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_div_and_mod.mod$ applicerat på $n$ och $q$ och $q$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.S$ applicerat på $n$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_div_and_mod.div$ applicerat på $n$ och $q$ och $q$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_div_and", "label": "Axiom or_div_mod : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall q : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O q), cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.S (matita_arithmetics_div_and_mod.mod n q)) q) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.S n) (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_div_and_mod.div n q)) q))) (matita_basics_logic.And (matita_arithmetics_nat.lt (matita_arithmetics_nat.S (matita_arithmetics_div_and_mod.mod n q)) q) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.S n) (matita_arithmetics_nat.plus (matita_arithmetics_nat.times (matita_arithmetics_div_and_mod.div n q) q) (matita_arithmetics_nat.S (matita_arithmetics_div_and_mod.mod n q)))))) .", "predict": "_mod.mod$ applicerat på $n$ och $q$ och $q$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_div_and_mod.div$ applicerat på $n$ och $q$ och $q$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_div_and_mod.mod$ applicerat på $n$ och $q$ och $q$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_div_and_mod.div$ applicerat på $n$ och $q$ och $q$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_div_and_mod.mod$ applicerat på $n$ och $q$ och $q$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $matita_arithmetics_div_and_mod.div$ applicerat på $n$ och $q$ och $q$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_div_and_mod.mod$ applicerat på $n$ och $q$ och $q$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.plus$ applicerat på $matita_arithmetics_nat.times$"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nList_rect_Type4_body. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_721$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Univ$ de $univs.Type4$. Soit $_H_nil$ un élément de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_basics_lists_list.nil$ appliqué à $_A$. Soit $_H_cons$ une fonction des éléments $x_723$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $x_722$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ et des éléments $_x_725$ de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $x_722$ à des éléments de $cic.Term$ de $univs.Type4$ et de $Q_$ appliqué à $matita_basics_lists_list.cons$ appliqué à $_A$ et $x_723$ et $x_722$. Soit $x_721$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$. Alors $cic.Term$ tient pour $univs.Type4$ et $Q_$ appliqué à $x_721$.\nassistant\n", "label": "Axiom list_rect_Type4_body : forall _A : cic.Univ univs.Type0, forall Q_ : ((_x_721 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ univs.Type4), forall _H_nil : cic.Term univs.Type4 (Q_ (matita_basics_lists_list.nil _A)), forall _H_cons : ((x_723 : cic.Term univs.Type0 _A) -> (x_722 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_725 : cic.Term univs.Type4 (Q_ x_722)) -> cic.Term univs.Type4 (Q_ (matita_basics_lists_list.cons _A x_723 x_722))), forall x_721 : cic.Term univs.Type0 (matita_basics_lists_list.list _A), cic.Term univs.Type4 (Q_ x_721) .", "predict": "Axiom List_rect_Type4_body : forall (A : cic.Univ) (Q : forall (x : cic.Term) (xs : matita_basics_lists_list.list A), A -> cic.Term) (H_nil : Q (matita_basics_lists_list.nil A) A) (H_cons : forall (x : cic.Term) (a : A) (xs : matita_basics_lists_list.list A) (H : Q xs A), cic.Term -> cic.Term), (forall (x : cic.Term) (xs : matita_basics_lists_list.list A), Q x xs A) -> cic.Term."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_inv_rect_Type3. Pour tous les éléments $x1$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $x2$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $x1$ à des éléments de $cic.Univ$ de $univs.Type0$, pour tous les éléments $Hterm$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$, pour toutes les fonctions $P$ des éléments $_z1116$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ à des éléments de $cic.Univ$ de $univs.Type3$, pour toutes les fonctions $_H1$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $x1$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $x2$ appliqué à $dpi1$ et des éléments $_z1117$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_basics_types.DPair$ appliqué à $x1$ et $x2$ et $Hterm$ et $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$ à des éléments de $cic.Term$ de $univs.Type3$ et de $P$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $x1$ et $x2$ et $dpi1$ et $_dpi2$, $cic.Term$ tient pour $univs.Type3$ et $P$ appliqué à $Hterm$.\nassistant\n", "label": "axiom DPair_inv_rect_Type3 (x1 : cic.Univ univs.Type0) (x2 : (__ : cic.Term univs.Type0 x1) -> cic.Univ univs.Type0) (Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) (P : (_z1116 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2)) -> cic.Univ univs.Type3) (_H1 : (dpi1 : cic.Term univs.Type0 x1) -> (_dpi2 : cic.Term univs.Type0 (x2 dpi1)) -> (_z1117 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair x1 x2)) Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) -> cic.Term univs.Type3 (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) : cic.Term univs.Type3 (P Hterm)", "predict": "Axiom DPair_inv_rect_Type3 : forall x1 : cic.Univ, (x2 : forall __ : cic.Term, x1 -> cic.Univ) -> forall Hterm : cic.Term, DPair x1 x2 -> (forall _z1116 : cic.Term, DPair x1 x2 -> cic.Univ) -> forall P : forall _z1116 : cic.Term, DPair x1 x2 -> cic.Univ, forall _H1 : forall dpi1 : cic.Term, x1 -> forall dpi2 : cic.Term, x2 -> cic.prop, eq (cic.lift univs.Type0 univs.Type2 (DPair x1 x2 Hterm)) -> (cic.mk_DPair x1 x2 dpi1 dpi2) -> forall _z1117 : cic.Term, cic.prop, (eq (cic.lift univs.Type0 univs.Type2 (cic.mk_DPair x1 x2 dpi1 dpi2))) -> P (cic.mk_DPair x1 x2 dpi1 dpi2), cic.Term univs.Type3, P (DPair x1 x2 Hterm)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_rect_CProp5_body. Låt $A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $_nil$ vara ett element av $cic.Term$ av $univs.Type0$ och $A$. Då för alla funktioner $Q_$ från element $_x_959$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.Dop$ applicerat på $A$ och $_nil$ till element av $cic.Univ$ av $cic.prop$, för alla funktioner $_H_mk_Dop$ från element $sum$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.ACop$ applicerat på $A$ och $_nil$ och funktioner $prod$ från element $__$ av $cic.Term$ av $univs.Type0$ och $A$ och element $__1$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $univs.Type0$ och $A$ och funktioner $_null$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$ och $prod$ applicerat på $a$ och $_nil$ och $_nil$ och funktioner $_distr$ från element $a$ av $cic.Term$ av $univs.Type0$ och $A$ och element $b$ av $cic.Term$ av $univs.Type0$ och $A$ och element $c$ av $cic.Term$ av $univs.Type0$ och $A$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $A$", "label": "postulate Dop_rect_CProp5_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_959 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ cic.prop) -> (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) -> (x_959 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Term cic.prop (Q_ x_959)", "predict": " och $prod$ applicerat på $a$ och $b$ och $c$ och $prod$ applicerat på $a$ och $prod$ applicerat på $b$ och $c$ och $_null$ applicerat på $prod$ applicerat på $a$ och $b$ och $c$ till $Q_$ applicerat på $prod$ applicerat på $a$ och $b$ och $c$ och $_H_mk_Dop$ applicerat på $prod$ applicerat på $a$ och $b$ och $c$ och $prod$ applicerat på $a$ och $prod$ applicerat på $b$ och $c$ och $_null$ applicerat på $prod$ applicerat på $a$ och $b$ och $c$.\n\nOutput: \n```agda\npostulate \n  Dop_rect_CProp5_body : \n    (univs : Universe) \n    (A : univs.Type0) \n    (nil : Term univs.Type0 A) \n    (Q : (x : Term univs.Type0 Dop) -> A -> Univ univs.prop) \n    (H_mk_Dop : (sum : Term univs.Type0 ACop) -> A -> nil -> Univ univs.prop) \n    (prod : (x : Term univs.Type0 A) -> (y : Term univs.Type0 A) -> A -> Term univs.Type0 A) \n    (null : (a : Term univs.Type0 A) -> A -> Eq (cic.lift univs.Type0 univs.Type2 A) (prod a nil nil)) \n    (distr : (a : Term univs.Type0 A) -> (b : Term univs.Type0 A) -> (c : Term univs.Type0 A) -> \n              (Q a) (H_mk_Dop (sum a b c) (prod a b c) nil) (prod (prod a b c) (prod a (prod b c) nil) (null (prod a b c))) -> \n              (Q (prod a b c)) (H_mk_Dop (sum a b c) (prod a b c) nil) (prod (prod a b c) (prod a (prod b c) nil) (null (prod"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAnd_rect_CProp2_body. Låt $_A$ och $_B$ vara element av $cic.Univ$ av $cic.prop$. Låt $Q_$ vara en funktion från element $_x_158$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$ till element av $cic.Univ$ av $cic.prop$. Då för alla funktioner $_H_conj$ från element $x_160$ av $cic.Term$ av $cic.prop$ och $_A$ och element $x_159$ av $cic.Term$ av $cic.prop$ och $_B$ till element av $cic.Term$ av $cic.prop$ och $Q_$ applicerat på $matita_basics_logic.conj$ applicerat på $_A$ och $_B$ och $x_160$ och $x_159$, för alla element $x_158$ av $cic.Term$ av $cic.prop$ och $matita_basics_logic.And$ applicerat på $_A$ och $_B$, håller $cic.Term$ för $cic.prop$ och $Q_$ applicerat på $x_158$.\nassistant\n", "label": "axiom And_rect_CProp2_body (_A _B : cic.Univ cic.prop) (Q_ : (_x_158 : cic.Term cic.prop (matita_basics_logic.And _A _B)) -> cic.Univ cic.prop) (_H_conj : (x_160 : cic.Term cic.prop _A) -> (x_159 : cic.Term cic.prop _B) -> cic.Term cic.prop (Q_ (matita_basics_logic.conj _A _B x_160 x_159))) (x_158 : cic.Term cic.prop (matita_basics_logic.And _A _B)) : cic.Term cic.prop (Q_ x_158)", "predict": "Axiom prop80 : even 2"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_to_le_to_lt_times. Låt $n$ och $m$ och $p$ och $q$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $n$ och $m$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $p$ och $q$. Då för alla element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $q$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.times$ applicerat på $n$ och $p$ och $matita_arithmetics_nat.times$ applicerat på $m$ och $q$.\nassistant\n", "label": "axiom lt_to_le_to_lt_times (n m p q : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt n m)) (__1 : cic.Term cic.prop (matita_arithmetics_nat.le p q)) (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O q)) : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_nat.times n p) (matita_arithmetics_nat.times m q))", "predict": "Axiom prop70 : odd 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nList_rect_CProp1. Soit $_A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_771$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ à des éléments de $cic.Univ$ de $cic.prop$. Soit $_H_nil$ un élément de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_lists_list.nil$ appliqué à $_A$. Alors pour toutes les fonctions $_H_cons$ des éléments $x_773$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $x_772$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$ et des éléments $_x_775$ de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $x_772$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_basics_lists_list.cons$ appliqué à $_A$ et $x_773$ et $x_772$, pour tous les éléments $x_771$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_lists_list.list$ appliqué à $_A$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_771$.\nassistant\n", "label": "axiom list_rect_CProp1 (_A : cic.Univ univs.Type0) (Q_ : (_x_771 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> cic.Univ cic.prop) (_H_nil : cic.Term cic.prop (Q_ (matita_basics_lists_list.nil _A))) (_H_cons : (x_773 : cic.Term univs.Type0 _A) -> (x_772 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) -> (_x_775 : cic.Term cic.prop (Q_ x_772)) -> cic.Term cic.prop (Q_ (matita_basics_lists_list.cons _A x_773 x_772))) (x_771 : cic.Term univs.Type0 (matita_basics_lists_list.list _A)) : cic.Term cic.prop (Q_ x_771)", "predict": "postulate List_rect_CProp1 : forall (A : cic.Univ) (Q_ : forall (x_771 : cic.Term) (xs : matita_basics_lists_list.list A), A -> univs.Type0) (H_nil : forall (A : cic.Univ), Q_ A (matita_basics_lists_list.nil A) A -> cic.prop) (H_cons : forall (x_773 : cic.Term) (x_772 : matita_basics_lists_list.list A) (x_775 : cic.Term) (H : Q_ A x_772 x_773 -> cic.prop) (Q_ A (matita_basics_lists_list.cons A x_772 x_773) x_775), forall (x_771 : cic.Term) (xs : matita_basics_lists_list.list A), Q_ x_771 xs x_771 -> cic.prop."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nInjective_transpose. Let $i$ and $j$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_relations.injective$ applied to $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_permutation.transpose$ applied to $i$ and $j$.\nassistant\n", "label": "postulate injective_transpose : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term cic.prop (matita_basics_relations.injective matita_arithmetics_nat.nat matita_arithmetics_nat.nat (matita_arithmetics_permutation.transpose i j))", "predict": "postulate Injective_transpose : {cic : Type} {univs : Type} {nat : univs} -> {i j : cic} -> (i ≡ j) -> (matita_arithmetics_nat.nat ≡ matita_arithmetics_nat.nat) -> (matita_arithmetics_permutation.transpose i ≡ matita_arithmetics_permutation.transpose j) -> (cic.Term ≡ cic.Term) -> (cic.prop ≡ cic.prop) -> (matita_basics_relations.injective ≡ matita_basics_relations.injective)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExp_pi. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then for all functions $p$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_bigops.bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $matita_arithmetics_exp.exp$ applied to $f$ applied to $i$ and $m$ and $matita_arithmetics_exp.exp$ applied to $matita_arithmetics_bigops.bigop$ applied to $n$ and the function that maps $i$ to $p$ applied to $i$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$ and $matita_arithmetics_nat.times$ and the function that maps $i$ to $f$ applied to $i$ and $m$.\nassistant\n", "label": "Axiom exp_pi : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall p : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool), forall f : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_bigops.bigop n (fun i => p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (fun i => matita_arithmetics_exp.exp (f i) m)) (matita_arithmetics_exp.exp (matita_arithmetics_bigops.bigop n (fun i => p i) matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) matita_arithmetics_nat.times (fun i => f i)) m)) .", "predict": "Output: \nParameter exp_pi : \nforall (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (p : forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term univs.Type0 matita_basics_bool.bool) (f : forall i : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term univs.Type0 matita_arithmetics_nat.nat), cic.Term holds (cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_bigops.bigop n (fun i => p i (matita_arithmetics_nat.nat))) (matita_arithmetics_nat.nat (matita_arithmetics_nat.S matita_arithmetics_nat.O) (matita_arithmetics_nat.times (matita_arithmetics_exp.exp (f i m)) (matita_arithmetics_exp.exp (matita_arithmetics_bigops.bigop n (fun i => p i (matita_arithmetics_nat.nat))) (matita_arithmetics_nat.S matita_arithmetics_nat.O))))))))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd_rect_Type1_body. For all elements $_A$ and $_B$ of $cic.Univ$ of $univs.Type0$, for all functions $Q_$ from elements $_x_700$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$ to elements of $cic.Univ$ of $univs.Type1$, for all functions $_H_mk_Prod$ from elements $_fst$ of $cic.Term$ of $univs.Type0$ and $_A$ and elements $_snd$ of $cic.Term$ of $univs.Type0$ and $_B$ to elements of $cic.Term$ of $univs.Type1$ and $Q_$ applied to $matita_basics_types.mk_Prod$ applied to $_A$ and $_B$ and $_fst$ and $_snd$, for all elements $x_700$ of $cic.Term$ of $univs.Type0$ and $matita_basics_types.Prod$ applied to $_A$ and $_B$, $cic.Term$ holds for $univs.Type1$ and $Q_$ applied to $x_700$.\nassistant\n", "label": "Prod_rect_Type1_body : _A : cic.Univ univs.Type0 -> _B : cic.Univ univs.Type0 -> Q_ : (_x_700 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) -> cic.Univ univs.Type1) -> _H_mk_Prod : (_fst : cic.Term univs.Type0 _A -> _snd : cic.Term univs.Type0 _B -> cic.Term univs.Type1 (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) -> x_700 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) -> cic.Term univs.Type1 (Q_ x_700) .", "predict": "Output: \nAxiom Prod_rect_Type1_body : forall (A : cic.Univ) (B : cic.Univ), (forall (x_700 : cic.Term), Prod A B -> cic.Univ) -> (forall (fst : cic.Term), A -> forall (snd : cic.Term), B -> cic.Term) -> (forall (x_700 : cic.Term), Prod A B -> cic.Term) -> forall (x_700 : cic.Term), Prod A B -> cic.Term."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLet_clause_16002. Låt $m$ och $n$ och $a$ och $b$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $posn$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Låt $posm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $m$. Låt $pnm$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_gcd.gcd$ applicerat på $n$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$. Låt $c$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $_clearme$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.ex$ applicerat på $matita_arithmetics_nat.nat$ och funktionen som avbildar $d$ som $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2", "label": "axiom let_clause_16002 (m n a b : cic.Term univs.Type0 matita_arithmetics_nat.nat) (posn : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) (posm : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)) (pnm : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O))) (c : cic.Term univs.Type0 matita_arithmetics_nat.nat) (_clearme : cic.Term cic.prop (matita_basics_logic.ex matita_arithmetics_nat.nat (λ d => matita_basics_logic.Or (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times c n) (matita_arithmetics_nat.times d m)) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.minus (matita_arithmetics_nat.times d m) (matita_arithmetics_nat.times c n)) (matita_arithmetics_nat.S mat", "predict": "$ och $matita_arithmetics_nat.nat$ och $matita_basics_logic.Or$ applicerat på $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_basics_logic.And$ applicerat på $posn$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.minus$ applicerat på $matita_arithmetics_nat.times$ applicerat på $c$ och $n$ och $matita_arithmetics_nat.times$ applicerat på $d$ och $m$ och $matita_arithmetics_nat.S$ applicerat på $matita_arithmetics_nat.O$.\n\nOutput: \nLet_clause_16002 : univs.Type0 -> univs.Type0 -> univs.Type0 -> univs.Type0 -> univs.Type0 -> univs.Type0 -> univs.Type0 -> univs.Type0 -> univs.Type0 -> univs.Type0 -> univs.Type0 -> univs.Type0 -> univs.Type0 -> univs.Type0 -> univs.Type0 -> univs.Type0 -> univs.Type0 -> univs.Type0 -> univs.Type0 -> univs.Type0 -> univs.Type0 -> univs.Type0 -> univs.Type0 -> univs.Type0 -> univs.Type0 -> univs.Type0 ->"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_max_to_false. For all functions $f$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$, for all elements $n$ and $m$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $__$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $n$, for all elements $__1$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_minimization.max$ applied to $n$ and $f$ and $m$, $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $m$ and $matita_basics_bool.false$.\nassistant\n", "label": "lt_max_to_false : f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Term univs.Type0 matita_basics_bool.bool) -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt m n) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_minimization.max n f) m) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.false) .", "predict": "Lt_max_to_false : forall (f : univs.Type0 -> matita_arithmetics_nat.nat -> univs.Type0 -> matita_basics_bool.bool), forall (n : univs.Type0 -> matita_arithmetics_nat.nat), forall (m : univs.Type0 -> matita_arithmetics_nat.nat), forall (__) : cic.prop -> matita_arithmetics_nat.lt -> m n, forall (___1 : cic.prop -> matita_arithmetics_nat.lt -> matita_arithmetics_minimization.max n f m), (cic.Term : cic.prop) -> (matita_basics_logic.eq : matita_basics_bool.bool -> matita_basics_bool.bool) -> (f m : matita_basics_bool.false)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDiv_mod_spec_inv_rect_CProp2. For all elements $x1$ and $x2$ and $x3$ and $x4$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$, for all elements $Hterm$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $x1$ and $x2$ and $x3$ and $x4$, for all functions $P$ from elements $_z1482$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $x1$ and $x2$ and $x3$ and $x4$ to elements of $cic.Univ$ of $cic.prop$, for all functions $_H1$ from elements $x_851$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $x4$ and $x2$ and elements $x_850$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $x1$ and $matita_arithmetics_nat.plus$ applied to $matita_arithmetics_nat.times$ applied to $x3$ and $x2$ and $x4$ and elements $_z1483$ of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $cic.prop$ and $univs.Type2$ and $matita_arithmetics_div_and_mod.div_mod_spec$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $Hterm$ and $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_851$ and", "label": "postulate div_mod_spec_inv_rect_CProp2 : (x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x3 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x4 : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (Hterm : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) -> (P : (_z1482 : cic.Term cic.prop (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) -> cic.Univ cic.prop) -> (_H1 : (x_851 : cic.Term cic.prop (matita_arithmetics_nat.lt x4 x2)) -> (x_850 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x1 (matita_arithmetics_nat.plus (matita_arithmetics_nat.times x3 x2) x4))) -> (_z1483 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift cic.prop univs.Type2 (matita_arithmetics_div_and_mod.div_mod_spec x1 x2 x3 x4)) Hterm (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_851 x_850))) -> cic.Term cic.prop (P (matita_arithmetics_div_and_mod.div_mod_spec_intro x1 x2 x3 x4 x_851 x_850))) -> cic.Term cic.prop (P Hterm)", "predict": " $x_850$ and $P$ and $_z1483$, the following equality holds: $P$ applied to $Hterm$ and $x_851$ and $x_850$ is equal to $P$ applied to $matita_arithmetics_div_and_mod.div_mod_spec_intro$ applied to $x1$ and $x2$ and $x3$ and $x4$ and $x_851$ and $x_850$ and $P$ and $_z1483$.\n\nOutput: \npostulate Div_mod_spec_inv_rect_CProp2 : \n  {x1 x2 x3 x4 : Term univs Type0} \n  {Hterm : Term prop} \n  {div_mod_spec : div_mod_spec x1 x2 x3 x4} \n  {P : (div_mod_spec -> Univ)} \n  {H1 : (x_851 : prop) -> (x_850 : prop) -> \n    (lift Type0 Type2 nat) -> \n    (x_851 < x4) -> \n    (x_850 = (lift prop Type2 (div_mod_spec x1 x2 x3 x4) Hterm (div_mod_spec_intro x1 x2 x3 x4 x_851 x_850 P _z1483))) -> \n    P Hterm x_851 x_850 = P (div_mod_spec_intro x1 x2 x3 x4 x_851 x_850 P _z1483) x_851 x_850."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTransitive. Soit $A$ un élément de $cic.Univ$ de $univs.Type0$. Soit $_R$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_relations.relation$ appliqué à $A$. Alors $cic.Univ$ tient pour $cic.prop$.\nassistant\n", "label": "postulate transitive : (A : cic.Univ univs.Type0) -> (_R : cic.Term univs.Type0 (matita_basics_relations.relation A)) -> cic.Univ cic.prop", "predict": "postulate Transitive : ∀ (A : univs.Type0) (R : matita_basics_relations.relation A) → cic.Univ A → cic.prop (cic.Univ A)"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nTransitive_sub. Låt $h1$ och $k1$ och $h2$ och $k2$ vara funktioner från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Då för alla element $A$ av $cic.Univ$ av $univs.Type0$, för alla element $I$ och $J$ och $K$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $A$, för alla element $__$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_bigops.sub_hk$ applicerat på $h1$ och $k1$ och $A$ och $I$ och $J$, för alla element $__1$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_bigops.sub_hk$ applicerat på $h2$ och $k2$ och $A$ och $J$ och $K$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_bigops.sub_hk$ applicerat på funktionen som avbildar $x$ som $h2$ applicerat på $h1$ applicerat på $x$ och funktionen som avbildar $x$ som $k1$ applicerat på $k2$ applicerat på $x$ och $A$ och $I$ och $K$.\nassistant\n", "label": "Axiom transitive_sub : forall h1 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall k1 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall h2 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall k2 : ((__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat), forall A : cic.Univ univs.Type0, forall I : cic.Term univs.Type0 (matita_arithmetics_bigops.range A), forall J : cic.Term univs.Type0 (matita_arithmetics_bigops.range A), forall K : cic.Term univs.Type0 (matita_arithmetics_bigops.range A), forall __ : cic.Term cic.prop (matita_arithmetics_bigops.sub_hk h1 k1 A I J), forall __1 : cic.Term cic.prop (matita_arithmetics_bigops.sub_hk h2 k2 A J K), cic.Term cic.prop (matita_arithmetics_bigops.sub_hk (fun x => h2 (h1 x)) (fun x => k1 (k2 x)) A I K) .", "predict": "Require Import UniMath.Foundations.PartD.\n\nVariable c:Type.\nVariable A:cic.Univ c.\nVariable h1 k1 h2 k2:fun (x:cic.Term c) (I J K:matita_arithmetics_bigops.range A) -> (cic.Term c) (matita_arithmetics_bigops.sub_hk h1 k1 A I J) -> (cic.Term c) (matita_arithmetics_bigops.sub_hk h2 k2 A J K).\n\nAxiom transitive_sub:forall (x:cic.Term c) (I J K:matita_arithmetics_bigops.range A), \n  (cic.Term c) (matita_arithmetics_bigops.sub_hk (fun x => h2 (h1 x)) (fun x => k1 (k2 x)) A I K) = \n  (cic.Term c) (matita_arithmetics_bigops.sub_hk h2 (k1 (k2 (h1 x))) A I K)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nAop_rect_Type5_body. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_865$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Aop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $univs.Type5$. Let $_H_mk_Aop$ be a function from functions $op$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_nill$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $_nil$ and $a$ and $a$ and functions $_nilr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $op$ applied to $a$ and $_nil$ and $a$ and functions $_assoc$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop", "label": "postulate Aop_rect_Type5_body : (A : cic.Univ univs.Type0) -> (_nil : cic.Term univs.Type0 A) -> (Q_ : (_x_865 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Univ univs.Type5) -> (_H_mk_Aop : (op : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_nill : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op _nil a) a)) -> (_nilr : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a _nil) a)) -> (_assoc : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (op a (op b c)) (op (op a b) c))) -> cic.Term univs.Type5 (Q_ (matita_arithmetics_bigops.mk_Aop A _nil op _nill _nilr _assoc))) -> (x_865 : cic.Term univs.Type0 (matita_arithmetics_bigops.Aop A _nil)) -> cic.Term univs.Type5 (Q_ x_865)", "predict": "$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type3$ and $A$ and $op$ applied to $op$ applied to $a$ and $b$ and $c$ and functions $_nil$ and $_H_mk_Aop$ and $_assoc$ and $_nilr$ to elements of $cic.Univ$ of $univs.Type5$. Let $Q_$ be a function from elements $_x_865$ of $cic.Term$ of $univs.Type0$ and $A$ and $Q_$ applied to $_x_865$ and elements of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_H_mk_Aop$ from elements $x$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $Q_$ applied to $x$ and $x$. Let $Q_$ be a function from elements $_x_865$ of $cic.Term$ of $univs.Type0$ and $A$ and $Q_$ applied to $_x_865$ and elements of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_H_mk_Aop$ from elements $x$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $Q_$ applied to $x$ and $x$. Let $Q_$ be a function from elements $_x_865$ of $cic.Term$ of $univs.Type0$ and $A$ and $Q_$ applied to $_x_865$ and elements of"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nPermut_n_to_le. Låt $h$ vara en funktion från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $k$ och $n$ vara element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $k$ och $n$. Låt $__1$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_permutation.permut$ applicerat på $h$ och $n$. Låt $__2$ vara en funktion från element $m$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__2$ av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $m$ och $k$ till element av $cic.Term$ av $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_arithmetics_nat.nat$ och $h$ applicerat på $m$ och $m$. Låt $j$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__3$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $k$ och $j$. Låt $__4$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $j$ och $n$. Då håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $k$ och $h$ applicerat på $j$.\nassistant\n", "label": "axiom permut_n_to_le (h : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_arithmetics_nat.nat) (k n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.le k n)) (__1 : cic.Term cic.prop (matita_arithmetics_permutation.permut h n)) (__2 : (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.lt m k)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (h m) m)) (j : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__3 : cic.Term cic.prop (matita_arithmetics_nat.le k j)) (__4 : cic.Term cic.prop (matita_arithmetics_nat.le j n)) : cic.Term cic.prop (matita_arithmetics_nat.le k (h j))", "predict": "Output: \nDefinition Permut_n_to_le (h : ∀ (k n : matita_arithmetics_nat.nat), (cic.Term univs.Type0 matita_arithmetics_nat.nat) (matita_arithmetics_permut h n) (cic.Term univs.Type0 matita_arithmetics_nat.nat) (matita_arithmetics_nat.le k n) -> (cic.Term univs.Type0 matita_arithmetics_nat.nat) (matita_arithmetics_nat.le (h n) k) -> (cic.Term univs.Type0 matita_arithmetics_nat.nat) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (h m) m) h m) -> ∀ (j : matita_arithmetics_nat.nat), (cic.Term univs.Type0 matita_arithmetics_nat.nat) (matita_arithmetics_nat.le k j) -> (cic.Term univs.Type0 matita_arithmetics_nat.nat) (matita_arithmetics_nat.le j n) -> (cic.Term univs.Type0 matita_arithmetics_nat.nat) (matita_arithmetics_nat.le k (h j))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_prim_n2. Soit $n$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$, $cic.Term$ tient pour $cic.prop$ et $matita_arithmetics_nat.le$ appliqué à $matita_arithmetics_chebyshev_chebyshev_psi.prim$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.times$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$ et $n$ et $matita_arithmetics_nat.pred$ appliqué à $n$.\nassistant\n", "label": "axiom le_prim_n2 (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O))))))) n)) : cic.Term cic.prop (matita_arithmetics_nat.le (matita_arithmetics_chebyshev_chebyshev_psi.prim (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S matita_arithmetics_nat.O)) n))) (matita_arithmetics_nat.pred n))", "predict": "Axiom Le_prim_n2 : \nforall n : cic.Term univs.Type0 & matita_arithmetics_nat.nat, \nforall ___, \ncic.Term cic.prop & (matita_arithmetics_nat.le (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O)))))) n) (matita_arithmetics_chebyshev_chebyshev_psi.prim (matita_arithmetics_nat.S (matita_arithmetics_nat.times (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) (matita_arithmetics_nat.S (matita_arithmetics_nat.S (matita_arithmetics_nat.O)))))) n (matita_arithmetics_nat.pred n))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDPair_rect_Type3. Pour tous les éléments $A$ de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $_f$ des éléments $__$ de $cic.Term$ de $univs.Type0$ et de $A$ à des éléments de $cic.Univ$ de $univs.Type0$, pour toutes les fonctions $Q_$ des éléments $_x_644$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$ à des éléments de $cic.Univ$ de $univs.Type3$, pour toutes les fonctions $_H_mk_DPair$ des éléments $dpi1$ de $cic.Term$ de $univs.Type0$ et de $A$ et des éléments $_dpi2$ de $cic.Term$ de $univs.Type0$ et de $_f$ appliqué à $dpi1$ à des éléments de $cic.Term$ de $univs.Type3$ et de $Q_$ appliqué à $matita_basics_types.mk_DPair$ appliqué à $A$ et $_f$ et $dpi1$ et $_dpi2$, pour tous les éléments $x_644$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.DPair$ appliqué à $A$ et $_f$, $cic.Term$ tient pour $univs.Type3$ et $Q_$ appliqué à $x_644$.\nassistant\n", "label": "DPair_rect_Type3 : A : cic.Univ univs.Type0 -> _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) -> Q_ : (_x_644 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Univ univs.Type3) -> _H_mk_DPair : (dpi1 : cic.Term univs.Type0 A -> _dpi2 : cic.Term univs.Type0 (_f dpi1) -> cic.Term univs.Type3 (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) -> x_644 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) -> cic.Term univs.Type3 (Q_ x_644) .", "predict": "DPair_rect_Type3 : \n  forall (A : cic.Univ) (univs : Type0) (f : forall x : cic.Term univs.Type0, A -> cic.Univ univs.Type0), \n  (forall x644 : cic.Term univs.Type0, forall (DPair : matita_basics_types.DPair A f), \n  (forall dpi1 : cic.Term univs.Type0, forall dpi2 : cic.Term univs.Type0, f dpi1 dpi2 -> \n  (Q_ dpi1 dpi2 (matita_basics_types.mk_DPair A f dpi1 dpi2) -> cic.Term univs.Type3)) -> \n  Q_ x644 (matita_basics_types.mk_DPair A f x644) -> cic.Term univs.Type3) -> \n  forall x644 : cic.Term univs.Type0, forall DPair : matita_basics_types.DPair A f, \n  Q_ x644 (matita_basics_types.mk_DPair A f x644) -> cic.Term univs.Type3"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nNot_eq_S. Pour tous les éléments $n$ et $m$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, pour tous les éléments $__$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.Not$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n$ et $m$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.Not$ appliqué à $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $matita_arithmetics_nat.S$ appliqué à $n$ et $matita_arithmetics_nat.S$ appliqué à $m$.\nassistant\n", "label": "axiom not_eq_S (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n m))) : cic.Term cic.prop (matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m)))", "predict": "Axiom Not_eq_S : forall (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat) (___ : cic.Term cic.prop matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n m)), (cic.Term cic.prop matita_basics_logic.Not (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLe_to_or_lt_eq. Let $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $n$ and $m$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.Or$ applied to $matita_arithmetics_nat.lt$ applied to $n$ and $m$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $n$ and $m$.\nassistant\n", "label": "Axiom le_to_or_lt_eq : forall n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall __ : cic.Term cic.prop (matita_arithmetics_nat.le n m), cic.Term cic.prop (matita_basics_logic.Or (matita_arithmetics_nat.lt n m) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n m)) .", "predict": "Axiom le_to_or_lt_eq : forall (n m : cic.Term univs.Type0 matita_arithmetics_nat.nat), (matita_arithmetics_nat.le n m) -> cic.Term cic.prop (matita_basics_logic.Or (matita_basics_logic.lt n m) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat n m)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nRange_rect_Type2. Låt $_A$ vara ett element av $cic.Univ$ av $univs.Type0$. Låt $Q_$ vara en funktion från element $_x_923$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$ till element av $cic.Univ$ av $univs.Type2$. Då för alla funktioner $_H_mk_range$ från funktioner $_enum$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $_A$ och element $_upto$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och funktioner $_filter$ från element $__$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ till element av $cic.Term$ av $univs.Type0$ och $matita_basics_bool.bool$ till element av $cic.Term$ av $univs.Type2$ och $Q_$ applicerat på $matita_arithmetics_bigops.mk_range$ applicerat på $_A$ och $_enum$ och $_upto$ och $_filter$, för alla element $x_923$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_bigops.range$ applicerat på $_A$, håller $cic.Term$ för $univs.Type2$ och $Q_$ applicerat på $x_923$.\nassistant\n", "label": "postulate range_rect_Type2 : (_A : cic.Univ univs.Type0) -> (Q_ : (_x_923 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Univ univs.Type2) -> (_H_mk_range : (_enum : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 _A) -> (_upto : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (_filter : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> cic.Term univs.Type2 (Q_ (matita_arithmetics_bigops.mk_range _A _enum _upto _filter))) -> (x_923 : cic.Term univs.Type0 (matita_arithmetics_bigops.range _A)) -> cic.Term univs.Type2 (Q_ x_923)", "predict": "postulate Range_rect_Type2 : ∀ A : univs.Type0 → (x : cic.Term) → (Q : (λ _ : univs.Type0 → matita_arithmetics_bigops.range A) → univs.Type2) → (∀ H_mk_range : (λ _ : cic.Term → nat) → (λ _ : cic.Term) → (λ _ : cic.Term → bool) → univs.Type0) → (∀ upto : cic.Term) → (∀ filter : (λ _ _ : cic.Term → nat) → univs.Type0) → Q (matita_arithmetics_bigops.mk_range A (λ _ _ : cic.Term) (λ _ : cic.Term → bool)) → (∀ x : cic.Term) → (∀ (r : matita_arithmetics_bigops.range A)) → univs.Type2 → Q r"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMod_cr_pair. Let $m$ and $n$ and $a$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $a$ and $m$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $b$ and $n$. Let $__2$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_gcd.gcd$ applied to $n$ and $m$ and $matita_arithmetics_nat.S$ applied to $matita_arithmetics_nat.O$. Then $cic.Term$ holds for $cic.prop$ and $matita_basics_logic.And$ applied to $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_div_and_mod.mod$ applied to $matita_arithmetics_chinese_reminder.cr_pair$ applied to $m$ and $n$ and $a$ and $b$ and $m$ and $a$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_arithmetics_nat.nat$ and $matita_arithmetics_div_and_mod.mod$ applied to $matita_arithmetics_chinese_reminder.cr_pair$ applied to $m$ and $n$ and $a$ and $b$ and $n$ and $b$.\nassistant\n", "label": "mod_cr_pair : m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> b : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt a m) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt b n) -> __2 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_nat.S matita_arithmetics_nat.O)) -> cic.Term cic.prop (matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod (matita_arithmetics_chinese_reminder.cr_pair m n a b) m) a) (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_div_and_mod.mod (matita_arithmetics_chinese_reminder.cr_pair m n a b) n) b)) .", "predict": "mod_cr_pair : (m n : cic.Term (univs.Type0)) -> (a b : matita_arithmetics_nat.nat) -> (_ : cic.Term (cic.prop)) -> (a < m : matita_arithmetics_nat.lt a m) -> (_1 : cic.Term (cic.prop)) -> (b < n : matita_arithmetics_nat.lt b n) -> (_2 : cic.Term (cic.prop)) -> (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_gcd.gcd n m)) (matita_arithmetics_nat.S (matita_arithmetics_nat.O))) -> cic.Term (cic.prop) (matita_basics_logic.And (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_div_and_mod.mod (matita_arithmetics_chinese_reminder.cr_pair m n a b m a (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat (matita_arithmetics_div_and_mod.mod (matita_arithmetics_chinese_reminder.cr_pair m n a b n b)))))))))"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDivides_ind. Soient $_n$ et $_m$ des éléments de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$. Alors pour toutes les fonctions $Q_$ des éléments $_x_1192$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.divides$ appliqué à $_n$ et $_m$ à des éléments de $cic.Univ$ de $cic.prop$, pour toutes les fonctions $_H_quotient$ des éléments $q$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$ et des éléments $x_1193$ de $cic.Term$ de $cic.prop$ et de $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $_m$ et $matita_arithmetics_nat.times$ appliqué à $_n$ et $q$ à des éléments de $cic.Term$ de $cic.prop$ et de $Q_$ appliqué à $matita_arithmetics_primes.quotient$ appliqué à $_n$ et $_m$ et $q$ et $x_1193$, pour tous les éléments $x_1192$ de $cic.Term$ de $cic.prop$ et de $matita_arithmetics_primes.divides$ appliqué à $_n$ et $_m$, $cic.Term$ tient pour $cic.prop$ et $Q_$ appliqué à $x_1192$.\nassistant\n", "label": "Axiom divides_ind : forall _n : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall Q_ : ((_x_1192 : cic.Term cic.prop (matita_arithmetics_primes.divides _n _m)) -> cic.Univ cic.prop), forall _H_quotient : ((q : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (x_1193 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) _m (matita_arithmetics_nat.times _n q))) -> cic.Term cic.prop (Q_ (matita_arithmetics_primes.quotient _n _m q x_1193))), forall x_1192 : cic.Term cic.prop (matita_arithmetics_primes.divides _n _m), cic.Term cic.prop (Q_ x_1192) .", "predict": "Axiom divides_ind : forall (n m : cic.Term univs.Type0) (n : matita_arithmetics_nat.nat) (Q : (forall x1192 : cic.Term univs.Type0) (x1192 : matita_arithmetics_primes.divides n m) -> cic.prop) (H_quotient : (forall q : cic.Term univs.Type0) (q : matita_arithmetics_nat.nat) (x1193 : cic.Term univs.Type0) (x1193 : matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat m (matita_arithmetics_nat.times n q))) -> Q x1192) (x1193 : matita_arithmetics_primes.quotient n m q x1193), forall x1192 : (cic.Term univs.Type0) (cic.prop) (matita_arithmetics_primes.divides n m) -> Q x1192."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMod_aux_body. Let $_p$ and $_m$ and $_n$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Then $cic.Term$ holds for $univs.Type0$ and $matita_arithmetics_nat.nat$.\nassistant\n", "label": "Axiom mod_aux_body : forall _p : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _m : cic.Term univs.Type0 matita_arithmetics_nat.nat, forall _n : cic.Term univs.Type0 matita_arithmetics_nat.nat, cic.Term univs.Type0 matita_arithmetics_nat.nat .", "predict": "Axiom prop70 : odd 1 ."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nReverse_single. Låt $S$ vara ett element av $cic.Univ$ av $univs.Type0$. Då för alla element $a$ av $cic.Term$ av $univs.Type0$ och $S$, håller $cic.Term$ för $cic.prop$ och $matita_basics_logic.eq$ applicerat på $cic.lift$ applicerat på $univs.Type0$ och $univs.Type2$ och $matita_basics_lists_list.list$ applicerat på $S$ och $matita_basics_lists_list.reverse$ applicerat på $S$ och $matita_basics_lists_list.cons$ applicerat på $S$ och $a$ och $matita_basics_lists_list.nil$ applicerat på $S$ och $matita_basics_lists_list.cons$ applicerat på $S$ och $a$ och $matita_basics_lists_list.nil$ applicerat på $S$.\nassistant\n", "label": "Axiom reverse_single : forall S : cic.Univ univs.Type0, forall a : cic.Term univs.Type0 S, cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list S)) (matita_basics_lists_list.reverse S (matita_basics_lists_list.cons S a (matita_basics_lists_list.nil S))) (matita_basics_lists_list.cons S a (matita_basics_lists_list.nil S))) .", "predict": "Axiom Reverse_single : forall (S : cic.Univ univs.Type0), forall (a : cic.Term univs.Type0), cic.Term prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 (matita_basics_lists_list.list S)) (matita_basics_lists_list.reverse S) (matita_basics_lists_list.cons S a (matita_basics_lists_list.nil S)) (matita_basics_lists_list.cons S a (matita_basics_lists_list.nil S)))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Agda. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nMin_exists. Let $f$ be a function from elements $__$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ to elements of $cic.Term$ of $univs.Type0$ and $matita_basics_bool.bool$. Let $t$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $m$ and $t$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $m$ and $matita_basics_bool.true$. Let $k$ and $b$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__2$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $b$ and $m$. Let $__3$ be a function from elements $i$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$ and elements $__3$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.le$ applied to $b$ and $i$ and elements $__4$ of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $i$ and $m$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $matita_basics_bool.bool$ and $f$ applied to $i$ and $matita_basics", "label": "postulate min_exists : (f : (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> cic.Term univs.Type0 matita_basics_bool.bool) -> (t : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (m : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__ : cic.Term cic.prop (matita_arithmetics_nat.lt m t)) -> (__1 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f m) matita_basics_bool.true)) -> (k : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (b : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__2 : cic.Term cic.prop (matita_arithmetics_nat.le b m)) -> (__3 : (i : cic.Term univs.Type0 matita_arithmetics_nat.nat) -> (__3 : cic.Term cic.prop (matita_arithmetics_nat.le b i)) -> (__4 : cic.Term cic.prop (matita_arithmetics_nat.lt i m)) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) (f i) matita_basics_bool.false)) -> (__4 : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) t (matita_arithmetics_nat.plus k b))) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) (matita_arithmetics_minimization.min k b f) m)", "predict": "_bool.true$. Let $n$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $k1$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $b1$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $i1$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $p$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.eq$ applied to $m$ and $t$. Let $k2$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $b2$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $i2$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $q$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.eq$ applied to $b$ and $m$. Let $k3$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $b3$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $i3$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $r$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.eq$ applied to $t$ and $m$. Let $k4$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $b4$ be an element of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLt_exp_to_lt. Let $a$ and $n$ and $m$ be elements of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_nat.nat$. Let $__$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_nat.O$ and $a$. Let $__1$ be an element of $cic.Term$ of $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $matita_arithmetics_exp.exp$ applied to $a$ and $n$ and $matita_arithmetics_exp.exp$ applied to $a$ and $m$. Then $cic.Term$ holds for $cic.prop$ and $matita_arithmetics_nat.lt$ applied to $n$ and $m$.\nassistant\n", "label": "lt_exp_to_lt : a : cic.Term univs.Type0 matita_arithmetics_nat.nat -> n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> m : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O a) -> __1 : cic.Term cic.prop (matita_arithmetics_nat.lt (matita_arithmetics_exp.exp a n) (matita_arithmetics_exp.exp a m)) -> cic.Term cic.prop (matita_arithmetics_nat.lt n m) .", "predict": "Output: Axiom Lt_exp_to_lt : forall (a : Term univs.Type0) (n m : nat), lt O a -> lt (exp a n) (exp a m) -> Prop."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Coq. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nProd_rect_Type5. Soient $_A$ et $_B$ des éléments de $cic.Univ$ de $univs.Type0$. Soit $Q_$ une fonction des éléments $_x_694$ de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$ à des éléments de $cic.Univ$ de $univs.Type5$. Soit $_H_mk_Prod$ une fonction des éléments $_fst$ de $cic.Term$ de $univs.Type0$ et de $_A$ et des éléments $_snd$ de $cic.Term$ de $univs.Type0$ et de $_B$ à des éléments de $cic.Term$ de $univs.Type5$ et de $Q_$ appliqué à $matita_basics_types.mk_Prod$ appliqué à $_A$ et $_B$ et $_fst$ et $_snd$. Soit $x_694$ un élément de $cic.Term$ de $univs.Type0$ et de $matita_basics_types.Prod$ appliqué à $_A$ et $_B$. Alors $cic.Term$ tient pour $univs.Type5$ et $Q_$ appliqué à $x_694$.\nassistant\n", "label": "Axiom Prod_rect_Type5 : forall _A : cic.Univ univs.Type0, forall _B : cic.Univ univs.Type0, forall Q_ : ((_x_694 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B)) -> cic.Univ univs.Type5), forall _H_mk_Prod : ((_fst : cic.Term univs.Type0 _A) -> (_snd : cic.Term univs.Type0 _B) -> cic.Term univs.Type5 (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))), forall x_694 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B), cic.Term univs.Type5 (Q_ x_694) .", "predict": "Axiom Prod_rect_Type5 : forall (A : Univ) (B : Univ) (Q_ : forall (x_694 : Term) (pair : Prod A B), Univ) (H_mk_Prod : forall (fst : Term) (fstA : A) (snd : Term) (sndB : B), Term (Q_ (fst) (pair (fstA, sndB))) (pair (H_mk_Prod (fst) (fstA) (snd) (sndB)) (pair (fstA, sndB))), x_694 : Prod A B), Term (Q_ x_694 x_694)."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following English statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nDop_rect_CProp0. Let $A$ be an element of $cic.Univ$ of $univs.Type0$. Let $_nil$ be an element of $cic.Term$ of $univs.Type0$ and $A$. Let $Q_$ be a function from elements $_x_967$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.Dop$ applied to $A$ and $_nil$ to elements of $cic.Univ$ of $cic.prop$. Let $_H_mk_Dop$ be a function from elements $sum$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and functions $prod$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and", "label": "axiom Dop_rect_CProp0 (A : cic.Univ univs.Type0) (_nil : cic.Term univs.Type0 A) (Q_ : (_x_967 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) -> cic.Univ cic.prop) (_H_mk_Dop : (sum : cic.Term univs.Type0 (matita_arithmetics_bigops.ACop A _nil)) -> (prod : (__ : cic.Term univs.Type0 A) -> (__1 : cic.Term univs.Type0 A) -> cic.Term univs.Type0 A) -> (_null : (a : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a _nil) _nil)) -> (_distr : (a : cic.Term univs.Type0 A) -> (b : cic.Term univs.Type0 A) -> (c : cic.Term univs.Type0 A) -> cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) (prod a (matita_arithmetics_bigops.aop__o__op A _nil sum b c)) (matita_arithmetics_bigops.aop__o__op A _nil sum (prod a b) (prod a c)))) -> cic.Term cic.prop (Q_ (matita_arithmetics_bigops.mk_Dop A _nil sum prod _null _distr))) (x_967 : cic.Term univs.Type0 (matita_arithmetics_bigops.Dop A _nil)) : cic.Term cic.prop (Q_ x_967)", "predict": " $b$ and $c$ to elements of $cic.Term$ of $univs.Type0$ and $A$ to prove that $A$ is an element of $cic.Univ$ of $cic.prop$. Let $_H_rec_Dop$ be a function from elements $sum$ of $cic.Term$ of $univs.Type0$ and $matita_arithmetics_bigops.ACop$ applied to $A$ and $_nil$ and functions $prod$ from elements $__$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $__1$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $univs.Type0$ and $A$ and functions $_null$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $_nil$ and $_nil$ and functions $_distr$ from elements $a$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $b$ of $cic.Term$ of $univs.Type0$ and $A$ and elements $c$ of $cic.Term$ of $univs.Type0$ and $A$ to elements of $cic.Term$ of $cic.prop$ and $matita_basics_logic.eq$ applied to $cic.lift$ applied to $univs.Type0$ and $univs.Type2$ and $A$ and $prod$ applied to $a$ and $matita_arithmetics_bigops.aop__o__op$ applied to $A$ and $b$ and $c$ to elements of $cic.Term$ of $univs.Type0$ and $A$ to prove that $A$ is an element of $cic.Univ$ of $cic.prop$. Let $X$ be an element of $cic.Univ$ of $cic.prop$. Let $_H_mk_X$ be a function from elements $sum$ of $cic.Term$ of"}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Dedukti. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nLength_unique_le. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $l$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_basics_lists_list.list$ applicerat på $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.unique$ applicerat på $matita_arithmetics_nat.nat$ och $l$. Då för alla funktioner $__1$ från element $x$ av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$ och element $__1$ av $cic.Term$ av $cic.prop$ och $matita_basics_lists_list.mem$ applicerat på $matita_arithmetics_nat.nat$ och $x$ och $l$ till element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $x$ och $n$, håller $cic.Term$ för $cic.prop$ och $matita_arithmetics_nat.le$ applicerat på $matita_basics_lists_list.length$ applicerat på $matita_arithmetics_nat.nat$ och $l$ och $n$.\nassistant\n", "label": "length_unique_le : n : cic.Term univs.Type0 matita_arithmetics_nat.nat -> l : cic.Term univs.Type0 (matita_basics_lists_list.list matita_arithmetics_nat.nat) -> __ : cic.Term cic.prop (matita_basics_lists_list.unique matita_arithmetics_nat.nat l) -> __1 : (x : cic.Term univs.Type0 matita_arithmetics_nat.nat -> __1 : cic.Term cic.prop (matita_basics_lists_list.mem matita_arithmetics_nat.nat x l) -> cic.Term cic.prop (matita_arithmetics_nat.lt x n)) -> cic.Term cic.prop (matita_arithmetics_nat.le (matita_basics_lists_list.length matita_arithmetics_nat.nat l) n) .", "predict": "Output: \nAxiom Length_unique_le : forall (n : Term univs.Type0 matita_arithmetics_nat.nat) (l : Term univs.Type0 (list (matita_arithmetics_nat.nat))) (__: unique (matita_arithmetics_nat.nat) l) (f : (forall (x : Term univs.Type0 matita_arithmetics_nat.nat) (__: mem (matita_arithmetics_nat.nat) x l) -> Prop (matita_arithmetics_nat.le x n))) -> (forall (x : Term univs.Type0 matita_arithmetics_nat.nat), (forall (__: mem (matita_arithmetics_nat.nat) x l) -> Prop (matita_arithmetics_nat.lt x n))) -> (Prop (matita_arithmetics_nat.le (length l) n))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following Swedish statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nInjective_times_l. Låt $n$ vara ett element av $cic.Term$ av $univs.Type0$ och $matita_arithmetics_nat.nat$. Låt $__$ vara ett element av $cic.Term$ av $cic.prop$ och $matita_arithmetics_nat.lt$ applicerat på $matita_arithmetics_nat.O$ och $n$. Då håller $cic.Term$ för $cic.prop$ och $matita_basics_relations.injective$ applicerat på $matita_arithmetics_nat.nat$ och $matita_arithmetics_nat.nat$ och funktionen som avbildar $m$ som $matita_arithmetics_nat.times$ applicerat på $m$ och $n$.\nassistant\n", "label": "axiom injective_times_l (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) (__ : cic.Term cic.prop (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)) : cic.Term cic.prop (matita_basics_relations.injective matita_arithmetics_nat.nat matita_arithmetics_nat.nat (λ m => matita_arithmetics_nat.times m n))", "predict": "Axiom Injective_times_l : forall (n : cic.Term univs.Type0) (matita_arithmetics_nat.nat), forall (___ : cic.Term cic.prop matita_arithmetics_nat.lt matita_arithmetics_nat.O n), cic.Term cic.prop (matita_basics_relations.injective matita_arithmetics_nat.nat matita_arithmetics_nat.nat (fun m => matita_arithmetics_nat.times m n))."}
{"prompt": "system\nYou are a helpful assistant.\nuser\nTranslate the following French statement into Lean. Please imitate the input and output examples and output in the specified format. Give me the output text only (without any explains, inputs or 'Output:').\nExample1: \nInput: Translate the following French statement into Coq. Prop70. Nous pouvons démontrer que $1$ est impair. \nOutput: Axiom prop70 : odd 1 . \nExample2: \nInput: Translate the following English statement into Agda. Prop80. We can prove that $2$ is even. \nOutput: postulate prop80 : even 2  \nExp_n_1. Pour tous les éléments $n$ de $cic.Term$ de $univs.Type0$ et de $matita_arithmetics_nat.nat$, $cic.Term$ tient pour $cic.prop$ et $matita_basics_logic.eq$ appliqué à $cic.lift$ appliqué à $univs.Type0$ et $univs.Type2$ et $matita_arithmetics_nat.nat$ et $n$ et $matita_arithmetics_exp.exp$ appliqué à $n$ et $matita_arithmetics_nat.S$ appliqué à $matita_arithmetics_nat.O$.\nassistant\n", "label": "axiom exp_n_1 (n : cic.Term univs.Type0 matita_arithmetics_nat.nat) : cic.Term cic.prop (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n (matita_arithmetics_exp.exp n (matita_arithmetics_nat.S matita_arithmetics_nat.O)))", "predict": "Axiom Exp_n_1 : \nforall (n : matita_arithmetics_nat.nat), \n(matita_basics_logic.eq (cic.Term (univs.Type0)) (cic.Term (univs.Type2)) (matita_arithmetics_nat.nat) (n) (matita_arithmetics_exp.exp n (matita_arithmetics_nat.S (matita_arithmetics_nat.O))))."}